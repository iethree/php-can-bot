export default [
    {
        "href": "function.abs.php",
        "name": "abs",
        "description": "Absolute value"
    },
    {
        "href": "function.acos.php",
        "name": "acos",
        "description": "Arc cosine"
    },
    {
        "href": "function.acosh.php",
        "name": "acosh",
        "description": "Inverse hyperbolic cosine"
    },
    {
        "href": "function.addcslashes.php",
        "name": "addcslashes",
        "description": "Quote string with slashes in a C style"
    },
    {
        "href": "function.addslashes.php",
        "name": "addslashes",
        "description": "Quote string with slashes"
    },
    {
        "href": "function.apache-child-terminate.php",
        "name": "apache_child_terminate",
        "description": "Terminate apache process after this request"
    },
    {
        "href": "function.apache-getenv.php",
        "name": "apache_getenv",
        "description": "Get an Apache subprocess_env variable"
    },
    {
        "href": "function.apache-get-modules.php",
        "name": "apache_get_modules",
        "description": "Get a list of loaded Apache modules"
    },
    {
        "href": "function.apache-get-version.php",
        "name": "apache_get_version",
        "description": "Fetch Apache version"
    },
    {
        "href": "function.apache-lookup-uri.php",
        "name": "apache_lookup_uri",
        "description": "Perform a partial request for the specified URI and return all info about it"
    },
    {
        "href": "function.apache-note.php",
        "name": "apache_note",
        "description": "Get and set apache request notes"
    },
    {
        "href": "function.apache-request-headers.php",
        "name": "apache_request_headers",
        "description": "Fetch all HTTP request headers"
    },
    {
        "href": "function.apache-response-headers.php",
        "name": "apache_response_headers",
        "description": "Fetch all HTTP response headers"
    },
    {
        "href": "function.apache-setenv.php",
        "name": "apache_setenv",
        "description": "Set an Apache subprocess_env variable"
    },
    {
        "href": "apcuiterator.current.php",
        "name": "APCUIterator::current",
        "description": "Get current item"
    },
    {
        "href": "apcuiterator.gettotalcount.php",
        "name": "APCUIterator::getTotalCount",
        "description": "Get total count"
    },
    {
        "href": "apcuiterator.gettotalhits.php",
        "name": "APCUIterator::getTotalHits",
        "description": "Get total cache hits"
    },
    {
        "href": "apcuiterator.gettotalsize.php",
        "name": "APCUIterator::getTotalSize",
        "description": "Get total cache size"
    },
    {
        "href": "apcuiterator.key.php",
        "name": "APCUIterator::key",
        "description": "Get iterator key"
    },
    {
        "href": "apcuiterator.next.php",
        "name": "APCUIterator::next",
        "description": "Move pointer to next item"
    },
    {
        "href": "apcuiterator.rewind.php",
        "name": "APCUIterator::rewind",
        "description": "Rewinds iterator"
    },
    {
        "href": "apcuiterator.valid.php",
        "name": "APCUIterator::valid",
        "description": "Checks if current position is valid"
    },
    {
        "href": "apcuiterator.construct.php",
        "name": "APCUIterator::__construct",
        "description": "Constructs an APCUIterator iterator object"
    },
    {
        "href": "function.apcu-add.php",
        "name": "apcu_add",
        "description": "Cache a new variable in the data store"
    },
    {
        "href": "function.apcu-cache-info.php",
        "name": "apcu_cache_info",
        "description": "Retrieves cached information from APCu's data store"
    },
    {
        "href": "function.apcu-cas.php",
        "name": "apcu_cas",
        "description": "Updates an old value with a new value"
    },
    {
        "href": "function.apcu-clear-cache.php",
        "name": "apcu_clear_cache",
        "description": "Clears the APCu cache"
    },
    {
        "href": "function.apcu-dec.php",
        "name": "apcu_dec",
        "description": "Decrease a stored number"
    },
    {
        "href": "function.apcu-delete.php",
        "name": "apcu_delete",
        "description": "Removes a stored variable from the cache"
    },
    {
        "href": "function.apcu-enabled.php",
        "name": "apcu_enabled",
        "description": "Whether APCu is usable in the current environment"
    },
    {
        "href": "function.apcu-entry.php",
        "name": "apcu_entry",
        "description": "Atomically fetch or generate a cache entry"
    },
    {
        "href": "function.apcu-exists.php",
        "name": "apcu_exists",
        "description": "Checks if entry exists"
    },
    {
        "href": "function.apcu-fetch.php",
        "name": "apcu_fetch",
        "description": "Fetch a stored variable from the cache"
    },
    {
        "href": "function.apcu-inc.php",
        "name": "apcu_inc",
        "description": "Increase a stored number"
    },
    {
        "href": "function.apcu-key-info.php",
        "name": "apcu_key_info",
        "description": "Get detailed information about the cache key"
    },
    {
        "href": "function.apcu-sma-info.php",
        "name": "apcu_sma_info",
        "description": "Retrieves APCu Shared Memory Allocation information"
    },
    {
        "href": "function.apcu-store.php",
        "name": "apcu_store",
        "description": "Cache a variable in the data store"
    },
    {
        "href": "appenditerator.append.php",
        "name": "AppendIterator::append",
        "description": "Appends an iterator"
    },
    {
        "href": "appenditerator.current.php",
        "name": "AppendIterator::current",
        "description": "Gets the current value"
    },
    {
        "href": "appenditerator.getarrayiterator.php",
        "name": "AppendIterator::getArrayIterator",
        "description": "Gets the ArrayIterator"
    },
    {
        "href": "appenditerator.getinneriterator.php",
        "name": "AppendIterator::getInnerIterator",
        "description": "Gets the inner iterator"
    },
    {
        "href": "appenditerator.getiteratorindex.php",
        "name": "AppendIterator::getIteratorIndex",
        "description": "Gets an index of iterators"
    },
    {
        "href": "appenditerator.key.php",
        "name": "AppendIterator::key",
        "description": "Gets the current key"
    },
    {
        "href": "appenditerator.next.php",
        "name": "AppendIterator::next",
        "description": "Moves to the next element"
    },
    {
        "href": "appenditerator.rewind.php",
        "name": "AppendIterator::rewind",
        "description": "Rewinds the Iterator"
    },
    {
        "href": "appenditerator.valid.php",
        "name": "AppendIterator::valid",
        "description": "Checks validity of the current element"
    },
    {
        "href": "appenditerator.construct.php",
        "name": "AppendIterator::__construct",
        "description": "Constructs an AppendIterator"
    },
    {
        "href": "function.array.php",
        "name": "array",
        "description": "Create an array"
    },
    {
        "href": "arrayaccess.offsetexists.php",
        "name": "ArrayAccess::offsetExists",
        "description": "Whether an offset exists"
    },
    {
        "href": "arrayaccess.offsetget.php",
        "name": "ArrayAccess::offsetGet",
        "description": "Offset to retrieve"
    },
    {
        "href": "arrayaccess.offsetset.php",
        "name": "ArrayAccess::offsetSet",
        "description": "Assign a value to the specified offset"
    },
    {
        "href": "arrayaccess.offsetunset.php",
        "name": "ArrayAccess::offsetUnset",
        "description": "Unset an offset"
    },
    {
        "href": "arrayiterator.append.php",
        "name": "ArrayIterator::append",
        "description": "Append an element"
    },
    {
        "href": "arrayiterator.asort.php",
        "name": "ArrayIterator::asort",
        "description": "Sort entries by values"
    },
    {
        "href": "arrayiterator.count.php",
        "name": "ArrayIterator::count",
        "description": "Count elements"
    },
    {
        "href": "arrayiterator.current.php",
        "name": "ArrayIterator::current",
        "description": "Return current array entry"
    },
    {
        "href": "arrayiterator.getarraycopy.php",
        "name": "ArrayIterator::getArrayCopy",
        "description": "Get array copy"
    },
    {
        "href": "arrayiterator.getflags.php",
        "name": "ArrayIterator::getFlags",
        "description": "Get behavior flags"
    },
    {
        "href": "arrayiterator.key.php",
        "name": "ArrayIterator::key",
        "description": "Return current array key"
    },
    {
        "href": "arrayiterator.ksort.php",
        "name": "ArrayIterator::ksort",
        "description": "Sort entries by keys"
    },
    {
        "href": "arrayiterator.natcasesort.php",
        "name": "ArrayIterator::natcasesort",
        "description": "Sort entries naturally, case insensitive"
    },
    {
        "href": "arrayiterator.natsort.php",
        "name": "ArrayIterator::natsort",
        "description": "Sort entries naturally"
    },
    {
        "href": "arrayiterator.next.php",
        "name": "ArrayIterator::next",
        "description": "Move to next entry"
    },
    {
        "href": "arrayiterator.offsetexists.php",
        "name": "ArrayIterator::offsetExists",
        "description": "Check if offset exists"
    },
    {
        "href": "arrayiterator.offsetget.php",
        "name": "ArrayIterator::offsetGet",
        "description": "Get value for an offset"
    },
    {
        "href": "arrayiterator.offsetset.php",
        "name": "ArrayIterator::offsetSet",
        "description": "Set value for an offset"
    },
    {
        "href": "arrayiterator.offsetunset.php",
        "name": "ArrayIterator::offsetUnset",
        "description": "Unset value for an offset"
    },
    {
        "href": "arrayiterator.rewind.php",
        "name": "ArrayIterator::rewind",
        "description": "Rewind array back to the start"
    },
    {
        "href": "arrayiterator.seek.php",
        "name": "ArrayIterator::seek",
        "description": "Seek to position"
    },
    {
        "href": "arrayiterator.serialize.php",
        "name": "ArrayIterator::serialize",
        "description": "Serialize"
    },
    {
        "href": "arrayiterator.setflags.php",
        "name": "ArrayIterator::setFlags",
        "description": "Set behaviour flags"
    },
    {
        "href": "arrayiterator.uasort.php",
        "name": "ArrayIterator::uasort",
        "description": "Sort with a user-defined comparison function and maintain index association"
    },
    {
        "href": "arrayiterator.uksort.php",
        "name": "ArrayIterator::uksort",
        "description": "Sort by keys using a user-defined comparison function"
    },
    {
        "href": "arrayiterator.unserialize.php",
        "name": "ArrayIterator::unserialize",
        "description": "Unserialize"
    },
    {
        "href": "arrayiterator.valid.php",
        "name": "ArrayIterator::valid",
        "description": "Check whether array contains more entries"
    },
    {
        "href": "arrayiterator.construct.php",
        "name": "ArrayIterator::__construct",
        "description": "Construct an ArrayIterator"
    },
    {
        "href": "arrayobject.append.php",
        "name": "ArrayObject::append",
        "description": "Appends the value"
    },
    {
        "href": "arrayobject.asort.php",
        "name": "ArrayObject::asort",
        "description": "Sort the entries by value"
    },
    {
        "href": "arrayobject.count.php",
        "name": "ArrayObject::count",
        "description": "Get the number of public properties in the ArrayObject"
    },
    {
        "href": "arrayobject.exchangearray.php",
        "name": "ArrayObject::exchangeArray",
        "description": "Exchange the array for another one"
    },
    {
        "href": "arrayobject.getarraycopy.php",
        "name": "ArrayObject::getArrayCopy",
        "description": "Creates a copy of the ArrayObject"
    },
    {
        "href": "arrayobject.getflags.php",
        "name": "ArrayObject::getFlags",
        "description": "Gets the behavior flags"
    },
    {
        "href": "arrayobject.getiterator.php",
        "name": "ArrayObject::getIterator",
        "description": "Create a new iterator from an ArrayObject instance"
    },
    {
        "href": "arrayobject.getiteratorclass.php",
        "name": "ArrayObject::getIteratorClass",
        "description": "Gets the iterator classname for the ArrayObject"
    },
    {
        "href": "arrayobject.ksort.php",
        "name": "ArrayObject::ksort",
        "description": "Sort the entries by key"
    },
    {
        "href": "arrayobject.natcasesort.php",
        "name": "ArrayObject::natcasesort",
        "description": "Sort an array using a case insensitive \"natural order\" algorithm"
    },
    {
        "href": "arrayobject.natsort.php",
        "name": "ArrayObject::natsort",
        "description": "Sort entries using a \"natural order\" algorithm"
    },
    {
        "href": "arrayobject.offsetexists.php",
        "name": "ArrayObject::offsetExists",
        "description": "Returns whether the requested index exists"
    },
    {
        "href": "arrayobject.offsetget.php",
        "name": "ArrayObject::offsetGet",
        "description": "Returns the value at the specified index"
    },
    {
        "href": "arrayobject.offsetset.php",
        "name": "ArrayObject::offsetSet",
        "description": "Sets the value at the specified index to newval"
    },
    {
        "href": "arrayobject.offsetunset.php",
        "name": "ArrayObject::offsetUnset",
        "description": "Unsets the value at the specified index"
    },
    {
        "href": "arrayobject.serialize.php",
        "name": "ArrayObject::serialize",
        "description": "Serialize an ArrayObject"
    },
    {
        "href": "arrayobject.setflags.php",
        "name": "ArrayObject::setFlags",
        "description": "Sets the behavior flags"
    },
    {
        "href": "arrayobject.setiteratorclass.php",
        "name": "ArrayObject::setIteratorClass",
        "description": "Sets the iterator classname for the ArrayObject"
    },
    {
        "href": "arrayobject.uasort.php",
        "name": "ArrayObject::uasort",
        "description": "Sort the entries with a user-defined comparison function and maintain key association"
    },
    {
        "href": "arrayobject.uksort.php",
        "name": "ArrayObject::uksort",
        "description": "Sort the entries by keys using a user-defined comparison function"
    },
    {
        "href": "arrayobject.unserialize.php",
        "name": "ArrayObject::unserialize",
        "description": "Unserialize an ArrayObject"
    },
    {
        "href": "arrayobject.construct.php",
        "name": "ArrayObject::__construct",
        "description": "Construct a new array object"
    },
    {
        "href": "function.array-change-key-case.php",
        "name": "array_change_key_case",
        "description": "Changes the case of all keys in an array"
    },
    {
        "href": "function.array-chunk.php",
        "name": "array_chunk",
        "description": "Split an array into chunks"
    },
    {
        "href": "function.array-column.php",
        "name": "array_column",
        "description": "Return the values from a single column in the input array"
    },
    {
        "href": "function.array-combine.php",
        "name": "array_combine",
        "description": "Creates an array by using one array for keys and another for its values"
    },
    {
        "href": "function.array-count-values.php",
        "name": "array_count_values",
        "description": "Counts all the values of an array"
    },
    {
        "href": "function.array-diff.php",
        "name": "array_diff",
        "description": "Computes the difference of arrays"
    },
    {
        "href": "function.array-diff-assoc.php",
        "name": "array_diff_assoc",
        "description": "Computes the difference of arrays with additional index check"
    },
    {
        "href": "function.array-diff-key.php",
        "name": "array_diff_key",
        "description": "Computes the difference of arrays using keys for comparison"
    },
    {
        "href": "function.array-diff-uassoc.php",
        "name": "array_diff_uassoc",
        "description": "Computes the difference of arrays with additional index check which is performed by a user supplied callback function"
    },
    {
        "href": "function.array-diff-ukey.php",
        "name": "array_diff_ukey",
        "description": "Computes the difference of arrays using a callback function on the keys for comparison"
    },
    {
        "href": "function.array-fill.php",
        "name": "array_fill",
        "description": "Fill an array with values"
    },
    {
        "href": "function.array-fill-keys.php",
        "name": "array_fill_keys",
        "description": "Fill an array with values, specifying keys"
    },
    {
        "href": "function.array-filter.php",
        "name": "array_filter",
        "description": "Filters elements of an array using a callback function"
    },
    {
        "href": "function.array-flip.php",
        "name": "array_flip",
        "description": "Exchanges all keys with their associated values in an array"
    },
    {
        "href": "function.array-intersect.php",
        "name": "array_intersect",
        "description": "Computes the intersection of arrays"
    },
    {
        "href": "function.array-intersect-assoc.php",
        "name": "array_intersect_assoc",
        "description": "Computes the intersection of arrays with additional index check"
    },
    {
        "href": "function.array-intersect-key.php",
        "name": "array_intersect_key",
        "description": "Computes the intersection of arrays using keys for comparison"
    },
    {
        "href": "function.array-intersect-uassoc.php",
        "name": "array_intersect_uassoc",
        "description": "Computes the intersection of arrays with additional index check, compares indexes by a callback function"
    },
    {
        "href": "function.array-intersect-ukey.php",
        "name": "array_intersect_ukey",
        "description": "Computes the intersection of arrays using a callback function on the keys for comparison"
    },
    {
        "href": "function.array-is-list.php",
        "name": "array_is_list",
        "description": "Checks whether a given array is a list"
    },
    {
        "href": "function.array-keys.php",
        "name": "array_keys",
        "description": "Return all the keys or a subset of the keys of an array"
    },
    {
        "href": "function.array-key-exists.php",
        "name": "array_key_exists",
        "description": "Checks if the given key or index exists in the array"
    },
    {
        "href": "function.array-key-first.php",
        "name": "array_key_first",
        "description": "Gets the first key of an array"
    },
    {
        "href": "function.array-key-last.php",
        "name": "array_key_last",
        "description": "Gets the last key of an array"
    },
    {
        "href": "function.array-map.php",
        "name": "array_map",
        "description": "Applies the callback to the elements of the given arrays"
    },
    {
        "href": "function.array-merge.php",
        "name": "array_merge",
        "description": "Merge one or more arrays"
    },
    {
        "href": "function.array-merge-recursive.php",
        "name": "array_merge_recursive",
        "description": "Merge one or more arrays recursively"
    },
    {
        "href": "function.array-multisort.php",
        "name": "array_multisort",
        "description": "Sort multiple or multi-dimensional arrays"
    },
    {
        "href": "function.array-pad.php",
        "name": "array_pad",
        "description": "Pad array to the specified length with a value"
    },
    {
        "href": "function.array-pop.php",
        "name": "array_pop",
        "description": "Pop the element off the end of array"
    },
    {
        "href": "function.array-product.php",
        "name": "array_product",
        "description": "Calculate the product of values in an array"
    },
    {
        "href": "function.array-push.php",
        "name": "array_push",
        "description": "Push one or more elements onto the end of array"
    },
    {
        "href": "function.array-rand.php",
        "name": "array_rand",
        "description": "Pick one or more random keys out of an array"
    },
    {
        "href": "function.array-reduce.php",
        "name": "array_reduce",
        "description": "Iteratively reduce the array to a single value using a callback function"
    },
    {
        "href": "function.array-replace.php",
        "name": "array_replace",
        "description": "Replaces elements from passed arrays into the first array"
    },
    {
        "href": "function.array-replace-recursive.php",
        "name": "array_replace_recursive",
        "description": "Replaces elements from passed arrays into the first array recursively"
    },
    {
        "href": "function.array-reverse.php",
        "name": "array_reverse",
        "description": "Return an array with elements in reverse order"
    },
    {
        "href": "function.array-search.php",
        "name": "array_search",
        "description": "Searches the array for a given value and returns the first corresponding key if successful"
    },
    {
        "href": "function.array-shift.php",
        "name": "array_shift",
        "description": "Shift an element off the beginning of array"
    },
    {
        "href": "function.array-slice.php",
        "name": "array_slice",
        "description": "Extract a slice of the array"
    },
    {
        "href": "function.array-splice.php",
        "name": "array_splice",
        "description": "Remove a portion of the array and replace it with something else"
    },
    {
        "href": "function.array-sum.php",
        "name": "array_sum",
        "description": "Calculate the sum of values in an array"
    },
    {
        "href": "function.array-udiff.php",
        "name": "array_udiff",
        "description": "Computes the difference of arrays by using a callback function for data comparison"
    },
    {
        "href": "function.array-udiff-assoc.php",
        "name": "array_udiff_assoc",
        "description": "Computes the difference of arrays with additional index check, compares data by a callback function"
    },
    {
        "href": "function.array-udiff-uassoc.php",
        "name": "array_udiff_uassoc",
        "description": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
    },
    {
        "href": "function.array-uintersect.php",
        "name": "array_uintersect",
        "description": "Computes the intersection of arrays, compares data by a callback function"
    },
    {
        "href": "function.array-uintersect-assoc.php",
        "name": "array_uintersect_assoc",
        "description": "Computes the intersection of arrays with additional index check, compares data by a callback function"
    },
    {
        "href": "function.array-uintersect-uassoc.php",
        "name": "array_uintersect_uassoc",
        "description": "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions"
    },
    {
        "href": "function.array-unique.php",
        "name": "array_unique",
        "description": "Removes duplicate values from an array"
    },
    {
        "href": "function.array-unshift.php",
        "name": "array_unshift",
        "description": "Prepend one or more elements to the beginning of an array"
    },
    {
        "href": "function.array-values.php",
        "name": "array_values",
        "description": "Return all the values of an array"
    },
    {
        "href": "function.array-walk.php",
        "name": "array_walk",
        "description": "Apply a user supplied function to every member of an array"
    },
    {
        "href": "function.array-walk-recursive.php",
        "name": "array_walk_recursive",
        "description": "Apply a user function recursively to every member of an array"
    },
    {
        "href": "function.arsort.php",
        "name": "arsort",
        "description": "Sort an array in descending order and maintain index association"
    },
    {
        "href": "function.asin.php",
        "name": "asin",
        "description": "Arc sine"
    },
    {
        "href": "function.asinh.php",
        "name": "asinh",
        "description": "Inverse hyperbolic sine"
    },
    {
        "href": "function.asort.php",
        "name": "asort",
        "description": "Sort an array in ascending order and maintain index association"
    },
    {
        "href": "function.assert.php",
        "name": "assert",
        "description": "Checks if assertion is false"
    },
    {
        "href": "function.assert-options.php",
        "name": "assert_options",
        "description": "Set/get the various assert flags"
    },
    {
        "href": "function.atan.php",
        "name": "atan",
        "description": "Arc tangent"
    },
    {
        "href": "function.atan2.php",
        "name": "atan2",
        "description": "Arc tangent of two variables"
    },
    {
        "href": "function.atanh.php",
        "name": "atanh",
        "description": "Inverse hyperbolic tangent"
    },
    {
        "href": "backedenum.from.php",
        "name": "BackedEnum::from",
        "description": "Maps a scalar to an enum instance"
    },
    {
        "href": "backedenum.tryfrom.php",
        "name": "BackedEnum::tryFrom",
        "description": "Maps a scalar to an enum instance or null"
    },
    {
        "href": "function.base64-decode.php",
        "name": "base64_decode",
        "description": "Decodes data encoded with MIME base64"
    },
    {
        "href": "function.base64-encode.php",
        "name": "base64_encode",
        "description": "Encodes data with MIME base64"
    },
    {
        "href": "function.basename.php",
        "name": "basename",
        "description": "Returns trailing name component of path"
    },
    {
        "href": "mysql-xdevapi-baseresult.getwarnings.php",
        "name": "BaseResult::getWarnings",
        "description": "Fetch warnings from last operation"
    },
    {
        "href": "mysql-xdevapi-baseresult.getwarningscount.php",
        "name": "BaseResult::getWarningsCount",
        "description": "Fetch warning count from last operation"
    },
    {
        "href": "function.base-convert.php",
        "name": "base_convert",
        "description": "Convert a number between arbitrary bases"
    },
    {
        "href": "function.bcadd.php",
        "name": "bcadd",
        "description": "Add two arbitrary precision numbers"
    },
    {
        "href": "function.bccomp.php",
        "name": "bccomp",
        "description": "Compare two arbitrary precision numbers"
    },
    {
        "href": "function.bcdiv.php",
        "name": "bcdiv",
        "description": "Divide two arbitrary precision numbers"
    },
    {
        "href": "function.bcmod.php",
        "name": "bcmod",
        "description": "Get modulus of an arbitrary precision number"
    },
    {
        "href": "function.bcmul.php",
        "name": "bcmul",
        "description": "Multiply two arbitrary precision numbers"
    },
    {
        "href": "function.bcpow.php",
        "name": "bcpow",
        "description": "Raise an arbitrary precision number to another"
    },
    {
        "href": "function.bcpowmod.php",
        "name": "bcpowmod",
        "description": "Raise an arbitrary precision number to another, reduced by a specified modulus"
    },
    {
        "href": "function.bcscale.php",
        "name": "bcscale",
        "description": "Set or get default scale parameter for all bc math functions"
    },
    {
        "href": "function.bcsqrt.php",
        "name": "bcsqrt",
        "description": "Get the square root of an arbitrary precision number"
    },
    {
        "href": "function.bcsub.php",
        "name": "bcsub",
        "description": "Subtract one arbitrary precision number from another"
    },
    {
        "href": "function.bin2hex.php",
        "name": "bin2hex",
        "description": "Convert binary data into hexadecimal representation"
    },
    {
        "href": "function.bindec.php",
        "name": "bindec",
        "description": "Binary to decimal"
    },
    {
        "href": "function.bindtextdomain.php",
        "name": "bindtextdomain",
        "description": "Sets or gets the path for a domain"
    },
    {
        "href": "function.bind-textdomain-codeset.php",
        "name": "bind_textdomain_codeset",
        "description": "Specify or get the character encoding in which the messages from the DOMAIN message catalog will be returned"
    },
    {
        "href": "function.boolval.php",
        "name": "boolval",
        "description": "Get the boolean value of a variable"
    },
    {
        "href": "function.bzclose.php",
        "name": "bzclose",
        "description": "Close a bzip2 file"
    },
    {
        "href": "function.bzcompress.php",
        "name": "bzcompress",
        "description": "Compress a string into bzip2 encoded data"
    },
    {
        "href": "function.bzdecompress.php",
        "name": "bzdecompress",
        "description": "Decompresses bzip2 encoded data"
    },
    {
        "href": "function.bzerrno.php",
        "name": "bzerrno",
        "description": "Returns a bzip2 error number"
    },
    {
        "href": "function.bzerror.php",
        "name": "bzerror",
        "description": "Returns the bzip2 error number and error string in an array"
    },
    {
        "href": "function.bzerrstr.php",
        "name": "bzerrstr",
        "description": "Returns a bzip2 error string"
    },
    {
        "href": "function.bzflush.php",
        "name": "bzflush",
        "description": "Do nothing"
    },
    {
        "href": "function.bzopen.php",
        "name": "bzopen",
        "description": "Opens a bzip2 compressed file"
    },
    {
        "href": "function.bzread.php",
        "name": "bzread",
        "description": "Binary safe bzip2 file read"
    },
    {
        "href": "function.bzwrite.php",
        "name": "bzwrite",
        "description": "Binary safe bzip2 file write"
    },
    {
        "href": "cachingiterator.count.php",
        "name": "CachingIterator::count",
        "description": "The number of elements in the iterator"
    },
    {
        "href": "cachingiterator.current.php",
        "name": "CachingIterator::current",
        "description": "Return the current element"
    },
    {
        "href": "cachingiterator.getcache.php",
        "name": "CachingIterator::getCache",
        "description": "Retrieve the contents of the cache"
    },
    {
        "href": "cachingiterator.getflags.php",
        "name": "CachingIterator::getFlags",
        "description": "Get flags used"
    },
    {
        "href": "cachingiterator.getinneriterator.php",
        "name": "CachingIterator::getInnerIterator",
        "description": "Returns the inner iterator"
    },
    {
        "href": "cachingiterator.hasnext.php",
        "name": "CachingIterator::hasNext",
        "description": "Check whether the inner iterator has a valid next element"
    },
    {
        "href": "cachingiterator.key.php",
        "name": "CachingIterator::key",
        "description": "Return the key for the current element"
    },
    {
        "href": "cachingiterator.next.php",
        "name": "CachingIterator::next",
        "description": "Move the iterator forward"
    },
    {
        "href": "cachingiterator.offsetexists.php",
        "name": "CachingIterator::offsetExists",
        "description": "The offsetExists purpose"
    },
    {
        "href": "cachingiterator.offsetget.php",
        "name": "CachingIterator::offsetGet",
        "description": "The offsetGet purpose"
    },
    {
        "href": "cachingiterator.offsetset.php",
        "name": "CachingIterator::offsetSet",
        "description": "The offsetSet purpose"
    },
    {
        "href": "cachingiterator.offsetunset.php",
        "name": "CachingIterator::offsetUnset",
        "description": "The offsetUnset purpose"
    },
    {
        "href": "cachingiterator.rewind.php",
        "name": "CachingIterator::rewind",
        "description": "Rewind the iterator"
    },
    {
        "href": "cachingiterator.setflags.php",
        "name": "CachingIterator::setFlags",
        "description": "The setFlags purpose"
    },
    {
        "href": "cachingiterator.valid.php",
        "name": "CachingIterator::valid",
        "description": "Check whether the current element is valid"
    },
    {
        "href": "cachingiterator.construct.php",
        "name": "CachingIterator::__construct",
        "description": "Construct a new CachingIterator object for the iterator"
    },
    {
        "href": "cachingiterator.tostring.php",
        "name": "CachingIterator::__toString",
        "description": "Return the string representation of the current element"
    },
    {
        "href": "callbackfilteriterator.accept.php",
        "name": "CallbackFilterIterator::accept",
        "description": "Calls the callback with the current value, the current key and the inner iterator as arguments"
    },
    {
        "href": "callbackfilteriterator.construct.php",
        "name": "CallbackFilterIterator::__construct",
        "description": "Create a filtered iterator from another iterator"
    },
    {
        "href": "function.call-user-func.php",
        "name": "call_user_func",
        "description": "Call the callback given by the first parameter"
    },
    {
        "href": "function.call-user-func-array.php",
        "name": "call_user_func_array",
        "description": "Call a callback with an array of parameters"
    },
    {
        "href": "function.cal-days-in-month.php",
        "name": "cal_days_in_month",
        "description": "Return the number of days in a month for a given year and calendar"
    },
    {
        "href": "function.cal-from-jd.php",
        "name": "cal_from_jd",
        "description": "Converts from Julian Day Count to a supported calendar"
    },
    {
        "href": "function.cal-info.php",
        "name": "cal_info",
        "description": "Returns information about a particular calendar"
    },
    {
        "href": "function.cal-to-jd.php",
        "name": "cal_to_jd",
        "description": "Converts from a supported calendar to Julian Day Count"
    },
    {
        "href": "function.ceil.php",
        "name": "ceil",
        "description": "Round fractions up"
    },
    {
        "href": "function.chdir.php",
        "name": "chdir",
        "description": "Change directory"
    },
    {
        "href": "function.checkdate.php",
        "name": "checkdate",
        "description": "Validate a Gregorian date"
    },
    {
        "href": "function.checkdnsrr.php",
        "name": "checkdnsrr",
        "description": "Check DNS records corresponding to a given Internet host name or IP address"
    },
    {
        "href": "function.chgrp.php",
        "name": "chgrp",
        "description": "Changes file group"
    },
    {
        "href": "function.chmod.php",
        "name": "chmod",
        "description": "Changes file mode"
    },
    {
        "href": "function.chop.php",
        "name": "chop",
        "description": "Alias of rtrim"
    },
    {
        "href": "function.chown.php",
        "name": "chown",
        "description": "Changes file owner"
    },
    {
        "href": "function.chr.php",
        "name": "chr",
        "description": "Generate a single-byte string from a number"
    },
    {
        "href": "function.chroot.php",
        "name": "chroot",
        "description": "Change the root directory"
    },
    {
        "href": "function.chunk-split.php",
        "name": "chunk_split",
        "description": "Split a string into smaller chunks"
    },
    {
        "href": "function.class-alias.php",
        "name": "class_alias",
        "description": "Creates an alias for a class"
    },
    {
        "href": "function.class-exists.php",
        "name": "class_exists",
        "description": "Checks if the class has been defined"
    },
    {
        "href": "function.class-implements.php",
        "name": "class_implements",
        "description": "Return the interfaces which are implemented by the given class or interface"
    },
    {
        "href": "function.class-parents.php",
        "name": "class_parents",
        "description": "Return the parent classes of the given class"
    },
    {
        "href": "function.class-uses.php",
        "name": "class_uses",
        "description": "Return the traits used by the given class"
    },
    {
        "href": "function.clearstatcache.php",
        "name": "clearstatcache",
        "description": "Clears file status cache"
    },
    {
        "href": "mysql-xdevapi-client.getsession.php",
        "name": "Client::getClient",
        "description": "Get client session"
    },
    {
        "href": "mysql-xdevapi-client.construct.php",
        "name": "Client::__construct",
        "description": "Client constructor"
    },
    {
        "href": "function.cli-get-process-title.php",
        "name": "cli_get_process_title",
        "description": "Returns the current process title"
    },
    {
        "href": "function.cli-set-process-title.php",
        "name": "cli_set_process_title",
        "description": "Sets the process title"
    },
    {
        "href": "function.closedir.php",
        "name": "closedir",
        "description": "Close directory handle"
    },
    {
        "href": "function.closelog.php",
        "name": "closelog",
        "description": "Close connection to system logger"
    },
    {
        "href": "closure.bind.php",
        "name": "Closure::bind",
        "description": "Duplicates a closure with a specific bound object and class scope"
    },
    {
        "href": "closure.bindto.php",
        "name": "Closure::bindTo",
        "description": "Duplicates the closure with a new bound object and class scope"
    },
    {
        "href": "closure.call.php",
        "name": "Closure::call",
        "description": "Binds and calls the closure"
    },
    {
        "href": "closure.fromcallable.php",
        "name": "Closure::fromCallable",
        "description": "Converts a callable into a closure"
    },
    {
        "href": "closure.construct.php",
        "name": "Closure::__construct",
        "description": "Constructor that disallows instantiation"
    },
    {
        "href": "collator.asort.php",
        "name": "Collator::asort",
        "description": "Sort array maintaining index association"
    },
    {
        "href": "collator.compare.php",
        "name": "Collator::compare",
        "description": "Compare two Unicode strings"
    },
    {
        "href": "collator.create.php",
        "name": "Collator::create",
        "description": "Create a collator"
    },
    {
        "href": "collator.getattribute.php",
        "name": "Collator::getAttribute",
        "description": "Get collation attribute value"
    },
    {
        "href": "collator.geterrorcode.php",
        "name": "Collator::getErrorCode",
        "description": "Get collator's last error code"
    },
    {
        "href": "collator.geterrormessage.php",
        "name": "Collator::getErrorMessage",
        "description": "Get text for collator's last error code"
    },
    {
        "href": "collator.getlocale.php",
        "name": "Collator::getLocale",
        "description": "Get the locale name of the collator"
    },
    {
        "href": "collator.getsortkey.php",
        "name": "Collator::getSortKey",
        "description": "Get sorting key for a string"
    },
    {
        "href": "collator.getstrength.php",
        "name": "Collator::getStrength",
        "description": "Get current collation strength"
    },
    {
        "href": "collator.setattribute.php",
        "name": "Collator::setAttribute",
        "description": "Set collation attribute"
    },
    {
        "href": "collator.setstrength.php",
        "name": "Collator::setStrength",
        "description": "Set collation strength"
    },
    {
        "href": "collator.sort.php",
        "name": "Collator::sort",
        "description": "Sort array using specified collator"
    },
    {
        "href": "collator.sortwithsortkeys.php",
        "name": "Collator::sortWithSortKeys",
        "description": "Sort array using specified collator and sort keys"
    },
    {
        "href": "collator.construct.php",
        "name": "Collator::__construct",
        "description": "Create a collator"
    },
    {
        "href": "collectable.isgarbage.php",
        "name": "Collectable::isGarbage",
        "description": "Determine whether an object has been marked as garbage"
    },
    {
        "href": "mysql-xdevapi-collection.add.php",
        "name": "Collection::add",
        "description": "Add collection document"
    },
    {
        "href": "mysql-xdevapi-collection.addorreplaceone.php",
        "name": "Collection::addOrReplaceOne",
        "description": "Add or replace collection document"
    },
    {
        "href": "mysql-xdevapi-collection.count.php",
        "name": "Collection::count",
        "description": "Get document count"
    },
    {
        "href": "mysql-xdevapi-collection.createindex.php",
        "name": "Collection::createIndex",
        "description": "Create collection index"
    },
    {
        "href": "mysql-xdevapi-collection.dropindex.php",
        "name": "Collection::dropIndex",
        "description": "Drop collection index"
    },
    {
        "href": "mysql-xdevapi-collection.existsindatabase.php",
        "name": "Collection::existsInDatabase",
        "description": "Check if collection exists in database"
    },
    {
        "href": "mysql-xdevapi-collection.find.php",
        "name": "Collection::find",
        "description": "Search for document"
    },
    {
        "href": "mysql-xdevapi-collection.getname.php",
        "name": "Collection::getName",
        "description": "Get collection name"
    },
    {
        "href": "mysql-xdevapi-collection.getone.php",
        "name": "Collection::getOne",
        "description": "Get one document"
    },
    {
        "href": "mysql-xdevapi-collection.getschema.php",
        "name": "Collection::getSchema",
        "description": "Get schema object"
    },
    {
        "href": "mysql-xdevapi-collection.getsession.php",
        "name": "Collection::getSession",
        "description": "Get session object"
    },
    {
        "href": "mysql-xdevapi-collection.modify.php",
        "name": "Collection::modify",
        "description": "Modify collection documents"
    },
    {
        "href": "mysql-xdevapi-collection.remove.php",
        "name": "Collection::remove",
        "description": "Remove collection documents"
    },
    {
        "href": "mysql-xdevapi-collection.removeone.php",
        "name": "Collection::removeOne",
        "description": "Remove one collection document"
    },
    {
        "href": "mysql-xdevapi-collection.replaceone.php",
        "name": "Collection::replaceOne",
        "description": "Replace one collection document"
    },
    {
        "href": "mysql-xdevapi-collection.construct.php",
        "name": "Collection::__construct",
        "description": "Collection constructor"
    },
    {
        "href": "mysql-xdevapi-collectionadd.execute.php",
        "name": "CollectionAdd::execute",
        "description": "Execute the statement"
    },
    {
        "href": "mysql-xdevapi-collectionadd.construct.php",
        "name": "CollectionAdd::__construct",
        "description": "CollectionAdd constructor"
    },
    {
        "href": "mysql-xdevapi-collectionfind.bind.php",
        "name": "CollectionFind::bind",
        "description": "Bind value to query placeholder"
    },
    {
        "href": "mysql-xdevapi-collectionfind.execute.php",
        "name": "CollectionFind::execute",
        "description": "Execute the statement"
    },
    {
        "href": "mysql-xdevapi-collectionfind.fields.php",
        "name": "CollectionFind::fields",
        "description": "Set document field filter"
    },
    {
        "href": "mysql-xdevapi-collectionfind.groupby.php",
        "name": "CollectionFind::groupBy",
        "description": "Set grouping criteria"
    },
    {
        "href": "mysql-xdevapi-collectionfind.having.php",
        "name": "CollectionFind::having",
        "description": "Set condition for aggregate functions"
    },
    {
        "href": "mysql-xdevapi-collectionfind.limit.php",
        "name": "CollectionFind::limit",
        "description": "Limit number of returned documents"
    },
    {
        "href": "mysql-xdevapi-collectionfind.lockexclusive.php",
        "name": "CollectionFind::lockExclusive",
        "description": "Execute operation with EXCLUSIVE LOCK"
    },
    {
        "href": "mysql-xdevapi-collectionfind.lockshared.php",
        "name": "CollectionFind::lockShared",
        "description": "Execute operation with SHARED LOCK"
    },
    {
        "href": "mysql-xdevapi-collectionfind.offset.php",
        "name": "CollectionFind::offset",
        "description": "Skip given number of elements to be returned"
    },
    {
        "href": "mysql-xdevapi-collectionfind.sort.php",
        "name": "CollectionFind::sort",
        "description": "Set the sorting criteria"
    },
    {
        "href": "mysql-xdevapi-collectionfind.construct.php",
        "name": "CollectionFind::__construct",
        "description": "CollectionFind constructor"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.arrayappend.php",
        "name": "CollectionModify::arrayAppend",
        "description": "Append element to an array field"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.arrayinsert.php",
        "name": "CollectionModify::arrayInsert",
        "description": "Insert element into an array field"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.bind.php",
        "name": "CollectionModify::bind",
        "description": "Bind value to query placeholder"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.execute.php",
        "name": "CollectionModify::execute",
        "description": "Execute modify operation"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.limit.php",
        "name": "CollectionModify::limit",
        "description": "Limit number of modified documents"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.patch.php",
        "name": "CollectionModify::patch",
        "description": "Patch document"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.replace.php",
        "name": "CollectionModify::replace",
        "description": "Replace document field"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.set.php",
        "name": "CollectionModify::set",
        "description": "Set document attribute"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.skip.php",
        "name": "CollectionModify::skip",
        "description": "Skip elements"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.sort.php",
        "name": "CollectionModify::sort",
        "description": "Set the sorting criteria"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.unset.php",
        "name": "CollectionModify::unset",
        "description": "Unset the value of document fields"
    },
    {
        "href": "mysql-xdevapi-collectionmodify.construct.php",
        "name": "CollectionModify::__construct",
        "description": "CollectionModify constructor"
    },
    {
        "href": "mysql-xdevapi-collectionremove.bind.php",
        "name": "CollectionRemove::bind",
        "description": "Bind value to placeholder"
    },
    {
        "href": "mysql-xdevapi-collectionremove.execute.php",
        "name": "CollectionRemove::execute",
        "description": "Execute remove operation"
    },
    {
        "href": "mysql-xdevapi-collectionremove.limit.php",
        "name": "CollectionRemove::limit",
        "description": "Limit number of documents to remove"
    },
    {
        "href": "mysql-xdevapi-collectionremove.sort.php",
        "name": "CollectionRemove::sort",
        "description": "Set the sorting criteria"
    },
    {
        "href": "mysql-xdevapi-collectionremove.construct.php",
        "name": "CollectionRemove::__construct",
        "description": "CollectionRemove constructor"
    },
    {
        "href": "mysql-xdevapi-columnresult.getcharactersetname.php",
        "name": "ColumnResult::getCharacterSetName",
        "description": "Get character set"
    },
    {
        "href": "mysql-xdevapi-columnresult.getcollationname.php",
        "name": "ColumnResult::getCollationName",
        "description": "Get collation name"
    },
    {
        "href": "mysql-xdevapi-columnresult.getcolumnlabel.php",
        "name": "ColumnResult::getColumnLabel",
        "description": "Get column label"
    },
    {
        "href": "mysql-xdevapi-columnresult.getcolumnname.php",
        "name": "ColumnResult::getColumnName",
        "description": "Get column name"
    },
    {
        "href": "mysql-xdevapi-columnresult.getfractionaldigits.php",
        "name": "ColumnResult::getFractionalDigits",
        "description": "Get fractional digit length"
    },
    {
        "href": "mysql-xdevapi-columnresult.getlength.php",
        "name": "ColumnResult::getLength",
        "description": "Get column field length"
    },
    {
        "href": "mysql-xdevapi-columnresult.getschemaname.php",
        "name": "ColumnResult::getSchemaName",
        "description": "Get schema name"
    },
    {
        "href": "mysql-xdevapi-columnresult.gettablelabel.php",
        "name": "ColumnResult::getTableLabel",
        "description": "Get table label"
    },
    {
        "href": "mysql-xdevapi-columnresult.gettablename.php",
        "name": "ColumnResult::getTableName",
        "description": "Get table name"
    },
    {
        "href": "mysql-xdevapi-columnresult.gettype.php",
        "name": "ColumnResult::getType",
        "description": "Get column type"
    },
    {
        "href": "mysql-xdevapi-columnresult.isnumbersigned.php",
        "name": "ColumnResult::isNumberSigned",
        "description": "Check if signed type"
    },
    {
        "href": "mysql-xdevapi-columnresult.ispadded.php",
        "name": "ColumnResult::isPadded",
        "description": "Check if padded"
    },
    {
        "href": "mysql-xdevapi-columnresult.construct.php",
        "name": "ColumnResult::__construct",
        "description": "ColumnResult constructor"
    },
    {
        "href": "com.construct.php",
        "name": "com::__construct",
        "description": "com class constructor"
    },
    {
        "href": "commonmark-cql.construct.php",
        "name": "CommonMark\\CQL::__construct",
        "description": "CQL Construction"
    },
    {
        "href": "commonmark-cql.invoke.php",
        "name": "CommonMark\\CQL::__invoke",
        "description": "CQL Execution"
    },
    {
        "href": "commonmark-interfaces-ivisitable.accept.php",
        "name": "CommonMark\\Interfaces\\IVisitable::accept",
        "description": "Visitation"
    },
    {
        "href": "commonmark-interfaces-ivisitor.enter.php",
        "name": "CommonMark\\Interfaces\\IVisitor::enter",
        "description": "Visitation"
    },
    {
        "href": "commonmark-interfaces-ivisitor.leave.php",
        "name": "CommonMark\\Interfaces\\IVisitor::leave",
        "description": "Visitation"
    },
    {
        "href": "commonmark-node.accept.php",
        "name": "CommonMark\ode::accept",
        "description": "Visitation"
    },
    {
        "href": "commonmark-node.appendchild.php",
        "name": "CommonMark\ode::appendChild",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node.insertafter.php",
        "name": "CommonMark\ode::insertAfter",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node.insertbefore.php",
        "name": "CommonMark\ode::insertBefore",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node.prependchild.php",
        "name": "CommonMark\ode::prependChild",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node.replace.php",
        "name": "CommonMark\ode::replace",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node.unlink.php",
        "name": "CommonMark\ode::unlink",
        "description": "AST Manipulation"
    },
    {
        "href": "commonmark-node-bulletlist.construct.php",
        "name": "CommonMark\ode\\BulletList::__construct",
        "description": "BulletList Construction"
    },
    {
        "href": "commonmark-node-codeblock.construct.php",
        "name": "CommonMark\ode\\CodeBlock::__construct",
        "description": "CodeBlock Construction"
    },
    {
        "href": "commonmark-node-heading.construct.php",
        "name": "CommonMark\ode\\Heading::__construct",
        "description": "Heading Construction"
    },
    {
        "href": "commonmark-node-image.construct.php",
        "name": "CommonMark\ode\\Image::__construct",
        "description": "Image Construction"
    },
    {
        "href": "commonmark-node-link.construct.php",
        "name": "CommonMark\ode\\Link::__construct",
        "description": "Link Construction"
    },
    {
        "href": "commonmark-node-orderedlist.construct.php",
        "name": "CommonMark\ode\\OrderedList::__construct",
        "description": "OrderedList Construction"
    },
    {
        "href": "commonmark-node-text.construct.php",
        "name": "CommonMark\ode\\Text::__construct",
        "description": "Text Construction"
    },
    {
        "href": "function.commonmark-parse.php",
        "name": "CommonMark\\Parse",
        "description": "Parsing"
    },
    {
        "href": "commonmark-parser.finish.php",
        "name": "CommonMark\\Parser::finish",
        "description": "Parsing"
    },
    {
        "href": "commonmark-parser.parse.php",
        "name": "CommonMark\\Parser::parse",
        "description": "Parsing"
    },
    {
        "href": "commonmark-parser.construct.php",
        "name": "CommonMark\\Parser::__construct",
        "description": "Parsing"
    },
    {
        "href": "function.commonmark-render.php",
        "name": "CommonMark\\Render",
        "description": "Rendering"
    },
    {
        "href": "function.commonmark-render-html.php",
        "name": "CommonMark\\Render\\HTML",
        "description": "Rendering"
    },
    {
        "href": "function.commonmark-render-latex.php",
        "name": "CommonMark\\Render\\Latex",
        "description": "Rendering"
    },
    {
        "href": "function.commonmark-render-man.php",
        "name": "CommonMark\\Render\\Man",
        "description": "Rendering"
    },
    {
        "href": "function.commonmark-render-xml.php",
        "name": "CommonMark\\Render\\XML",
        "description": "Rendering"
    },
    {
        "href": "function.compact.php",
        "name": "compact",
        "description": "Create array containing variables and their values"
    },
    {
        "href": "compersisthelper.getcurfilename.php",
        "name": "COMPersistHelper::GetCurFileName",
        "description": "Get current filename"
    },
    {
        "href": "compersisthelper.getmaxstreamsize.php",
        "name": "COMPersistHelper::GetMaxStreamSize",
        "description": "Get maximum stream size"
    },
    {
        "href": "compersisthelper.initnew.php",
        "name": "COMPersistHelper::InitNew",
        "description": "Initialize object to default state"
    },
    {
        "href": "compersisthelper.loadfromfile.php",
        "name": "COMPersistHelper::LoadFromFile",
        "description": "Load object from file"
    },
    {
        "href": "compersisthelper.loadfromstream.php",
        "name": "COMPersistHelper::LoadFromStream",
        "description": "Load object from stream"
    },
    {
        "href": "compersisthelper.savetofile.php",
        "name": "COMPersistHelper::SaveToFile",
        "description": "Save object to file"
    },
    {
        "href": "compersisthelper.savetostream.php",
        "name": "COMPersistHelper::SaveToStream",
        "description": "Save object to stream"
    },
    {
        "href": "compersisthelper.construct.php",
        "name": "COMPersistHelper::__construct",
        "description": "Construct a COMPersistHelper object"
    },
    {
        "href": "componere-abstract-definition.addinterface.php",
        "name": "Componere\\Abstract\\Definition::addInterface",
        "description": "Add Interface"
    },
    {
        "href": "componere-abstract-definition.addmethod.php",
        "name": "Componere\\Abstract\\Definition::addMethod",
        "description": "Add Method"
    },
    {
        "href": "componere-abstract-definition.addtrait.php",
        "name": "Componere\\Abstract\\Definition::addTrait",
        "description": "Add Trait"
    },
    {
        "href": "componere-abstract-definition.getreflector.php",
        "name": "Componere\\Abstract\\Definition::getReflector",
        "description": "Reflection"
    },
    {
        "href": "componere.cast.php",
        "name": "Componere\\cast",
        "description": "Casting"
    },
    {
        "href": "componere.cast_by_ref.php",
        "name": "Componere\\cast_by_ref",
        "description": "Casting"
    },
    {
        "href": "componere-definition.addconstant.php",
        "name": "Componere\\Definition::addConstant",
        "description": "Add Constant"
    },
    {
        "href": "componere-definition.addproperty.php",
        "name": "Componere\\Definition::addProperty",
        "description": "Add Property"
    },
    {
        "href": "componere-definition.getclosure.php",
        "name": "Componere\\Definition::getClosure",
        "description": "Get Closure"
    },
    {
        "href": "componere-definition.getclosures.php",
        "name": "Componere\\Definition::getClosures",
        "description": "Get Closures"
    },
    {
        "href": "componere-definition.isregistered.php",
        "name": "Componere\\Definition::isRegistered",
        "description": "State Detection"
    },
    {
        "href": "componere-definition.register.php",
        "name": "Componere\\Definition::register",
        "description": "Registration"
    },
    {
        "href": "componere-definition.construct.php",
        "name": "Componere\\Definition::__construct",
        "description": "Definition Construction"
    },
    {
        "href": "componere-method.getreflector.php",
        "name": "Componere\\Method::getReflector",
        "description": "Reflection"
    },
    {
        "href": "componere-method.setprivate.php",
        "name": "Componere\\Method::setPrivate",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-method.setprotected.php",
        "name": "Componere\\Method::setProtected",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-method.setstatic.php",
        "name": "Componere\\Method::setStatic",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-method.construct.php",
        "name": "Componere\\Method::__construct",
        "description": "Method Construction"
    },
    {
        "href": "componere-patch.apply.php",
        "name": "Componere\\Patch::apply",
        "description": "Application"
    },
    {
        "href": "componere-patch.derive.php",
        "name": "Componere\\Patch::derive",
        "description": "Patch Derivation"
    },
    {
        "href": "componere-patch.getclosure.php",
        "name": "Componere\\Patch::getClosure",
        "description": "Get Closure"
    },
    {
        "href": "componere-patch.getclosures.php",
        "name": "Componere\\Patch::getClosures",
        "description": "Get Closures"
    },
    {
        "href": "componere-patch.isapplied.php",
        "name": "Componere\\Patch::isApplied",
        "description": "State Detection"
    },
    {
        "href": "componere-patch.revert.php",
        "name": "Componere\\Patch::revert",
        "description": "Reversal"
    },
    {
        "href": "componere-patch.construct.php",
        "name": "Componere\\Patch::__construct",
        "description": "Patch Construction"
    },
    {
        "href": "componere-value.hasdefault.php",
        "name": "Componere\\Value::hasDefault",
        "description": "Value Interaction"
    },
    {
        "href": "componere-value.isprivate.php",
        "name": "Componere\\Value::isPrivate",
        "description": "Accessibility Detection"
    },
    {
        "href": "componere-value.isprotected.php",
        "name": "Componere\\Value::isProtected",
        "description": "Accessibility Detection"
    },
    {
        "href": "componere-value.isstatic.php",
        "name": "Componere\\Value::isStatic",
        "description": "Accessibility Detection"
    },
    {
        "href": "componere-value.setprivate.php",
        "name": "Componere\\Value::setPrivate",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-value.setprotected.php",
        "name": "Componere\\Value::setProtected",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-value.setstatic.php",
        "name": "Componere\\Value::setStatic",
        "description": "Accessibility Modification"
    },
    {
        "href": "componere-value.construct.php",
        "name": "Componere\\Value::__construct",
        "description": "Value Construction"
    },
    {
        "href": "function.com-create-guid.php",
        "name": "com_create_guid",
        "description": "Generate a globally unique identifier (GUID)"
    },
    {
        "href": "function.com-event-sink.php",
        "name": "com_event_sink",
        "description": "Connect events from a COM object to a PHP object"
    },
    {
        "href": "function.com-get-active-object.php",
        "name": "com_get_active_object",
        "description": "Returns a handle to an already running instance of a COM object"
    },
    {
        "href": "function.com-load-typelib.php",
        "name": "com_load_typelib",
        "description": "Loads a Typelib"
    },
    {
        "href": "function.com-message-pump.php",
        "name": "com_message_pump",
        "description": "Process COM messages, sleeping for up to timeoutms milliseconds"
    },
    {
        "href": "function.com-print-typeinfo.php",
        "name": "com_print_typeinfo",
        "description": "Print out a PHP class definition for a dispatchable interface"
    },
    {
        "href": "function.connection-aborted.php",
        "name": "connection_aborted",
        "description": "Check whether client disconnected"
    },
    {
        "href": "function.connection-status.php",
        "name": "connection_status",
        "description": "Returns connection status bitfield"
    },
    {
        "href": "function.constant.php",
        "name": "constant",
        "description": "Returns the value of a constant"
    },
    {
        "href": "context.params.php",
        "name": "Context parameters",
        "description": "Context parameter listing"
    },
    {
        "href": "function.convert-cyr-string.php",
        "name": "convert_cyr_string",
        "description": "Convert from one Cyrillic character set to another"
    },
    {
        "href": "function.convert-uudecode.php",
        "name": "convert_uudecode",
        "description": "Decode a uuencoded string"
    },
    {
        "href": "function.convert-uuencode.php",
        "name": "convert_uuencode",
        "description": "Uuencode a string"
    },
    {
        "href": "function.copy.php",
        "name": "copy",
        "description": "Copies file"
    },
    {
        "href": "function.cos.php",
        "name": "cos",
        "description": "Cosine"
    },
    {
        "href": "function.cosh.php",
        "name": "cosh",
        "description": "Hyperbolic cosine"
    },
    {
        "href": "function.count.php",
        "name": "count",
        "description": "Counts all elements in an array or in a Countable object"
    },
    {
        "href": "countable.count.php",
        "name": "Countable::count",
        "description": "Count elements of an object"
    },
    {
        "href": "function.count-chars.php",
        "name": "count_chars",
        "description": "Return information about characters used in a string"
    },
    {
        "href": "function.crc32.php",
        "name": "crc32",
        "description": "Calculates the crc32 polynomial of a string"
    },
    {
        "href": "function.create-function.php",
        "name": "create_function",
        "description": "Create an anonymous (lambda-style) function"
    },
    {
        "href": "mysql-xdevapi-crudoperationbindable.bind.php",
        "name": "CrudOperationBindable::bind",
        "description": "Bind value to placeholder"
    },
    {
        "href": "mysql-xdevapi-crudoperationlimitable.limit.php",
        "name": "CrudOperationLimitable::limit",
        "description": "Set result limit"
    },
    {
        "href": "mysql-xdevapi-crudoperationskippable.skip.php",
        "name": "CrudOperationSkippable::skip",
        "description": "Number of operations to skip"
    },
    {
        "href": "mysql-xdevapi-crudoperationsortable.sort.php",
        "name": "CrudOperationSortable::sort",
        "description": "Sort results"
    },
    {
        "href": "function.crypt.php",
        "name": "crypt",
        "description": "One-way string hashing"
    },
    {
        "href": "function.ctype-alnum.php",
        "name": "ctype_alnum",
        "description": "Check for alphanumeric character(s)"
    },
    {
        "href": "function.ctype-alpha.php",
        "name": "ctype_alpha",
        "description": "Check for alphabetic character(s)"
    },
    {
        "href": "function.ctype-cntrl.php",
        "name": "ctype_cntrl",
        "description": "Check for control character(s)"
    },
    {
        "href": "function.ctype-digit.php",
        "name": "ctype_digit",
        "description": "Check for numeric character(s)"
    },
    {
        "href": "function.ctype-graph.php",
        "name": "ctype_graph",
        "description": "Check for any printable character(s) except space"
    },
    {
        "href": "function.ctype-lower.php",
        "name": "ctype_lower",
        "description": "Check for lowercase character(s)"
    },
    {
        "href": "function.ctype-print.php",
        "name": "ctype_print",
        "description": "Check for printable character(s)"
    },
    {
        "href": "function.ctype-punct.php",
        "name": "ctype_punct",
        "description": "Check for any printable character which is not whitespace or an   alphanumeric character"
    },
    {
        "href": "function.ctype-space.php",
        "name": "ctype_space",
        "description": "Check for whitespace character(s)"
    },
    {
        "href": "function.ctype-upper.php",
        "name": "ctype_upper",
        "description": "Check for uppercase character(s)"
    },
    {
        "href": "function.ctype-xdigit.php",
        "name": "ctype_xdigit",
        "description": "Check for character(s) representing a hexadecimal digit"
    },
    {
        "href": "function.cubrid-affected-rows.php",
        "name": "cubrid_affected_rows",
        "description": "Return the number of rows affected by the last SQL statement"
    },
    {
        "href": "function.cubrid-bind.php",
        "name": "cubrid_bind",
        "description": "Bind variables to a prepared statement as parameters"
    },
    {
        "href": "function.cubrid-client-encoding.php",
        "name": "cubrid_client_encoding",
        "description": "Return the current CUBRID connection charset"
    },
    {
        "href": "function.cubrid-close.php",
        "name": "cubrid_close",
        "description": "Close CUBRID connection"
    },
    {
        "href": "function.cubrid-close-prepare.php",
        "name": "cubrid_close_prepare",
        "description": "Close the request handle"
    },
    {
        "href": "function.cubrid-close-request.php",
        "name": "cubrid_close_request",
        "description": "Close the request handle"
    },
    {
        "href": "function.cubrid-column-names.php",
        "name": "cubrid_column_names",
        "description": "Get the column names in result"
    },
    {
        "href": "function.cubrid-column-types.php",
        "name": "cubrid_column_types",
        "description": "Get column types in result"
    },
    {
        "href": "function.cubrid-col-get.php",
        "name": "cubrid_col_get",
        "description": "Get contents of collection type column using OID"
    },
    {
        "href": "function.cubrid-col-size.php",
        "name": "cubrid_col_size",
        "description": "Get the number of elements in collection type column using OID"
    },
    {
        "href": "function.cubrid-commit.php",
        "name": "cubrid_commit",
        "description": "Commit a transaction"
    },
    {
        "href": "function.cubrid-connect.php",
        "name": "cubrid_connect",
        "description": "Open a connection to a CUBRID Server"
    },
    {
        "href": "function.cubrid-connect-with-url.php",
        "name": "cubrid_connect_with_url",
        "description": "Establish the environment for connecting to CUBRID server"
    },
    {
        "href": "function.cubrid-current-oid.php",
        "name": "cubrid_current_oid",
        "description": "Get OID of the current cursor location"
    },
    {
        "href": "function.cubrid-data-seek.php",
        "name": "cubrid_data_seek",
        "description": "Move the internal row pointer of the CUBRID result"
    },
    {
        "href": "function.cubrid-db-name.php",
        "name": "cubrid_db_name",
        "description": "Get db name from results of cubrid_list_dbs"
    },
    {
        "href": "function.cubrid-disconnect.php",
        "name": "cubrid_disconnect",
        "description": "Close a database connection"
    },
    {
        "href": "function.cubrid-drop.php",
        "name": "cubrid_drop",
        "description": "Delete an instance using OID"
    },
    {
        "href": "function.cubrid-errno.php",
        "name": "cubrid_errno",
        "description": "Return the numerical value of the error message from previous CUBRID operation"
    },
    {
        "href": "function.cubrid-error.php",
        "name": "cubrid_error",
        "description": "Get the error message"
    },
    {
        "href": "function.cubrid-error-code.php",
        "name": "cubrid_error_code",
        "description": "Get error code for the most recent function call"
    },
    {
        "href": "function.cubrid-error-code-facility.php",
        "name": "cubrid_error_code_facility",
        "description": "Get the facility code of error"
    },
    {
        "href": "function.cubrid-error-msg.php",
        "name": "cubrid_error_msg",
        "description": "Get last error message for the most recent function call"
    },
    {
        "href": "function.cubrid-execute.php",
        "name": "cubrid_execute",
        "description": "Execute a prepared SQL statement"
    },
    {
        "href": "function.cubrid-fetch.php",
        "name": "cubrid_fetch",
        "description": "Fetch the next row from a result set"
    },
    {
        "href": "function.cubrid-fetch-array.php",
        "name": "cubrid_fetch_array",
        "description": "Fetch a result row as an associative array, a numeric array, or both"
    },
    {
        "href": "function.cubrid-fetch-assoc.php",
        "name": "cubrid_fetch_assoc",
        "description": "Return the associative array that corresponds to the fetched row"
    },
    {
        "href": "function.cubrid-fetch-field.php",
        "name": "cubrid_fetch_field",
        "description": "Get column information from a result and return as an object"
    },
    {
        "href": "function.cubrid-fetch-lengths.php",
        "name": "cubrid_fetch_lengths",
        "description": "Return an array with the lengths of the values of each field from the current row"
    },
    {
        "href": "function.cubrid-fetch-object.php",
        "name": "cubrid_fetch_object",
        "description": "Fetch the next row and return it as an object"
    },
    {
        "href": "function.cubrid-fetch-row.php",
        "name": "cubrid_fetch_row",
        "description": "Return a numerical array with the values of the current row"
    },
    {
        "href": "function.cubrid-field-flags.php",
        "name": "cubrid_field_flags",
        "description": "Return a string with the flags of the given field offset"
    },
    {
        "href": "function.cubrid-field-len.php",
        "name": "cubrid_field_len",
        "description": "Get the maximum length of the specified field"
    },
    {
        "href": "function.cubrid-field-name.php",
        "name": "cubrid_field_name",
        "description": "Return the name of the specified field index"
    },
    {
        "href": "function.cubrid-field-seek.php",
        "name": "cubrid_field_seek",
        "description": "Move the result set cursor to the specified field offset"
    },
    {
        "href": "function.cubrid-field-table.php",
        "name": "cubrid_field_table",
        "description": "Return the name of the table of the specified field"
    },
    {
        "href": "function.cubrid-field-type.php",
        "name": "cubrid_field_type",
        "description": "Return the type of the column corresponding to the given field offset"
    },
    {
        "href": "function.cubrid-free-result.php",
        "name": "cubrid_free_result",
        "description": "Free the memory occupied by the result data"
    },
    {
        "href": "function.cubrid-get.php",
        "name": "cubrid_get",
        "description": "Get a column using OID"
    },
    {
        "href": "function.cubrid-get-autocommit.php",
        "name": "cubrid_get_autocommit",
        "description": "Get auto-commit mode of the connection"
    },
    {
        "href": "function.cubrid-get-charset.php",
        "name": "cubrid_get_charset",
        "description": "Return the current CUBRID connection charset"
    },
    {
        "href": "function.cubrid-get-class-name.php",
        "name": "cubrid_get_class_name",
        "description": "Get the class name using OID"
    },
    {
        "href": "function.cubrid-get-client-info.php",
        "name": "cubrid_get_client_info",
        "description": "Return the client library version"
    },
    {
        "href": "function.cubrid-get-db-parameter.php",
        "name": "cubrid_get_db_parameter",
        "description": "Returns the CUBRID database parameters"
    },
    {
        "href": "function.cubrid-get-query-timeout.php",
        "name": "cubrid_get_query_timeout",
        "description": "Get the query timeout value of the request"
    },
    {
        "href": "function.cubrid-get-server-info.php",
        "name": "cubrid_get_server_info",
        "description": "Return the CUBRID server version"
    },
    {
        "href": "function.cubrid-insert-id.php",
        "name": "cubrid_insert_id",
        "description": "Return the ID generated for the last updated AUTO_INCREMENT column"
    },
    {
        "href": "function.cubrid-is-instance.php",
        "name": "cubrid_is_instance",
        "description": "Check whether the instance pointed by OID exists"
    },
    {
        "href": "function.cubrid-list-dbs.php",
        "name": "cubrid_list_dbs",
        "description": "Return an array with the list of all existing CUBRID databases"
    },
    {
        "href": "function.cubrid-load-from-glo.php",
        "name": "cubrid_load_from_glo",
        "description": "Read data from a GLO instance and save it in a file"
    },
    {
        "href": "function.cubrid-lob2-bind.php",
        "name": "cubrid_lob2_bind",
        "description": "Bind a lob object or a string as a lob object to a prepared statement as parameters"
    },
    {
        "href": "function.cubrid-lob2-close.php",
        "name": "cubrid_lob2_close",
        "description": "Close LOB object"
    },
    {
        "href": "function.cubrid-lob2-export.php",
        "name": "cubrid_lob2_export",
        "description": "Export the lob object to a file"
    },
    {
        "href": "function.cubrid-lob2-import.php",
        "name": "cubrid_lob2_import",
        "description": "Import BLOB/CLOB data from a file"
    },
    {
        "href": "function.cubrid-lob2-new.php",
        "name": "cubrid_lob2_new",
        "description": "Create a lob object"
    },
    {
        "href": "function.cubrid-lob2-read.php",
        "name": "cubrid_lob2_read",
        "description": "Read from BLOB/CLOB data"
    },
    {
        "href": "function.cubrid-lob2-seek.php",
        "name": "cubrid_lob2_seek",
        "description": "Move the cursor of a lob object"
    },
    {
        "href": "function.cubrid-lob2-seek64.php",
        "name": "cubrid_lob2_seek64",
        "description": "Move the cursor of a lob object"
    },
    {
        "href": "function.cubrid-lob2-size.php",
        "name": "cubrid_lob2_size",
        "description": "Get a lob object's size"
    },
    {
        "href": "function.cubrid-lob2-size64.php",
        "name": "cubrid_lob2_size64",
        "description": "Get a lob object's size"
    },
    {
        "href": "function.cubrid-lob2-tell.php",
        "name": "cubrid_lob2_tell",
        "description": "Tell the cursor position of the LOB object"
    },
    {
        "href": "function.cubrid-lob2-tell64.php",
        "name": "cubrid_lob2_tell64",
        "description": "Tell the cursor position of the LOB object"
    },
    {
        "href": "function.cubrid-lob2-write.php",
        "name": "cubrid_lob2_write",
        "description": "Write to a lob object"
    },
    {
        "href": "function.cubrid-lob-close.php",
        "name": "cubrid_lob_close",
        "description": "Close BLOB/CLOB data"
    },
    {
        "href": "function.cubrid-lob-export.php",
        "name": "cubrid_lob_export",
        "description": "Export BLOB/CLOB data to file"
    },
    {
        "href": "function.cubrid-lob-get.php",
        "name": "cubrid_lob_get",
        "description": "Get BLOB/CLOB data"
    },
    {
        "href": "function.cubrid-lob-send.php",
        "name": "cubrid_lob_send",
        "description": "Read BLOB/CLOB data and send straight to browser"
    },
    {
        "href": "function.cubrid-lob-size.php",
        "name": "cubrid_lob_size",
        "description": "Get BLOB/CLOB data size"
    },
    {
        "href": "function.cubrid-lock-read.php",
        "name": "cubrid_lock_read",
        "description": "Set a read lock on the given OID"
    },
    {
        "href": "function.cubrid-lock-write.php",
        "name": "cubrid_lock_write",
        "description": "Set a write lock on the given OID"
    },
    {
        "href": "function.cubrid-move-cursor.php",
        "name": "cubrid_move_cursor",
        "description": "Move the cursor in the result"
    },
    {
        "href": "function.cubrid-new-glo.php",
        "name": "cubrid_new_glo",
        "description": "Create a glo instance"
    },
    {
        "href": "function.cubrid-next-result.php",
        "name": "cubrid_next_result",
        "description": "Get result of next query when executing multiple SQL statements"
    },
    {
        "href": "function.cubrid-num-cols.php",
        "name": "cubrid_num_cols",
        "description": "Return the number of columns in the result set"
    },
    {
        "href": "function.cubrid-num-fields.php",
        "name": "cubrid_num_fields",
        "description": "Return the number of columns in the result set"
    },
    {
        "href": "function.cubrid-num-rows.php",
        "name": "cubrid_num_rows",
        "description": "Get the number of rows in the result set"
    },
    {
        "href": "function.cubrid-pconnect.php",
        "name": "cubrid_pconnect",
        "description": "Open a persistent connection to a CUBRID server"
    },
    {
        "href": "function.cubrid-pconnect-with-url.php",
        "name": "cubrid_pconnect_with_url",
        "description": "Open a persistent connection to CUBRID server"
    },
    {
        "href": "function.cubrid-ping.php",
        "name": "cubrid_ping",
        "description": "Ping a server connection or reconnect if there is no connection"
    },
    {
        "href": "function.cubrid-prepare.php",
        "name": "cubrid_prepare",
        "description": "Prepare a SQL statement for execution"
    },
    {
        "href": "function.cubrid-put.php",
        "name": "cubrid_put",
        "description": "Update a column using OID"
    },
    {
        "href": "function.cubrid-query.php",
        "name": "cubrid_query",
        "description": "Send a CUBRID query"
    },
    {
        "href": "function.cubrid-real-escape-string.php",
        "name": "cubrid_real_escape_string",
        "description": "Escape special characters in a string for use in an SQL statement"
    },
    {
        "href": "function.cubrid-result.php",
        "name": "cubrid_result",
        "description": "Return the value of a specific field in a specific row"
    },
    {
        "href": "function.cubrid-rollback.php",
        "name": "cubrid_rollback",
        "description": "Roll back a transaction"
    },
    {
        "href": "function.cubrid-save-to-glo.php",
        "name": "cubrid_save_to_glo",
        "description": "Save requested file in a GLO instance"
    },
    {
        "href": "function.cubrid-schema.php",
        "name": "cubrid_schema",
        "description": "Get the requested schema information"
    },
    {
        "href": "function.cubrid-send-glo.php",
        "name": "cubrid_send_glo",
        "description": "Read data from glo and send it to std output"
    },
    {
        "href": "function.cubrid-seq-drop.php",
        "name": "cubrid_seq_drop",
        "description": "Delete an element from sequence type column using OID"
    },
    {
        "href": "function.cubrid-seq-insert.php",
        "name": "cubrid_seq_insert",
        "description": "Insert an element to a sequence type column using OID"
    },
    {
        "href": "function.cubrid-seq-put.php",
        "name": "cubrid_seq_put",
        "description": "Update the element value of sequence type column using OID"
    },
    {
        "href": "function.cubrid-set-add.php",
        "name": "cubrid_set_add",
        "description": "Insert a single element to set type column using OID"
    },
    {
        "href": "function.cubrid-set-autocommit.php",
        "name": "cubrid_set_autocommit",
        "description": "Set autocommit mode of the connection"
    },
    {
        "href": "function.cubrid-set-db-parameter.php",
        "name": "cubrid_set_db_parameter",
        "description": "Sets the CUBRID database parameters"
    },
    {
        "href": "function.cubrid-set-drop.php",
        "name": "cubrid_set_drop",
        "description": "Delete an element from set type column using OID"
    },
    {
        "href": "function.cubrid-set-query-timeout.php",
        "name": "cubrid_set_query_timeout",
        "description": "Set the timeout time of query execution"
    },
    {
        "href": "function.cubrid-unbuffered-query.php",
        "name": "cubrid_unbuffered_query",
        "description": "Perform a query without fetching the results into memory"
    },
    {
        "href": "function.cubrid-version.php",
        "name": "cubrid_version",
        "description": "Get the CUBRID PHP module's version"
    },
    {
        "href": "context.curl.php",
        "name": "CURL context options",
        "description": "CURL context option listing"
    },
    {
        "href": "curlfile.getfilename.php",
        "name": "CURLFile::getFilename",
        "description": "Get file name"
    },
    {
        "href": "curlfile.getmimetype.php",
        "name": "CURLFile::getMimeType",
        "description": "Get MIME type"
    },
    {
        "href": "curlfile.getpostfilename.php",
        "name": "CURLFile::getPostFilename",
        "description": "Get file name for POST"
    },
    {
        "href": "curlfile.setmimetype.php",
        "name": "CURLFile::setMimeType",
        "description": "Set MIME type"
    },
    {
        "href": "curlfile.setpostfilename.php",
        "name": "CURLFile::setPostFilename",
        "description": "Set file name for POST"
    },
    {
        "href": "curlfile.construct.php",
        "name": "CURLFile::__construct",
        "description": "Create a CURLFile object"
    },
    {
        "href": "curlstringfile.construct.php",
        "name": "CURLStringFile::__construct",
        "description": "Create a CURLStringFile object"
    },
    {
        "href": "function.curl-close.php",
        "name": "curl_close",
        "description": "Close a cURL session"
    },
    {
        "href": "function.curl-copy-handle.php",
        "name": "curl_copy_handle",
        "description": "Copy a cURL handle along with all of its preferences"
    },
    {
        "href": "function.curl-errno.php",
        "name": "curl_errno",
        "description": "Return the last error number"
    },
    {
        "href": "function.curl-error.php",
        "name": "curl_error",
        "description": "Return a string containing the last error for the current session"
    },
    {
        "href": "function.curl-escape.php",
        "name": "curl_escape",
        "description": "URL encodes the given string"
    },
    {
        "href": "function.curl-exec.php",
        "name": "curl_exec",
        "description": "Perform a cURL session"
    },
    {
        "href": "function.curl-getinfo.php",
        "name": "curl_getinfo",
        "description": "Get information regarding a specific transfer"
    },
    {
        "href": "function.curl-init.php",
        "name": "curl_init",
        "description": "Initialize a cURL session"
    },
    {
        "href": "function.curl-multi-add-handle.php",
        "name": "curl_multi_add_handle",
        "description": "Add a normal cURL handle to a cURL multi handle"
    },
    {
        "href": "function.curl-multi-close.php",
        "name": "curl_multi_close",
        "description": "Close a set of cURL handles"
    },
    {
        "href": "function.curl-multi-errno.php",
        "name": "curl_multi_errno",
        "description": "Return the last multi curl error number"
    },
    {
        "href": "function.curl-multi-exec.php",
        "name": "curl_multi_exec",
        "description": "Run the sub-connections of the current cURL handle"
    },
    {
        "href": "function.curl-multi-getcontent.php",
        "name": "curl_multi_getcontent",
        "description": "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set"
    },
    {
        "href": "function.curl-multi-info-read.php",
        "name": "curl_multi_info_read",
        "description": "Get information about the current transfers"
    },
    {
        "href": "function.curl-multi-init.php",
        "name": "curl_multi_init",
        "description": "Returns a new cURL multi handle"
    },
    {
        "href": "function.curl-multi-remove-handle.php",
        "name": "curl_multi_remove_handle",
        "description": "Remove a multi handle from a set of cURL handles"
    },
    {
        "href": "function.curl-multi-select.php",
        "name": "curl_multi_select",
        "description": "Wait for activity on any curl_multi connection"
    },
    {
        "href": "function.curl-multi-setopt.php",
        "name": "curl_multi_setopt",
        "description": "Set an option for the cURL multi handle"
    },
    {
        "href": "function.curl-multi-strerror.php",
        "name": "curl_multi_strerror",
        "description": "Return string describing error code"
    },
    {
        "href": "function.curl-pause.php",
        "name": "curl_pause",
        "description": "Pause and unpause a connection"
    },
    {
        "href": "function.curl-reset.php",
        "name": "curl_reset",
        "description": "Reset all options of a libcurl session handle"
    },
    {
        "href": "function.curl-setopt.php",
        "name": "curl_setopt",
        "description": "Set an option for a cURL transfer"
    },
    {
        "href": "function.curl-setopt-array.php",
        "name": "curl_setopt_array",
        "description": "Set multiple options for a cURL transfer"
    },
    {
        "href": "function.curl-share-close.php",
        "name": "curl_share_close",
        "description": "Close a cURL share handle"
    },
    {
        "href": "function.curl-share-errno.php",
        "name": "curl_share_errno",
        "description": "Return the last share curl error number"
    },
    {
        "href": "function.curl-share-init.php",
        "name": "curl_share_init",
        "description": "Initialize a cURL share handle"
    },
    {
        "href": "function.curl-share-setopt.php",
        "name": "curl_share_setopt",
        "description": "Set an option for a cURL share handle"
    },
    {
        "href": "function.curl-share-strerror.php",
        "name": "curl_share_strerror",
        "description": "Return string describing the given error code"
    },
    {
        "href": "function.curl-strerror.php",
        "name": "curl_strerror",
        "description": "Return string describing the given error code"
    },
    {
        "href": "function.curl-unescape.php",
        "name": "curl_unescape",
        "description": "Decodes the given URL encoded string"
    },
    {
        "href": "function.curl-version.php",
        "name": "curl_version",
        "description": "Gets cURL version information"
    },
    {
        "href": "function.current.php",
        "name": "current",
        "description": "Return the current element in an array"
    },
    {
        "href": "wrappers.data.php",
        "name": "data://",
        "description": "Data (RFC 2397)"
    },
    {
        "href": "mysql-xdevapi-databaseobject.existsindatabase.php",
        "name": "DatabaseObject::existsInDatabase",
        "description": "Check if object exists in database"
    },
    {
        "href": "mysql-xdevapi-databaseobject.getname.php",
        "name": "DatabaseObject::getName",
        "description": "Get object name"
    },
    {
        "href": "mysql-xdevapi-databaseobject.getsession.php",
        "name": "DatabaseObject::getSession",
        "description": "Get session name"
    },
    {
        "href": "function.date.php",
        "name": "date",
        "description": "Format a local time/date"
    },
    {
        "href": "dateinterval.createfromdatestring.php",
        "name": "DateInterval::createFromDateString",
        "description": "Sets up a DateInterval from the relative parts of the string"
    },
    {
        "href": "dateinterval.format.php",
        "name": "DateInterval::format",
        "description": "Formats the interval"
    },
    {
        "href": "dateinterval.construct.php",
        "name": "DateInterval::__construct",
        "description": "Creates a new DateInterval object"
    },
    {
        "href": "dateperiod.getdateinterval.php",
        "name": "DatePeriod::getDateInterval",
        "description": "Gets the interval"
    },
    {
        "href": "dateperiod.getenddate.php",
        "name": "DatePeriod::getEndDate",
        "description": "Gets the end date"
    },
    {
        "href": "dateperiod.getrecurrences.php",
        "name": "DatePeriod::getRecurrences",
        "description": "Gets the number of recurrences"
    },
    {
        "href": "dateperiod.getstartdate.php",
        "name": "DatePeriod::getStartDate",
        "description": "Gets the start date"
    },
    {
        "href": "dateperiod.construct.php",
        "name": "DatePeriod::__construct",
        "description": "Creates a new DatePeriod object"
    },
    {
        "href": "datetime.add.php",
        "name": "DateTime::add",
        "description": "Adds an amount of days, months, years, hours, minutes and seconds to a   DateTime object"
    },
    {
        "href": "datetime.createfromformat.php",
        "name": "DateTime::createFromFormat",
        "description": "Parses a time string according to a specified format"
    },
    {
        "href": "datetime.createfromimmutable.php",
        "name": "DateTime::createFromImmutable",
        "description": "Returns new DateTime object encapsulating the given DateTimeImmutable object"
    },
    {
        "href": "datetime.createfrominterface.php",
        "name": "DateTime::createFromInterface",
        "description": "Returns new DateTime object encapsulating the given DateTimeInterface object"
    },
    {
        "href": "datetime.diff.php",
        "name": "DateTime::diff",
        "description": "Returns the difference between two DateTime objects"
    },
    {
        "href": "datetime.format.php",
        "name": "DateTime::format",
        "description": "Returns date formatted according to given format"
    },
    {
        "href": "datetime.getlasterrors.php",
        "name": "DateTime::getLastErrors",
        "description": "Returns the warnings and errors"
    },
    {
        "href": "datetime.getoffset.php",
        "name": "DateTime::getOffset",
        "description": "Returns the timezone offset"
    },
    {
        "href": "datetime.gettimestamp.php",
        "name": "DateTime::getTimestamp",
        "description": "Gets the Unix timestamp"
    },
    {
        "href": "datetime.gettimezone.php",
        "name": "DateTime::getTimezone",
        "description": "Return time zone relative to given DateTime"
    },
    {
        "href": "datetime.modify.php",
        "name": "DateTime::modify",
        "description": "Alters the timestamp"
    },
    {
        "href": "datetime.setdate.php",
        "name": "DateTime::setDate",
        "description": "Sets the date"
    },
    {
        "href": "datetime.setisodate.php",
        "name": "DateTime::setISODate",
        "description": "Sets the ISO date"
    },
    {
        "href": "datetime.settime.php",
        "name": "DateTime::setTime",
        "description": "Sets the time"
    },
    {
        "href": "datetime.settimestamp.php",
        "name": "DateTime::setTimestamp",
        "description": "Sets the date and time based on an Unix timestamp"
    },
    {
        "href": "datetime.settimezone.php",
        "name": "DateTime::setTimezone",
        "description": "Sets the time zone for the DateTime object"
    },
    {
        "href": "datetime.sub.php",
        "name": "DateTime::sub",
        "description": "Subtracts an amount of days, months, years, hours, minutes and seconds from   a DateTime object"
    },
    {
        "href": "datetime.construct.php",
        "name": "DateTime::__construct",
        "description": "Returns new DateTime object"
    },
    {
        "href": "datetime.set-state.php",
        "name": "DateTime::__set_state",
        "description": "The __set_state handler"
    },
    {
        "href": "datetime.wakeup.php",
        "name": "DateTime::__wakeup",
        "description": "The __wakeup handler"
    },
    {
        "href": "datetimeimmutable.add.php",
        "name": "DateTimeImmutable::add",
        "description": "Adds an amount of days, months, years, hours, minutes and seconds"
    },
    {
        "href": "datetimeimmutable.createfromformat.php",
        "name": "DateTimeImmutable::createFromFormat",
        "description": "Parses a time string according to a specified format"
    },
    {
        "href": "datetimeimmutable.createfrominterface.php",
        "name": "DateTimeImmutable::createFromInterface",
        "description": "Returns new DateTimeImmutable object encapsulating the given DateTimeInterface object"
    },
    {
        "href": "datetimeimmutable.createfrommutable.php",
        "name": "DateTimeImmutable::createFromMutable",
        "description": "Returns new DateTimeImmutable object encapsulating the given DateTime object"
    },
    {
        "href": "datetimeimmutable.getlasterrors.php",
        "name": "DateTimeImmutable::getLastErrors",
        "description": "Returns the warnings and errors"
    },
    {
        "href": "datetimeimmutable.modify.php",
        "name": "DateTimeImmutable::modify",
        "description": "Creates a new object with modified timestamp"
    },
    {
        "href": "datetimeimmutable.setdate.php",
        "name": "DateTimeImmutable::setDate",
        "description": "Sets the date"
    },
    {
        "href": "datetimeimmutable.setisodate.php",
        "name": "DateTimeImmutable::setISODate",
        "description": "Sets the ISO date"
    },
    {
        "href": "datetimeimmutable.settime.php",
        "name": "DateTimeImmutable::setTime",
        "description": "Sets the time"
    },
    {
        "href": "datetimeimmutable.settimestamp.php",
        "name": "DateTimeImmutable::setTimestamp",
        "description": "Sets the date and time based on a Unix timestamp"
    },
    {
        "href": "datetimeimmutable.settimezone.php",
        "name": "DateTimeImmutable::setTimezone",
        "description": "Sets the time zone"
    },
    {
        "href": "datetimeimmutable.sub.php",
        "name": "DateTimeImmutable::sub",
        "description": "Subtracts an amount of days, months, years, hours, minutes and seconds"
    },
    {
        "href": "datetimeimmutable.construct.php",
        "name": "DateTimeImmutable::__construct",
        "description": "Returns new DateTimeImmutable object"
    },
    {
        "href": "datetimeimmutable.set-state.php",
        "name": "DateTimeImmutable::__set_state",
        "description": "The __set_state handler"
    },
    {
        "href": "datetimezone.getlocation.php",
        "name": "DateTimeZone::getLocation",
        "description": "Returns location information for a timezone"
    },
    {
        "href": "datetimezone.getname.php",
        "name": "DateTimeZone::getName",
        "description": "Returns the name of the timezone"
    },
    {
        "href": "datetimezone.getoffset.php",
        "name": "DateTimeZone::getOffset",
        "description": "Returns the timezone offset from GMT"
    },
    {
        "href": "datetimezone.gettransitions.php",
        "name": "DateTimeZone::getTransitions",
        "description": "Returns all transitions for the timezone"
    },
    {
        "href": "datetimezone.listabbreviations.php",
        "name": "DateTimeZone::listAbbreviations",
        "description": "Returns associative array containing dst, offset and the timezone name"
    },
    {
        "href": "datetimezone.listidentifiers.php",
        "name": "DateTimeZone::listIdentifiers",
        "description": "Returns a numerically indexed array containing all defined timezone identifiers"
    },
    {
        "href": "datetimezone.construct.php",
        "name": "DateTimeZone::__construct",
        "description": "Creates new DateTimeZone object"
    },
    {
        "href": "function.date-add.php",
        "name": "date_add",
        "description": "Alias of DateTime::add"
    },
    {
        "href": "function.date-create.php",
        "name": "date_create",
        "description": "Alias of DateTime::__construct"
    },
    {
        "href": "function.date-create-from-format.php",
        "name": "date_create_from_format",
        "description": "Alias of DateTime::createFromFormat"
    },
    {
        "href": "function.date-create-immutable.php",
        "name": "date_create_immutable",
        "description": "Alias of DateTimeImmutable::__construct"
    },
    {
        "href": "function.date-create-immutable-from-format.php",
        "name": "date_create_immutable_from_format",
        "description": "Alias of DateTimeImmutable::createFromFormat"
    },
    {
        "href": "function.date-date-set.php",
        "name": "date_date_set",
        "description": "Alias of DateTime::setDate"
    },
    {
        "href": "function.date-default-timezone-get.php",
        "name": "date_default_timezone_get",
        "description": "Gets the default timezone used by all date/time functions in a script"
    },
    {
        "href": "function.date-default-timezone-set.php",
        "name": "date_default_timezone_set",
        "description": "Sets the default timezone used by all date/time functions in a script"
    },
    {
        "href": "function.date-diff.php",
        "name": "date_diff",
        "description": "Alias of DateTime::diff"
    },
    {
        "href": "function.date-format.php",
        "name": "date_format",
        "description": "Alias of DateTime::format"
    },
    {
        "href": "function.date-get-last-errors.php",
        "name": "date_get_last_errors",
        "description": "Alias of DateTime::getLastErrors"
    },
    {
        "href": "function.date-interval-create-from-date-string.php",
        "name": "date_interval_create_from_date_string",
        "description": "Alias of DateInterval::createFromDateString"
    },
    {
        "href": "function.date-interval-format.php",
        "name": "date_interval_format",
        "description": "Alias of DateInterval::format"
    },
    {
        "href": "function.date-isodate-set.php",
        "name": "date_isodate_set",
        "description": "Alias of DateTime::setISODate"
    },
    {
        "href": "function.date-modify.php",
        "name": "date_modify",
        "description": "Alias of DateTime::modify"
    },
    {
        "href": "function.date-offset-get.php",
        "name": "date_offset_get",
        "description": "Alias of DateTime::getOffset"
    },
    {
        "href": "function.date-parse.php",
        "name": "date_parse",
        "description": "Returns associative array with detailed info about given date/time"
    },
    {
        "href": "function.date-parse-from-format.php",
        "name": "date_parse_from_format",
        "description": "Get info about given date formatted according to the specified format"
    },
    {
        "href": "function.date-sub.php",
        "name": "date_sub",
        "description": "Alias of DateTime::sub"
    },
    {
        "href": "function.date-sunrise.php",
        "name": "date_sunrise",
        "description": "Returns time of sunrise for a given day and location"
    },
    {
        "href": "function.date-sunset.php",
        "name": "date_sunset",
        "description": "Returns time of sunset for a given day and location"
    },
    {
        "href": "function.date-sun-info.php",
        "name": "date_sun_info",
        "description": "Returns an array with information about sunset/sunrise and twilight begin/end"
    },
    {
        "href": "function.date-timestamp-get.php",
        "name": "date_timestamp_get",
        "description": "Alias of DateTime::getTimestamp"
    },
    {
        "href": "function.date-timestamp-set.php",
        "name": "date_timestamp_set",
        "description": "Alias of DateTime::setTimestamp"
    },
    {
        "href": "function.date-timezone-get.php",
        "name": "date_timezone_get",
        "description": "Alias of DateTime::getTimezone"
    },
    {
        "href": "function.date-timezone-set.php",
        "name": "date_timezone_set",
        "description": "Alias of DateTime::setTimezone"
    },
    {
        "href": "function.date-time-set.php",
        "name": "date_time_set",
        "description": "Alias of DateTime::setTime"
    },
    {
        "href": "function.db2-autocommit.php",
        "name": "db2_autocommit",
        "description": "Returns or sets the AUTOCOMMIT state for a database connection"
    },
    {
        "href": "function.db2-bind-param.php",
        "name": "db2_bind_param",
        "description": "Binds a PHP variable to an SQL statement parameter"
    },
    {
        "href": "function.db2-client-info.php",
        "name": "db2_client_info",
        "description": "Returns an object with properties that describe the DB2 database client"
    },
    {
        "href": "function.db2-close.php",
        "name": "db2_close",
        "description": "Closes a database connection"
    },
    {
        "href": "function.db2-columns.php",
        "name": "db2_columns",
        "description": "Returns a result set listing the columns and associated metadata for a table"
    },
    {
        "href": "function.db2-column-privileges.php",
        "name": "db2_column_privileges",
        "description": "Returns a result set listing the columns and associated privileges for a table"
    },
    {
        "href": "function.db2-commit.php",
        "name": "db2_commit",
        "description": "Commits a transaction"
    },
    {
        "href": "function.db2-connect.php",
        "name": "db2_connect",
        "description": "Returns a connection to a database"
    },
    {
        "href": "function.db2-conn-error.php",
        "name": "db2_conn_error",
        "description": "Returns a string containing the SQLSTATE returned by the last connection attempt"
    },
    {
        "href": "function.db2-conn-errormsg.php",
        "name": "db2_conn_errormsg",
        "description": "Returns the last connection error message and SQLCODE value"
    },
    {
        "href": "function.db2-cursor-type.php",
        "name": "db2_cursor_type",
        "description": "Returns the cursor type used by a statement resource"
    },
    {
        "href": "function.db2-escape-string.php",
        "name": "db2_escape_string",
        "description": "Used to escape certain characters"
    },
    {
        "href": "function.db2-exec.php",
        "name": "db2_exec",
        "description": "Executes an SQL statement directly"
    },
    {
        "href": "function.db2-execute.php",
        "name": "db2_execute",
        "description": "Executes a prepared SQL statement"
    },
    {
        "href": "function.db2-fetch-array.php",
        "name": "db2_fetch_array",
        "description": "Returns an array, indexed by column position, representing a row in a result set"
    },
    {
        "href": "function.db2-fetch-assoc.php",
        "name": "db2_fetch_assoc",
        "description": "Returns an array, indexed by column name, representing a row in a result set"
    },
    {
        "href": "function.db2-fetch-both.php",
        "name": "db2_fetch_both",
        "description": "Returns an array, indexed by both column name and position, representing a row in a result set"
    },
    {
        "href": "function.db2-fetch-object.php",
        "name": "db2_fetch_object",
        "description": "Returns an object with properties representing columns in the fetched row"
    },
    {
        "href": "function.db2-fetch-row.php",
        "name": "db2_fetch_row",
        "description": "Sets the result set pointer to the next row or requested row"
    },
    {
        "href": "function.db2-field-display-size.php",
        "name": "db2_field_display_size",
        "description": "Returns the maximum number of bytes required to display a column"
    },
    {
        "href": "function.db2-field-name.php",
        "name": "db2_field_name",
        "description": "Returns the name of the column in the result set"
    },
    {
        "href": "function.db2-field-num.php",
        "name": "db2_field_num",
        "description": "Returns the position of the named column in a result set"
    },
    {
        "href": "function.db2-field-precision.php",
        "name": "db2_field_precision",
        "description": "Returns the precision of the indicated column in a result set"
    },
    {
        "href": "function.db2-field-scale.php",
        "name": "db2_field_scale",
        "description": "Returns the scale of the indicated column in a result set"
    },
    {
        "href": "function.db2-field-type.php",
        "name": "db2_field_type",
        "description": "Returns the data type of the indicated column in a result set"
    },
    {
        "href": "function.db2-field-width.php",
        "name": "db2_field_width",
        "description": "Returns the width of the current value of the indicated column in a result set"
    },
    {
        "href": "function.db2-foreign-keys.php",
        "name": "db2_foreign_keys",
        "description": "Returns a result set listing the foreign keys for a table"
    },
    {
        "href": "function.db2-free-result.php",
        "name": "db2_free_result",
        "description": "Frees resources associated with a result set"
    },
    {
        "href": "function.db2-free-stmt.php",
        "name": "db2_free_stmt",
        "description": "Frees resources associated with the indicated statement resource"
    },
    {
        "href": "function.db2-get-option.php",
        "name": "db2_get_option",
        "description": "Retrieves an option value for a statement resource or a connection resource"
    },
    {
        "href": "function.db2-last-insert-id.php",
        "name": "db2_last_insert_id",
        "description": "Returns the auto generated ID of the last insert query that successfully   executed on this connection"
    },
    {
        "href": "function.db2-lob-read.php",
        "name": "db2_lob_read",
        "description": "Gets a user defined size of LOB files with each invocation"
    },
    {
        "href": "function.db2-next-result.php",
        "name": "db2_next_result",
        "description": "Requests the next result set from a stored procedure"
    },
    {
        "href": "function.db2-num-fields.php",
        "name": "db2_num_fields",
        "description": "Returns the number of fields contained in a result set"
    },
    {
        "href": "function.db2-num-rows.php",
        "name": "db2_num_rows",
        "description": "Returns the number of rows affected by an SQL statement"
    },
    {
        "href": "function.db2-pclose.php",
        "name": "db2_pclose",
        "description": "Closes a persistent database connection"
    },
    {
        "href": "function.db2-pconnect.php",
        "name": "db2_pconnect",
        "description": "Returns a persistent connection to a database"
    },
    {
        "href": "function.db2-prepare.php",
        "name": "db2_prepare",
        "description": "Prepares an SQL statement to be executed"
    },
    {
        "href": "function.db2-primary-keys.php",
        "name": "db2_primary_keys",
        "description": "Returns a result set listing primary keys for a table"
    },
    {
        "href": "function.db2-procedures.php",
        "name": "db2_procedures",
        "description": "Returns a result set listing the stored procedures registered in a database"
    },
    {
        "href": "function.db2-procedure-columns.php",
        "name": "db2_procedure_columns",
        "description": "Returns a result set listing stored procedure parameters"
    },
    {
        "href": "function.db2-result.php",
        "name": "db2_result",
        "description": "Returns a single column from a row in the result set"
    },
    {
        "href": "function.db2-rollback.php",
        "name": "db2_rollback",
        "description": "Rolls back a transaction"
    },
    {
        "href": "function.db2-server-info.php",
        "name": "db2_server_info",
        "description": "Returns an object with properties that describe the DB2 database server"
    },
    {
        "href": "function.db2-set-option.php",
        "name": "db2_set_option",
        "description": "Set options for connection or statement resources"
    },
    {
        "href": "function.db2-special-columns.php",
        "name": "db2_special_columns",
        "description": "Returns a result set listing the unique row identifier columns for a table"
    },
    {
        "href": "function.db2-statistics.php",
        "name": "db2_statistics",
        "description": "Returns a result set listing the index and statistics for a table"
    },
    {
        "href": "function.db2-stmt-error.php",
        "name": "db2_stmt_error",
        "description": "Returns a string containing the SQLSTATE returned by an SQL statement"
    },
    {
        "href": "function.db2-stmt-errormsg.php",
        "name": "db2_stmt_errormsg",
        "description": "Returns a string containing the last SQL statement error message"
    },
    {
        "href": "function.db2-tables.php",
        "name": "db2_tables",
        "description": "Returns a result set listing the tables and associated metadata in a database"
    },
    {
        "href": "function.db2-table-privileges.php",
        "name": "db2_table_privileges",
        "description": "Returns a result set listing the tables and associated privileges in a database"
    },
    {
        "href": "function.dbase-add-record.php",
        "name": "dbase_add_record",
        "description": "Adds a record to a database"
    },
    {
        "href": "function.dbase-close.php",
        "name": "dbase_close",
        "description": "Closes a database"
    },
    {
        "href": "function.dbase-create.php",
        "name": "dbase_create",
        "description": "Creates a database"
    },
    {
        "href": "function.dbase-delete-record.php",
        "name": "dbase_delete_record",
        "description": "Deletes a record from a database"
    },
    {
        "href": "function.dbase-get-header-info.php",
        "name": "dbase_get_header_info",
        "description": "Gets the header info of a database"
    },
    {
        "href": "function.dbase-get-record.php",
        "name": "dbase_get_record",
        "description": "Gets a record from a database as an indexed array"
    },
    {
        "href": "function.dbase-get-record-with-names.php",
        "name": "dbase_get_record_with_names",
        "description": "Gets a record from a database as an associative array"
    },
    {
        "href": "function.dbase-numfields.php",
        "name": "dbase_numfields",
        "description": "Gets the number of fields of a database"
    },
    {
        "href": "function.dbase-numrecords.php",
        "name": "dbase_numrecords",
        "description": "Gets the number of records in a database"
    },
    {
        "href": "function.dbase-open.php",
        "name": "dbase_open",
        "description": "Opens a database"
    },
    {
        "href": "function.dbase-pack.php",
        "name": "dbase_pack",
        "description": "Packs a database"
    },
    {
        "href": "function.dbase-replace-record.php",
        "name": "dbase_replace_record",
        "description": "Replaces a record in a database"
    },
    {
        "href": "function.dba-close.php",
        "name": "dba_close",
        "description": "Close a DBA database"
    },
    {
        "href": "function.dba-delete.php",
        "name": "dba_delete",
        "description": "Delete DBA entry specified by key"
    },
    {
        "href": "function.dba-exists.php",
        "name": "dba_exists",
        "description": "Check whether key exists"
    },
    {
        "href": "function.dba-fetch.php",
        "name": "dba_fetch",
        "description": "Fetch data specified by key"
    },
    {
        "href": "function.dba-firstkey.php",
        "name": "dba_firstkey",
        "description": "Fetch first key"
    },
    {
        "href": "function.dba-handlers.php",
        "name": "dba_handlers",
        "description": "List all the handlers available"
    },
    {
        "href": "function.dba-insert.php",
        "name": "dba_insert",
        "description": "Insert entry"
    },
    {
        "href": "function.dba-key-split.php",
        "name": "dba_key_split",
        "description": "Splits a key in string representation into array representation"
    },
    {
        "href": "function.dba-list.php",
        "name": "dba_list",
        "description": "List all open database files"
    },
    {
        "href": "function.dba-nextkey.php",
        "name": "dba_nextkey",
        "description": "Fetch next key"
    },
    {
        "href": "function.dba-open.php",
        "name": "dba_open",
        "description": "Open database"
    },
    {
        "href": "function.dba-optimize.php",
        "name": "dba_optimize",
        "description": "Optimize database"
    },
    {
        "href": "function.dba-popen.php",
        "name": "dba_popen",
        "description": "Open database persistently"
    },
    {
        "href": "function.dba-replace.php",
        "name": "dba_replace",
        "description": "Replace or insert entry"
    },
    {
        "href": "function.dba-sync.php",
        "name": "dba_sync",
        "description": "Synchronize database"
    },
    {
        "href": "function.dcgettext.php",
        "name": "dcgettext",
        "description": "Overrides the domain for a single lookup"
    },
    {
        "href": "function.dcngettext.php",
        "name": "dcngettext",
        "description": "Plural version of dcgettext"
    },
    {
        "href": "function.debug-backtrace.php",
        "name": "debug_backtrace",
        "description": "Generates a backtrace"
    },
    {
        "href": "function.debug-print-backtrace.php",
        "name": "debug_print_backtrace",
        "description": "Prints a backtrace"
    },
    {
        "href": "function.debug-zval-dump.php",
        "name": "debug_zval_dump",
        "description": "Dumps a string representation of an internal zval structure to output"
    },
    {
        "href": "function.decbin.php",
        "name": "decbin",
        "description": "Decimal to binary"
    },
    {
        "href": "function.dechex.php",
        "name": "dechex",
        "description": "Decimal to hexadecimal"
    },
    {
        "href": "function.decoct.php",
        "name": "decoct",
        "description": "Decimal to octal"
    },
    {
        "href": "function.define.php",
        "name": "define",
        "description": "Defines a named constant"
    },
    {
        "href": "function.defined.php",
        "name": "defined",
        "description": "Checks whether a given named constant exists"
    },
    {
        "href": "function.deflate-add.php",
        "name": "deflate_add",
        "description": "Incrementally deflate data"
    },
    {
        "href": "function.deflate-init.php",
        "name": "deflate_init",
        "description": "Initialize an incremental deflate context"
    },
    {
        "href": "function.deg2rad.php",
        "name": "deg2rad",
        "description": "Converts the number in degrees to the radian equivalent"
    },
    {
        "href": "function.delete.php",
        "name": "delete",
        "description": "See unlink or unset"
    },
    {
        "href": "function.dgettext.php",
        "name": "dgettext",
        "description": "Override the current domain"
    },
    {
        "href": "function.die.php",
        "name": "die",
        "description": "Equivalent to exit"
    },
    {
        "href": "function.dio-close.php",
        "name": "dio_close",
        "description": "Closes the file descriptor given by fd"
    },
    {
        "href": "function.dio-fcntl.php",
        "name": "dio_fcntl",
        "description": "Performs a c library fcntl on fd"
    },
    {
        "href": "function.dio-open.php",
        "name": "dio_open",
        "description": "Opens a file (creating it if necessary) at a lower level than the   C library input/ouput stream functions allow"
    },
    {
        "href": "function.dio-read.php",
        "name": "dio_read",
        "description": "Reads bytes from a file descriptor"
    },
    {
        "href": "function.dio-seek.php",
        "name": "dio_seek",
        "description": "Seeks to pos on fd from whence"
    },
    {
        "href": "function.dio-stat.php",
        "name": "dio_stat",
        "description": "Gets stat information about the file descriptor fd"
    },
    {
        "href": "function.dio-tcsetattr.php",
        "name": "dio_tcsetattr",
        "description": "Sets terminal attributes and baud rate for a serial port"
    },
    {
        "href": "function.dio-truncate.php",
        "name": "dio_truncate",
        "description": "Truncates file descriptor fd to offset bytes"
    },
    {
        "href": "function.dio-write.php",
        "name": "dio_write",
        "description": "Writes data to fd with optional truncation at length"
    },
    {
        "href": "function.dir.php",
        "name": "dir",
        "description": "Return an instance of the Directory class"
    },
    {
        "href": "directory.close.php",
        "name": "Directory::close",
        "description": "Close directory handle"
    },
    {
        "href": "directory.read.php",
        "name": "Directory::read",
        "description": "Read entry from directory handle"
    },
    {
        "href": "directory.rewind.php",
        "name": "Directory::rewind",
        "description": "Rewind directory handle"
    },
    {
        "href": "directoryiterator.current.php",
        "name": "DirectoryIterator::current",
        "description": "Return the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getatime.php",
        "name": "DirectoryIterator::getATime",
        "description": "Get last access time of the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getbasename.php",
        "name": "DirectoryIterator::getBasename",
        "description": "Get base name of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getctime.php",
        "name": "DirectoryIterator::getCTime",
        "description": "Get inode change time of the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getextension.php",
        "name": "DirectoryIterator::getExtension",
        "description": "Gets the file extension"
    },
    {
        "href": "directoryiterator.getfilename.php",
        "name": "DirectoryIterator::getFilename",
        "description": "Return file name of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getgroup.php",
        "name": "DirectoryIterator::getGroup",
        "description": "Get group for the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getinode.php",
        "name": "DirectoryIterator::getInode",
        "description": "Get inode for the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getmtime.php",
        "name": "DirectoryIterator::getMTime",
        "description": "Get last modification time of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getowner.php",
        "name": "DirectoryIterator::getOwner",
        "description": "Get owner of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getpath.php",
        "name": "DirectoryIterator::getPath",
        "description": "Get path of current Iterator item without filename"
    },
    {
        "href": "directoryiterator.getpathname.php",
        "name": "DirectoryIterator::getPathname",
        "description": "Return path and file name of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getperms.php",
        "name": "DirectoryIterator::getPerms",
        "description": "Get the permissions of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.getsize.php",
        "name": "DirectoryIterator::getSize",
        "description": "Get size of current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.gettype.php",
        "name": "DirectoryIterator::getType",
        "description": "Determine the type of the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.isdir.php",
        "name": "DirectoryIterator::isDir",
        "description": "Determine if current DirectoryIterator item is a directory"
    },
    {
        "href": "directoryiterator.isdot.php",
        "name": "DirectoryIterator::isDot",
        "description": "Determine if current DirectoryIterator item is '.' or '..'"
    },
    {
        "href": "directoryiterator.isexecutable.php",
        "name": "DirectoryIterator::isExecutable",
        "description": "Determine if current DirectoryIterator item is executable"
    },
    {
        "href": "directoryiterator.isfile.php",
        "name": "DirectoryIterator::isFile",
        "description": "Determine if current DirectoryIterator item is a regular file"
    },
    {
        "href": "directoryiterator.islink.php",
        "name": "DirectoryIterator::isLink",
        "description": "Determine if current DirectoryIterator item is a symbolic link"
    },
    {
        "href": "directoryiterator.isreadable.php",
        "name": "DirectoryIterator::isReadable",
        "description": "Determine if current DirectoryIterator item can be read"
    },
    {
        "href": "directoryiterator.iswritable.php",
        "name": "DirectoryIterator::isWritable",
        "description": "Determine if current DirectoryIterator item can be written to"
    },
    {
        "href": "directoryiterator.key.php",
        "name": "DirectoryIterator::key",
        "description": "Return the key for the current DirectoryIterator item"
    },
    {
        "href": "directoryiterator.next.php",
        "name": "DirectoryIterator::next",
        "description": "Move forward to next DirectoryIterator item"
    },
    {
        "href": "directoryiterator.rewind.php",
        "name": "DirectoryIterator::rewind",
        "description": "Rewind the DirectoryIterator back to the start"
    },
    {
        "href": "directoryiterator.seek.php",
        "name": "DirectoryIterator::seek",
        "description": "Seek to a DirectoryIterator item"
    },
    {
        "href": "directoryiterator.valid.php",
        "name": "DirectoryIterator::valid",
        "description": "Check whether current DirectoryIterator position is a valid file"
    },
    {
        "href": "directoryiterator.construct.php",
        "name": "DirectoryIterator::__construct",
        "description": "Constructs a new directory iterator from a path"
    },
    {
        "href": "directoryiterator.tostring.php",
        "name": "DirectoryIterator::__toString",
        "description": "Get file name as a string"
    },
    {
        "href": "function.dirname.php",
        "name": "dirname",
        "description": "Returns a parent directory's path"
    },
    {
        "href": "function.diskfreespace.php",
        "name": "diskfreespace",
        "description": "Alias of disk_free_space"
    },
    {
        "href": "function.disk-free-space.php",
        "name": "disk_free_space",
        "description": "Returns available space on filesystem or disk partition"
    },
    {
        "href": "function.disk-total-space.php",
        "name": "disk_total_space",
        "description": "Returns the total size of a filesystem or disk partition"
    },
    {
        "href": "function.dl.php",
        "name": "dl",
        "description": "Loads a PHP extension at runtime"
    },
    {
        "href": "function.dngettext.php",
        "name": "dngettext",
        "description": "Plural version of dgettext"
    },
    {
        "href": "function.dns-check-record.php",
        "name": "dns_check_record",
        "description": "Alias of checkdnsrr"
    },
    {
        "href": "function.dns-get-mx.php",
        "name": "dns_get_mx",
        "description": "Alias of getmxrr"
    },
    {
        "href": "function.dns-get-record.php",
        "name": "dns_get_record",
        "description": "Fetch DNS Resource Records associated with a hostname"
    },
    {
        "href": "mysql-xdevapi-docresult.fetchall.php",
        "name": "DocResult::fetchAll",
        "description": "Get all rows"
    },
    {
        "href": "mysql-xdevapi-docresult.fetchone.php",
        "name": "DocResult::fetchOne",
        "description": "Get one row"
    },
    {
        "href": "mysql-xdevapi-docresult.getwarnings.php",
        "name": "DocResult::getWarnings",
        "description": "Get warnings from last operation"
    },
    {
        "href": "mysql-xdevapi-docresult.getwarningscount.php",
        "name": "DocResult::getWarningsCount",
        "description": "Get warning count from last operation"
    },
    {
        "href": "mysql-xdevapi-docresult.construct.php",
        "name": "DocResult::__construct",
        "description": "DocResult constructor"
    },
    {
        "href": "domattr.isid.php",
        "name": "DOMAttr::isId",
        "description": "Checks if attribute is a defined ID"
    },
    {
        "href": "domattr.construct.php",
        "name": "DOMAttr::__construct",
        "description": "Creates a new DOMAttr object"
    },
    {
        "href": "domcdatasection.construct.php",
        "name": "DOMCdataSection::__construct",
        "description": "Constructs a new DOMCdataSection object"
    },
    {
        "href": "domcharacterdata.appenddata.php",
        "name": "DOMCharacterData::appendData",
        "description": "Append the string to the end of the character data of the node"
    },
    {
        "href": "domcharacterdata.deletedata.php",
        "name": "DOMCharacterData::deleteData",
        "description": "Remove a range of characters from the node"
    },
    {
        "href": "domcharacterdata.insertdata.php",
        "name": "DOMCharacterData::insertData",
        "description": "Insert a string at the specified 16-bit unit offset"
    },
    {
        "href": "domcharacterdata.replacedata.php",
        "name": "DOMCharacterData::replaceData",
        "description": "Replace a substring within the DOMCharacterData node"
    },
    {
        "href": "domcharacterdata.substringdata.php",
        "name": "DOMCharacterData::substringData",
        "description": "Extracts a range of data from the node"
    },
    {
        "href": "domchildnode.after.php",
        "name": "DOMChildNode::after",
        "description": "Adds nodes after the node"
    },
    {
        "href": "domchildnode.before.php",
        "name": "DOMChildNode::before",
        "description": "Adds nodes before the node"
    },
    {
        "href": "domchildnode.remove.php",
        "name": "DOMChildNode::remove",
        "description": "Removes the node"
    },
    {
        "href": "domchildnode.replacewith.php",
        "name": "DOMChildNode::replaceWith",
        "description": "Replaces the node with new nodes"
    },
    {
        "href": "domcomment.construct.php",
        "name": "DOMComment::__construct",
        "description": "Creates a new DOMComment object"
    },
    {
        "href": "domdocument.createattribute.php",
        "name": "DOMDocument::createAttribute",
        "description": "Create new attribute"
    },
    {
        "href": "domdocument.createattributens.php",
        "name": "DOMDocument::createAttributeNS",
        "description": "Create new attribute node with an associated namespace"
    },
    {
        "href": "domdocument.createcdatasection.php",
        "name": "DOMDocument::createCDATASection",
        "description": "Create new cdata node"
    },
    {
        "href": "domdocument.createcomment.php",
        "name": "DOMDocument::createComment",
        "description": "Create new comment node"
    },
    {
        "href": "domdocument.createdocumentfragment.php",
        "name": "DOMDocument::createDocumentFragment",
        "description": "Create new document fragment"
    },
    {
        "href": "domdocument.createelement.php",
        "name": "DOMDocument::createElement",
        "description": "Create new element node"
    },
    {
        "href": "domdocument.createelementns.php",
        "name": "DOMDocument::createElementNS",
        "description": "Create new element node with an associated namespace"
    },
    {
        "href": "domdocument.createentityreference.php",
        "name": "DOMDocument::createEntityReference",
        "description": "Create new entity reference node"
    },
    {
        "href": "domdocument.createprocessinginstruction.php",
        "name": "DOMDocument::createProcessingInstruction",
        "description": "Creates new PI node"
    },
    {
        "href": "domdocument.createtextnode.php",
        "name": "DOMDocument::createTextNode",
        "description": "Create new text node"
    },
    {
        "href": "domdocument.getelementbyid.php",
        "name": "DOMDocument::getElementById",
        "description": "Searches for an element with a certain id"
    },
    {
        "href": "domdocument.getelementsbytagname.php",
        "name": "DOMDocument::getElementsByTagName",
        "description": "Searches for all elements with given local tag name"
    },
    {
        "href": "domdocument.getelementsbytagnamens.php",
        "name": "DOMDocument::getElementsByTagNameNS",
        "description": "Searches for all elements with given tag name in specified namespace"
    },
    {
        "href": "domdocument.importnode.php",
        "name": "DOMDocument::importNode",
        "description": "Import node into current document"
    },
    {
        "href": "domdocument.load.php",
        "name": "DOMDocument::load",
        "description": "Load XML from a file"
    },
    {
        "href": "domdocument.loadhtml.php",
        "name": "DOMDocument::loadHTML",
        "description": "Load HTML from a string"
    },
    {
        "href": "domdocument.loadhtmlfile.php",
        "name": "DOMDocument::loadHTMLFile",
        "description": "Load HTML from a file"
    },
    {
        "href": "domdocument.loadxml.php",
        "name": "DOMDocument::loadXML",
        "description": "Load XML from a string"
    },
    {
        "href": "domdocument.normalizedocument.php",
        "name": "DOMDocument::normalizeDocument",
        "description": "Normalizes the document"
    },
    {
        "href": "domdocument.registernodeclass.php",
        "name": "DOMDocument::registerNodeClass",
        "description": "Register extended class used to create base node type"
    },
    {
        "href": "domdocument.relaxngvalidate.php",
        "name": "DOMDocument::relaxNGValidate",
        "description": "Performs relaxNG validation on the document"
    },
    {
        "href": "domdocument.relaxngvalidatesource.php",
        "name": "DOMDocument::relaxNGValidateSource",
        "description": "Performs relaxNG validation on the document"
    },
    {
        "href": "domdocument.save.php",
        "name": "DOMDocument::save",
        "description": "Dumps the internal XML tree back into a file"
    },
    {
        "href": "domdocument.savehtml.php",
        "name": "DOMDocument::saveHTML",
        "description": "Dumps the internal document into a string using HTML formatting"
    },
    {
        "href": "domdocument.savehtmlfile.php",
        "name": "DOMDocument::saveHTMLFile",
        "description": "Dumps the internal document into a file using HTML formatting"
    },
    {
        "href": "domdocument.savexml.php",
        "name": "DOMDocument::saveXML",
        "description": "Dumps the internal XML tree back into a string"
    },
    {
        "href": "domdocument.schemavalidate.php",
        "name": "DOMDocument::schemaValidate",
        "description": "Validates a document based on a schema. Only XML Schema 1.0 is supported."
    },
    {
        "href": "domdocument.schemavalidatesource.php",
        "name": "DOMDocument::schemaValidateSource",
        "description": "Validates a document based on a schema"
    },
    {
        "href": "domdocument.validate.php",
        "name": "DOMDocument::validate",
        "description": "Validates the document based on its DTD"
    },
    {
        "href": "domdocument.xinclude.php",
        "name": "DOMDocument::xinclude",
        "description": "Substitutes XIncludes in a DOMDocument Object"
    },
    {
        "href": "domdocument.construct.php",
        "name": "DOMDocument::__construct",
        "description": "Creates a new DOMDocument object"
    },
    {
        "href": "domdocumentfragment.appendxml.php",
        "name": "DOMDocumentFragment::appendXML",
        "description": "Append raw XML data"
    },
    {
        "href": "domdocumentfragment.construct.php",
        "name": "DOMDocumentFragment::__construct",
        "description": "Constructs a DOMDocumentFragment object"
    },
    {
        "href": "domelement.getattribute.php",
        "name": "DOMElement::getAttribute",
        "description": "Returns value of attribute"
    },
    {
        "href": "domelement.getattributenode.php",
        "name": "DOMElement::getAttributeNode",
        "description": "Returns attribute node"
    },
    {
        "href": "domelement.getattributenodens.php",
        "name": "DOMElement::getAttributeNodeNS",
        "description": "Returns attribute node"
    },
    {
        "href": "domelement.getattributens.php",
        "name": "DOMElement::getAttributeNS",
        "description": "Returns value of attribute"
    },
    {
        "href": "domelement.getelementsbytagname.php",
        "name": "DOMElement::getElementsByTagName",
        "description": "Gets elements by tagname"
    },
    {
        "href": "domelement.getelementsbytagnamens.php",
        "name": "DOMElement::getElementsByTagNameNS",
        "description": "Get elements by namespaceURI and localName"
    },
    {
        "href": "domelement.hasattribute.php",
        "name": "DOMElement::hasAttribute",
        "description": "Checks to see if attribute exists"
    },
    {
        "href": "domelement.hasattributens.php",
        "name": "DOMElement::hasAttributeNS",
        "description": "Checks to see if attribute exists"
    },
    {
        "href": "domelement.removeattribute.php",
        "name": "DOMElement::removeAttribute",
        "description": "Removes attribute"
    },
    {
        "href": "domelement.removeattributenode.php",
        "name": "DOMElement::removeAttributeNode",
        "description": "Removes attribute"
    },
    {
        "href": "domelement.removeattributens.php",
        "name": "DOMElement::removeAttributeNS",
        "description": "Removes attribute"
    },
    {
        "href": "domelement.setattribute.php",
        "name": "DOMElement::setAttribute",
        "description": "Adds new or modifies existing attribute"
    },
    {
        "href": "domelement.setattributenode.php",
        "name": "DOMElement::setAttributeNode",
        "description": "Adds new attribute node to element"
    },
    {
        "href": "domelement.setattributenodens.php",
        "name": "DOMElement::setAttributeNodeNS",
        "description": "Adds new attribute node to element"
    },
    {
        "href": "domelement.setattributens.php",
        "name": "DOMElement::setAttributeNS",
        "description": "Adds new attribute"
    },
    {
        "href": "domelement.setidattribute.php",
        "name": "DOMElement::setIdAttribute",
        "description": "Declares the attribute specified by name to be of type ID"
    },
    {
        "href": "domelement.setidattributenode.php",
        "name": "DOMElement::setIdAttributeNode",
        "description": "Declares the attribute specified by node to be of type ID"
    },
    {
        "href": "domelement.setidattributens.php",
        "name": "DOMElement::setIdAttributeNS",
        "description": "Declares the attribute specified by local name and namespace URI to be of type ID"
    },
    {
        "href": "domelement.construct.php",
        "name": "DOMElement::__construct",
        "description": "Creates a new DOMElement object"
    },
    {
        "href": "domentityreference.construct.php",
        "name": "DOMEntityReference::__construct",
        "description": "Creates a new DOMEntityReference object"
    },
    {
        "href": "domimplementation.createdocument.php",
        "name": "DOMImplementation::createDocument",
        "description": "Creates a DOMDocument object of the specified type with its document element"
    },
    {
        "href": "domimplementation.createdocumenttype.php",
        "name": "DOMImplementation::createDocumentType",
        "description": "Creates an empty DOMDocumentType object"
    },
    {
        "href": "domimplementation.hasfeature.php",
        "name": "DOMImplementation::hasFeature",
        "description": "Test if the DOM implementation implements a specific feature"
    },
    {
        "href": "domimplementation.construct.php",
        "name": "DOMImplementation::__construct",
        "description": "Creates a new DOMImplementation object"
    },
    {
        "href": "domnamednodemap.count.php",
        "name": "DOMNamedNodeMap::count",
        "description": "Get number of nodes in the map"
    },
    {
        "href": "domnamednodemap.getnameditem.php",
        "name": "DOMNamedNodeMap::getNamedItem",
        "description": "Retrieves a node specified by name"
    },
    {
        "href": "domnamednodemap.getnameditemns.php",
        "name": "DOMNamedNodeMap::getNamedItemNS",
        "description": "Retrieves a node specified by local name and namespace URI"
    },
    {
        "href": "domnamednodemap.item.php",
        "name": "DOMNamedNodeMap::item",
        "description": "Retrieves a node specified by index"
    },
    {
        "href": "domnode.appendchild.php",
        "name": "DOMNode::appendChild",
        "description": "Adds new child at the end of the children"
    },
    {
        "href": "domnode.c14n.php",
        "name": "DOMNode::C14N",
        "description": "Canonicalize nodes to a string"
    },
    {
        "href": "domnode.c14nfile.php",
        "name": "DOMNode::C14NFile",
        "description": "Canonicalize nodes to a file"
    },
    {
        "href": "domnode.clonenode.php",
        "name": "DOMNode::cloneNode",
        "description": "Clones a node"
    },
    {
        "href": "domnode.getlineno.php",
        "name": "DOMNode::getLineNo",
        "description": "Get line number for a node"
    },
    {
        "href": "domnode.getnodepath.php",
        "name": "DOMNode::getNodePath",
        "description": "Get an XPath for a node"
    },
    {
        "href": "domnode.hasattributes.php",
        "name": "DOMNode::hasAttributes",
        "description": "Checks if node has attributes"
    },
    {
        "href": "domnode.haschildnodes.php",
        "name": "DOMNode::hasChildNodes",
        "description": "Checks if node has children"
    },
    {
        "href": "domnode.insertbefore.php",
        "name": "DOMNode::insertBefore",
        "description": "Adds a new child before a reference node"
    },
    {
        "href": "domnode.isdefaultnamespace.php",
        "name": "DOMNode::isDefaultNamespace",
        "description": "Checks if the specified namespaceURI is the default namespace or not"
    },
    {
        "href": "domnode.issamenode.php",
        "name": "DOMNode::isSameNode",
        "description": "Indicates if two nodes are the same node"
    },
    {
        "href": "domnode.issupported.php",
        "name": "DOMNode::isSupported",
        "description": "Checks if feature is supported for specified version"
    },
    {
        "href": "domnode.lookupnamespaceuri.php",
        "name": "DOMNode::lookupNamespaceUri",
        "description": "Gets the namespace URI of the node based on the prefix"
    },
    {
        "href": "domnode.lookupprefix.php",
        "name": "DOMNode::lookupPrefix",
        "description": "Gets the namespace prefix of the node based on the namespace URI"
    },
    {
        "href": "domnode.normalize.php",
        "name": "DOMNode::normalize",
        "description": "Normalizes the node"
    },
    {
        "href": "domnode.removechild.php",
        "name": "DOMNode::removeChild",
        "description": "Removes child from list of children"
    },
    {
        "href": "domnode.replacechild.php",
        "name": "DOMNode::replaceChild",
        "description": "Replaces a child"
    },
    {
        "href": "domnodelist.count.php",
        "name": "DOMNodeList::count",
        "description": "Get number of nodes in the list"
    },
    {
        "href": "domnodelist.item.php",
        "name": "DOMNodeList::item",
        "description": "Retrieves a node specified by index"
    },
    {
        "href": "domparentnode.append.php",
        "name": "DOMParentNode::append",
        "description": "Appends nodes after the last child node"
    },
    {
        "href": "domparentnode.prepend.php",
        "name": "DOMParentNode::prepend",
        "description": "Prepends nodes before the first child node"
    },
    {
        "href": "domprocessinginstruction.construct.php",
        "name": "DOMProcessingInstruction::__construct",
        "description": "Creates a new DOMProcessingInstruction object"
    },
    {
        "href": "domtext.iselementcontentwhitespace.php",
        "name": "DOMText::isElementContentWhitespace",
        "description": "Returns whether this text node contains whitespace in element content"
    },
    {
        "href": "domtext.iswhitespaceinelementcontent.php",
        "name": "DOMText::isWhitespaceInElementContent",
        "description": "Indicates whether this text node contains whitespace"
    },
    {
        "href": "domtext.splittext.php",
        "name": "DOMText::splitText",
        "description": "Breaks this node into two nodes at the specified offset"
    },
    {
        "href": "domtext.construct.php",
        "name": "DOMText::__construct",
        "description": "Creates a new DOMText object"
    },
    {
        "href": "domxpath.evaluate.php",
        "name": "DOMXPath::evaluate",
        "description": "Evaluates the given XPath expression and returns a typed result if possible"
    },
    {
        "href": "domxpath.query.php",
        "name": "DOMXPath::query",
        "description": "Evaluates the given XPath expression"
    },
    {
        "href": "domxpath.registernamespace.php",
        "name": "DOMXPath::registerNamespace",
        "description": "Registers the namespace with the DOMXPath object"
    },
    {
        "href": "domxpath.registerphpfunctions.php",
        "name": "DOMXPath::registerPhpFunctions",
        "description": "Register PHP functions as XPath functions"
    },
    {
        "href": "domxpath.construct.php",
        "name": "DOMXPath::__construct",
        "description": "Creates a new DOMXPath object"
    },
    {
        "href": "function.dom-import-simplexml.php",
        "name": "dom_import_simplexml",
        "description": "Gets a DOMElement object from a   SimpleXMLElement object"
    },
    {
        "href": "dotnet.construct.php",
        "name": "dotnet::__construct",
        "description": "dotnet class constructor"
    },
    {
        "href": "function.doubleval.php",
        "name": "doubleval",
        "description": "Alias of floatval"
    },
    {
        "href": "ds-collection.clear.php",
        "name": "Ds\\Collection::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-collection.copy.php",
        "name": "Ds\\Collection::copy",
        "description": "Returns a shallow copy of the collection"
    },
    {
        "href": "ds-collection.isempty.php",
        "name": "Ds\\Collection::isEmpty",
        "description": "Returns whether the collection is empty"
    },
    {
        "href": "ds-collection.toarray.php",
        "name": "Ds\\Collection::toArray",
        "description": "Converts the collection to an array"
    },
    {
        "href": "ds-deque.allocate.php",
        "name": "Ds\\Deque::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-deque.apply.php",
        "name": "Ds\\Deque::apply",
        "description": "Updates all values by applying a callback function to each value"
    },
    {
        "href": "ds-deque.capacity.php",
        "name": "Ds\\Deque::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-deque.clear.php",
        "name": "Ds\\Deque::clear",
        "description": "Removes all values from the deque"
    },
    {
        "href": "ds-deque.contains.php",
        "name": "Ds\\Deque::contains",
        "description": "Determines if the deque contains given values"
    },
    {
        "href": "ds-deque.copy.php",
        "name": "Ds\\Deque::copy",
        "description": "Returns a shallow copy of the deque"
    },
    {
        "href": "ds-deque.count.php",
        "name": "Ds\\Deque::count",
        "description": "Returns the number of values in the collection"
    },
    {
        "href": "ds-deque.filter.php",
        "name": "Ds\\Deque::filter",
        "description": "Creates a new deque using a callable to    determine which values to include"
    },
    {
        "href": "ds-deque.find.php",
        "name": "Ds\\Deque::find",
        "description": "Attempts to find a value's index"
    },
    {
        "href": "ds-deque.first.php",
        "name": "Ds\\Deque::first",
        "description": "Returns the first value in the deque"
    },
    {
        "href": "ds-deque.get.php",
        "name": "Ds\\Deque::get",
        "description": "Returns the value at a given index"
    },
    {
        "href": "ds-deque.insert.php",
        "name": "Ds\\Deque::insert",
        "description": "Inserts values at a given index"
    },
    {
        "href": "ds-deque.isempty.php",
        "name": "Ds\\Deque::isEmpty",
        "description": "Returns whether the deque is empty"
    },
    {
        "href": "ds-deque.join.php",
        "name": "Ds\\Deque::join",
        "description": "Joins all values together as a string"
    },
    {
        "href": "ds-deque.jsonserialize.php",
        "name": "Ds\\Deque::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-deque.last.php",
        "name": "Ds\\Deque::last",
        "description": "Returns the last value"
    },
    {
        "href": "ds-deque.map.php",
        "name": "Ds\\Deque::map",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "href": "ds-deque.merge.php",
        "name": "Ds\\Deque::merge",
        "description": "Returns the result of adding all given values to the deque"
    },
    {
        "href": "ds-deque.pop.php",
        "name": "Ds\\Deque::pop",
        "description": "Removes and returns the last value"
    },
    {
        "href": "ds-deque.push.php",
        "name": "Ds\\Deque::push",
        "description": "Adds values to the end of the deque"
    },
    {
        "href": "ds-deque.reduce.php",
        "name": "Ds\\Deque::reduce",
        "description": "Reduces the deque to a single value using a callback function"
    },
    {
        "href": "ds-deque.remove.php",
        "name": "Ds\\Deque::remove",
        "description": "Removes and returns a value by index"
    },
    {
        "href": "ds-deque.reverse.php",
        "name": "Ds\\Deque::reverse",
        "description": "Reverses the deque in-place"
    },
    {
        "href": "ds-deque.reversed.php",
        "name": "Ds\\Deque::reversed",
        "description": "Returns a reversed copy"
    },
    {
        "href": "ds-deque.rotate.php",
        "name": "Ds\\Deque::rotate",
        "description": "Rotates the deque by a given number of rotations"
    },
    {
        "href": "ds-deque.set.php",
        "name": "Ds\\Deque::set",
        "description": "Updates a value at a given index"
    },
    {
        "href": "ds-deque.shift.php",
        "name": "Ds\\Deque::shift",
        "description": "Removes and returns the first value"
    },
    {
        "href": "ds-deque.slice.php",
        "name": "Ds\\Deque::slice",
        "description": "Returns a sub-deque of a given range"
    },
    {
        "href": "ds-deque.sort.php",
        "name": "Ds\\Deque::sort",
        "description": "Sorts the deque in-place"
    },
    {
        "href": "ds-deque.sorted.php",
        "name": "Ds\\Deque::sorted",
        "description": "Returns a sorted copy"
    },
    {
        "href": "ds-deque.sum.php",
        "name": "Ds\\Deque::sum",
        "description": "Returns the sum of all values in the deque"
    },
    {
        "href": "ds-deque.toarray.php",
        "name": "Ds\\Deque::toArray",
        "description": "Converts the deque to an array"
    },
    {
        "href": "ds-deque.unshift.php",
        "name": "Ds\\Deque::unshift",
        "description": "Adds values to the front of the deque"
    },
    {
        "href": "ds-deque.construct.php",
        "name": "Ds\\Deque::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-hashable.equals.php",
        "name": "Ds\\Hashable::equals",
        "description": "Determines whether an object is equal to the current instance"
    },
    {
        "href": "ds-hashable.hash.php",
        "name": "Ds\\Hashable::hash",
        "description": "Returns a scalar value to be used as a hash value"
    },
    {
        "href": "ds-map.allocate.php",
        "name": "Ds\\Map::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-map.apply.php",
        "name": "Ds\\Map::apply",
        "description": "Updates all values by applying a callback function to each value"
    },
    {
        "href": "ds-map.capacity.php",
        "name": "Ds\\Map::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-map.clear.php",
        "name": "Ds\\Map::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-map.copy.php",
        "name": "Ds\\Map::copy",
        "description": "Returns a shallow copy of the map"
    },
    {
        "href": "ds-map.count.php",
        "name": "Ds\\Map::count",
        "description": "Returns the number of values in the map"
    },
    {
        "href": "ds-map.diff.php",
        "name": "Ds\\Map::diff",
        "description": "Creates a new map using keys that aren't in another map"
    },
    {
        "href": "ds-map.filter.php",
        "name": "Ds\\Map::filter",
        "description": "Creates a new map using a callable to determine which pairs to include"
    },
    {
        "href": "ds-map.first.php",
        "name": "Ds\\Map::first",
        "description": "Returns the first pair in the map"
    },
    {
        "href": "ds-map.get.php",
        "name": "Ds\\Map::get",
        "description": "Returns the value for a given key"
    },
    {
        "href": "ds-map.haskey.php",
        "name": "Ds\\Map::hasKey",
        "description": "Determines whether the map contains a given key"
    },
    {
        "href": "ds-map.hasvalue.php",
        "name": "Ds\\Map::hasValue",
        "description": "Determines whether the map contains a given value"
    },
    {
        "href": "ds-map.intersect.php",
        "name": "Ds\\Map::intersect",
        "description": "Creates a new map by intersecting keys with another map"
    },
    {
        "href": "ds-map.isempty.php",
        "name": "Ds\\Map::isEmpty",
        "description": "Returns whether the map is empty"
    },
    {
        "href": "ds-map.jsonserialize.php",
        "name": "Ds\\Map::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-map.keys.php",
        "name": "Ds\\Map::keys",
        "description": "Returns a set of the map's keys"
    },
    {
        "href": "ds-map.ksort.php",
        "name": "Ds\\Map::ksort",
        "description": "Sorts the map in-place by key"
    },
    {
        "href": "ds-map.ksorted.php",
        "name": "Ds\\Map::ksorted",
        "description": "Returns a copy, sorted by key"
    },
    {
        "href": "ds-map.last.php",
        "name": "Ds\\Map::last",
        "description": "Returns the last pair of the map"
    },
    {
        "href": "ds-map.map.php",
        "name": "Ds\\Map::map",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "href": "ds-map.merge.php",
        "name": "Ds\\Map::merge",
        "description": "Returns the result of adding all given associations"
    },
    {
        "href": "ds-map.pairs.php",
        "name": "Ds\\Map::pairs",
        "description": "Returns a sequence containing all the pairs of the map"
    },
    {
        "href": "ds-map.put.php",
        "name": "Ds\\Map::put",
        "description": "Associates a key with a value"
    },
    {
        "href": "ds-map.putall.php",
        "name": "Ds\\Map::putAll",
        "description": "Associates all key-value pairs of a traversable object or array"
    },
    {
        "href": "ds-map.reduce.php",
        "name": "Ds\\Map::reduce",
        "description": "Reduces the map to a single value using a callback function"
    },
    {
        "href": "ds-map.remove.php",
        "name": "Ds\\Map::remove",
        "description": "Removes and returns a value by key"
    },
    {
        "href": "ds-map.reverse.php",
        "name": "Ds\\Map::reverse",
        "description": "Reverses the map in-place"
    },
    {
        "href": "ds-map.reversed.php",
        "name": "Ds\\Map::reversed",
        "description": "Returns a reversed copy"
    },
    {
        "href": "ds-map.skip.php",
        "name": "Ds\\Map::skip",
        "description": "Returns the pair at a given positional index"
    },
    {
        "href": "ds-map.slice.php",
        "name": "Ds\\Map::slice",
        "description": "Returns a subset of the map defined by a starting index and length"
    },
    {
        "href": "ds-map.sort.php",
        "name": "Ds\\Map::sort",
        "description": "Sorts the map in-place by value"
    },
    {
        "href": "ds-map.sorted.php",
        "name": "Ds\\Map::sorted",
        "description": "Returns a copy, sorted by value"
    },
    {
        "href": "ds-map.sum.php",
        "name": "Ds\\Map::sum",
        "description": "Returns the sum of all values in the map"
    },
    {
        "href": "ds-map.toarray.php",
        "name": "Ds\\Map::toArray",
        "description": "Converts the map to an array"
    },
    {
        "href": "ds-map.union.php",
        "name": "Ds\\Map::union",
        "description": "Creates a new map using values from the current instance and another map"
    },
    {
        "href": "ds-map.values.php",
        "name": "Ds\\Map::values",
        "description": "Returns a sequence of the map's values"
    },
    {
        "href": "ds-map.xor.php",
        "name": "Ds\\Map::xor",
        "description": "Creates a new map using keys of either the current instance or of another map, but not of both"
    },
    {
        "href": "ds-map.construct.php",
        "name": "Ds\\Map::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-pair.clear.php",
        "name": "Ds\\Pair::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-pair.copy.php",
        "name": "Ds\\Pair::copy",
        "description": "Returns a shallow copy of the pair"
    },
    {
        "href": "ds-pair.isempty.php",
        "name": "Ds\\Pair::isEmpty",
        "description": "Returns whether the pair is empty"
    },
    {
        "href": "ds-pair.jsonserialize.php",
        "name": "Ds\\Pair::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-pair.toarray.php",
        "name": "Ds\\Pair::toArray",
        "description": "Converts the pair to an array"
    },
    {
        "href": "ds-pair.construct.php",
        "name": "Ds\\Pair::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-priorityqueue.allocate.php",
        "name": "Ds\\PriorityQueue::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-priorityqueue.capacity.php",
        "name": "Ds\\PriorityQueue::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-priorityqueue.clear.php",
        "name": "Ds\\PriorityQueue::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-priorityqueue.copy.php",
        "name": "Ds\\PriorityQueue::copy",
        "description": "Returns a shallow copy of the queue"
    },
    {
        "href": "ds-priorityqueue.count.php",
        "name": "Ds\\PriorityQueue::count",
        "description": "Returns the number of values in the queue"
    },
    {
        "href": "ds-priorityqueue.isempty.php",
        "name": "Ds\\PriorityQueue::isEmpty",
        "description": "Returns whether the queue is empty"
    },
    {
        "href": "ds-priorityqueue.jsonserialize.php",
        "name": "Ds\\PriorityQueue::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-priorityqueue.peek.php",
        "name": "Ds\\PriorityQueue::peek",
        "description": "Returns the value at the front of the queue"
    },
    {
        "href": "ds-priorityqueue.pop.php",
        "name": "Ds\\PriorityQueue::pop",
        "description": "Removes and returns the value with the highest priority"
    },
    {
        "href": "ds-priorityqueue.push.php",
        "name": "Ds\\PriorityQueue::push",
        "description": "Pushes values into the queue"
    },
    {
        "href": "ds-priorityqueue.toarray.php",
        "name": "Ds\\PriorityQueue::toArray",
        "description": "Converts the queue to an array"
    },
    {
        "href": "ds-priorityqueue.construct.php",
        "name": "Ds\\PriorityQueue::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-queue.allocate.php",
        "name": "Ds\\Queue::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-queue.capacity.php",
        "name": "Ds\\Queue::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-queue.clear.php",
        "name": "Ds\\Queue::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-queue.copy.php",
        "name": "Ds\\Queue::copy",
        "description": "Returns a shallow copy of the queue"
    },
    {
        "href": "ds-queue.count.php",
        "name": "Ds\\Queue::count",
        "description": "Returns the number of values in the queue"
    },
    {
        "href": "ds-queue.isempty.php",
        "name": "Ds\\Queue::isEmpty",
        "description": "Returns whether the queue is empty"
    },
    {
        "href": "ds-queue.jsonserialize.php",
        "name": "Ds\\Queue::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-queue.peek.php",
        "name": "Ds\\Queue::peek",
        "description": "Returns the value at the front of the queue"
    },
    {
        "href": "ds-queue.pop.php",
        "name": "Ds\\Queue::pop",
        "description": "Removes and returns the value at the front of the queue"
    },
    {
        "href": "ds-queue.push.php",
        "name": "Ds\\Queue::push",
        "description": "Pushes values into the queue"
    },
    {
        "href": "ds-queue.toarray.php",
        "name": "Ds\\Queue::toArray",
        "description": "Converts the queue to an array"
    },
    {
        "href": "ds-queue.construct.php",
        "name": "Ds\\Queue::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-sequence.allocate.php",
        "name": "Ds\\Sequence::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-sequence.apply.php",
        "name": "Ds\\Sequence::apply",
        "description": "Updates all values by applying a callback function to each value"
    },
    {
        "href": "ds-sequence.capacity.php",
        "name": "Ds\\Sequence::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-sequence.contains.php",
        "name": "Ds\\Sequence::contains",
        "description": "Determines if the sequence contains given values"
    },
    {
        "href": "ds-sequence.filter.php",
        "name": "Ds\\Sequence::filter",
        "description": "Creates a new sequence using a callable to    determine which values to include"
    },
    {
        "href": "ds-sequence.find.php",
        "name": "Ds\\Sequence::find",
        "description": "Attempts to find a value's index"
    },
    {
        "href": "ds-sequence.first.php",
        "name": "Ds\\Sequence::first",
        "description": "Returns the first value in the sequence"
    },
    {
        "href": "ds-sequence.get.php",
        "name": "Ds\\Sequence::get",
        "description": "Returns the value at a given index"
    },
    {
        "href": "ds-sequence.insert.php",
        "name": "Ds\\Sequence::insert",
        "description": "Inserts values at a given index"
    },
    {
        "href": "ds-sequence.join.php",
        "name": "Ds\\Sequence::join",
        "description": "Joins all values together as a string"
    },
    {
        "href": "ds-sequence.last.php",
        "name": "Ds\\Sequence::last",
        "description": "Returns the last value"
    },
    {
        "href": "ds-sequence.map.php",
        "name": "Ds\\Sequence::map",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "href": "ds-sequence.merge.php",
        "name": "Ds\\Sequence::merge",
        "description": "Returns the result of adding all given values to the sequence"
    },
    {
        "href": "ds-sequence.pop.php",
        "name": "Ds\\Sequence::pop",
        "description": "Removes and returns the last value"
    },
    {
        "href": "ds-sequence.push.php",
        "name": "Ds\\Sequence::push",
        "description": "Adds values to the end of the sequence"
    },
    {
        "href": "ds-sequence.reduce.php",
        "name": "Ds\\Sequence::reduce",
        "description": "Reduces the sequence to a single value using a callback function"
    },
    {
        "href": "ds-sequence.remove.php",
        "name": "Ds\\Sequence::remove",
        "description": "Removes and returns a value by index"
    },
    {
        "href": "ds-sequence.reverse.php",
        "name": "Ds\\Sequence::reverse",
        "description": "Reverses the sequence in-place"
    },
    {
        "href": "ds-sequence.reversed.php",
        "name": "Ds\\Sequence::reversed",
        "description": "Returns a reversed copy"
    },
    {
        "href": "ds-sequence.rotate.php",
        "name": "Ds\\Sequence::rotate",
        "description": "Rotates the sequence by a given number of rotations"
    },
    {
        "href": "ds-sequence.set.php",
        "name": "Ds\\Sequence::set",
        "description": "Updates a value at a given index"
    },
    {
        "href": "ds-sequence.shift.php",
        "name": "Ds\\Sequence::shift",
        "description": "Removes and returns the first value"
    },
    {
        "href": "ds-sequence.slice.php",
        "name": "Ds\\Sequence::slice",
        "description": "Returns a sub-sequence of a given range"
    },
    {
        "href": "ds-sequence.sort.php",
        "name": "Ds\\Sequence::sort",
        "description": "Sorts the sequence in-place"
    },
    {
        "href": "ds-sequence.sorted.php",
        "name": "Ds\\Sequence::sorted",
        "description": "Returns a sorted copy"
    },
    {
        "href": "ds-sequence.sum.php",
        "name": "Ds\\Sequence::sum",
        "description": "Returns the sum of all values in the sequence"
    },
    {
        "href": "ds-sequence.unshift.php",
        "name": "Ds\\Sequence::unshift",
        "description": "Adds values to the front of the sequence"
    },
    {
        "href": "ds-set.add.php",
        "name": "Ds\\Set::add",
        "description": "Adds values to the set"
    },
    {
        "href": "ds-set.allocate.php",
        "name": "Ds\\Set::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-set.capacity.php",
        "name": "Ds\\Set::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-set.clear.php",
        "name": "Ds\\Set::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-set.contains.php",
        "name": "Ds\\Set::contains",
        "description": "Determines if the set contains all values"
    },
    {
        "href": "ds-set.copy.php",
        "name": "Ds\\Set::copy",
        "description": "Returns a shallow copy of the set"
    },
    {
        "href": "ds-set.count.php",
        "name": "Ds\\Set::count",
        "description": "Returns the number of values in the set"
    },
    {
        "href": "ds-set.diff.php",
        "name": "Ds\\Set::diff",
        "description": "Creates a new set using values that aren't in another set"
    },
    {
        "href": "ds-set.filter.php",
        "name": "Ds\\Set::filter",
        "description": "Creates a new set using a callable to    determine which values to include"
    },
    {
        "href": "ds-set.first.php",
        "name": "Ds\\Set::first",
        "description": "Returns the first value in the set"
    },
    {
        "href": "ds-set.get.php",
        "name": "Ds\\Set::get",
        "description": "Returns the value at a given index"
    },
    {
        "href": "ds-set.intersect.php",
        "name": "Ds\\Set::intersect",
        "description": "Creates a new set by intersecting values with another set"
    },
    {
        "href": "ds-set.isempty.php",
        "name": "Ds\\Set::isEmpty",
        "description": "Returns whether the set is empty"
    },
    {
        "href": "ds-set.join.php",
        "name": "Ds\\Set::join",
        "description": "Joins all values together as a string"
    },
    {
        "href": "ds-set.jsonserialize.php",
        "name": "Ds\\Set::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-set.last.php",
        "name": "Ds\\Set::last",
        "description": "Returns the last value in the set"
    },
    {
        "href": "ds-set.merge.php",
        "name": "Ds\\Set::merge",
        "description": "Returns the result of adding all given values to the set"
    },
    {
        "href": "ds-set.reduce.php",
        "name": "Ds\\Set::reduce",
        "description": "Reduces the set to a single value using a callback function"
    },
    {
        "href": "ds-set.remove.php",
        "name": "Ds\\Set::remove",
        "description": "Removes all given values from the set"
    },
    {
        "href": "ds-set.reverse.php",
        "name": "Ds\\Set::reverse",
        "description": "Reverses the set in-place"
    },
    {
        "href": "ds-set.reversed.php",
        "name": "Ds\\Set::reversed",
        "description": "Returns a reversed copy"
    },
    {
        "href": "ds-set.slice.php",
        "name": "Ds\\Set::slice",
        "description": "Returns a sub-set of a given range"
    },
    {
        "href": "ds-set.sort.php",
        "name": "Ds\\Set::sort",
        "description": "Sorts the set in-place"
    },
    {
        "href": "ds-set.sorted.php",
        "name": "Ds\\Set::sorted",
        "description": "Returns a sorted copy"
    },
    {
        "href": "ds-set.sum.php",
        "name": "Ds\\Set::sum",
        "description": "Returns the sum of all values in the set"
    },
    {
        "href": "ds-set.toarray.php",
        "name": "Ds\\Set::toArray",
        "description": "Converts the set to an array"
    },
    {
        "href": "ds-set.union.php",
        "name": "Ds\\Set::union",
        "description": "Creates a new set using values from the current instance and another set"
    },
    {
        "href": "ds-set.xor.php",
        "name": "Ds\\Set::xor",
        "description": "Creates a new set using values in either the current instance or in another set, but not in both"
    },
    {
        "href": "ds-set.construct.php",
        "name": "Ds\\Set::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-stack.allocate.php",
        "name": "Ds\\Stack::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-stack.capacity.php",
        "name": "Ds\\Stack::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-stack.clear.php",
        "name": "Ds\\Stack::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-stack.copy.php",
        "name": "Ds\\Stack::copy",
        "description": "Returns a shallow copy of the stack"
    },
    {
        "href": "ds-stack.count.php",
        "name": "Ds\\Stack::count",
        "description": "Returns the number of values in the stack"
    },
    {
        "href": "ds-stack.isempty.php",
        "name": "Ds\\Stack::isEmpty",
        "description": "Returns whether the stack is empty"
    },
    {
        "href": "ds-stack.jsonserialize.php",
        "name": "Ds\\Stack::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-stack.peek.php",
        "name": "Ds\\Stack::peek",
        "description": "Returns the value at the top of the stack"
    },
    {
        "href": "ds-stack.pop.php",
        "name": "Ds\\Stack::pop",
        "description": "Removes and returns the value at the top of the stack"
    },
    {
        "href": "ds-stack.push.php",
        "name": "Ds\\Stack::push",
        "description": "Pushes values onto the stack"
    },
    {
        "href": "ds-stack.toarray.php",
        "name": "Ds\\Stack::toArray",
        "description": "Converts the stack to an array"
    },
    {
        "href": "ds-stack.construct.php",
        "name": "Ds\\Stack::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "ds-vector.allocate.php",
        "name": "Ds\\Vector::allocate",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "href": "ds-vector.apply.php",
        "name": "Ds\\Vector::apply",
        "description": "Updates all values by applying a callback function to each value"
    },
    {
        "href": "ds-vector.capacity.php",
        "name": "Ds\\Vector::capacity",
        "description": "Returns the current capacity"
    },
    {
        "href": "ds-vector.clear.php",
        "name": "Ds\\Vector::clear",
        "description": "Removes all values"
    },
    {
        "href": "ds-vector.contains.php",
        "name": "Ds\\Vector::contains",
        "description": "Determines if the vector contains given values"
    },
    {
        "href": "ds-vector.copy.php",
        "name": "Ds\\Vector::copy",
        "description": "Returns a shallow copy of the vector"
    },
    {
        "href": "ds-vector.count.php",
        "name": "Ds\\Vector::count",
        "description": "Returns the number of values in the collection"
    },
    {
        "href": "ds-vector.filter.php",
        "name": "Ds\\Vector::filter",
        "description": "Creates a new vector using a callable to    determine which values to include"
    },
    {
        "href": "ds-vector.find.php",
        "name": "Ds\\Vector::find",
        "description": "Attempts to find a value's index"
    },
    {
        "href": "ds-vector.first.php",
        "name": "Ds\\Vector::first",
        "description": "Returns the first value in the vector"
    },
    {
        "href": "ds-vector.get.php",
        "name": "Ds\\Vector::get",
        "description": "Returns the value at a given index"
    },
    {
        "href": "ds-vector.insert.php",
        "name": "Ds\\Vector::insert",
        "description": "Inserts values at a given index"
    },
    {
        "href": "ds-vector.isempty.php",
        "name": "Ds\\Vector::isEmpty",
        "description": "Returns whether the vector is empty"
    },
    {
        "href": "ds-vector.join.php",
        "name": "Ds\\Vector::join",
        "description": "Joins all values together as a string"
    },
    {
        "href": "ds-vector.jsonserialize.php",
        "name": "Ds\\Vector::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "ds-vector.last.php",
        "name": "Ds\\Vector::last",
        "description": "Returns the last value"
    },
    {
        "href": "ds-vector.map.php",
        "name": "Ds\\Vector::map",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "href": "ds-vector.merge.php",
        "name": "Ds\\Vector::merge",
        "description": "Returns the result of adding all given values to the vector"
    },
    {
        "href": "ds-vector.pop.php",
        "name": "Ds\\Vector::pop",
        "description": "Removes and returns the last value"
    },
    {
        "href": "ds-vector.push.php",
        "name": "Ds\\Vector::push",
        "description": "Adds values to the end of the vector"
    },
    {
        "href": "ds-vector.reduce.php",
        "name": "Ds\\Vector::reduce",
        "description": "Reduces the vector to a single value using a callback function"
    },
    {
        "href": "ds-vector.remove.php",
        "name": "Ds\\Vector::remove",
        "description": "Removes and returns a value by index"
    },
    {
        "href": "ds-vector.reverse.php",
        "name": "Ds\\Vector::reverse",
        "description": "Reverses the vector in-place"
    },
    {
        "href": "ds-vector.reversed.php",
        "name": "Ds\\Vector::reversed",
        "description": "Returns a reversed copy"
    },
    {
        "href": "ds-vector.rotate.php",
        "name": "Ds\\Vector::rotate",
        "description": "Rotates the vector by a given number of rotations"
    },
    {
        "href": "ds-vector.set.php",
        "name": "Ds\\Vector::set",
        "description": "Updates a value at a given index"
    },
    {
        "href": "ds-vector.shift.php",
        "name": "Ds\\Vector::shift",
        "description": "Removes and returns the first value"
    },
    {
        "href": "ds-vector.slice.php",
        "name": "Ds\\Vector::slice",
        "description": "Returns a sub-vector of a given range"
    },
    {
        "href": "ds-vector.sort.php",
        "name": "Ds\\Vector::sort",
        "description": "Sorts the vector in-place"
    },
    {
        "href": "ds-vector.sorted.php",
        "name": "Ds\\Vector::sorted",
        "description": "Returns a sorted copy"
    },
    {
        "href": "ds-vector.sum.php",
        "name": "Ds\\Vector::sum",
        "description": "Returns the sum of all values in the vector"
    },
    {
        "href": "ds-vector.toarray.php",
        "name": "Ds\\Vector::toArray",
        "description": "Converts the vector to an array"
    },
    {
        "href": "ds-vector.unshift.php",
        "name": "Ds\\Vector::unshift",
        "description": "Adds values to the front of the vector"
    },
    {
        "href": "ds-vector.construct.php",
        "name": "Ds\\Vector::__construct",
        "description": "Creates a new instance"
    },
    {
        "href": "function.each.php",
        "name": "each",
        "description": "Return the current key and value pair from an array and advance the array cursor"
    },
    {
        "href": "function.easter-date.php",
        "name": "easter_date",
        "description": "Get Unix timestamp for midnight on Easter of a given year"
    },
    {
        "href": "function.easter-days.php",
        "name": "easter_days",
        "description": "Get number of days after March 21 on which Easter falls for a given year"
    },
    {
        "href": "function.echo.php",
        "name": "echo",
        "description": "Output one or more strings"
    },
    {
        "href": "function.eio-busy.php",
        "name": "eio_busy",
        "description": "Artificially increase load. Could be useful in tests,  benchmarking"
    },
    {
        "href": "function.eio-cancel.php",
        "name": "eio_cancel",
        "description": "Cancels a request"
    },
    {
        "href": "function.eio-chmod.php",
        "name": "eio_chmod",
        "description": "Change file/directory permissions"
    },
    {
        "href": "function.eio-chown.php",
        "name": "eio_chown",
        "description": "Change file/directory permissions"
    },
    {
        "href": "function.eio-close.php",
        "name": "eio_close",
        "description": "Close file"
    },
    {
        "href": "function.eio-custom.php",
        "name": "eio_custom",
        "description": "Execute custom request like any other eio_* call"
    },
    {
        "href": "function.eio-dup2.php",
        "name": "eio_dup2",
        "description": "Duplicate a file descriptor"
    },
    {
        "href": "function.eio-event-loop.php",
        "name": "eio_event_loop",
        "description": "Polls libeio until all requests proceeded"
    },
    {
        "href": "function.eio-fallocate.php",
        "name": "eio_fallocate",
        "description": "Allows the caller to directly manipulate the allocated disk  space for a file"
    },
    {
        "href": "function.eio-fchmod.php",
        "name": "eio_fchmod",
        "description": "Change file permissions"
    },
    {
        "href": "function.eio-fchown.php",
        "name": "eio_fchown",
        "description": "Change file ownership"
    },
    {
        "href": "function.eio-fdatasync.php",
        "name": "eio_fdatasync",
        "description": "Synchronize a file's in-core state with storage device"
    },
    {
        "href": "function.eio-fstat.php",
        "name": "eio_fstat",
        "description": "Get file status"
    },
    {
        "href": "function.eio-fstatvfs.php",
        "name": "eio_fstatvfs",
        "description": "Get file system statistics"
    },
    {
        "href": "function.eio-fsync.php",
        "name": "eio_fsync",
        "description": "Synchronize a file's in-core state with storage device"
    },
    {
        "href": "function.eio-ftruncate.php",
        "name": "eio_ftruncate",
        "description": "Truncate a file"
    },
    {
        "href": "function.eio-futime.php",
        "name": "eio_futime",
        "description": "Change file last access and modification times"
    },
    {
        "href": "function.eio-get-event-stream.php",
        "name": "eio_get_event_stream",
        "description": "Get stream representing a variable used in internal communications with libeio"
    },
    {
        "href": "function.eio-get-last-error.php",
        "name": "eio_get_last_error",
        "description": "Returns string describing the last error associated with a request resource"
    },
    {
        "href": "function.eio-grp.php",
        "name": "eio_grp",
        "description": "Creates a request group"
    },
    {
        "href": "function.eio-grp-add.php",
        "name": "eio_grp_add",
        "description": "Adds a request to the request group"
    },
    {
        "href": "function.eio-grp-cancel.php",
        "name": "eio_grp_cancel",
        "description": "Cancels a request group"
    },
    {
        "href": "function.eio-grp-limit.php",
        "name": "eio_grp_limit",
        "description": "Set group limit"
    },
    {
        "href": "function.eio-init.php",
        "name": "eio_init",
        "description": "(Re-)initialize Eio"
    },
    {
        "href": "function.eio-link.php",
        "name": "eio_link",
        "description": "Create a hardlink for file"
    },
    {
        "href": "function.eio-lstat.php",
        "name": "eio_lstat",
        "description": "Get file status"
    },
    {
        "href": "function.eio-mkdir.php",
        "name": "eio_mkdir",
        "description": "Create directory"
    },
    {
        "href": "function.eio-mknod.php",
        "name": "eio_mknod",
        "description": "Create a special or ordinary file"
    },
    {
        "href": "function.eio-nop.php",
        "name": "eio_nop",
        "description": "Does nothing, except go through the whole request cycle"
    },
    {
        "href": "function.eio-npending.php",
        "name": "eio_npending",
        "description": "Returns number of finished, but unhandled requests"
    },
    {
        "href": "function.eio-nready.php",
        "name": "eio_nready",
        "description": "Returns number of not-yet handled requests"
    },
    {
        "href": "function.eio-nreqs.php",
        "name": "eio_nreqs",
        "description": "Returns number of requests to be processed"
    },
    {
        "href": "function.eio-nthreads.php",
        "name": "eio_nthreads",
        "description": "Returns number of threads currently in use"
    },
    {
        "href": "function.eio-open.php",
        "name": "eio_open",
        "description": "Opens a file"
    },
    {
        "href": "function.eio-poll.php",
        "name": "eio_poll",
        "description": "Can be to be called whenever there are pending requests that need finishing"
    },
    {
        "href": "function.eio-read.php",
        "name": "eio_read",
        "description": "Read from a file descriptor at given offset"
    },
    {
        "href": "function.eio-readahead.php",
        "name": "eio_readahead",
        "description": "Perform file readahead into page cache"
    },
    {
        "href": "function.eio-readdir.php",
        "name": "eio_readdir",
        "description": "Reads through a whole directory"
    },
    {
        "href": "function.eio-readlink.php",
        "name": "eio_readlink",
        "description": "Read value of a symbolic link"
    },
    {
        "href": "function.eio-realpath.php",
        "name": "eio_realpath",
        "description": "Get the canonicalized absolute pathname"
    },
    {
        "href": "function.eio-rename.php",
        "name": "eio_rename",
        "description": "Change the name or location of a file"
    },
    {
        "href": "function.eio-rmdir.php",
        "name": "eio_rmdir",
        "description": "Remove a directory"
    },
    {
        "href": "function.eio-seek.php",
        "name": "eio_seek",
        "description": "Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence"
    },
    {
        "href": "function.eio-sendfile.php",
        "name": "eio_sendfile",
        "description": "Transfer data between file descriptors"
    },
    {
        "href": "function.eio-set-max-idle.php",
        "name": "eio_set_max_idle",
        "description": "Set maximum number of idle threads"
    },
    {
        "href": "function.eio-set-max-parallel.php",
        "name": "eio_set_max_parallel",
        "description": "Set maximum parallel threads"
    },
    {
        "href": "function.eio-set-max-poll-reqs.php",
        "name": "eio_set_max_poll_reqs",
        "description": "Set maximum number of requests processed in a poll"
    },
    {
        "href": "function.eio-set-max-poll-time.php",
        "name": "eio_set_max_poll_time",
        "description": "Set maximum poll time"
    },
    {
        "href": "function.eio-set-min-parallel.php",
        "name": "eio_set_min_parallel",
        "description": "Set minimum parallel thread number"
    },
    {
        "href": "function.eio-stat.php",
        "name": "eio_stat",
        "description": "Get file status"
    },
    {
        "href": "function.eio-statvfs.php",
        "name": "eio_statvfs",
        "description": "Get file system statistics"
    },
    {
        "href": "function.eio-symlink.php",
        "name": "eio_symlink",
        "description": "Create a symbolic link"
    },
    {
        "href": "function.eio-sync.php",
        "name": "eio_sync",
        "description": "Commit buffer cache to disk"
    },
    {
        "href": "function.eio-syncfs.php",
        "name": "eio_syncfs",
        "description": "Calls Linux' syncfs syscall, if available"
    },
    {
        "href": "function.eio-sync-file-range.php",
        "name": "eio_sync_file_range",
        "description": "Sync a file segment with disk"
    },
    {
        "href": "function.eio-truncate.php",
        "name": "eio_truncate",
        "description": "Truncate a file"
    },
    {
        "href": "function.eio-unlink.php",
        "name": "eio_unlink",
        "description": "Delete a name and possibly the file it refers to"
    },
    {
        "href": "function.eio-utime.php",
        "name": "eio_utime",
        "description": "Change file last access and modification times"
    },
    {
        "href": "function.eio-write.php",
        "name": "eio_write",
        "description": "Write to file"
    },
    {
        "href": "function.empty.php",
        "name": "empty",
        "description": "Determine whether a variable is empty"
    },
    {
        "href": "emptyiterator.current.php",
        "name": "EmptyIterator::current",
        "description": "The current() method"
    },
    {
        "href": "emptyiterator.key.php",
        "name": "EmptyIterator::key",
        "description": "The key() method"
    },
    {
        "href": "emptyiterator.next.php",
        "name": "EmptyIterator::next",
        "description": "The next() method"
    },
    {
        "href": "emptyiterator.rewind.php",
        "name": "EmptyIterator::rewind",
        "description": "The rewind() method"
    },
    {
        "href": "emptyiterator.valid.php",
        "name": "EmptyIterator::valid",
        "description": "The valid() method"
    },
    {
        "href": "function.enchant-broker-describe.php",
        "name": "enchant_broker_describe",
        "description": "Enumerates the Enchant providers"
    },
    {
        "href": "function.enchant-broker-dict-exists.php",
        "name": "enchant_broker_dict_exists",
        "description": "Whether a dictionary exists or not. Using non-empty tag"
    },
    {
        "href": "function.enchant-broker-free.php",
        "name": "enchant_broker_free",
        "description": "Free the broker resource and its dictionaries"
    },
    {
        "href": "function.enchant-broker-free-dict.php",
        "name": "enchant_broker_free_dict",
        "description": "Free a dictionary resource"
    },
    {
        "href": "function.enchant-broker-get-dict-path.php",
        "name": "enchant_broker_get_dict_path",
        "description": "Get the directory path for a given backend"
    },
    {
        "href": "function.enchant-broker-get-error.php",
        "name": "enchant_broker_get_error",
        "description": "Returns the last error of the broker"
    },
    {
        "href": "function.enchant-broker-init.php",
        "name": "enchant_broker_init",
        "description": "Create a new broker object capable of requesting"
    },
    {
        "href": "function.enchant-broker-list-dicts.php",
        "name": "enchant_broker_list_dicts",
        "description": "Returns a list of available dictionaries"
    },
    {
        "href": "function.enchant-broker-request-dict.php",
        "name": "enchant_broker_request_dict",
        "description": "Create a new dictionary using a tag"
    },
    {
        "href": "function.enchant-broker-request-pwl-dict.php",
        "name": "enchant_broker_request_pwl_dict",
        "description": "Creates a dictionary using a PWL file"
    },
    {
        "href": "function.enchant-broker-set-dict-path.php",
        "name": "enchant_broker_set_dict_path",
        "description": "Set the directory path for a given backend"
    },
    {
        "href": "function.enchant-broker-set-ordering.php",
        "name": "enchant_broker_set_ordering",
        "description": "Declares a preference of dictionaries to use for the language"
    },
    {
        "href": "function.enchant-dict-add.php",
        "name": "enchant_dict_add",
        "description": "Add a word to personal word list"
    },
    {
        "href": "function.enchant-dict-add-to-personal.php",
        "name": "enchant_dict_add_to_personal",
        "description": "Alias of enchant_dict_add"
    },
    {
        "href": "function.enchant-dict-add-to-session.php",
        "name": "enchant_dict_add_to_session",
        "description": "Add 'word' to this spell-checking session"
    },
    {
        "href": "function.enchant-dict-check.php",
        "name": "enchant_dict_check",
        "description": "Check whether a word is correctly spelled or not"
    },
    {
        "href": "function.enchant-dict-describe.php",
        "name": "enchant_dict_describe",
        "description": "Describes an individual dictionary"
    },
    {
        "href": "function.enchant-dict-get-error.php",
        "name": "enchant_dict_get_error",
        "description": "Returns the last error of the current spelling-session"
    },
    {
        "href": "function.enchant-dict-is-added.php",
        "name": "enchant_dict_is_added",
        "description": "Whether or not 'word' exists in this spelling-session"
    },
    {
        "href": "function.enchant-dict-is-in-session.php",
        "name": "enchant_dict_is_in_session",
        "description": "Alias of enchant_dict_is_added"
    },
    {
        "href": "function.enchant-dict-quick-check.php",
        "name": "enchant_dict_quick_check",
        "description": "Check the word is correctly spelled and provide suggestions"
    },
    {
        "href": "function.enchant-dict-store-replacement.php",
        "name": "enchant_dict_store_replacement",
        "description": "Add a correction for a word"
    },
    {
        "href": "function.enchant-dict-suggest.php",
        "name": "enchant_dict_suggest",
        "description": "Will return a list of values if any of those pre-conditions are not met"
    },
    {
        "href": "function.end.php",
        "name": "end",
        "description": "Set the internal pointer of an array to its last element"
    },
    {
        "href": "function.enum-exists.php",
        "name": "enum_exists",
        "description": "Checks if the enum has been defined"
    },
    {
        "href": "error.getcode.php",
        "name": "Error::getCode",
        "description": "Gets the error code"
    },
    {
        "href": "error.getfile.php",
        "name": "Error::getFile",
        "description": "Gets the file in which the error occurred"
    },
    {
        "href": "error.getline.php",
        "name": "Error::getLine",
        "description": "Gets the line in which the error occurred"
    },
    {
        "href": "error.getmessage.php",
        "name": "Error::getMessage",
        "description": "Gets the error message"
    },
    {
        "href": "error.getprevious.php",
        "name": "Error::getPrevious",
        "description": "Returns previous Throwable"
    },
    {
        "href": "error.gettrace.php",
        "name": "Error::getTrace",
        "description": "Gets the stack trace"
    },
    {
        "href": "error.gettraceasstring.php",
        "name": "Error::getTraceAsString",
        "description": "Gets the stack trace as a string"
    },
    {
        "href": "error.clone.php",
        "name": "Error::__clone",
        "description": "Clone the error"
    },
    {
        "href": "error.construct.php",
        "name": "Error::__construct",
        "description": "Construct the error object"
    },
    {
        "href": "error.tostring.php",
        "name": "Error::__toString",
        "description": "String representation of the error"
    },
    {
        "href": "errorexception.getseverity.php",
        "name": "ErrorException::getSeverity",
        "description": "Gets the exception severity"
    },
    {
        "href": "errorexception.construct.php",
        "name": "ErrorException::__construct",
        "description": "Constructs the exception"
    },
    {
        "href": "function.error-clear-last.php",
        "name": "error_clear_last",
        "description": "Clear the most recent error"
    },
    {
        "href": "function.error-get-last.php",
        "name": "error_get_last",
        "description": "Get the last occurred error"
    },
    {
        "href": "function.error-log.php",
        "name": "error_log",
        "description": "Send an error message to the defined error handling routines"
    },
    {
        "href": "function.error-reporting.php",
        "name": "error_reporting",
        "description": "Sets which PHP errors are reported"
    },
    {
        "href": "function.escapeshellarg.php",
        "name": "escapeshellarg",
        "description": "Escape a string to be used as a shell argument"
    },
    {
        "href": "function.escapeshellcmd.php",
        "name": "escapeshellcmd",
        "description": "Escape shell metacharacters"
    },
    {
        "href": "ev.backend.php",
        "name": "Ev::backend",
        "description": "Returns an integer describing the backend used by libev"
    },
    {
        "href": "ev.depth.php",
        "name": "Ev::depth",
        "description": "Returns recursion depth"
    },
    {
        "href": "ev.embeddablebackends.php",
        "name": "Ev::embeddableBackends",
        "description": "Returns the set of backends that are embeddable in other event loops"
    },
    {
        "href": "ev.feedsignal.php",
        "name": "Ev::feedSignal",
        "description": "Feed a signal event info Ev"
    },
    {
        "href": "ev.feedsignalevent.php",
        "name": "Ev::feedSignalEvent",
        "description": "Feed signal event into the default loop"
    },
    {
        "href": "ev.iteration.php",
        "name": "Ev::iteration",
        "description": "Return the number of times the default event loop has polled for new  events"
    },
    {
        "href": "ev.now.php",
        "name": "Ev::now",
        "description": "Returns the time when the last iteration of the default event  loop has started"
    },
    {
        "href": "ev.nowupdate.php",
        "name": "Ev::nowUpdate",
        "description": "Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress"
    },
    {
        "href": "ev.recommendedbackends.php",
        "name": "Ev::recommendedBackends",
        "description": "Returns a bit mask of recommended backends for current  platform"
    },
    {
        "href": "ev.resume.php",
        "name": "Ev::resume",
        "description": "Resume previously suspended default event loop"
    },
    {
        "href": "ev.run.php",
        "name": "Ev::run",
        "description": "Begin checking for events and calling callbacks for the default  loop"
    },
    {
        "href": "ev.sleep.php",
        "name": "Ev::sleep",
        "description": "Block the process for the given number of seconds"
    },
    {
        "href": "ev.stop.php",
        "name": "Ev::stop",
        "description": "Stops the default event loop"
    },
    {
        "href": "ev.supportedbackends.php",
        "name": "Ev::supportedBackends",
        "description": "Returns the set of backends supported by current libev  configuration"
    },
    {
        "href": "ev.suspend.php",
        "name": "Ev::suspend",
        "description": "Suspend the default event loop"
    },
    {
        "href": "ev.time.php",
        "name": "Ev::time",
        "description": "Returns the current time in fractional seconds since the epoch"
    },
    {
        "href": "ev.verify.php",
        "name": "Ev::verify",
        "description": "Performs internal consistency checks(for debugging)"
    },
    {
        "href": "function.eval.php",
        "name": "eval",
        "description": "Evaluate a string as PHP code"
    },
    {
        "href": "evcheck.createstopped.php",
        "name": "EvCheck::createStopped",
        "description": "Create instance of a stopped EvCheck watcher"
    },
    {
        "href": "evcheck.construct.php",
        "name": "EvCheck::__construct",
        "description": "Constructs the EvCheck watcher object"
    },
    {
        "href": "evchild.createstopped.php",
        "name": "EvChild::createStopped",
        "description": "Create instance of a stopped EvCheck watcher"
    },
    {
        "href": "evchild.set.php",
        "name": "EvChild::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evchild.construct.php",
        "name": "EvChild::__construct",
        "description": "Constructs the EvChild watcher object"
    },
    {
        "href": "evembed.createstopped.php",
        "name": "EvEmbed::createStopped",
        "description": "Create stopped EvEmbed watcher object"
    },
    {
        "href": "evembed.set.php",
        "name": "EvEmbed::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evembed.sweep.php",
        "name": "EvEmbed::sweep",
        "description": "Make a single, non-blocking sweep over the embedded loop"
    },
    {
        "href": "evembed.construct.php",
        "name": "EvEmbed::__construct",
        "description": "Constructs the EvEmbed object"
    },
    {
        "href": "event.add.php",
        "name": "Event::add",
        "description": "Makes event pending"
    },
    {
        "href": "event.addsignal.php",
        "name": "Event::addSignal",
        "description": "Makes signal event pending"
    },
    {
        "href": "event.addtimer.php",
        "name": "Event::addTimer",
        "description": "Makes timer event pending"
    },
    {
        "href": "event.del.php",
        "name": "Event::del",
        "description": "Makes event non-pending"
    },
    {
        "href": "event.delsignal.php",
        "name": "Event::delSignal",
        "description": "Makes signal event non-pending"
    },
    {
        "href": "event.deltimer.php",
        "name": "Event::delTimer",
        "description": "Makes timer event non-pending"
    },
    {
        "href": "event.free.php",
        "name": "Event::free",
        "description": "Make event non-pending and free resources allocated for this  event"
    },
    {
        "href": "event.getsupportedmethods.php",
        "name": "Event::getSupportedMethods",
        "description": "Returns array with of the names of the methods supported in this version of Libevent"
    },
    {
        "href": "event.pending.php",
        "name": "Event::pending",
        "description": "Detects whether event is pending or scheduled"
    },
    {
        "href": "event.set.php",
        "name": "Event::set",
        "description": "Re-configures event"
    },
    {
        "href": "event.setpriority.php",
        "name": "Event::setPriority",
        "description": "Set event priority"
    },
    {
        "href": "event.settimer.php",
        "name": "Event::setTimer",
        "description": "Re-configures timer event"
    },
    {
        "href": "event.signal.php",
        "name": "Event::signal",
        "description": "Constructs signal event object"
    },
    {
        "href": "event.timer.php",
        "name": "Event::timer",
        "description": "Constructs timer event object"
    },
    {
        "href": "event.construct.php",
        "name": "Event::__construct",
        "description": "Constructs Event object"
    },
    {
        "href": "eventbase.dispatch.php",
        "name": "EventBase::dispatch",
        "description": "Dispatch pending events"
    },
    {
        "href": "eventbase.exit.php",
        "name": "EventBase::exit",
        "description": "Stop dispatching events"
    },
    {
        "href": "eventbase.free.php",
        "name": "EventBase::free",
        "description": "Free resources allocated for this event base"
    },
    {
        "href": "eventbase.getfeatures.php",
        "name": "EventBase::getFeatures",
        "description": "Returns bitmask of features supported"
    },
    {
        "href": "eventbase.getmethod.php",
        "name": "EventBase::getMethod",
        "description": "Returns event method in use"
    },
    {
        "href": "eventbase.gettimeofdaycached.php",
        "name": "EventBase::getTimeOfDayCached",
        "description": "Returns the current event base time"
    },
    {
        "href": "eventbase.gotexit.php",
        "name": "EventBase::gotExit",
        "description": "Checks if the event loop was told to exit"
    },
    {
        "href": "eventbase.gotstop.php",
        "name": "EventBase::gotStop",
        "description": "Checks if the event loop was told to exit"
    },
    {
        "href": "eventbase.loop.php",
        "name": "EventBase::loop",
        "description": "Dispatch pending events"
    },
    {
        "href": "eventbase.priorityinit.php",
        "name": "EventBase::priorityInit",
        "description": "Sets number of priorities per event base"
    },
    {
        "href": "eventbase.reinit.php",
        "name": "EventBase::reInit",
        "description": "Re-initialize event base(after a fork)"
    },
    {
        "href": "eventbase.stop.php",
        "name": "EventBase::stop",
        "description": "Tells event_base to stop dispatching events"
    },
    {
        "href": "eventbase.construct.php",
        "name": "EventBase::__construct",
        "description": "Constructs EventBase object"
    },
    {
        "href": "eventbuffer.add.php",
        "name": "EventBuffer::add",
        "description": "Append data to the end of an event buffer"
    },
    {
        "href": "eventbuffer.addbuffer.php",
        "name": "EventBuffer::addBuffer",
        "description": "Move all data from a buffer provided to the current instance of EventBuffer"
    },
    {
        "href": "eventbuffer.appendfrom.php",
        "name": "EventBuffer::appendFrom",
        "description": "Moves the specified number of bytes from a source buffer to the  end of the current buffer"
    },
    {
        "href": "eventbuffer.copyout.php",
        "name": "EventBuffer::copyout",
        "description": "Copies out specified number of bytes from the front of the buffer"
    },
    {
        "href": "eventbuffer.drain.php",
        "name": "EventBuffer::drain",
        "description": "Removes specified number of bytes from the front of the buffer  without copying it anywhere"
    },
    {
        "href": "eventbuffer.enablelocking.php",
        "name": "EventBuffer::enableLocking",
        "description": "Description"
    },
    {
        "href": "eventbuffer.expand.php",
        "name": "EventBuffer::expand",
        "description": "Reserves space in buffer"
    },
    {
        "href": "eventbuffer.freeze.php",
        "name": "EventBuffer::freeze",
        "description": "Prevent calls that modify an event buffer from succeeding"
    },
    {
        "href": "eventbuffer.lock.php",
        "name": "EventBuffer::lock",
        "description": "Acquires a lock on buffer"
    },
    {
        "href": "eventbuffer.prepend.php",
        "name": "EventBuffer::prepend",
        "description": "Prepend data to the front of the buffer"
    },
    {
        "href": "eventbuffer.prependbuffer.php",
        "name": "EventBuffer::prependBuffer",
        "description": "Moves all data from source buffer to the front of current buffer"
    },
    {
        "href": "eventbuffer.pullup.php",
        "name": "EventBuffer::pullup",
        "description": "Linearizes data within buffer  and returns it's contents as a string"
    },
    {
        "href": "eventbuffer.read.php",
        "name": "EventBuffer::read",
        "description": "Read data from an evbuffer and drain the bytes read"
    },
    {
        "href": "eventbuffer.readfrom.php",
        "name": "EventBuffer::readFrom",
        "description": "Read data from a file onto the end of the buffer"
    },
    {
        "href": "eventbuffer.readline.php",
        "name": "EventBuffer::readLine",
        "description": "Extracts a line from the front of the buffer"
    },
    {
        "href": "eventbuffer.search.php",
        "name": "EventBuffer::search",
        "description": "Scans the buffer for an occurrence of a string"
    },
    {
        "href": "eventbuffer.searcheol.php",
        "name": "EventBuffer::searchEol",
        "description": "Scans the buffer for an occurrence of an end of line"
    },
    {
        "href": "eventbuffer.substr.php",
        "name": "EventBuffer::substr",
        "description": "Substracts a portion of the buffer data"
    },
    {
        "href": "eventbuffer.unfreeze.php",
        "name": "EventBuffer::unfreeze",
        "description": "Re-enable calls that modify an event buffer"
    },
    {
        "href": "eventbuffer.unlock.php",
        "name": "EventBuffer::unlock",
        "description": "Releases lock acquired by EventBuffer::lock"
    },
    {
        "href": "eventbuffer.write.php",
        "name": "EventBuffer::write",
        "description": "Write contents of the buffer to a file or socket"
    },
    {
        "href": "eventbuffer.construct.php",
        "name": "EventBuffer::__construct",
        "description": "Constructs EventBuffer object"
    },
    {
        "href": "eventbufferevent.close.php",
        "name": "EventBufferEvent::close",
        "description": "Closes file descriptor associated with the current buffer event"
    },
    {
        "href": "eventbufferevent.connect.php",
        "name": "EventBufferEvent::connect",
        "description": "Connect buffer event's file descriptor to given address or  UNIX socket"
    },
    {
        "href": "eventbufferevent.connecthost.php",
        "name": "EventBufferEvent::connectHost",
        "description": "Connects to a hostname with optionally asyncronous DNS resolving"
    },
    {
        "href": "eventbufferevent.createpair.php",
        "name": "EventBufferEvent::createPair",
        "description": "Creates two buffer events connected to each other"
    },
    {
        "href": "eventbufferevent.disable.php",
        "name": "EventBufferEvent::disable",
        "description": "Disable events read, write, or both on a buffer event"
    },
    {
        "href": "eventbufferevent.enable.php",
        "name": "EventBufferEvent::enable",
        "description": "Enable events read, write, or both on a buffer event"
    },
    {
        "href": "eventbufferevent.free.php",
        "name": "EventBufferEvent::free",
        "description": "Free a buffer event"
    },
    {
        "href": "eventbufferevent.getdnserrorstring.php",
        "name": "EventBufferEvent::getDnsErrorString",
        "description": "Returns string describing the last failed DNS lookup attempt"
    },
    {
        "href": "eventbufferevent.getenabled.php",
        "name": "EventBufferEvent::getEnabled",
        "description": "Returns bitmask of events currently enabled on the buffer event"
    },
    {
        "href": "eventbufferevent.getinput.php",
        "name": "EventBufferEvent::getInput",
        "description": "Returns underlying input buffer associated with current buffer  event"
    },
    {
        "href": "eventbufferevent.getoutput.php",
        "name": "EventBufferEvent::getOutput",
        "description": "Returns underlying output buffer associated with current buffer  event"
    },
    {
        "href": "eventbufferevent.read.php",
        "name": "EventBufferEvent::read",
        "description": "Read buffer's data"
    },
    {
        "href": "eventbufferevent.readbuffer.php",
        "name": "EventBufferEvent::readBuffer",
        "description": "Drains the entire contents of the input buffer and places them into buf"
    },
    {
        "href": "eventbufferevent.setcallbacks.php",
        "name": "EventBufferEvent::setCallbacks",
        "description": "Assigns read, write and event(status) callbacks"
    },
    {
        "href": "eventbufferevent.setpriority.php",
        "name": "EventBufferEvent::setPriority",
        "description": "Assign a priority to a bufferevent"
    },
    {
        "href": "eventbufferevent.settimeouts.php",
        "name": "EventBufferEvent::setTimeouts",
        "description": "Set the read and write timeout for a buffer event"
    },
    {
        "href": "eventbufferevent.setwatermark.php",
        "name": "EventBufferEvent::setWatermark",
        "description": "Adjusts read and/or write watermarks"
    },
    {
        "href": "eventbufferevent.sslerror.php",
        "name": "EventBufferEvent::sslError",
        "description": "Returns most recent OpenSSL error reported on the buffer event"
    },
    {
        "href": "eventbufferevent.sslfilter.php",
        "name": "EventBufferEvent::sslFilter",
        "description": "Create a new SSL buffer event to send its data over another buffer event"
    },
    {
        "href": "eventbufferevent.sslgetcipherinfo.php",
        "name": "EventBufferEvent::sslGetCipherInfo",
        "description": "Returns a textual description of the cipher"
    },
    {
        "href": "eventbufferevent.sslgetciphername.php",
        "name": "EventBufferEvent::sslGetCipherName",
        "description": "Returns the current cipher name of the SSL connection"
    },
    {
        "href": "eventbufferevent.sslgetcipherversion.php",
        "name": "EventBufferEvent::sslGetCipherVersion",
        "description": "Returns version of cipher used by current SSL connection"
    },
    {
        "href": "eventbufferevent.sslgetprotocol.php",
        "name": "EventBufferEvent::sslGetProtocol",
        "description": "Returns the name of the protocol used for current SSL connection"
    },
    {
        "href": "eventbufferevent.sslrenegotiate.php",
        "name": "EventBufferEvent::sslRenegotiate",
        "description": "Tells a bufferevent to begin SSL renegotiation"
    },
    {
        "href": "eventbufferevent.sslsocket.php",
        "name": "EventBufferEvent::sslSocket",
        "description": "Creates a new SSL buffer event to send its data over an SSL on a socket"
    },
    {
        "href": "eventbufferevent.write.php",
        "name": "EventBufferEvent::write",
        "description": "Adds data to a buffer event's output buffer"
    },
    {
        "href": "eventbufferevent.writebuffer.php",
        "name": "EventBufferEvent::writeBuffer",
        "description": "Adds contents of the entire buffer to a buffer event's output  buffer"
    },
    {
        "href": "eventbufferevent.construct.php",
        "name": "EventBufferEvent::__construct",
        "description": "Constructs EventBufferEvent object"
    },
    {
        "href": "eventconfig.avoidmethod.php",
        "name": "EventConfig::avoidMethod",
        "description": "Tells libevent to avoid specific event method"
    },
    {
        "href": "eventconfig.requirefeatures.php",
        "name": "EventConfig::requireFeatures",
        "description": "Enters a required event method feature that the application demands"
    },
    {
        "href": "eventconfig.setflags.php",
        "name": "EventConfig::setFlags",
        "description": "Sets one or more flags to configure the eventual EventBase will be initialized"
    },
    {
        "href": "eventconfig.setmaxdispatchinterval.php",
        "name": "EventConfig::setMaxDispatchInterval",
        "description": "Prevents priority inversion"
    },
    {
        "href": "eventconfig.construct.php",
        "name": "EventConfig::__construct",
        "description": "Constructs EventConfig object"
    },
    {
        "href": "eventdnsbase.addnameserverip.php",
        "name": "EventDnsBase::addNameserverIp",
        "description": "Adds a nameserver to the DNS base"
    },
    {
        "href": "eventdnsbase.addsearch.php",
        "name": "EventDnsBase::addSearch",
        "description": "Adds a domain to the list of search domains"
    },
    {
        "href": "eventdnsbase.clearsearch.php",
        "name": "EventDnsBase::clearSearch",
        "description": "Removes all current search suffixes"
    },
    {
        "href": "eventdnsbase.countnameservers.php",
        "name": "EventDnsBase::countNameservers",
        "description": "Gets the number of configured nameservers"
    },
    {
        "href": "eventdnsbase.loadhosts.php",
        "name": "EventDnsBase::loadHosts",
        "description": "Loads a hosts file (in the same format as /etc/hosts) from hosts file"
    },
    {
        "href": "eventdnsbase.parseresolvconf.php",
        "name": "EventDnsBase::parseResolvConf",
        "description": "Scans the resolv.conf-formatted file"
    },
    {
        "href": "eventdnsbase.setoption.php",
        "name": "EventDnsBase::setOption",
        "description": "Set the value of a configuration option"
    },
    {
        "href": "eventdnsbase.setsearchndots.php",
        "name": "EventDnsBase::setSearchNdots",
        "description": "Set the 'ndots' parameter for searches"
    },
    {
        "href": "eventdnsbase.construct.php",
        "name": "EventDnsBase::__construct",
        "description": "Constructs EventDnsBase object"
    },
    {
        "href": "eventhttp.accept.php",
        "name": "EventHttp::accept",
        "description": "Makes an HTTP server accept connections on the specified socket stream or resource"
    },
    {
        "href": "eventhttp.addserveralias.php",
        "name": "EventHttp::addServerAlias",
        "description": "Adds a server alias to the HTTP server object"
    },
    {
        "href": "eventhttp.bind.php",
        "name": "EventHttp::bind",
        "description": "Binds an HTTP server on the specified address and port"
    },
    {
        "href": "eventhttp.removeserveralias.php",
        "name": "EventHttp::removeServerAlias",
        "description": "Removes server alias"
    },
    {
        "href": "eventhttp.setallowedmethods.php",
        "name": "EventHttp::setAllowedMethods",
        "description": "Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks"
    },
    {
        "href": "eventhttp.setcallback.php",
        "name": "EventHttp::setCallback",
        "description": "Sets a callback for specified URI"
    },
    {
        "href": "eventhttp.setdefaultcallback.php",
        "name": "EventHttp::setDefaultCallback",
        "description": "Sets default callback to handle requests that are not caught by specific callbacks"
    },
    {
        "href": "eventhttp.setmaxbodysize.php",
        "name": "EventHttp::setMaxBodySize",
        "description": "Sets maximum request body size"
    },
    {
        "href": "eventhttp.setmaxheaderssize.php",
        "name": "EventHttp::setMaxHeadersSize",
        "description": "Sets maximum HTTP header size"
    },
    {
        "href": "eventhttp.settimeout.php",
        "name": "EventHttp::setTimeout",
        "description": "Sets the timeout for an HTTP request"
    },
    {
        "href": "eventhttp.construct.php",
        "name": "EventHttp::__construct",
        "description": "Constructs EventHttp object(the HTTP server)"
    },
    {
        "href": "eventhttpconnection.getbase.php",
        "name": "EventHttpConnection::getBase",
        "description": "Returns event base associated with the connection"
    },
    {
        "href": "eventhttpconnection.getpeer.php",
        "name": "EventHttpConnection::getPeer",
        "description": "Gets the remote address and port associated with the connection"
    },
    {
        "href": "eventhttpconnection.makerequest.php",
        "name": "EventHttpConnection::makeRequest",
        "description": "Makes an HTTP request over the specified connection"
    },
    {
        "href": "eventhttpconnection.setclosecallback.php",
        "name": "EventHttpConnection::setCloseCallback",
        "description": "Set callback for connection close"
    },
    {
        "href": "eventhttpconnection.setlocaladdress.php",
        "name": "EventHttpConnection::setLocalAddress",
        "description": "Sets the IP address from which HTTP connections are made"
    },
    {
        "href": "eventhttpconnection.setlocalport.php",
        "name": "EventHttpConnection::setLocalPort",
        "description": "Sets the local port from which connections are made"
    },
    {
        "href": "eventhttpconnection.setmaxbodysize.php",
        "name": "EventHttpConnection::setMaxBodySize",
        "description": "Sets maximum body size for the connection"
    },
    {
        "href": "eventhttpconnection.setmaxheaderssize.php",
        "name": "EventHttpConnection::setMaxHeadersSize",
        "description": "Sets maximum header size"
    },
    {
        "href": "eventhttpconnection.setretries.php",
        "name": "EventHttpConnection::setRetries",
        "description": "Sets the retry limit for the connection"
    },
    {
        "href": "eventhttpconnection.settimeout.php",
        "name": "EventHttpConnection::setTimeout",
        "description": "Sets the timeout for the connection"
    },
    {
        "href": "eventhttpconnection.construct.php",
        "name": "EventHttpConnection::__construct",
        "description": "Constructs EventHttpConnection object"
    },
    {
        "href": "eventhttprequest.addheader.php",
        "name": "EventHttpRequest::addHeader",
        "description": "Adds an HTTP header to the headers of the request"
    },
    {
        "href": "eventhttprequest.cancel.php",
        "name": "EventHttpRequest::cancel",
        "description": "Cancels a pending HTTP request"
    },
    {
        "href": "eventhttprequest.clearheaders.php",
        "name": "EventHttpRequest::clearHeaders",
        "description": "Removes all output headers from the header list of the request"
    },
    {
        "href": "eventhttprequest.closeconnection.php",
        "name": "EventHttpRequest::closeConnection",
        "description": "Closes associated HTTP connection"
    },
    {
        "href": "eventhttprequest.findheader.php",
        "name": "EventHttpRequest::findHeader",
        "description": "Finds the value belonging a header"
    },
    {
        "href": "eventhttprequest.free.php",
        "name": "EventHttpRequest::free",
        "description": "Frees the object and removes associated events"
    },
    {
        "href": "eventhttprequest.getbufferevent.php",
        "name": "EventHttpRequest::getBufferEvent",
        "description": "Returns EventBufferEvent object"
    },
    {
        "href": "eventhttprequest.getcommand.php",
        "name": "EventHttpRequest::getCommand",
        "description": "Returns the request command(method)"
    },
    {
        "href": "eventhttprequest.getconnection.php",
        "name": "EventHttpRequest::getConnection",
        "description": "Returns EventHttpConnection object"
    },
    {
        "href": "eventhttprequest.gethost.php",
        "name": "EventHttpRequest::getHost",
        "description": "Returns the request host"
    },
    {
        "href": "eventhttprequest.getinputbuffer.php",
        "name": "EventHttpRequest::getInputBuffer",
        "description": "Returns the input buffer"
    },
    {
        "href": "eventhttprequest.getinputheaders.php",
        "name": "EventHttpRequest::getInputHeaders",
        "description": "Returns associative array of the input headers"
    },
    {
        "href": "eventhttprequest.getoutputbuffer.php",
        "name": "EventHttpRequest::getOutputBuffer",
        "description": "Returns the output buffer of the request"
    },
    {
        "href": "eventhttprequest.getoutputheaders.php",
        "name": "EventHttpRequest::getOutputHeaders",
        "description": "Returns associative array of the output headers"
    },
    {
        "href": "eventhttprequest.getresponsecode.php",
        "name": "EventHttpRequest::getResponseCode",
        "description": "Returns the response code"
    },
    {
        "href": "eventhttprequest.geturi.php",
        "name": "EventHttpRequest::getUri",
        "description": "Returns the request URI"
    },
    {
        "href": "eventhttprequest.removeheader.php",
        "name": "EventHttpRequest::removeHeader",
        "description": "Removes an HTTP header from the headers of the request"
    },
    {
        "href": "eventhttprequest.senderror.php",
        "name": "EventHttpRequest::sendError",
        "description": "Send an HTML error message to the client"
    },
    {
        "href": "eventhttprequest.sendreply.php",
        "name": "EventHttpRequest::sendReply",
        "description": "Send an HTML reply to the client"
    },
    {
        "href": "eventhttprequest.sendreplychunk.php",
        "name": "EventHttpRequest::sendReplyChunk",
        "description": "Send another data chunk as part of an ongoing chunked reply"
    },
    {
        "href": "eventhttprequest.sendreplyend.php",
        "name": "EventHttpRequest::sendReplyEnd",
        "description": "Complete a chunked reply, freeing the request as appropriate"
    },
    {
        "href": "eventhttprequest.sendreplystart.php",
        "name": "EventHttpRequest::sendReplyStart",
        "description": "Initiate a chunked reply"
    },
    {
        "href": "eventhttprequest.construct.php",
        "name": "EventHttpRequest::__construct",
        "description": "Constructs EventHttpRequest object"
    },
    {
        "href": "eventlistener.disable.php",
        "name": "EventListener::disable",
        "description": "Disables an event connect listener object"
    },
    {
        "href": "eventlistener.enable.php",
        "name": "EventListener::enable",
        "description": "Enables an event connect listener object"
    },
    {
        "href": "eventlistener.getbase.php",
        "name": "EventListener::getBase",
        "description": "Returns event base associated with the event listener"
    },
    {
        "href": "eventlistener.getsocketname.php",
        "name": "EventListener::getSocketName",
        "description": "Retreives the current address to which the  listener's socket is bound"
    },
    {
        "href": "eventlistener.setcallback.php",
        "name": "EventListener::setCallback",
        "description": "The setCallback purpose"
    },
    {
        "href": "eventlistener.seterrorcallback.php",
        "name": "EventListener::setErrorCallback",
        "description": "Set event listener's error callback"
    },
    {
        "href": "eventlistener.construct.php",
        "name": "EventListener::__construct",
        "description": "Creates new connection listener associated with an event base"
    },
    {
        "href": "eventsslcontext.construct.php",
        "name": "EventSslContext::__construct",
        "description": "Constructs an OpenSSL context for use with Event classes"
    },
    {
        "href": "eventutil.getlastsocketerrno.php",
        "name": "EventUtil::getLastSocketErrno",
        "description": "Returns the most recent socket error number"
    },
    {
        "href": "eventutil.getlastsocketerror.php",
        "name": "EventUtil::getLastSocketError",
        "description": "Returns the most recent socket error"
    },
    {
        "href": "eventutil.getsocketfd.php",
        "name": "EventUtil::getSocketFd",
        "description": "Returns numeric file descriptor of a socket, or stream"
    },
    {
        "href": "eventutil.getsocketname.php",
        "name": "EventUtil::getSocketName",
        "description": "Retreives the current address to which the  socket is bound"
    },
    {
        "href": "eventutil.setsocketoption.php",
        "name": "EventUtil::setSocketOption",
        "description": "Sets socket options"
    },
    {
        "href": "eventutil.sslrandpoll.php",
        "name": "EventUtil::sslRandPoll",
        "description": "Generates entropy by means of OpenSSL's RAND_poll()"
    },
    {
        "href": "eventutil.construct.php",
        "name": "EventUtil::__construct",
        "description": "The abstract constructor"
    },
    {
        "href": "evfork.createstopped.php",
        "name": "EvFork::createStopped",
        "description": "Creates a stopped instance of EvFork watcher class"
    },
    {
        "href": "evfork.construct.php",
        "name": "EvFork::__construct",
        "description": "Constructs the EvFork watcher object"
    },
    {
        "href": "evidle.createstopped.php",
        "name": "EvIdle::createStopped",
        "description": "Creates instance of a stopped EvIdle watcher object"
    },
    {
        "href": "evidle.construct.php",
        "name": "EvIdle::__construct",
        "description": "Constructs the EvIdle watcher object"
    },
    {
        "href": "evio.createstopped.php",
        "name": "EvIo::createStopped",
        "description": "Create stopped EvIo watcher object"
    },
    {
        "href": "evio.set.php",
        "name": "EvIo::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evio.construct.php",
        "name": "EvIo::__construct",
        "description": "Constructs EvIo watcher object"
    },
    {
        "href": "evloop.backend.php",
        "name": "EvLoop::backend",
        "description": "Returns an integer describing the backend used by libev"
    },
    {
        "href": "evloop.check.php",
        "name": "EvLoop::check",
        "description": "Creates EvCheck object associated with the current event loop  instance"
    },
    {
        "href": "evloop.child.php",
        "name": "EvLoop::child",
        "description": "Creates EvChild object associated with the current event loop"
    },
    {
        "href": "evloop.defaultloop.php",
        "name": "EvLoop::defaultLoop",
        "description": "Returns or creates the default event loop"
    },
    {
        "href": "evloop.embed.php",
        "name": "EvLoop::embed",
        "description": "Creates an instance of EvEmbed watcher associated  with the current EvLoop object"
    },
    {
        "href": "evloop.fork.php",
        "name": "EvLoop::fork",
        "description": "Creates EvFork watcher object associated with the current event  loop instance"
    },
    {
        "href": "evloop.idle.php",
        "name": "EvLoop::idle",
        "description": "Creates EvIdle watcher object associated with the current event  loop instance"
    },
    {
        "href": "evloop.invokepending.php",
        "name": "EvLoop::invokePending",
        "description": "Invoke all pending watchers while resetting their pending state"
    },
    {
        "href": "evloop.io.php",
        "name": "EvLoop::io",
        "description": "Create EvIo watcher object associated with the current event  loop instance"
    },
    {
        "href": "evloop.loopfork.php",
        "name": "EvLoop::loopFork",
        "description": "Must be called after a fork"
    },
    {
        "href": "evloop.now.php",
        "name": "EvLoop::now",
        "description": "Returns the current \"event loop time\""
    },
    {
        "href": "evloop.nowupdate.php",
        "name": "EvLoop::nowUpdate",
        "description": "Establishes the current time by querying the kernel, updating the time    returned by EvLoop::now in the progress"
    },
    {
        "href": "evloop.periodic.php",
        "name": "EvLoop::periodic",
        "description": "Creates EvPeriodic watcher object associated with the current  event loop instance"
    },
    {
        "href": "evloop.prepare.php",
        "name": "EvLoop::prepare",
        "description": "Creates EvPrepare watcher object associated with the current  event loop instance"
    },
    {
        "href": "evloop.resume.php",
        "name": "EvLoop::resume",
        "description": "Resume previously suspended default event loop"
    },
    {
        "href": "evloop.run.php",
        "name": "EvLoop::run",
        "description": "Begin checking for events and calling callbacks for the loop"
    },
    {
        "href": "evloop.signal.php",
        "name": "EvLoop::signal",
        "description": "Creates EvSignal watcher object associated with the current  event loop instance"
    },
    {
        "href": "evloop.stat.php",
        "name": "EvLoop::stat",
        "description": "Creates EvStat watcher object associated with the current event  loop instance"
    },
    {
        "href": "evloop.stop.php",
        "name": "EvLoop::stop",
        "description": "Stops the event loop"
    },
    {
        "href": "evloop.suspend.php",
        "name": "EvLoop::suspend",
        "description": "Suspend the loop"
    },
    {
        "href": "evloop.timer.php",
        "name": "EvLoop::timer",
        "description": "Creates EvTimer watcher object associated with the current event  loop instance"
    },
    {
        "href": "evloop.verify.php",
        "name": "EvLoop::verify",
        "description": "Performs internal consistency checks(for debugging)"
    },
    {
        "href": "evloop.construct.php",
        "name": "EvLoop::__construct",
        "description": "Constructs the event loop object"
    },
    {
        "href": "evperiodic.again.php",
        "name": "EvPeriodic::again",
        "description": "Simply stops and restarts the periodic watcher again"
    },
    {
        "href": "evperiodic.at.php",
        "name": "EvPeriodic::at",
        "description": "Returns the absolute time that this  watcher is supposed to trigger next"
    },
    {
        "href": "evperiodic.createstopped.php",
        "name": "EvPeriodic::createStopped",
        "description": "Create a stopped EvPeriodic watcher"
    },
    {
        "href": "evperiodic.set.php",
        "name": "EvPeriodic::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evperiodic.construct.php",
        "name": "EvPeriodic::__construct",
        "description": "Constructs EvPeriodic watcher object"
    },
    {
        "href": "evprepare.createstopped.php",
        "name": "EvPrepare::createStopped",
        "description": "Creates a stopped instance of EvPrepare watcher"
    },
    {
        "href": "evprepare.construct.php",
        "name": "EvPrepare::__construct",
        "description": "Constructs EvPrepare watcher object"
    },
    {
        "href": "evsignal.createstopped.php",
        "name": "EvSignal::createStopped",
        "description": "Create stopped EvSignal watcher object"
    },
    {
        "href": "evsignal.set.php",
        "name": "EvSignal::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evsignal.construct.php",
        "name": "EvSignal::__construct",
        "description": "Constructs EvSignal watcher object"
    },
    {
        "href": "evstat.attr.php",
        "name": "EvStat::attr",
        "description": "Returns the values most recently detected by Ev"
    },
    {
        "href": "evstat.createstopped.php",
        "name": "EvStat::createStopped",
        "description": "Create a stopped EvStat watcher object"
    },
    {
        "href": "evstat.prev.php",
        "name": "EvStat::prev",
        "description": "Returns the previous set of values returned by EvStat::attr"
    },
    {
        "href": "evstat.set.php",
        "name": "EvStat::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evstat.stat.php",
        "name": "EvStat::stat",
        "description": "Initiates the stat call"
    },
    {
        "href": "evstat.construct.php",
        "name": "EvStat::__construct",
        "description": "Constructs EvStat watcher object"
    },
    {
        "href": "evtimer.again.php",
        "name": "EvTimer::again",
        "description": "Restarts the timer watcher"
    },
    {
        "href": "evtimer.createstopped.php",
        "name": "EvTimer::createStopped",
        "description": "Creates EvTimer stopped watcher object"
    },
    {
        "href": "evtimer.set.php",
        "name": "EvTimer::set",
        "description": "Configures the watcher"
    },
    {
        "href": "evtimer.construct.php",
        "name": "EvTimer::__construct",
        "description": "Constructs an EvTimer watcher object"
    },
    {
        "href": "evwatcher.clear.php",
        "name": "EvWatcher::clear",
        "description": "Clear watcher pending status"
    },
    {
        "href": "evwatcher.feed.php",
        "name": "EvWatcher::feed",
        "description": "Feeds the given revents set into the event loop"
    },
    {
        "href": "evwatcher.getloop.php",
        "name": "EvWatcher::getLoop",
        "description": "Returns the loop responsible for the watcher"
    },
    {
        "href": "evwatcher.invoke.php",
        "name": "EvWatcher::invoke",
        "description": "Invokes the watcher callback with the given received events bit  mask"
    },
    {
        "href": "evwatcher.keepalive.php",
        "name": "EvWatcher::keepalive",
        "description": "Configures whether to keep the loop from returning"
    },
    {
        "href": "evwatcher.setcallback.php",
        "name": "EvWatcher::setCallback",
        "description": "Sets new callback for the watcher"
    },
    {
        "href": "evwatcher.start.php",
        "name": "EvWatcher::start",
        "description": "Starts the watcher"
    },
    {
        "href": "evwatcher.stop.php",
        "name": "EvWatcher::stop",
        "description": "Stops the watcher"
    },
    {
        "href": "evwatcher.construct.php",
        "name": "EvWatcher::__construct",
        "description": "Abstract constructor of a watcher object"
    },
    {
        "href": "exception.getcode.php",
        "name": "Exception::getCode",
        "description": "Gets the Exception code"
    },
    {
        "href": "exception.getfile.php",
        "name": "Exception::getFile",
        "description": "Gets the file in which the exception was created"
    },
    {
        "href": "exception.getline.php",
        "name": "Exception::getLine",
        "description": "Gets the line in which the exception was created"
    },
    {
        "href": "exception.getmessage.php",
        "name": "Exception::getMessage",
        "description": "Gets the Exception message"
    },
    {
        "href": "exception.getprevious.php",
        "name": "Exception::getPrevious",
        "description": "Returns previous Throwable"
    },
    {
        "href": "exception.gettrace.php",
        "name": "Exception::getTrace",
        "description": "Gets the stack trace"
    },
    {
        "href": "exception.gettraceasstring.php",
        "name": "Exception::getTraceAsString",
        "description": "Gets the stack trace as a string"
    },
    {
        "href": "exception.clone.php",
        "name": "Exception::__clone",
        "description": "Clone the exception"
    },
    {
        "href": "exception.construct.php",
        "name": "Exception::__construct",
        "description": "Construct the exception"
    },
    {
        "href": "exception.tostring.php",
        "name": "Exception::__toString",
        "description": "String representation of the exception"
    },
    {
        "href": "function.exec.php",
        "name": "exec",
        "description": "Execute an external program"
    },
    {
        "href": "mysql-xdevapi-executable.execute.php",
        "name": "Executable::execute",
        "description": "Execute statement"
    },
    {
        "href": "mysql-xdevapi-executionstatus.construct.php",
        "name": "ExecutionStatus::__construct",
        "description": "ExecutionStatus constructor"
    },
    {
        "href": "function.exif-imagetype.php",
        "name": "exif_imagetype",
        "description": "Determine the type of an image"
    },
    {
        "href": "function.exif-read-data.php",
        "name": "exif_read_data",
        "description": "Reads the EXIF headers from an image file"
    },
    {
        "href": "function.exif-tagname.php",
        "name": "exif_tagname",
        "description": "Get the header name for an index"
    },
    {
        "href": "function.exif-thumbnail.php",
        "name": "exif_thumbnail",
        "description": "Retrieve the embedded thumbnail of an image"
    },
    {
        "href": "function.exit.php",
        "name": "exit",
        "description": "Output a message and terminate the current script"
    },
    {
        "href": "function.exp.php",
        "name": "exp",
        "description": "Calculates the exponent of e"
    },
    {
        "href": "wrappers.expect.php",
        "name": "expect://",
        "description": "Process Interaction Streams"
    },
    {
        "href": "function.expect-expectl.php",
        "name": "expect_expectl",
        "description": "Waits until the output from a process matches one  of the patterns, a specified time period has passed, or an EOF is seen"
    },
    {
        "href": "function.expect-popen.php",
        "name": "expect_popen",
        "description": "Execute command via Bourne shell, and open the PTY stream to  the process"
    },
    {
        "href": "function.explode.php",
        "name": "explode",
        "description": "Split a string by a string"
    },
    {
        "href": "function.expm1.php",
        "name": "expm1",
        "description": "Returns exp(number) 1, computed in a way that is accurate even   when the value of number is close to zero"
    },
    {
        "href": "function.mysql-xdevapi-expression.php",
        "name": "expression",
        "description": "Bind prepared statement variables as parameters"
    },
    {
        "href": "mysql-xdevapi-expression.construct.php",
        "name": "Expression::__construct",
        "description": "Expression constructor"
    },
    {
        "href": "function.extension-loaded.php",
        "name": "extension_loaded",
        "description": "Find out whether an extension is loaded"
    },
    {
        "href": "function.extract.php",
        "name": "extract",
        "description": "Import variables into the current symbol table from an array"
    },
    {
        "href": "function.ezmlm-hash.php",
        "name": "ezmlm_hash",
        "description": "Calculate the hash value needed by EZMLM"
    },
    {
        "href": "fannconnection.getfromneuron.php",
        "name": "FANNConnection::getFromNeuron",
        "description": "Returns the postions of starting neuron"
    },
    {
        "href": "fannconnection.gettoneuron.php",
        "name": "FANNConnection::getToNeuron",
        "description": "Returns the postions of terminating neuron"
    },
    {
        "href": "fannconnection.getweight.php",
        "name": "FANNConnection::getWeight",
        "description": "Returns the connection weight"
    },
    {
        "href": "fannconnection.setweight.php",
        "name": "FANNConnection::setWeight",
        "description": "Sets the connections weight"
    },
    {
        "href": "fannconnection.construct.php",
        "name": "FANNConnection::__construct",
        "description": "The connection constructor"
    },
    {
        "href": "function.fann-cascadetrain-on-data.php",
        "name": "fann_cascadetrain_on_data",
        "description": "Trains on an entire dataset, for a period of time using the Cascade2 training algorithm"
    },
    {
        "href": "function.fann-cascadetrain-on-file.php",
        "name": "fann_cascadetrain_on_file",
        "description": "Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm"
    },
    {
        "href": "function.fann-clear-scaling-params.php",
        "name": "fann_clear_scaling_params",
        "description": "Clears scaling parameters"
    },
    {
        "href": "function.fann-copy.php",
        "name": "fann_copy",
        "description": "Creates a copy of a fann structure"
    },
    {
        "href": "function.fann-create-from-file.php",
        "name": "fann_create_from_file",
        "description": "Constructs a backpropagation neural network from a configuration file"
    },
    {
        "href": "function.fann-create-shortcut.php",
        "name": "fann_create_shortcut",
        "description": "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections"
    },
    {
        "href": "function.fann-create-shortcut-array.php",
        "name": "fann_create_shortcut_array",
        "description": "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections"
    },
    {
        "href": "function.fann-create-sparse.php",
        "name": "fann_create_sparse",
        "description": "Creates a standard backpropagation neural network, which is not fully connected"
    },
    {
        "href": "function.fann-create-sparse-array.php",
        "name": "fann_create_sparse_array",
        "description": "Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes"
    },
    {
        "href": "function.fann-create-standard.php",
        "name": "fann_create_standard",
        "description": "Creates a standard fully connected backpropagation neural network"
    },
    {
        "href": "function.fann-create-standard-array.php",
        "name": "fann_create_standard_array",
        "description": "Creates a standard fully connected backpropagation neural network using an array of layer sizes"
    },
    {
        "href": "function.fann-create-train.php",
        "name": "fann_create_train",
        "description": "Creates an empty training data struct"
    },
    {
        "href": "function.fann-create-train-from-callback.php",
        "name": "fann_create_train_from_callback",
        "description": "Creates the training data struct from a user supplied function"
    },
    {
        "href": "function.fann-descale-input.php",
        "name": "fann_descale_input",
        "description": "Scale data in input vector after get it from ann based on previously calculated parameters"
    },
    {
        "href": "function.fann-descale-output.php",
        "name": "fann_descale_output",
        "description": "Scale data in output vector after get it from ann based on previously calculated parameters"
    },
    {
        "href": "function.fann-descale-train.php",
        "name": "fann_descale_train",
        "description": "Descale input and output data based on previously calculated parameters"
    },
    {
        "href": "function.fann-destroy.php",
        "name": "fann_destroy",
        "description": "Destroys the entire network and properly freeing all the associated memory"
    },
    {
        "href": "function.fann-destroy-train.php",
        "name": "fann_destroy_train",
        "description": "Destructs the training data"
    },
    {
        "href": "function.fann-duplicate-train-data.php",
        "name": "fann_duplicate_train_data",
        "description": "Returns an exact copy of a fann train data"
    },
    {
        "href": "function.fann-get-activation-function.php",
        "name": "fann_get_activation_function",
        "description": "Returns the activation function"
    },
    {
        "href": "function.fann-get-activation-steepness.php",
        "name": "fann_get_activation_steepness",
        "description": "Returns the activation steepness for supplied neuron and layer number"
    },
    {
        "href": "function.fann-get-bias-array.php",
        "name": "fann_get_bias_array",
        "description": "Get the number of bias in each layer in the network"
    },
    {
        "href": "function.fann-get-bit-fail.php",
        "name": "fann_get_bit_fail",
        "description": "The number of fail bits"
    },
    {
        "href": "function.fann-get-bit-fail-limit.php",
        "name": "fann_get_bit_fail_limit",
        "description": "Returns the bit fail limit used during training"
    },
    {
        "href": "function.fann-get-cascade-activation-functions.php",
        "name": "fann_get_cascade_activation_functions",
        "description": "Returns the cascade activation functions"
    },
    {
        "href": "function.fann-get-cascade-activation-functions-count.php",
        "name": "fann_get_cascade_activation_functions_count",
        "description": "Returns the number of cascade activation functions"
    },
    {
        "href": "function.fann-get-cascade-activation-steepnesses.php",
        "name": "fann_get_cascade_activation_steepnesses",
        "description": "Returns the cascade activation steepnesses"
    },
    {
        "href": "function.fann-get-cascade-activation-steepnesses-count.php",
        "name": "fann_get_cascade_activation_steepnesses_count",
        "description": "The number of activation steepnesses"
    },
    {
        "href": "function.fann-get-cascade-candidate-change-fraction.php",
        "name": "fann_get_cascade_candidate_change_fraction",
        "description": "Returns the cascade candidate change fraction"
    },
    {
        "href": "function.fann-get-cascade-candidate-limit.php",
        "name": "fann_get_cascade_candidate_limit",
        "description": "Return the candidate limit"
    },
    {
        "href": "function.fann-get-cascade-candidate-stagnation-epochs.php",
        "name": "fann_get_cascade_candidate_stagnation_epochs",
        "description": "Returns the number of cascade candidate stagnation epochs"
    },
    {
        "href": "function.fann-get-cascade-max-cand-epochs.php",
        "name": "fann_get_cascade_max_cand_epochs",
        "description": "Returns the maximum candidate epochs"
    },
    {
        "href": "function.fann-get-cascade-max-out-epochs.php",
        "name": "fann_get_cascade_max_out_epochs",
        "description": "Returns the maximum out epochs"
    },
    {
        "href": "function.fann-get-cascade-min-cand-epochs.php",
        "name": "fann_get_cascade_min_cand_epochs",
        "description": "Returns the minimum candidate epochs"
    },
    {
        "href": "function.fann-get-cascade-min-out-epochs.php",
        "name": "fann_get_cascade_min_out_epochs",
        "description": "Returns the minimum out epochs"
    },
    {
        "href": "function.fann-get-cascade-num-candidates.php",
        "name": "fann_get_cascade_num_candidates",
        "description": "Returns the number of candidates used during training"
    },
    {
        "href": "function.fann-get-cascade-num-candidate-groups.php",
        "name": "fann_get_cascade_num_candidate_groups",
        "description": "Returns the number of candidate groups"
    },
    {
        "href": "function.fann-get-cascade-output-change-fraction.php",
        "name": "fann_get_cascade_output_change_fraction",
        "description": "Returns the cascade output change fraction"
    },
    {
        "href": "function.fann-get-cascade-output-stagnation-epochs.php",
        "name": "fann_get_cascade_output_stagnation_epochs",
        "description": "Returns the number of cascade output stagnation epochs"
    },
    {
        "href": "function.fann-get-cascade-weight-multiplier.php",
        "name": "fann_get_cascade_weight_multiplier",
        "description": "Returns the weight multiplier"
    },
    {
        "href": "function.fann-get-connection-array.php",
        "name": "fann_get_connection_array",
        "description": "Get connections in the network"
    },
    {
        "href": "function.fann-get-connection-rate.php",
        "name": "fann_get_connection_rate",
        "description": "Get the connection rate used when the network was created"
    },
    {
        "href": "function.fann-get-errno.php",
        "name": "fann_get_errno",
        "description": "Returns the last error number"
    },
    {
        "href": "function.fann-get-errstr.php",
        "name": "fann_get_errstr",
        "description": "Returns the last errstr"
    },
    {
        "href": "function.fann-get-layer-array.php",
        "name": "fann_get_layer_array",
        "description": "Get the number of neurons in each layer in the network"
    },
    {
        "href": "function.fann-get-learning-momentum.php",
        "name": "fann_get_learning_momentum",
        "description": "Returns the learning momentum"
    },
    {
        "href": "function.fann-get-learning-rate.php",
        "name": "fann_get_learning_rate",
        "description": "Returns the learning rate"
    },
    {
        "href": "function.fann-get-mse.php",
        "name": "fann_get_MSE",
        "description": "Reads the mean square error from the network"
    },
    {
        "href": "function.fann-get-network-type.php",
        "name": "fann_get_network_type",
        "description": "Get the type of neural network it was created as"
    },
    {
        "href": "function.fann-get-num-input.php",
        "name": "fann_get_num_input",
        "description": "Get the number of input neurons"
    },
    {
        "href": "function.fann-get-num-layers.php",
        "name": "fann_get_num_layers",
        "description": "Get the number of layers in the neural network"
    },
    {
        "href": "function.fann-get-num-output.php",
        "name": "fann_get_num_output",
        "description": "Get the number of output neurons"
    },
    {
        "href": "function.fann-get-quickprop-decay.php",
        "name": "fann_get_quickprop_decay",
        "description": "Returns the decay which is a factor that weights should decrease in each iteration during quickprop training"
    },
    {
        "href": "function.fann-get-quickprop-mu.php",
        "name": "fann_get_quickprop_mu",
        "description": "Returns the mu factor"
    },
    {
        "href": "function.fann-get-rprop-decrease-factor.php",
        "name": "fann_get_rprop_decrease_factor",
        "description": "Returns the increase factor used during RPROP training"
    },
    {
        "href": "function.fann-get-rprop-delta-max.php",
        "name": "fann_get_rprop_delta_max",
        "description": "Returns the maximum step-size"
    },
    {
        "href": "function.fann-get-rprop-delta-min.php",
        "name": "fann_get_rprop_delta_min",
        "description": "Returns the minimum step-size"
    },
    {
        "href": "function.fann-get-rprop-delta-zero.php",
        "name": "fann_get_rprop_delta_zero",
        "description": "Returns the initial step-size"
    },
    {
        "href": "function.fann-get-rprop-increase-factor.php",
        "name": "fann_get_rprop_increase_factor",
        "description": "Returns the increase factor used during RPROP training"
    },
    {
        "href": "function.fann-get-sarprop-step-error-shift.php",
        "name": "fann_get_sarprop_step_error_shift",
        "description": "Returns the sarprop step error shift"
    },
    {
        "href": "function.fann-get-sarprop-step-error-threshold-factor.php",
        "name": "fann_get_sarprop_step_error_threshold_factor",
        "description": "Returns the sarprop step error threshold factor"
    },
    {
        "href": "function.fann-get-sarprop-temperature.php",
        "name": "fann_get_sarprop_temperature",
        "description": "Returns the sarprop temperature"
    },
    {
        "href": "function.fann-get-sarprop-weight-decay-shift.php",
        "name": "fann_get_sarprop_weight_decay_shift",
        "description": "Returns the sarprop weight decay shift"
    },
    {
        "href": "function.fann-get-total-connections.php",
        "name": "fann_get_total_connections",
        "description": "Get the total number of connections in the entire network"
    },
    {
        "href": "function.fann-get-total-neurons.php",
        "name": "fann_get_total_neurons",
        "description": "Get the total number of neurons in the entire network"
    },
    {
        "href": "function.fann-get-training-algorithm.php",
        "name": "fann_get_training_algorithm",
        "description": "Returns the training algorithm"
    },
    {
        "href": "function.fann-get-train-error-function.php",
        "name": "fann_get_train_error_function",
        "description": "Returns the error function used during training"
    },
    {
        "href": "function.fann-get-train-stop-function.php",
        "name": "fann_get_train_stop_function",
        "description": "Returns the stop function used during training"
    },
    {
        "href": "function.fann-init-weights.php",
        "name": "fann_init_weights",
        "description": "Initialize the weights using Widrow + Nguyen’s algorithm"
    },
    {
        "href": "function.fann-length-train-data.php",
        "name": "fann_length_train_data",
        "description": "Returns the number of training patterns in the train data"
    },
    {
        "href": "function.fann-merge-train-data.php",
        "name": "fann_merge_train_data",
        "description": "Merges the train data"
    },
    {
        "href": "function.fann-num-input-train-data.php",
        "name": "fann_num_input_train_data",
        "description": "Returns the number of inputs in each of the training patterns in the train data"
    },
    {
        "href": "function.fann-num-output-train-data.php",
        "name": "fann_num_output_train_data",
        "description": "Returns the number of outputs in each of the training patterns in the train data"
    },
    {
        "href": "function.fann-print-error.php",
        "name": "fann_print_error",
        "description": "Prints the error string"
    },
    {
        "href": "function.fann-randomize-weights.php",
        "name": "fann_randomize_weights",
        "description": "Give each connection a random weight between min_weight and max_weight"
    },
    {
        "href": "function.fann-read-train-from-file.php",
        "name": "fann_read_train_from_file",
        "description": "Reads a file that stores training data"
    },
    {
        "href": "function.fann-reset-errno.php",
        "name": "fann_reset_errno",
        "description": "Resets the last error number"
    },
    {
        "href": "function.fann-reset-errstr.php",
        "name": "fann_reset_errstr",
        "description": "Resets the last error string"
    },
    {
        "href": "function.fann-reset-mse.php",
        "name": "fann_reset_MSE",
        "description": "Resets the mean square error from the network"
    },
    {
        "href": "function.fann-run.php",
        "name": "fann_run",
        "description": "Will run input through the neural network"
    },
    {
        "href": "function.fann-save.php",
        "name": "fann_save",
        "description": "Saves the entire network to a configuration file"
    },
    {
        "href": "function.fann-save-train.php",
        "name": "fann_save_train",
        "description": "Save the training structure to a file"
    },
    {
        "href": "function.fann-scale-input.php",
        "name": "fann_scale_input",
        "description": "Scale data in input vector before feed it to ann based on previously calculated parameters"
    },
    {
        "href": "function.fann-scale-input-train-data.php",
        "name": "fann_scale_input_train_data",
        "description": "Scales the inputs in the training data to the specified range"
    },
    {
        "href": "function.fann-scale-output.php",
        "name": "fann_scale_output",
        "description": "Scale data in output vector before feed it to ann based on previously calculated parameters"
    },
    {
        "href": "function.fann-scale-output-train-data.php",
        "name": "fann_scale_output_train_data",
        "description": "Scales the outputs in the training data to the specified range"
    },
    {
        "href": "function.fann-scale-train.php",
        "name": "fann_scale_train",
        "description": "Scale input and output data based on previously calculated parameters"
    },
    {
        "href": "function.fann-scale-train-data.php",
        "name": "fann_scale_train_data",
        "description": "Scales the inputs and outputs in the training data to the specified range"
    },
    {
        "href": "function.fann-set-activation-function.php",
        "name": "fann_set_activation_function",
        "description": "Sets the activation function for supplied neuron and layer"
    },
    {
        "href": "function.fann-set-activation-function-hidden.php",
        "name": "fann_set_activation_function_hidden",
        "description": "Sets the activation function for all of the hidden layers"
    },
    {
        "href": "function.fann-set-activation-function-layer.php",
        "name": "fann_set_activation_function_layer",
        "description": "Sets the activation function for all the neurons in the supplied layer"
    },
    {
        "href": "function.fann-set-activation-function-output.php",
        "name": "fann_set_activation_function_output",
        "description": "Sets the activation function for the output layer"
    },
    {
        "href": "function.fann-set-activation-steepness.php",
        "name": "fann_set_activation_steepness",
        "description": "Sets the activation steepness for supplied neuron and layer number"
    },
    {
        "href": "function.fann-set-activation-steepness-hidden.php",
        "name": "fann_set_activation_steepness_hidden",
        "description": "Sets the steepness of the activation steepness for all neurons in the all hidden layers"
    },
    {
        "href": "function.fann-set-activation-steepness-layer.php",
        "name": "fann_set_activation_steepness_layer",
        "description": "Sets the activation steepness for all of the neurons in the supplied layer number"
    },
    {
        "href": "function.fann-set-activation-steepness-output.php",
        "name": "fann_set_activation_steepness_output",
        "description": "Sets the steepness of the activation steepness in the output layer"
    },
    {
        "href": "function.fann-set-bit-fail-limit.php",
        "name": "fann_set_bit_fail_limit",
        "description": "Set the bit fail limit used during training"
    },
    {
        "href": "function.fann-set-callback.php",
        "name": "fann_set_callback",
        "description": "Sets the callback function for use during training"
    },
    {
        "href": "function.fann-set-cascade-activation-functions.php",
        "name": "fann_set_cascade_activation_functions",
        "description": "Sets the array of cascade candidate activation functions"
    },
    {
        "href": "function.fann-set-cascade-activation-steepnesses.php",
        "name": "fann_set_cascade_activation_steepnesses",
        "description": "Sets the array of cascade candidate activation steepnesses"
    },
    {
        "href": "function.fann-set-cascade-candidate-change-fraction.php",
        "name": "fann_set_cascade_candidate_change_fraction",
        "description": "Sets the cascade candidate change fraction"
    },
    {
        "href": "function.fann-set-cascade-candidate-limit.php",
        "name": "fann_set_cascade_candidate_limit",
        "description": "Sets the candidate limit"
    },
    {
        "href": "function.fann-set-cascade-candidate-stagnation-epochs.php",
        "name": "fann_set_cascade_candidate_stagnation_epochs",
        "description": "Sets the number of cascade candidate stagnation epochs"
    },
    {
        "href": "function.fann-set-cascade-max-cand-epochs.php",
        "name": "fann_set_cascade_max_cand_epochs",
        "description": "Sets the max candidate epochs"
    },
    {
        "href": "function.fann-set-cascade-max-out-epochs.php",
        "name": "fann_set_cascade_max_out_epochs",
        "description": "Sets the maximum out epochs"
    },
    {
        "href": "function.fann-set-cascade-min-cand-epochs.php",
        "name": "fann_set_cascade_min_cand_epochs",
        "description": "Sets the min candidate epochs"
    },
    {
        "href": "function.fann-set-cascade-min-out-epochs.php",
        "name": "fann_set_cascade_min_out_epochs",
        "description": "Sets the minimum out epochs"
    },
    {
        "href": "function.fann-set-cascade-num-candidate-groups.php",
        "name": "fann_set_cascade_num_candidate_groups",
        "description": "Sets the number of candidate groups"
    },
    {
        "href": "function.fann-set-cascade-output-change-fraction.php",
        "name": "fann_set_cascade_output_change_fraction",
        "description": "Sets the cascade output change fraction"
    },
    {
        "href": "function.fann-set-cascade-output-stagnation-epochs.php",
        "name": "fann_set_cascade_output_stagnation_epochs",
        "description": "Sets the number of cascade output stagnation epochs"
    },
    {
        "href": "function.fann-set-cascade-weight-multiplier.php",
        "name": "fann_set_cascade_weight_multiplier",
        "description": "Sets the weight multiplier"
    },
    {
        "href": "function.fann-set-error-log.php",
        "name": "fann_set_error_log",
        "description": "Sets where the errors are logged to"
    },
    {
        "href": "function.fann-set-input-scaling-params.php",
        "name": "fann_set_input_scaling_params",
        "description": "Calculate input scaling parameters for future use based on training data"
    },
    {
        "href": "function.fann-set-learning-momentum.php",
        "name": "fann_set_learning_momentum",
        "description": "Sets the learning momentum"
    },
    {
        "href": "function.fann-set-learning-rate.php",
        "name": "fann_set_learning_rate",
        "description": "Sets the learning rate"
    },
    {
        "href": "function.fann-set-output-scaling-params.php",
        "name": "fann_set_output_scaling_params",
        "description": "Calculate output scaling parameters for future use based on training data"
    },
    {
        "href": "function.fann-set-quickprop-decay.php",
        "name": "fann_set_quickprop_decay",
        "description": "Sets the quickprop decay factor"
    },
    {
        "href": "function.fann-set-quickprop-mu.php",
        "name": "fann_set_quickprop_mu",
        "description": "Sets the quickprop mu factor"
    },
    {
        "href": "function.fann-set-rprop-decrease-factor.php",
        "name": "fann_set_rprop_decrease_factor",
        "description": "Sets the decrease factor used during RPROP training"
    },
    {
        "href": "function.fann-set-rprop-delta-max.php",
        "name": "fann_set_rprop_delta_max",
        "description": "Sets the maximum step-size"
    },
    {
        "href": "function.fann-set-rprop-delta-min.php",
        "name": "fann_set_rprop_delta_min",
        "description": "Sets the minimum step-size"
    },
    {
        "href": "function.fann-set-rprop-delta-zero.php",
        "name": "fann_set_rprop_delta_zero",
        "description": "Sets the initial step-size"
    },
    {
        "href": "function.fann-set-rprop-increase-factor.php",
        "name": "fann_set_rprop_increase_factor",
        "description": "Sets the increase factor used during RPROP training"
    },
    {
        "href": "function.fann-set-sarprop-step-error-shift.php",
        "name": "fann_set_sarprop_step_error_shift",
        "description": "Sets the sarprop step error shift"
    },
    {
        "href": "function.fann-set-sarprop-step-error-threshold-factor.php",
        "name": "fann_set_sarprop_step_error_threshold_factor",
        "description": "Sets the sarprop step error threshold factor"
    },
    {
        "href": "function.fann-set-sarprop-temperature.php",
        "name": "fann_set_sarprop_temperature",
        "description": "Sets the sarprop temperature"
    },
    {
        "href": "function.fann-set-sarprop-weight-decay-shift.php",
        "name": "fann_set_sarprop_weight_decay_shift",
        "description": "Sets the sarprop weight decay shift"
    },
    {
        "href": "function.fann-set-scaling-params.php",
        "name": "fann_set_scaling_params",
        "description": "Calculate input and output scaling parameters for future use based on training data"
    },
    {
        "href": "function.fann-set-training-algorithm.php",
        "name": "fann_set_training_algorithm",
        "description": "Sets the training algorithm"
    },
    {
        "href": "function.fann-set-train-error-function.php",
        "name": "fann_set_train_error_function",
        "description": "Sets the error function used during training"
    },
    {
        "href": "function.fann-set-train-stop-function.php",
        "name": "fann_set_train_stop_function",
        "description": "Sets the stop function used during training"
    },
    {
        "href": "function.fann-set-weight.php",
        "name": "fann_set_weight",
        "description": "Set a connection in the network"
    },
    {
        "href": "function.fann-set-weight-array.php",
        "name": "fann_set_weight_array",
        "description": "Set connections in the network"
    },
    {
        "href": "function.fann-shuffle-train-data.php",
        "name": "fann_shuffle_train_data",
        "description": "Shuffles training data, randomizing the order"
    },
    {
        "href": "function.fann-subset-train-data.php",
        "name": "fann_subset_train_data",
        "description": "Returns an copy of a subset of the train data"
    },
    {
        "href": "function.fann-test.php",
        "name": "fann_test",
        "description": "Test with a set of inputs, and a set of desired outputs"
    },
    {
        "href": "function.fann-test-data.php",
        "name": "fann_test_data",
        "description": "Test a set of training data and calculates the MSE for the training data"
    },
    {
        "href": "function.fann-train.php",
        "name": "fann_train",
        "description": "Train one iteration with a set of inputs, and a set of desired outputs"
    },
    {
        "href": "function.fann-train-epoch.php",
        "name": "fann_train_epoch",
        "description": "Train one epoch with a set of training data"
    },
    {
        "href": "function.fann-train-on-data.php",
        "name": "fann_train_on_data",
        "description": "Trains on an entire dataset for a period of time"
    },
    {
        "href": "function.fann-train-on-file.php",
        "name": "fann_train_on_file",
        "description": "Trains on an entire dataset, which is read from file, for a period of time"
    },
    {
        "href": "function.fastcgi-finish-request.php",
        "name": "fastcgi_finish_request",
        "description": "Flushes all response data to the client"
    },
    {
        "href": "function.fbird-add-user.php",
        "name": "fbird_add_user",
        "description": "Alias of ibase_add_user"
    },
    {
        "href": "function.fbird-affected-rows.php",
        "name": "fbird_affected_rows",
        "description": "Alias of ibase_affected_rows"
    },
    {
        "href": "function.fbird-backup.php",
        "name": "fbird_backup",
        "description": "Alias of ibase_backup"
    },
    {
        "href": "function.fbird-blob-add.php",
        "name": "fbird_blob_add",
        "description": "Alias of ibase_blob_add"
    },
    {
        "href": "function.fbird-blob-cancel.php",
        "name": "fbird_blob_cancel",
        "description": "Cancel creating blob"
    },
    {
        "href": "function.fbird-blob-close.php",
        "name": "fbird_blob_close",
        "description": "Alias of ibase_blob_close"
    },
    {
        "href": "function.fbird-blob-create.php",
        "name": "fbird_blob_create",
        "description": "Alias of ibase_blob_create"
    },
    {
        "href": "function.fbird-blob-echo.php",
        "name": "fbird_blob_echo",
        "description": "Alias of ibase_blob_echo"
    },
    {
        "href": "function.fbird-blob-get.php",
        "name": "fbird_blob_get",
        "description": "Alias of ibase_blob_get"
    },
    {
        "href": "function.fbird-blob-import.php",
        "name": "fbird_blob_import",
        "description": "Alias of ibase_blob_import"
    },
    {
        "href": "function.fbird-blob-info.php",
        "name": "fbird_blob_info",
        "description": "Alias of ibase_blob_info"
    },
    {
        "href": "function.fbird-blob-open.php",
        "name": "fbird_blob_open",
        "description": "Alias of ibase_blob_open"
    },
    {
        "href": "function.fbird-close.php",
        "name": "fbird_close",
        "description": "Alias of ibase_close"
    },
    {
        "href": "function.fbird-commit.php",
        "name": "fbird_commit",
        "description": "Alias of ibase_commit"
    },
    {
        "href": "function.fbird-commit-ret.php",
        "name": "fbird_commit_ret",
        "description": "Alias of ibase_commit_ret"
    },
    {
        "href": "function.fbird-connect.php",
        "name": "fbird_connect",
        "description": "Alias of ibase_connect"
    },
    {
        "href": "function.fbird-db-info.php",
        "name": "fbird_db_info",
        "description": "Alias of ibase_db_info"
    },
    {
        "href": "function.fbird-delete-user.php",
        "name": "fbird_delete_user",
        "description": "Alias of ibase_delete_user"
    },
    {
        "href": "function.fbird-drop-db.php",
        "name": "fbird_drop_db",
        "description": "Alias of ibase_drop_db"
    },
    {
        "href": "function.fbird-errcode.php",
        "name": "fbird_errcode",
        "description": "Alias of ibase_errcode"
    },
    {
        "href": "function.fbird-errmsg.php",
        "name": "fbird_errmsg",
        "description": "Alias of ibase_errmsg"
    },
    {
        "href": "function.fbird-execute.php",
        "name": "fbird_execute",
        "description": "Alias of ibase_execute"
    },
    {
        "href": "function.fbird-fetch-assoc.php",
        "name": "fbird_fetch_assoc",
        "description": "Alias of ibase_fetch_assoc"
    },
    {
        "href": "function.fbird-fetch-object.php",
        "name": "fbird_fetch_object",
        "description": "Alias of ibase_fetch_object"
    },
    {
        "href": "function.fbird-fetch-row.php",
        "name": "fbird_fetch_row",
        "description": "Alias of ibase_fetch_row"
    },
    {
        "href": "function.fbird-field-info.php",
        "name": "fbird_field_info",
        "description": "Alias of ibase_field_info"
    },
    {
        "href": "function.fbird-free-event-handler.php",
        "name": "fbird_free_event_handler",
        "description": "Alias of ibase_free_event_handler"
    },
    {
        "href": "function.fbird-free-query.php",
        "name": "fbird_free_query",
        "description": "Alias of ibase_free_query"
    },
    {
        "href": "function.fbird-free-result.php",
        "name": "fbird_free_result",
        "description": "Alias of ibase_free_result"
    },
    {
        "href": "function.fbird-gen-id.php",
        "name": "fbird_gen_id",
        "description": "Alias of ibase_gen_id"
    },
    {
        "href": "function.fbird-maintain-db.php",
        "name": "fbird_maintain_db",
        "description": "Alias of ibase_maintain_db"
    },
    {
        "href": "function.fbird-modify-user.php",
        "name": "fbird_modify_user",
        "description": "Alias of ibase_modify_user"
    },
    {
        "href": "function.fbird-name-result.php",
        "name": "fbird_name_result",
        "description": "Alias of ibase_name_result"
    },
    {
        "href": "function.fbird-num-fields.php",
        "name": "fbird_num_fields",
        "description": "Alias of ibase_num_fields"
    },
    {
        "href": "function.fbird-num-params.php",
        "name": "fbird_num_params",
        "description": "Alias of ibase_num_params"
    },
    {
        "href": "function.fbird-param-info.php",
        "name": "fbird_param_info",
        "description": "Alias of ibase_param_info"
    },
    {
        "href": "function.fbird-pconnect.php",
        "name": "fbird_pconnect",
        "description": "Alias of ibase_pconnect"
    },
    {
        "href": "function.fbird-prepare.php",
        "name": "fbird_prepare",
        "description": "Alias of ibase_prepare"
    },
    {
        "href": "function.fbird-query.php",
        "name": "fbird_query",
        "description": "Alias of ibase_query"
    },
    {
        "href": "function.fbird-restore.php",
        "name": "fbird_restore",
        "description": "Alias of ibase_restore"
    },
    {
        "href": "function.fbird-rollback.php",
        "name": "fbird_rollback",
        "description": "Alias of ibase_rollback"
    },
    {
        "href": "function.fbird-rollback-ret.php",
        "name": "fbird_rollback_ret",
        "description": "Alias of ibase_rollback_ret"
    },
    {
        "href": "function.fbird-server-info.php",
        "name": "fbird_server_info",
        "description": "Alias of ibase_server_info"
    },
    {
        "href": "function.fbird-service-attach.php",
        "name": "fbird_service_attach",
        "description": "Alias of ibase_service_attach"
    },
    {
        "href": "function.fbird-service-detach.php",
        "name": "fbird_service_detach",
        "description": "Alias of ibase_service_detach"
    },
    {
        "href": "function.fbird-set-event-handler.php",
        "name": "fbird_set_event_handler",
        "description": "Alias of ibase_set_event_handler"
    },
    {
        "href": "function.fbird-trans.php",
        "name": "fbird_trans",
        "description": "Alias of ibase_trans"
    },
    {
        "href": "function.fbird-wait-event.php",
        "name": "fbird_wait_event",
        "description": "Alias of ibase_wait_event"
    },
    {
        "href": "function.fclose.php",
        "name": "fclose",
        "description": "Closes an open file pointer"
    },
    {
        "href": "function.fdatasync.php",
        "name": "fdatasync",
        "description": "Synchronizes data (but not meta-data) to the file"
    },
    {
        "href": "function.fdf-add-doc-javascript.php",
        "name": "fdf_add_doc_javascript",
        "description": "Adds javascript code to the FDF document"
    },
    {
        "href": "function.fdf-add-template.php",
        "name": "fdf_add_template",
        "description": "Adds a template into the FDF document"
    },
    {
        "href": "function.fdf-close.php",
        "name": "fdf_close",
        "description": "Close an FDF document"
    },
    {
        "href": "function.fdf-create.php",
        "name": "fdf_create",
        "description": "Create a new FDF document"
    },
    {
        "href": "function.fdf-enum-values.php",
        "name": "fdf_enum_values",
        "description": "Call a user defined function for each document value"
    },
    {
        "href": "function.fdf-errno.php",
        "name": "fdf_errno",
        "description": "Return error code for last fdf operation"
    },
    {
        "href": "function.fdf-error.php",
        "name": "fdf_error",
        "description": "Return error description for FDF error code"
    },
    {
        "href": "function.fdf-get-ap.php",
        "name": "fdf_get_ap",
        "description": "Get the appearance of a field"
    },
    {
        "href": "function.fdf-get-attachment.php",
        "name": "fdf_get_attachment",
        "description": "Extracts uploaded file embedded in the FDF"
    },
    {
        "href": "function.fdf-get-encoding.php",
        "name": "fdf_get_encoding",
        "description": "Get the value of the /Encoding key"
    },
    {
        "href": "function.fdf-get-file.php",
        "name": "fdf_get_file",
        "description": "Get the value of the /F key"
    },
    {
        "href": "function.fdf-get-flags.php",
        "name": "fdf_get_flags",
        "description": "Gets the flags of a field"
    },
    {
        "href": "function.fdf-get-opt.php",
        "name": "fdf_get_opt",
        "description": "Gets a value from the opt array of a field"
    },
    {
        "href": "function.fdf-get-status.php",
        "name": "fdf_get_status",
        "description": "Get the value of the /STATUS key"
    },
    {
        "href": "function.fdf-get-value.php",
        "name": "fdf_get_value",
        "description": "Get the value of a field"
    },
    {
        "href": "function.fdf-get-version.php",
        "name": "fdf_get_version",
        "description": "Gets version number for FDF API or file"
    },
    {
        "href": "function.fdf-header.php",
        "name": "fdf_header",
        "description": "Sets FDF-specific output headers"
    },
    {
        "href": "function.fdf-next-field-name.php",
        "name": "fdf_next_field_name",
        "description": "Get the next field name"
    },
    {
        "href": "function.fdf-open.php",
        "name": "fdf_open",
        "description": "Open a FDF document"
    },
    {
        "href": "function.fdf-open-string.php",
        "name": "fdf_open_string",
        "description": "Read a FDF document from a string"
    },
    {
        "href": "function.fdf-remove-item.php",
        "name": "fdf_remove_item",
        "description": "Sets target frame for form"
    },
    {
        "href": "function.fdf-save.php",
        "name": "fdf_save",
        "description": "Save a FDF document"
    },
    {
        "href": "function.fdf-save-string.php",
        "name": "fdf_save_string",
        "description": "Returns the FDF document as a string"
    },
    {
        "href": "function.fdf-set-ap.php",
        "name": "fdf_set_ap",
        "description": "Set the appearance of a field"
    },
    {
        "href": "function.fdf-set-encoding.php",
        "name": "fdf_set_encoding",
        "description": "Sets FDF character encoding"
    },
    {
        "href": "function.fdf-set-file.php",
        "name": "fdf_set_file",
        "description": "Set PDF document to display FDF data in"
    },
    {
        "href": "function.fdf-set-flags.php",
        "name": "fdf_set_flags",
        "description": "Sets a flag of a field"
    },
    {
        "href": "function.fdf-set-javascript-action.php",
        "name": "fdf_set_javascript_action",
        "description": "Sets an javascript action of a field"
    },
    {
        "href": "function.fdf-set-on-import-javascript.php",
        "name": "fdf_set_on_import_javascript",
        "description": "Adds javascript code to be executed when Acrobat opens the FDF"
    },
    {
        "href": "function.fdf-set-opt.php",
        "name": "fdf_set_opt",
        "description": "Sets an option of a field"
    },
    {
        "href": "function.fdf-set-status.php",
        "name": "fdf_set_status",
        "description": "Set the value of the /STATUS key"
    },
    {
        "href": "function.fdf-set-submit-form-action.php",
        "name": "fdf_set_submit_form_action",
        "description": "Sets a submit form action of a field"
    },
    {
        "href": "function.fdf-set-target-frame.php",
        "name": "fdf_set_target_frame",
        "description": "Set target frame for form display"
    },
    {
        "href": "function.fdf-set-value.php",
        "name": "fdf_set_value",
        "description": "Set the value of a field"
    },
    {
        "href": "function.fdf-set-version.php",
        "name": "fdf_set_version",
        "description": "Sets version number for a FDF file"
    },
    {
        "href": "function.fdiv.php",
        "name": "fdiv",
        "description": "Divides two numbers, according to IEEE 754"
    },
    {
        "href": "function.feof.php",
        "name": "feof",
        "description": "Tests for end-of-file on a file pointer"
    },
    {
        "href": "ffi.addr.php",
        "name": "FFI::addr",
        "description": "Creates an unmanaged pointer to C data"
    },
    {
        "href": "ffi.alignof.php",
        "name": "FFI::alignof",
        "description": "Gets the alignment"
    },
    {
        "href": "ffi.arraytype.php",
        "name": "FFI::arrayType",
        "description": "Dynamically constructs a new C array type"
    },
    {
        "href": "ffi.cast.php",
        "name": "FFI::cast",
        "description": "Performs a C type cast"
    },
    {
        "href": "ffi.cdef.php",
        "name": "FFI::cdef",
        "description": "Creates a new FFI object"
    },
    {
        "href": "ffi.free.php",
        "name": "FFI::free",
        "description": "Releases an unmanaged data structure"
    },
    {
        "href": "ffi.isnull.php",
        "name": "FFI::isNull",
        "description": "Checks whether a FFI\\CData is a null pointer"
    },
    {
        "href": "ffi.load.php",
        "name": "FFI::load",
        "description": "Loads C declarations from a C header file"
    },
    {
        "href": "ffi.memcmp.php",
        "name": "FFI::memcmp",
        "description": "Compares memory areas"
    },
    {
        "href": "ffi.memcpy.php",
        "name": "FFI::memcpy",
        "description": "Copies one memory area to another"
    },
    {
        "href": "ffi.memset.php",
        "name": "FFI::memset",
        "description": "Fills a memory area"
    },
    {
        "href": "ffi.new.php",
        "name": "FFI::new",
        "description": "Creates a C data structure"
    },
    {
        "href": "ffi.scope.php",
        "name": "FFI::scope",
        "description": "Instantiates an FFI object with C declarations parsed during preloading"
    },
    {
        "href": "ffi.sizeof.php",
        "name": "FFI::sizeof",
        "description": "Gets the size of C data or types"
    },
    {
        "href": "ffi.string.php",
        "name": "FFI::string",
        "description": "Creates a PHP string from a memory area"
    },
    {
        "href": "ffi.type.php",
        "name": "FFI::type",
        "description": "Creates an FFI\\CType object from a C declaration"
    },
    {
        "href": "ffi.typeof.php",
        "name": "FFI::typeof",
        "description": "Gets the FFI\\CType of FFI\\CData"
    },
    {
        "href": "ffi-ctype.getalignment.php",
        "name": "FFI\\CType::getAlignment",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getarrayelementtype.php",
        "name": "FFI\\CType::getArrayElementType",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getarraylength.php",
        "name": "FFI\\CType::getArrayLength",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getattributes.php",
        "name": "FFI\\CType::getAttributes",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getenumkind.php",
        "name": "FFI\\CType::getEnumKind",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getfuncabi.php",
        "name": "FFI\\CType::getFuncABI",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getfuncparametercount.php",
        "name": "FFI\\CType::getFuncParameterCount",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getfuncparametertype.php",
        "name": "FFI\\CType::getFuncParameterType",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getfuncreturntype.php",
        "name": "FFI\\CType::getFuncReturnType",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getkind.php",
        "name": "FFI\\CType::getKind",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getname.php",
        "name": "FFI\\CType::getName",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getpointertype.php",
        "name": "FFI\\CType::getPointerType",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getsize.php",
        "name": "FFI\\CType::getSize",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getstructfieldnames.php",
        "name": "FFI\\CType::getStructFieldNames",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getstructfieldoffset.php",
        "name": "FFI\\CType::getStructFieldOffset",
        "description": "Description"
    },
    {
        "href": "ffi-ctype.getstructfieldtype.php",
        "name": "FFI\\CType::getStructFieldType",
        "description": "Description"
    },
    {
        "href": "function.fflush.php",
        "name": "fflush",
        "description": "Flushes the output to a file"
    },
    {
        "href": "function.fgetc.php",
        "name": "fgetc",
        "description": "Gets character from file pointer"
    },
    {
        "href": "function.fgetcsv.php",
        "name": "fgetcsv",
        "description": "Gets line from file pointer and parse for CSV fields"
    },
    {
        "href": "function.fgets.php",
        "name": "fgets",
        "description": "Gets line from file pointer"
    },
    {
        "href": "function.fgetss.php",
        "name": "fgetss",
        "description": "Gets line from file pointer and strip HTML tags"
    },
    {
        "href": "fiber.getcurrent.php",
        "name": "Fiber::getCurrent",
        "description": "Gets the currently executing Fiber instance"
    },
    {
        "href": "fiber.getreturn.php",
        "name": "Fiber::getReturn",
        "description": "Gets the value returned by the Fiber"
    },
    {
        "href": "fiber.isrunning.php",
        "name": "Fiber::isRunning",
        "description": "Determines if the fiber is running"
    },
    {
        "href": "fiber.isstarted.php",
        "name": "Fiber::isStarted",
        "description": "Determines if the fiber has started"
    },
    {
        "href": "fiber.issuspended.php",
        "name": "Fiber::isSuspended",
        "description": "Determines if the fiber is suspended"
    },
    {
        "href": "fiber.isterminated.php",
        "name": "Fiber::isTerminated",
        "description": "Determines if the fiber has terminated"
    },
    {
        "href": "fiber.resume.php",
        "name": "Fiber::resume",
        "description": "Resumes execution of the fiber with a value"
    },
    {
        "href": "fiber.start.php",
        "name": "Fiber::start",
        "description": "Start execution of the fiber"
    },
    {
        "href": "fiber.suspend.php",
        "name": "Fiber::suspend",
        "description": "Suspends execution of the current fiber"
    },
    {
        "href": "fiber.throw.php",
        "name": "Fiber::throw",
        "description": "Resumes execution of the fiber with an exception"
    },
    {
        "href": "fiber.construct.php",
        "name": "Fiber::__construct",
        "description": "Creates a new Fiber instance"
    },
    {
        "href": "fibererror.construct.php",
        "name": "FiberError::__construct",
        "description": "Constructor to disallow direct instantiation"
    },
    {
        "href": "function.file.php",
        "name": "file",
        "description": "Reads entire file into an array"
    },
    {
        "href": "wrappers.file.php",
        "name": "file://",
        "description": "Accessing local filesystem"
    },
    {
        "href": "function.fileatime.php",
        "name": "fileatime",
        "description": "Gets last access time of file"
    },
    {
        "href": "function.filectime.php",
        "name": "filectime",
        "description": "Gets inode change time of file"
    },
    {
        "href": "function.filegroup.php",
        "name": "filegroup",
        "description": "Gets file group"
    },
    {
        "href": "function.fileinode.php",
        "name": "fileinode",
        "description": "Gets file inode"
    },
    {
        "href": "function.filemtime.php",
        "name": "filemtime",
        "description": "Gets file modification time"
    },
    {
        "href": "function.fileowner.php",
        "name": "fileowner",
        "description": "Gets file owner"
    },
    {
        "href": "function.fileperms.php",
        "name": "fileperms",
        "description": "Gets file permissions"
    },
    {
        "href": "function.filesize.php",
        "name": "filesize",
        "description": "Gets file size"
    },
    {
        "href": "filesystemiterator.current.php",
        "name": "FilesystemIterator::current",
        "description": "The current file"
    },
    {
        "href": "filesystemiterator.getflags.php",
        "name": "FilesystemIterator::getFlags",
        "description": "Get the handling flags"
    },
    {
        "href": "filesystemiterator.key.php",
        "name": "FilesystemIterator::key",
        "description": "Retrieve the key for the current file"
    },
    {
        "href": "filesystemiterator.next.php",
        "name": "FilesystemIterator::next",
        "description": "Move to the next file"
    },
    {
        "href": "filesystemiterator.rewind.php",
        "name": "FilesystemIterator::rewind",
        "description": "Rewinds back to the beginning"
    },
    {
        "href": "filesystemiterator.setflags.php",
        "name": "FilesystemIterator::setFlags",
        "description": "Sets handling flags"
    },
    {
        "href": "filesystemiterator.construct.php",
        "name": "FilesystemIterator::__construct",
        "description": "Constructs a new filesystem iterator"
    },
    {
        "href": "function.filetype.php",
        "name": "filetype",
        "description": "Gets file type"
    },
    {
        "href": "function.file-exists.php",
        "name": "file_exists",
        "description": "Checks whether a file or directory exists"
    },
    {
        "href": "function.file-get-contents.php",
        "name": "file_get_contents",
        "description": "Reads entire file into a string"
    },
    {
        "href": "function.file-put-contents.php",
        "name": "file_put_contents",
        "description": "Write data to a file"
    },
    {
        "href": "filteriterator.accept.php",
        "name": "FilterIterator::accept",
        "description": "Check whether the current element of the iterator is acceptable"
    },
    {
        "href": "filteriterator.current.php",
        "name": "FilterIterator::current",
        "description": "Get the current element value"
    },
    {
        "href": "filteriterator.getinneriterator.php",
        "name": "FilterIterator::getInnerIterator",
        "description": "Get the inner iterator"
    },
    {
        "href": "filteriterator.key.php",
        "name": "FilterIterator::key",
        "description": "Get the current key"
    },
    {
        "href": "filteriterator.next.php",
        "name": "FilterIterator::next",
        "description": "Move the iterator forward"
    },
    {
        "href": "filteriterator.rewind.php",
        "name": "FilterIterator::rewind",
        "description": "Rewind the iterator"
    },
    {
        "href": "filteriterator.valid.php",
        "name": "FilterIterator::valid",
        "description": "Check whether the current element is valid"
    },
    {
        "href": "filteriterator.construct.php",
        "name": "FilterIterator::__construct",
        "description": "Construct a filterIterator"
    },
    {
        "href": "function.filter-has-var.php",
        "name": "filter_has_var",
        "description": "Checks if variable of specified type exists"
    },
    {
        "href": "function.filter-id.php",
        "name": "filter_id",
        "description": "Returns the filter ID belonging to a named filter"
    },
    {
        "href": "function.filter-input.php",
        "name": "filter_input",
        "description": "Gets a specific external variable by name and optionally filters it"
    },
    {
        "href": "function.filter-input-array.php",
        "name": "filter_input_array",
        "description": "Gets external variables and optionally filters them"
    },
    {
        "href": "function.filter-list.php",
        "name": "filter_list",
        "description": "Returns a list of all supported filters"
    },
    {
        "href": "function.filter-var.php",
        "name": "filter_var",
        "description": "Filters a variable with a specified filter"
    },
    {
        "href": "function.filter-var-array.php",
        "name": "filter_var_array",
        "description": "Gets multiple variables and optionally filters them"
    },
    {
        "href": "finfo.buffer.php",
        "name": "finfo::buffer",
        "description": "Alias of finfo_buffer()"
    },
    {
        "href": "finfo.file.php",
        "name": "finfo::file",
        "description": "Alias of finfo_file()"
    },
    {
        "href": "finfo.set-flags.php",
        "name": "finfo::set_flags",
        "description": "Alias of finfo_set_flags()"
    },
    {
        "href": "finfo.construct.php",
        "name": "finfo::__construct",
        "description": "Alias of finfo_open"
    },
    {
        "href": "function.finfo-close.php",
        "name": "finfo_close",
        "description": "Close finfo instance"
    },
    {
        "href": "function.finfo-open.php",
        "name": "finfo_open",
        "description": "Create a new finfo instance"
    },
    {
        "href": "function.floatval.php",
        "name": "floatval",
        "description": "Get float value of a variable"
    },
    {
        "href": "function.flock.php",
        "name": "flock",
        "description": "Portable advisory file locking"
    },
    {
        "href": "function.floor.php",
        "name": "floor",
        "description": "Round fractions down"
    },
    {
        "href": "function.flush.php",
        "name": "flush",
        "description": "Flush system output buffer"
    },
    {
        "href": "function.fmod.php",
        "name": "fmod",
        "description": "Returns the floating point remainder (modulo) of the division  of the arguments"
    },
    {
        "href": "function.fnmatch.php",
        "name": "fnmatch",
        "description": "Match filename against a pattern"
    },
    {
        "href": "function.fopen.php",
        "name": "fopen",
        "description": "Opens file or URL"
    },
    {
        "href": "function.forward-static-call.php",
        "name": "forward_static_call",
        "description": "Call a static method"
    },
    {
        "href": "function.forward-static-call-array.php",
        "name": "forward_static_call_array",
        "description": "Call a static method and pass the arguments as array"
    },
    {
        "href": "function.fpassthru.php",
        "name": "fpassthru",
        "description": "Output all remaining data on a file pointer"
    },
    {
        "href": "function.fprintf.php",
        "name": "fprintf",
        "description": "Write a formatted string to a stream"
    },
    {
        "href": "function.fputcsv.php",
        "name": "fputcsv",
        "description": "Format line as CSV and write to file pointer"
    },
    {
        "href": "function.fputs.php",
        "name": "fputs",
        "description": "Alias of fwrite"
    },
    {
        "href": "function.fread.php",
        "name": "fread",
        "description": "Binary-safe file read"
    },
    {
        "href": "function.frenchtojd.php",
        "name": "frenchtojd",
        "description": "Converts a date from the French Republican Calendar to a Julian Day Count"
    },
    {
        "href": "function.fscanf.php",
        "name": "fscanf",
        "description": "Parses input from a file according to a format"
    },
    {
        "href": "function.fseek.php",
        "name": "fseek",
        "description": "Seeks on a file pointer"
    },
    {
        "href": "function.fsockopen.php",
        "name": "fsockopen",
        "description": "Open Internet or Unix domain socket connection"
    },
    {
        "href": "function.fstat.php",
        "name": "fstat",
        "description": "Gets information about a file using an open file pointer"
    },
    {
        "href": "function.fsync.php",
        "name": "fsync",
        "description": "Synchronizes changes to the file (including meta-data)"
    },
    {
        "href": "function.ftell.php",
        "name": "ftell",
        "description": "Returns the current position of the file read/write pointer"
    },
    {
        "href": "function.ftok.php",
        "name": "ftok",
        "description": "Convert a pathname and a project identifier to a System V IPC key"
    },
    {
        "href": "wrappers.ftp.php",
        "name": "ftp://",
        "description": "Accessing FTP(s) URLs"
    },
    {
        "href": "context.ftp.php",
        "name": "FTP context options",
        "description": "FTP context option listing"
    },
    {
        "href": "function.ftp-alloc.php",
        "name": "ftp_alloc",
        "description": "Allocates space for a file to be uploaded"
    },
    {
        "href": "function.ftp-append.php",
        "name": "ftp_append",
        "description": "Append the contents of a file to another file on the FTP server"
    },
    {
        "href": "function.ftp-cdup.php",
        "name": "ftp_cdup",
        "description": "Changes to the parent directory"
    },
    {
        "href": "function.ftp-chdir.php",
        "name": "ftp_chdir",
        "description": "Changes the current directory on a FTP server"
    },
    {
        "href": "function.ftp-chmod.php",
        "name": "ftp_chmod",
        "description": "Set permissions on a file via FTP"
    },
    {
        "href": "function.ftp-close.php",
        "name": "ftp_close",
        "description": "Closes an FTP connection"
    },
    {
        "href": "function.ftp-connect.php",
        "name": "ftp_connect",
        "description": "Opens an FTP connection"
    },
    {
        "href": "function.ftp-delete.php",
        "name": "ftp_delete",
        "description": "Deletes a file on the FTP server"
    },
    {
        "href": "function.ftp-exec.php",
        "name": "ftp_exec",
        "description": "Requests execution of a command on the FTP server"
    },
    {
        "href": "function.ftp-fget.php",
        "name": "ftp_fget",
        "description": "Downloads a file from the FTP server and saves to an open file"
    },
    {
        "href": "function.ftp-fput.php",
        "name": "ftp_fput",
        "description": "Uploads from an open file to the FTP server"
    },
    {
        "href": "function.ftp-get.php",
        "name": "ftp_get",
        "description": "Downloads a file from the FTP server"
    },
    {
        "href": "function.ftp-get-option.php",
        "name": "ftp_get_option",
        "description": "Retrieves various runtime behaviours of the current FTP connection"
    },
    {
        "href": "function.ftp-login.php",
        "name": "ftp_login",
        "description": "Logs in to an FTP connection"
    },
    {
        "href": "function.ftp-mdtm.php",
        "name": "ftp_mdtm",
        "description": "Returns the last modified time of the given file"
    },
    {
        "href": "function.ftp-mkdir.php",
        "name": "ftp_mkdir",
        "description": "Creates a directory"
    },
    {
        "href": "function.ftp-mlsd.php",
        "name": "ftp_mlsd",
        "description": "Returns a list of files in the given directory"
    },
    {
        "href": "function.ftp-nb-continue.php",
        "name": "ftp_nb_continue",
        "description": "Continues retrieving/sending a file (non-blocking)"
    },
    {
        "href": "function.ftp-nb-fget.php",
        "name": "ftp_nb_fget",
        "description": "Retrieves a file from the FTP server and writes it to an open file (non-blocking)"
    },
    {
        "href": "function.ftp-nb-fput.php",
        "name": "ftp_nb_fput",
        "description": "Stores a file from an open file to the FTP server (non-blocking)"
    },
    {
        "href": "function.ftp-nb-get.php",
        "name": "ftp_nb_get",
        "description": "Retrieves a file from the FTP server and writes it to a local file (non-blocking)"
    },
    {
        "href": "function.ftp-nb-put.php",
        "name": "ftp_nb_put",
        "description": "Stores a file on the FTP server (non-blocking)"
    },
    {
        "href": "function.ftp-nlist.php",
        "name": "ftp_nlist",
        "description": "Returns a list of files in the given directory"
    },
    {
        "href": "function.ftp-pasv.php",
        "name": "ftp_pasv",
        "description": "Turns passive mode on or off"
    },
    {
        "href": "function.ftp-put.php",
        "name": "ftp_put",
        "description": "Uploads a file to the FTP server"
    },
    {
        "href": "function.ftp-pwd.php",
        "name": "ftp_pwd",
        "description": "Returns the current directory name"
    },
    {
        "href": "function.ftp-quit.php",
        "name": "ftp_quit",
        "description": "Alias of ftp_close"
    },
    {
        "href": "function.ftp-raw.php",
        "name": "ftp_raw",
        "description": "Sends an arbitrary command to an FTP server"
    },
    {
        "href": "function.ftp-rawlist.php",
        "name": "ftp_rawlist",
        "description": "Returns a detailed list of files in the given directory"
    },
    {
        "href": "function.ftp-rename.php",
        "name": "ftp_rename",
        "description": "Renames a file or a directory on the FTP server"
    },
    {
        "href": "function.ftp-rmdir.php",
        "name": "ftp_rmdir",
        "description": "Removes a directory"
    },
    {
        "href": "function.ftp-set-option.php",
        "name": "ftp_set_option",
        "description": "Set miscellaneous runtime FTP options"
    },
    {
        "href": "function.ftp-site.php",
        "name": "ftp_site",
        "description": "Sends a SITE command to the server"
    },
    {
        "href": "function.ftp-size.php",
        "name": "ftp_size",
        "description": "Returns the size of the given file"
    },
    {
        "href": "function.ftp-ssl-connect.php",
        "name": "ftp_ssl_connect",
        "description": "Opens a Secure SSL-FTP connection"
    },
    {
        "href": "function.ftp-systype.php",
        "name": "ftp_systype",
        "description": "Returns the system type identifier of the remote FTP server"
    },
    {
        "href": "function.ftruncate.php",
        "name": "ftruncate",
        "description": "Truncates a file to a given length"
    },
    {
        "href": "function.function-exists.php",
        "name": "function_exists",
        "description": "Return true if the given function has been defined"
    },
    {
        "href": "function.func-get-arg.php",
        "name": "func_get_arg",
        "description": "Return an item from the argument list"
    },
    {
        "href": "function.func-get-args.php",
        "name": "func_get_args",
        "description": "Returns an array comprising a function's argument list"
    },
    {
        "href": "function.func-num-args.php",
        "name": "func_num_args",
        "description": "Returns the number of arguments passed to the function"
    },
    {
        "href": "function.fwrite.php",
        "name": "fwrite",
        "description": "Binary-safe file write"
    },
    {
        "href": "function.gc-collect-cycles.php",
        "name": "gc_collect_cycles",
        "description": "Forces collection of any existing garbage cycles"
    },
    {
        "href": "function.gc-disable.php",
        "name": "gc_disable",
        "description": "Deactivates the circular reference collector"
    },
    {
        "href": "function.gc-enable.php",
        "name": "gc_enable",
        "description": "Activates the circular reference collector"
    },
    {
        "href": "function.gc-enabled.php",
        "name": "gc_enabled",
        "description": "Returns status of the circular reference collector"
    },
    {
        "href": "function.gc-mem-caches.php",
        "name": "gc_mem_caches",
        "description": "Reclaims memory used by the Zend Engine memory manager"
    },
    {
        "href": "function.gc-status.php",
        "name": "gc_status",
        "description": "Gets information about the garbage collector"
    },
    {
        "href": "function.gd-info.php",
        "name": "gd_info",
        "description": "Retrieve information about the currently installed GD library"
    },
    {
        "href": "gearmanclient.addoptions.php",
        "name": "GearmanClient::addOptions",
        "description": "Add client options"
    },
    {
        "href": "gearmanclient.addserver.php",
        "name": "GearmanClient::addServer",
        "description": "Add a job server to the client"
    },
    {
        "href": "gearmanclient.addservers.php",
        "name": "GearmanClient::addServers",
        "description": "Add a list of job servers to the client"
    },
    {
        "href": "gearmanclient.addtask.php",
        "name": "GearmanClient::addTask",
        "description": "Add a task to be run in parallel"
    },
    {
        "href": "gearmanclient.addtaskbackground.php",
        "name": "GearmanClient::addTaskBackground",
        "description": "Add a background task to be run in parallel"
    },
    {
        "href": "gearmanclient.addtaskhigh.php",
        "name": "GearmanClient::addTaskHigh",
        "description": "Add a high priority task to run in parallel"
    },
    {
        "href": "gearmanclient.addtaskhighbackground.php",
        "name": "GearmanClient::addTaskHighBackground",
        "description": "Add a high priority background task to be run in parallel"
    },
    {
        "href": "gearmanclient.addtasklow.php",
        "name": "GearmanClient::addTaskLow",
        "description": "Add a low priority task to run in parallel"
    },
    {
        "href": "gearmanclient.addtasklowbackground.php",
        "name": "GearmanClient::addTaskLowBackground",
        "description": "Add a low priority background task to be run in parallel"
    },
    {
        "href": "gearmanclient.addtaskstatus.php",
        "name": "GearmanClient::addTaskStatus",
        "description": "Add a task to get status"
    },
    {
        "href": "gearmanclient.clearcallbacks.php",
        "name": "GearmanClient::clearCallbacks",
        "description": "Clear all task callback functions"
    },
    {
        "href": "gearmanclient.clone.php",
        "name": "GearmanClient::clone",
        "description": "Create a copy of a GearmanClient object"
    },
    {
        "href": "gearmanclient.context.php",
        "name": "GearmanClient::context",
        "description": "Get the application context"
    },
    {
        "href": "gearmanclient.data.php",
        "name": "GearmanClient::data",
        "description": "Get the application data (deprecated)"
    },
    {
        "href": "gearmanclient.do.php",
        "name": "GearmanClient::do",
        "description": "Run a single task and return a result {deprecated]"
    },
    {
        "href": "gearmanclient.dobackground.php",
        "name": "GearmanClient::doBackground",
        "description": "Run a task in the background"
    },
    {
        "href": "gearmanclient.dohigh.php",
        "name": "GearmanClient::doHigh",
        "description": "Run a single high priority task"
    },
    {
        "href": "gearmanclient.dohighbackground.php",
        "name": "GearmanClient::doHighBackground",
        "description": "Run a high priority task in the background"
    },
    {
        "href": "gearmanclient.dojobhandle.php",
        "name": "GearmanClient::doJobHandle",
        "description": "Get the job handle for the running task"
    },
    {
        "href": "gearmanclient.dolow.php",
        "name": "GearmanClient::doLow",
        "description": "Run a single low priority task"
    },
    {
        "href": "gearmanclient.dolowbackground.php",
        "name": "GearmanClient::doLowBackground",
        "description": "Run a low priority task in the background"
    },
    {
        "href": "gearmanclient.donormal.php",
        "name": "GearmanClient::doNormal",
        "description": "Run a single task and return a result"
    },
    {
        "href": "gearmanclient.dostatus.php",
        "name": "GearmanClient::doStatus",
        "description": "Get the status for the running task"
    },
    {
        "href": "gearmanclient.echo.php",
        "name": "GearmanClient::echo",
        "description": "Send data to all job servers to see if they echo it back {deprecated]"
    },
    {
        "href": "gearmanclient.error.php",
        "name": "GearmanClient::error",
        "description": "Returns an error string for the last error encountered"
    },
    {
        "href": "gearmanclient.geterrno.php",
        "name": "GearmanClient::getErrno",
        "description": "Get an errno value"
    },
    {
        "href": "gearmanclient.jobstatus.php",
        "name": "GearmanClient::jobStatus",
        "description": "Get the status of a background job"
    },
    {
        "href": "gearmanclient.ping.php",
        "name": "GearmanClient::ping",
        "description": "Send data to all job servers to see if they echo it back"
    },
    {
        "href": "gearmanclient.removeoptions.php",
        "name": "GearmanClient::removeOptions",
        "description": "Remove client options"
    },
    {
        "href": "gearmanclient.returncode.php",
        "name": "GearmanClient::returnCode",
        "description": "Get the last Gearman return code"
    },
    {
        "href": "gearmanclient.runtasks.php",
        "name": "GearmanClient::runTasks",
        "description": "Run a list of tasks in parallel"
    },
    {
        "href": "gearmanclient.setclientcallback.php",
        "name": "GearmanClient::setClientCallback",
        "description": "Callback function when there is a data packet for a task (deprecated)"
    },
    {
        "href": "gearmanclient.setcompletecallback.php",
        "name": "GearmanClient::setCompleteCallback",
        "description": "Set a function to be called on task completion"
    },
    {
        "href": "gearmanclient.setcontext.php",
        "name": "GearmanClient::setContext",
        "description": "Set application context"
    },
    {
        "href": "gearmanclient.setcreatedcallback.php",
        "name": "GearmanClient::setCreatedCallback",
        "description": "Set a callback for when a task is queued"
    },
    {
        "href": "gearmanclient.setdata.php",
        "name": "GearmanClient::setData",
        "description": "Set application data (deprecated)"
    },
    {
        "href": "gearmanclient.setdatacallback.php",
        "name": "GearmanClient::setDataCallback",
        "description": "Callback function when there is a data packet for a task"
    },
    {
        "href": "gearmanclient.setexceptioncallback.php",
        "name": "GearmanClient::setExceptionCallback",
        "description": "Set a callback for worker exceptions"
    },
    {
        "href": "gearmanclient.setfailcallback.php",
        "name": "GearmanClient::setFailCallback",
        "description": "Set callback for job failure"
    },
    {
        "href": "gearmanclient.setoptions.php",
        "name": "GearmanClient::setOptions",
        "description": "Set client options"
    },
    {
        "href": "gearmanclient.setstatuscallback.php",
        "name": "GearmanClient::setStatusCallback",
        "description": "Set a callback for collecting task status"
    },
    {
        "href": "gearmanclient.settimeout.php",
        "name": "GearmanClient::setTimeout",
        "description": "Set socket I/O activity timeout"
    },
    {
        "href": "gearmanclient.setwarningcallback.php",
        "name": "GearmanClient::setWarningCallback",
        "description": "Set a callback for worker warnings"
    },
    {
        "href": "gearmanclient.setworkloadcallback.php",
        "name": "GearmanClient::setWorkloadCallback",
        "description": "Set a callback for accepting incremental data updates"
    },
    {
        "href": "gearmanclient.timeout.php",
        "name": "GearmanClient::timeout",
        "description": "Get current socket I/O activity timeout value"
    },
    {
        "href": "gearmanclient.wait.php",
        "name": "GearmanClient::wait",
        "description": "Wait for I/O activity on all connections in a client"
    },
    {
        "href": "gearmanclient.construct.php",
        "name": "GearmanClient::__construct",
        "description": "Create a GearmanClient instance"
    },
    {
        "href": "gearmanjob.complete.php",
        "name": "GearmanJob::complete",
        "description": "Send the result and complete status (deprecated)"
    },
    {
        "href": "gearmanjob.data.php",
        "name": "GearmanJob::data",
        "description": "Send data for a running job (deprecated)"
    },
    {
        "href": "gearmanjob.exception.php",
        "name": "GearmanJob::exception",
        "description": "Send exception for running job (deprecated)"
    },
    {
        "href": "gearmanjob.fail.php",
        "name": "GearmanJob::fail",
        "description": "Send fail status (deprecated)"
    },
    {
        "href": "gearmanjob.functionname.php",
        "name": "GearmanJob::functionName",
        "description": "Get function name"
    },
    {
        "href": "gearmanjob.handle.php",
        "name": "GearmanJob::handle",
        "description": "Get the job handle"
    },
    {
        "href": "gearmanjob.returncode.php",
        "name": "GearmanJob::returnCode",
        "description": "Get last return code"
    },
    {
        "href": "gearmanjob.sendcomplete.php",
        "name": "GearmanJob::sendComplete",
        "description": "Send the result and complete status"
    },
    {
        "href": "gearmanjob.senddata.php",
        "name": "GearmanJob::sendData",
        "description": "Send data for a running job"
    },
    {
        "href": "gearmanjob.sendexception.php",
        "name": "GearmanJob::sendException",
        "description": "Send exception for running job (exception)"
    },
    {
        "href": "gearmanjob.sendfail.php",
        "name": "GearmanJob::sendFail",
        "description": "Send fail status"
    },
    {
        "href": "gearmanjob.sendstatus.php",
        "name": "GearmanJob::sendStatus",
        "description": "Send status"
    },
    {
        "href": "gearmanjob.sendwarning.php",
        "name": "GearmanJob::sendWarning",
        "description": "Send a warning"
    },
    {
        "href": "gearmanjob.setreturn.php",
        "name": "GearmanJob::setReturn",
        "description": "Set a return value"
    },
    {
        "href": "gearmanjob.status.php",
        "name": "GearmanJob::status",
        "description": "Send status (deprecated)"
    },
    {
        "href": "gearmanjob.unique.php",
        "name": "GearmanJob::unique",
        "description": "Get the unique identifier"
    },
    {
        "href": "gearmanjob.warning.php",
        "name": "GearmanJob::warning",
        "description": "Send a warning (deprecated)"
    },
    {
        "href": "gearmanjob.workload.php",
        "name": "GearmanJob::workload",
        "description": "Get workload"
    },
    {
        "href": "gearmanjob.workloadsize.php",
        "name": "GearmanJob::workloadSize",
        "description": "Get size of work load"
    },
    {
        "href": "gearmanjob.construct.php",
        "name": "GearmanJob::__construct",
        "description": "Create a GearmanJob instance"
    },
    {
        "href": "gearmantask.create.php",
        "name": "GearmanTask::create",
        "description": "Create a task (deprecated)"
    },
    {
        "href": "gearmantask.data.php",
        "name": "GearmanTask::data",
        "description": "Get data returned for a task"
    },
    {
        "href": "gearmantask.datasize.php",
        "name": "GearmanTask::dataSize",
        "description": "Get the size of returned data"
    },
    {
        "href": "gearmantask.function.php",
        "name": "GearmanTask::function",
        "description": "Get associated function name (deprecated)"
    },
    {
        "href": "gearmantask.functionname.php",
        "name": "GearmanTask::functionName",
        "description": "Get associated function name"
    },
    {
        "href": "gearmantask.isknown.php",
        "name": "GearmanTask::isKnown",
        "description": "Determine if task is known"
    },
    {
        "href": "gearmantask.isrunning.php",
        "name": "GearmanTask::isRunning",
        "description": "Test whether the task is currently running"
    },
    {
        "href": "gearmantask.jobhandle.php",
        "name": "GearmanTask::jobHandle",
        "description": "Get the job handle"
    },
    {
        "href": "gearmantask.recvdata.php",
        "name": "GearmanTask::recvData",
        "description": "Read work or result data into a buffer for a task"
    },
    {
        "href": "gearmantask.returncode.php",
        "name": "GearmanTask::returnCode",
        "description": "Get the last return code"
    },
    {
        "href": "gearmantask.senddata.php",
        "name": "GearmanTask::sendData",
        "description": "Send data for a task (deprecated)"
    },
    {
        "href": "gearmantask.sendworkload.php",
        "name": "GearmanTask::sendWorkload",
        "description": "Send data for a task"
    },
    {
        "href": "gearmantask.taskdenominator.php",
        "name": "GearmanTask::taskDenominator",
        "description": "Get completion percentage denominator"
    },
    {
        "href": "gearmantask.tasknumerator.php",
        "name": "GearmanTask::taskNumerator",
        "description": "Get completion percentage numerator"
    },
    {
        "href": "gearmantask.unique.php",
        "name": "GearmanTask::unique",
        "description": "Get the unique identifier for a task"
    },
    {
        "href": "gearmantask.uuid.php",
        "name": "GearmanTask::uuid",
        "description": "Get the unique identifier for a task (deprecated)"
    },
    {
        "href": "gearmantask.construct.php",
        "name": "GearmanTask::__construct",
        "description": "Create a GearmanTask instance"
    },
    {
        "href": "gearmanworker.addfunction.php",
        "name": "GearmanWorker::addFunction",
        "description": "Register and add callback function"
    },
    {
        "href": "gearmanworker.addoptions.php",
        "name": "GearmanWorker::addOptions",
        "description": "Add worker options"
    },
    {
        "href": "gearmanworker.addserver.php",
        "name": "GearmanWorker::addServer",
        "description": "Add a job server"
    },
    {
        "href": "gearmanworker.addservers.php",
        "name": "GearmanWorker::addServers",
        "description": "Add job servers"
    },
    {
        "href": "gearmanworker.clone.php",
        "name": "GearmanWorker::clone",
        "description": "Create a copy of the worker"
    },
    {
        "href": "gearmanworker.echo.php",
        "name": "GearmanWorker::echo",
        "description": "Test job server response"
    },
    {
        "href": "gearmanworker.error.php",
        "name": "GearmanWorker::error",
        "description": "Get the last error encountered"
    },
    {
        "href": "gearmanworker.geterrno.php",
        "name": "GearmanWorker::getErrno",
        "description": "Get errno"
    },
    {
        "href": "gearmanworker.options.php",
        "name": "GearmanWorker::options",
        "description": "Get worker options"
    },
    {
        "href": "gearmanworker.register.php",
        "name": "GearmanWorker::register",
        "description": "Register a function with the job server"
    },
    {
        "href": "gearmanworker.removeoptions.php",
        "name": "GearmanWorker::removeOptions",
        "description": "Remove worker options"
    },
    {
        "href": "gearmanworker.returncode.php",
        "name": "GearmanWorker::returnCode",
        "description": "Get last Gearman return code"
    },
    {
        "href": "gearmanworker.setid.php",
        "name": "GearmanWorker::setId",
        "description": "Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers"
    },
    {
        "href": "gearmanworker.setoptions.php",
        "name": "GearmanWorker::setOptions",
        "description": "Set worker options"
    },
    {
        "href": "gearmanworker.settimeout.php",
        "name": "GearmanWorker::setTimeout",
        "description": "Set socket I/O activity timeout"
    },
    {
        "href": "gearmanworker.timeout.php",
        "name": "GearmanWorker::timeout",
        "description": "Get socket I/O activity timeout"
    },
    {
        "href": "gearmanworker.unregister.php",
        "name": "GearmanWorker::unregister",
        "description": "Unregister a function name with the job servers"
    },
    {
        "href": "gearmanworker.unregisterall.php",
        "name": "GearmanWorker::unregisterAll",
        "description": "Unregister all function names with the job servers"
    },
    {
        "href": "gearmanworker.wait.php",
        "name": "GearmanWorker::wait",
        "description": "Wait for activity from one of the job servers"
    },
    {
        "href": "gearmanworker.work.php",
        "name": "GearmanWorker::work",
        "description": "Wait for and perform jobs"
    },
    {
        "href": "gearmanworker.construct.php",
        "name": "GearmanWorker::__construct",
        "description": "Create a GearmanWorker instance"
    },
    {
        "href": "gender-gender.connect.php",
        "name": "Gender\\Gender::connect",
        "description": "Connect to an external name dictionary"
    },
    {
        "href": "gender-gender.country.php",
        "name": "Gender\\Gender::country",
        "description": "Get textual country representation"
    },
    {
        "href": "gender-gender.get.php",
        "name": "Gender\\Gender::get",
        "description": "Get gender of a name"
    },
    {
        "href": "gender-gender.isnick.php",
        "name": "Gender\\Gender::isNick",
        "description": "Check if the name0 is an alias of the name1"
    },
    {
        "href": "gender-gender.similarnames.php",
        "name": "Gender\\Gender::similarNames",
        "description": "Get similar names"
    },
    {
        "href": "gender-gender.construct.php",
        "name": "Gender\\Gender::__construct",
        "description": "Construct the Gender object"
    },
    {
        "href": "generator.current.php",
        "name": "Generator::current",
        "description": "Get the yielded value"
    },
    {
        "href": "generator.getreturn.php",
        "name": "Generator::getReturn",
        "description": "Get the return value of a generator"
    },
    {
        "href": "generator.key.php",
        "name": "Generator::key",
        "description": "Get the yielded key"
    },
    {
        "href": "generator.next.php",
        "name": "Generator::next",
        "description": "Resume execution of the generator"
    },
    {
        "href": "generator.rewind.php",
        "name": "Generator::rewind",
        "description": "Rewind the iterator"
    },
    {
        "href": "generator.send.php",
        "name": "Generator::send",
        "description": "Send a value to the generator"
    },
    {
        "href": "generator.throw.php",
        "name": "Generator::throw",
        "description": "Throw an exception into the generator"
    },
    {
        "href": "generator.valid.php",
        "name": "Generator::valid",
        "description": "Check if the iterator has been closed"
    },
    {
        "href": "generator.wakeup.php",
        "name": "Generator::__wakeup",
        "description": "Serialize callback"
    },
    {
        "href": "function.geoip-asnum-by-name.php",
        "name": "geoip_asnum_by_name",
        "description": "Get the Autonomous System Numbers (ASN)"
    },
    {
        "href": "function.geoip-continent-code-by-name.php",
        "name": "geoip_continent_code_by_name",
        "description": "Get the two letter continent code"
    },
    {
        "href": "function.geoip-country-code3-by-name.php",
        "name": "geoip_country_code3_by_name",
        "description": "Get the three letter country code"
    },
    {
        "href": "function.geoip-country-code-by-name.php",
        "name": "geoip_country_code_by_name",
        "description": "Get the two letter country code"
    },
    {
        "href": "function.geoip-country-name-by-name.php",
        "name": "geoip_country_name_by_name",
        "description": "Get the full country name"
    },
    {
        "href": "function.geoip-database-info.php",
        "name": "geoip_database_info",
        "description": "Get GeoIP Database information"
    },
    {
        "href": "function.geoip-db-avail.php",
        "name": "geoip_db_avail",
        "description": "Determine if GeoIP Database is available"
    },
    {
        "href": "function.geoip-db-filename.php",
        "name": "geoip_db_filename",
        "description": "Returns the filename of the corresponding GeoIP Database"
    },
    {
        "href": "function.geoip-db-get-all-info.php",
        "name": "geoip_db_get_all_info",
        "description": "Returns detailed information about all GeoIP database types"
    },
    {
        "href": "function.geoip-domain-by-name.php",
        "name": "geoip_domain_by_name",
        "description": "Get the second level domain name"
    },
    {
        "href": "function.geoip-id-by-name.php",
        "name": "geoip_id_by_name",
        "description": "Get the Internet connection type"
    },
    {
        "href": "function.geoip-isp-by-name.php",
        "name": "geoip_isp_by_name",
        "description": "Get the Internet Service Provider (ISP) name"
    },
    {
        "href": "function.geoip-netspeedcell-by-name.php",
        "name": "geoip_netspeedcell_by_name",
        "description": "Get the Internet connection speed"
    },
    {
        "href": "function.geoip-org-by-name.php",
        "name": "geoip_org_by_name",
        "description": "Get the organization name"
    },
    {
        "href": "function.geoip-record-by-name.php",
        "name": "geoip_record_by_name",
        "description": "Returns the detailed City information found in the GeoIP Database"
    },
    {
        "href": "function.geoip-region-by-name.php",
        "name": "geoip_region_by_name",
        "description": "Get the country code and region"
    },
    {
        "href": "function.geoip-region-name-by-code.php",
        "name": "geoip_region_name_by_code",
        "description": "Returns the region name for some country and region code combo"
    },
    {
        "href": "function.geoip-setup-custom-directory.php",
        "name": "geoip_setup_custom_directory",
        "description": "Set a custom directory for the GeoIP database"
    },
    {
        "href": "function.geoip-time-zone-by-country-and-region.php",
        "name": "geoip_time_zone_by_country_and_region",
        "description": "Returns the time zone for some country and region code combo"
    },
    {
        "href": "function.getallheaders.php",
        "name": "getallheaders",
        "description": "Fetch all HTTP request headers"
    },
    {
        "href": "function.getcwd.php",
        "name": "getcwd",
        "description": "Gets the current working directory"
    },
    {
        "href": "function.getdate.php",
        "name": "getdate",
        "description": "Get date/time information"
    },
    {
        "href": "function.getenv.php",
        "name": "getenv",
        "description": "Gets the value of an environment variable"
    },
    {
        "href": "function.gethostbyaddr.php",
        "name": "gethostbyaddr",
        "description": "Get the Internet host name corresponding to a given IP address"
    },
    {
        "href": "function.gethostbyname.php",
        "name": "gethostbyname",
        "description": "Get the IPv4 address corresponding to a given Internet host name"
    },
    {
        "href": "function.gethostbynamel.php",
        "name": "gethostbynamel",
        "description": "Get a list of IPv4 addresses corresponding to a given Internet host   name"
    },
    {
        "href": "function.gethostname.php",
        "name": "gethostname",
        "description": "Gets the host name"
    },
    {
        "href": "function.getimagesize.php",
        "name": "getimagesize",
        "description": "Get the size of an image"
    },
    {
        "href": "function.getimagesizefromstring.php",
        "name": "getimagesizefromstring",
        "description": "Get the size of an image from a string"
    },
    {
        "href": "function.getlastmod.php",
        "name": "getlastmod",
        "description": "Gets time of last page modification"
    },
    {
        "href": "function.getmxrr.php",
        "name": "getmxrr",
        "description": "Get MX records corresponding to a given Internet host name"
    },
    {
        "href": "function.getmygid.php",
        "name": "getmygid",
        "description": "Get PHP script owner's GID"
    },
    {
        "href": "function.getmyinode.php",
        "name": "getmyinode",
        "description": "Gets the inode of the current script"
    },
    {
        "href": "function.getmypid.php",
        "name": "getmypid",
        "description": "Gets PHP's process ID"
    },
    {
        "href": "function.getmyuid.php",
        "name": "getmyuid",
        "description": "Gets PHP script owner's UID"
    },
    {
        "href": "function.getopt.php",
        "name": "getopt",
        "description": "Gets options from the command line argument list"
    },
    {
        "href": "function.getprotobyname.php",
        "name": "getprotobyname",
        "description": "Get protocol number associated with protocol name"
    },
    {
        "href": "function.getprotobynumber.php",
        "name": "getprotobynumber",
        "description": "Get protocol name associated with protocol number"
    },
    {
        "href": "function.getrandmax.php",
        "name": "getrandmax",
        "description": "Show largest possible random value"
    },
    {
        "href": "function.getrusage.php",
        "name": "getrusage",
        "description": "Gets the current resource usages"
    },
    {
        "href": "function.getservbyname.php",
        "name": "getservbyname",
        "description": "Get port number associated with an Internet service and protocol"
    },
    {
        "href": "function.getservbyport.php",
        "name": "getservbyport",
        "description": "Get Internet service which corresponds to port and protocol"
    },
    {
        "href": "function.mysql-xdevapi-getsession.php",
        "name": "getSession",
        "description": "Connect to a MySQL server"
    },
    {
        "href": "function.gettext.php",
        "name": "gettext",
        "description": "Lookup a message in the current domain"
    },
    {
        "href": "function.gettimeofday.php",
        "name": "gettimeofday",
        "description": "Get current time"
    },
    {
        "href": "function.gettype.php",
        "name": "gettype",
        "description": "Get the type of a variable"
    },
    {
        "href": "function.get-browser.php",
        "name": "get_browser",
        "description": "Tells what the user's browser is capable of"
    },
    {
        "href": "function.get-called-class.php",
        "name": "get_called_class",
        "description": "The \"Late Static Binding\" class name"
    },
    {
        "href": "function.get-cfg-var.php",
        "name": "get_cfg_var",
        "description": "Gets the value of a PHP configuration option"
    },
    {
        "href": "function.get-class.php",
        "name": "get_class",
        "description": "Returns the name of the class of an object"
    },
    {
        "href": "function.get-class-methods.php",
        "name": "get_class_methods",
        "description": "Gets the class methods' names"
    },
    {
        "href": "function.get-class-vars.php",
        "name": "get_class_vars",
        "description": "Get the default properties of the class"
    },
    {
        "href": "function.get-current-user.php",
        "name": "get_current_user",
        "description": "Gets the name of the owner of the current PHP script"
    },
    {
        "href": "function.get-debug-type.php",
        "name": "get_debug_type",
        "description": "Gets the type name of a variable in a way that is suitable for debugging"
    },
    {
        "href": "function.get-declared-classes.php",
        "name": "get_declared_classes",
        "description": "Returns an array with the name of the defined classes"
    },
    {
        "href": "function.get-declared-interfaces.php",
        "name": "get_declared_interfaces",
        "description": "Returns an array of all declared interfaces"
    },
    {
        "href": "function.get-declared-traits.php",
        "name": "get_declared_traits",
        "description": "Returns an array of all declared traits"
    },
    {
        "href": "function.get-defined-constants.php",
        "name": "get_defined_constants",
        "description": "Returns an associative array with the names of all the constants and their values"
    },
    {
        "href": "function.get-defined-functions.php",
        "name": "get_defined_functions",
        "description": "Returns an array of all defined functions"
    },
    {
        "href": "function.get-defined-vars.php",
        "name": "get_defined_vars",
        "description": "Returns an array of all defined variables"
    },
    {
        "href": "function.get-extension-funcs.php",
        "name": "get_extension_funcs",
        "description": "Returns an array with the names of the functions of a module"
    },
    {
        "href": "function.get-headers.php",
        "name": "get_headers",
        "description": "Fetches all the headers sent by the server in response to an HTTP request"
    },
    {
        "href": "function.get-html-translation-table.php",
        "name": "get_html_translation_table",
        "description": "Returns the translation table used by htmlspecialchars and htmlentities"
    },
    {
        "href": "function.get-included-files.php",
        "name": "get_included_files",
        "description": "Returns an array with the names of included or required files"
    },
    {
        "href": "function.get-include-path.php",
        "name": "get_include_path",
        "description": "Gets the current include_path configuration option"
    },
    {
        "href": "function.get-loaded-extensions.php",
        "name": "get_loaded_extensions",
        "description": "Returns an array with the names of all modules compiled and loaded"
    },
    {
        "href": "function.get-magic-quotes-gpc.php",
        "name": "get_magic_quotes_gpc",
        "description": "Gets the current configuration setting of magic_quotes_gpc"
    },
    {
        "href": "function.get-magic-quotes-runtime.php",
        "name": "get_magic_quotes_runtime",
        "description": "Gets the current active configuration setting of magic_quotes_runtime"
    },
    {
        "href": "function.get-mangled-object-vars.php",
        "name": "get_mangled_object_vars",
        "description": "Returns an array of mangled object properties"
    },
    {
        "href": "function.get-meta-tags.php",
        "name": "get_meta_tags",
        "description": "Extracts all meta tag content attributes from a file and returns an array"
    },
    {
        "href": "function.get-object-vars.php",
        "name": "get_object_vars",
        "description": "Gets the properties of the given object"
    },
    {
        "href": "function.get-parent-class.php",
        "name": "get_parent_class",
        "description": "Retrieves the parent class name for object or class"
    },
    {
        "href": "function.get-required-files.php",
        "name": "get_required_files",
        "description": "Alias of get_included_files"
    },
    {
        "href": "function.get-resources.php",
        "name": "get_resources",
        "description": "Returns active resources"
    },
    {
        "href": "function.get-resource-id.php",
        "name": "get_resource_id",
        "description": "Returns an integer identifier for the given resource"
    },
    {
        "href": "function.get-resource-type.php",
        "name": "get_resource_type",
        "description": "Returns the resource type"
    },
    {
        "href": "function.glob.php",
        "name": "glob",
        "description": "Find pathnames matching a pattern"
    },
    {
        "href": "wrappers.glob.php",
        "name": "glob://",
        "description": "Find pathnames matching pattern"
    },
    {
        "href": "globiterator.count.php",
        "name": "GlobIterator::count",
        "description": "Get the number of directories and files"
    },
    {
        "href": "globiterator.construct.php",
        "name": "GlobIterator::__construct",
        "description": "Construct a directory using glob"
    },
    {
        "href": "gmagick.addimage.php",
        "name": "Gmagick::addimage",
        "description": "Adds new image to Gmagick object image list"
    },
    {
        "href": "gmagick.addnoiseimage.php",
        "name": "Gmagick::addnoiseimage",
        "description": "Adds random noise to the image"
    },
    {
        "href": "gmagick.annotateimage.php",
        "name": "Gmagick::annotateimage",
        "description": "Annotates an image with text"
    },
    {
        "href": "gmagick.blurimage.php",
        "name": "Gmagick::blurimage",
        "description": "Adds blur filter to image"
    },
    {
        "href": "gmagick.borderimage.php",
        "name": "Gmagick::borderimage",
        "description": "Surrounds the image with a border"
    },
    {
        "href": "gmagick.charcoalimage.php",
        "name": "Gmagick::charcoalimage",
        "description": "Simulates a charcoal drawing"
    },
    {
        "href": "gmagick.chopimage.php",
        "name": "Gmagick::chopimage",
        "description": "Removes a region of an image and trims"
    },
    {
        "href": "gmagick.clear.php",
        "name": "Gmagick::clear",
        "description": "Clears all resources associated to Gmagick object"
    },
    {
        "href": "gmagick.commentimage.php",
        "name": "Gmagick::commentimage",
        "description": "Adds a comment to your image"
    },
    {
        "href": "gmagick.compositeimage.php",
        "name": "Gmagick::compositeimage",
        "description": "Composite one image onto another"
    },
    {
        "href": "gmagick.cropimage.php",
        "name": "Gmagick::cropimage",
        "description": "Extracts a region of the image"
    },
    {
        "href": "gmagick.cropthumbnailimage.php",
        "name": "Gmagick::cropthumbnailimage",
        "description": "Creates a crop thumbnail"
    },
    {
        "href": "gmagick.current.php",
        "name": "Gmagick::current",
        "description": "The current purpose"
    },
    {
        "href": "gmagick.cyclecolormapimage.php",
        "name": "Gmagick::cyclecolormapimage",
        "description": "Displaces an image's colormap"
    },
    {
        "href": "gmagick.deconstructimages.php",
        "name": "Gmagick::deconstructimages",
        "description": "Returns certain pixel differences between images"
    },
    {
        "href": "gmagick.despeckleimage.php",
        "name": "Gmagick::despeckleimage",
        "description": "The despeckleimage purpose"
    },
    {
        "href": "gmagick.destroy.php",
        "name": "Gmagick::destroy",
        "description": "The destroy purpose"
    },
    {
        "href": "gmagick.drawimage.php",
        "name": "Gmagick::drawimage",
        "description": "Renders the GmagickDraw object on the current image"
    },
    {
        "href": "gmagick.edgeimage.php",
        "name": "Gmagick::edgeimage",
        "description": "Enhance edges within the image"
    },
    {
        "href": "gmagick.embossimage.php",
        "name": "Gmagick::embossimage",
        "description": "Returns a grayscale image with a three-dimensional effect"
    },
    {
        "href": "gmagick.enhanceimage.php",
        "name": "Gmagick::enhanceimage",
        "description": "Improves the quality of a noisy image"
    },
    {
        "href": "gmagick.equalizeimage.php",
        "name": "Gmagick::equalizeimage",
        "description": "Equalizes the image histogram"
    },
    {
        "href": "gmagick.flipimage.php",
        "name": "Gmagick::flipimage",
        "description": "Creates a vertical mirror image"
    },
    {
        "href": "gmagick.flopimage.php",
        "name": "Gmagick::flopimage",
        "description": "Creates a horizontal mirror image"
    },
    {
        "href": "gmagick.frameimage.php",
        "name": "Gmagick::frameimage",
        "description": "Adds a simulated three-dimensional border"
    },
    {
        "href": "gmagick.gammaimage.php",
        "name": "Gmagick::gammaimage",
        "description": "Gamma-corrects an image"
    },
    {
        "href": "gmagick.getcopyright.php",
        "name": "Gmagick::getcopyright",
        "description": "Returns the GraphicsMagick API copyright as a string"
    },
    {
        "href": "gmagick.getfilename.php",
        "name": "Gmagick::getfilename",
        "description": "The filename associated with an image sequence"
    },
    {
        "href": "gmagick.getimagebackgroundcolor.php",
        "name": "Gmagick::getimagebackgroundcolor",
        "description": "Returns the image background color"
    },
    {
        "href": "gmagick.getimageblueprimary.php",
        "name": "Gmagick::getimageblueprimary",
        "description": "Returns the chromaticy blue primary point"
    },
    {
        "href": "gmagick.getimagebordercolor.php",
        "name": "Gmagick::getimagebordercolor",
        "description": "Returns the image border color"
    },
    {
        "href": "gmagick.getimagechanneldepth.php",
        "name": "Gmagick::getimagechanneldepth",
        "description": "Gets the depth for a particular image channel"
    },
    {
        "href": "gmagick.getimagecolors.php",
        "name": "Gmagick::getimagecolors",
        "description": "Returns the color of the specified colormap index"
    },
    {
        "href": "gmagick.getimagecolorspace.php",
        "name": "Gmagick::getimagecolorspace",
        "description": "Gets the image colorspace"
    },
    {
        "href": "gmagick.getimagecompose.php",
        "name": "Gmagick::getimagecompose",
        "description": "Returns the composite operator associated with the image"
    },
    {
        "href": "gmagick.getimagedelay.php",
        "name": "Gmagick::getimagedelay",
        "description": "Gets the image delay"
    },
    {
        "href": "gmagick.getimagedepth.php",
        "name": "Gmagick::getimagedepth",
        "description": "Gets the depth of the image"
    },
    {
        "href": "gmagick.getimagedispose.php",
        "name": "Gmagick::getimagedispose",
        "description": "Gets the image disposal method"
    },
    {
        "href": "gmagick.getimageextrema.php",
        "name": "Gmagick::getimageextrema",
        "description": "Gets the extrema for the image"
    },
    {
        "href": "gmagick.getimagefilename.php",
        "name": "Gmagick::getimagefilename",
        "description": "Returns the filename of a particular image in a sequence"
    },
    {
        "href": "gmagick.getimageformat.php",
        "name": "Gmagick::getimageformat",
        "description": "Returns the format of a particular image in a sequence"
    },
    {
        "href": "gmagick.getimagegamma.php",
        "name": "Gmagick::getimagegamma",
        "description": "Gets the image gamma"
    },
    {
        "href": "gmagick.getimagegreenprimary.php",
        "name": "Gmagick::getimagegreenprimary",
        "description": "Returns the chromaticy green primary point"
    },
    {
        "href": "gmagick.getimageheight.php",
        "name": "Gmagick::getimageheight",
        "description": "Returns the image height"
    },
    {
        "href": "gmagick.getimagehistogram.php",
        "name": "Gmagick::getimagehistogram",
        "description": "Gets the image histogram"
    },
    {
        "href": "gmagick.getimageindex.php",
        "name": "Gmagick::getimageindex",
        "description": "Gets the index of the current active image"
    },
    {
        "href": "gmagick.getimageinterlacescheme.php",
        "name": "Gmagick::getimageinterlacescheme",
        "description": "Gets the image interlace scheme"
    },
    {
        "href": "gmagick.getimageiterations.php",
        "name": "Gmagick::getimageiterations",
        "description": "Gets the image iterations"
    },
    {
        "href": "gmagick.getimagematte.php",
        "name": "Gmagick::getimagematte",
        "description": "Check if the image has a matte channel"
    },
    {
        "href": "gmagick.getimagemattecolor.php",
        "name": "Gmagick::getimagemattecolor",
        "description": "Returns the image matte color"
    },
    {
        "href": "gmagick.getimageprofile.php",
        "name": "Gmagick::getimageprofile",
        "description": "Returns the named image profile"
    },
    {
        "href": "gmagick.getimageredprimary.php",
        "name": "Gmagick::getimageredprimary",
        "description": "Returns the chromaticity red primary point"
    },
    {
        "href": "gmagick.getimagerenderingintent.php",
        "name": "Gmagick::getimagerenderingintent",
        "description": "Gets the image rendering intent"
    },
    {
        "href": "gmagick.getimageresolution.php",
        "name": "Gmagick::getimageresolution",
        "description": "Gets the image X and Y resolution"
    },
    {
        "href": "gmagick.getimagescene.php",
        "name": "Gmagick::getimagescene",
        "description": "Gets the image scene"
    },
    {
        "href": "gmagick.getimagesignature.php",
        "name": "Gmagick::getimagesignature",
        "description": "Generates an SHA-256 message digest"
    },
    {
        "href": "gmagick.getimagetype.php",
        "name": "Gmagick::getimagetype",
        "description": "Gets the potential image type"
    },
    {
        "href": "gmagick.getimageunits.php",
        "name": "Gmagick::getimageunits",
        "description": "Gets the image units of resolution"
    },
    {
        "href": "gmagick.getimagewhitepoint.php",
        "name": "Gmagick::getimagewhitepoint",
        "description": "Returns the chromaticity white point"
    },
    {
        "href": "gmagick.getimagewidth.php",
        "name": "Gmagick::getimagewidth",
        "description": "Returns the width of the image"
    },
    {
        "href": "gmagick.getpackagename.php",
        "name": "Gmagick::getpackagename",
        "description": "Returns the GraphicsMagick package name"
    },
    {
        "href": "gmagick.getquantumdepth.php",
        "name": "Gmagick::getquantumdepth",
        "description": "Returns the Gmagick quantum depth as a string"
    },
    {
        "href": "gmagick.getreleasedate.php",
        "name": "Gmagick::getreleasedate",
        "description": "Returns the GraphicsMagick release date as a string"
    },
    {
        "href": "gmagick.getsamplingfactors.php",
        "name": "Gmagick::getsamplingfactors",
        "description": "Gets the horizontal and vertical sampling factor"
    },
    {
        "href": "gmagick.getsize.php",
        "name": "Gmagick::getsize",
        "description": "Returns the size associated with the Gmagick object"
    },
    {
        "href": "gmagick.getversion.php",
        "name": "Gmagick::getversion",
        "description": "Returns the GraphicsMagick API version"
    },
    {
        "href": "gmagick.hasnextimage.php",
        "name": "Gmagick::hasnextimage",
        "description": "Checks if the object has more images"
    },
    {
        "href": "gmagick.haspreviousimage.php",
        "name": "Gmagick::haspreviousimage",
        "description": "Checks if the object has a previous image"
    },
    {
        "href": "gmagick.implodeimage.php",
        "name": "Gmagick::implodeimage",
        "description": "Creates a new image as a copy"
    },
    {
        "href": "gmagick.labelimage.php",
        "name": "Gmagick::labelimage",
        "description": "Adds a label to an image"
    },
    {
        "href": "gmagick.levelimage.php",
        "name": "Gmagick::levelimage",
        "description": "Adjusts the levels of an image"
    },
    {
        "href": "gmagick.magnifyimage.php",
        "name": "Gmagick::magnifyimage",
        "description": "Scales an image proportionally 2x"
    },
    {
        "href": "gmagick.mapimage.php",
        "name": "Gmagick::mapimage",
        "description": "Replaces the colors of an image with the closest color from a reference image"
    },
    {
        "href": "gmagick.medianfilterimage.php",
        "name": "Gmagick::medianfilterimage",
        "description": "Applies a digital filter"
    },
    {
        "href": "gmagick.minifyimage.php",
        "name": "Gmagick::minifyimage",
        "description": "Scales an image proportionally to half its size"
    },
    {
        "href": "gmagick.modulateimage.php",
        "name": "Gmagick::modulateimage",
        "description": "Control the brightness, saturation, and hue"
    },
    {
        "href": "gmagick.motionblurimage.php",
        "name": "Gmagick::motionblurimage",
        "description": "Simulates motion blur"
    },
    {
        "href": "gmagick.newimage.php",
        "name": "Gmagick::newimage",
        "description": "Creates a new image"
    },
    {
        "href": "gmagick.nextimage.php",
        "name": "Gmagick::nextimage",
        "description": "Moves to the next image"
    },
    {
        "href": "gmagick.normalizeimage.php",
        "name": "Gmagick::normalizeimage",
        "description": "Enhances the contrast of a color image"
    },
    {
        "href": "gmagick.oilpaintimage.php",
        "name": "Gmagick::oilpaintimage",
        "description": "Simulates an oil painting"
    },
    {
        "href": "gmagick.previousimage.php",
        "name": "Gmagick::previousimage",
        "description": "Move to the previous image in the object"
    },
    {
        "href": "gmagick.profileimage.php",
        "name": "Gmagick::profileimage",
        "description": "Adds or removes a profile from an image"
    },
    {
        "href": "gmagick.quantizeimage.php",
        "name": "Gmagick::quantizeimage",
        "description": "Analyzes the colors within a reference image"
    },
    {
        "href": "gmagick.quantizeimages.php",
        "name": "Gmagick::quantizeimages",
        "description": "The quantizeimages purpose"
    },
    {
        "href": "gmagick.queryfontmetrics.php",
        "name": "Gmagick::queryfontmetrics",
        "description": "Returns an array representing the font metrics"
    },
    {
        "href": "gmagick.queryfonts.php",
        "name": "Gmagick::queryfonts",
        "description": "Returns the configured fonts"
    },
    {
        "href": "gmagick.queryformats.php",
        "name": "Gmagick::queryformats",
        "description": "Returns formats supported by Gmagick"
    },
    {
        "href": "gmagick.radialblurimage.php",
        "name": "Gmagick::radialblurimage",
        "description": "Radial blurs an image"
    },
    {
        "href": "gmagick.raiseimage.php",
        "name": "Gmagick::raiseimage",
        "description": "Creates a simulated 3d button-like effect"
    },
    {
        "href": "gmagick.read.php",
        "name": "Gmagick::read",
        "description": "Reads image from filename"
    },
    {
        "href": "gmagick.readimage.php",
        "name": "Gmagick::readimage",
        "description": "Reads image from filename"
    },
    {
        "href": "gmagick.readimageblob.php",
        "name": "Gmagick::readimageblob",
        "description": "Reads image from a binary string"
    },
    {
        "href": "gmagick.readimagefile.php",
        "name": "Gmagick::readimagefile",
        "description": "The readimagefile purpose"
    },
    {
        "href": "gmagick.reducenoiseimage.php",
        "name": "Gmagick::reducenoiseimage",
        "description": "Smooths the contours of an image"
    },
    {
        "href": "gmagick.removeimage.php",
        "name": "Gmagick::removeimage",
        "description": "Removes an image from the image list"
    },
    {
        "href": "gmagick.removeimageprofile.php",
        "name": "Gmagick::removeimageprofile",
        "description": "Removes the named image profile and returns it"
    },
    {
        "href": "gmagick.resampleimage.php",
        "name": "Gmagick::resampleimage",
        "description": "Resample image to desired resolution"
    },
    {
        "href": "gmagick.resizeimage.php",
        "name": "Gmagick::resizeimage",
        "description": "Scales an image"
    },
    {
        "href": "gmagick.rollimage.php",
        "name": "Gmagick::rollimage",
        "description": "Offsets an image"
    },
    {
        "href": "gmagick.rotateimage.php",
        "name": "Gmagick::rotateimage",
        "description": "Rotates an image"
    },
    {
        "href": "gmagick.scaleimage.php",
        "name": "Gmagick::scaleimage",
        "description": "Scales the size of an image"
    },
    {
        "href": "gmagick.separateimagechannel.php",
        "name": "Gmagick::separateimagechannel",
        "description": "Separates a channel from the image"
    },
    {
        "href": "gmagick.setcompressionquality.php",
        "name": "Gmagick::setCompressionQuality",
        "description": "Sets the object's default compression quality"
    },
    {
        "href": "gmagick.setfilename.php",
        "name": "Gmagick::setfilename",
        "description": "Sets the filename before you read or write the image"
    },
    {
        "href": "gmagick.setimagebackgroundcolor.php",
        "name": "Gmagick::setimagebackgroundcolor",
        "description": "Sets the image background color"
    },
    {
        "href": "gmagick.setimageblueprimary.php",
        "name": "Gmagick::setimageblueprimary",
        "description": "Sets the image chromaticity blue primary point"
    },
    {
        "href": "gmagick.setimagebordercolor.php",
        "name": "Gmagick::setimagebordercolor",
        "description": "Sets the image border color"
    },
    {
        "href": "gmagick.setimagechanneldepth.php",
        "name": "Gmagick::setimagechanneldepth",
        "description": "Sets the depth of a particular image channel"
    },
    {
        "href": "gmagick.setimagecolorspace.php",
        "name": "Gmagick::setimagecolorspace",
        "description": "Sets the image colorspace"
    },
    {
        "href": "gmagick.setimagecompose.php",
        "name": "Gmagick::setimagecompose",
        "description": "Sets the image composite operator"
    },
    {
        "href": "gmagick.setimagedelay.php",
        "name": "Gmagick::setimagedelay",
        "description": "Sets the image delay"
    },
    {
        "href": "gmagick.setimagedepth.php",
        "name": "Gmagick::setimagedepth",
        "description": "Sets the image depth"
    },
    {
        "href": "gmagick.setimagedispose.php",
        "name": "Gmagick::setimagedispose",
        "description": "Sets the image disposal method"
    },
    {
        "href": "gmagick.setimagefilename.php",
        "name": "Gmagick::setimagefilename",
        "description": "Sets the filename of a particular image in a sequence"
    },
    {
        "href": "gmagick.setimageformat.php",
        "name": "Gmagick::setimageformat",
        "description": "Sets the format of a particular image"
    },
    {
        "href": "gmagick.setimagegamma.php",
        "name": "Gmagick::setimagegamma",
        "description": "Sets the image gamma"
    },
    {
        "href": "gmagick.setimagegreenprimary.php",
        "name": "Gmagick::setimagegreenprimary",
        "description": "Sets the image chromaticity green primary point"
    },
    {
        "href": "gmagick.setimageindex.php",
        "name": "Gmagick::setimageindex",
        "description": "Set the iterator to the position in the image list specified with the index parameter"
    },
    {
        "href": "gmagick.setimageinterlacescheme.php",
        "name": "Gmagick::setimageinterlacescheme",
        "description": "Sets the interlace scheme of the image"
    },
    {
        "href": "gmagick.setimageiterations.php",
        "name": "Gmagick::setimageiterations",
        "description": "Sets the image iterations"
    },
    {
        "href": "gmagick.setimageprofile.php",
        "name": "Gmagick::setimageprofile",
        "description": "Adds a named profile to the Gmagick object"
    },
    {
        "href": "gmagick.setimageredprimary.php",
        "name": "Gmagick::setimageredprimary",
        "description": "Sets the image chromaticity red primary point"
    },
    {
        "href": "gmagick.setimagerenderingintent.php",
        "name": "Gmagick::setimagerenderingintent",
        "description": "Sets the image rendering intent"
    },
    {
        "href": "gmagick.setimageresolution.php",
        "name": "Gmagick::setimageresolution",
        "description": "Sets the image resolution"
    },
    {
        "href": "gmagick.setimagescene.php",
        "name": "Gmagick::setimagescene",
        "description": "Sets the image scene"
    },
    {
        "href": "gmagick.setimagetype.php",
        "name": "Gmagick::setimagetype",
        "description": "Sets the image type"
    },
    {
        "href": "gmagick.setimageunits.php",
        "name": "Gmagick::setimageunits",
        "description": "Sets the image units of resolution"
    },
    {
        "href": "gmagick.setimagewhitepoint.php",
        "name": "Gmagick::setimagewhitepoint",
        "description": "Sets the image chromaticity white point"
    },
    {
        "href": "gmagick.setsamplingfactors.php",
        "name": "Gmagick::setsamplingfactors",
        "description": "Sets the image sampling factors"
    },
    {
        "href": "gmagick.setsize.php",
        "name": "Gmagick::setsize",
        "description": "Sets the size of the Gmagick object"
    },
    {
        "href": "gmagick.shearimage.php",
        "name": "Gmagick::shearimage",
        "description": "Creating a parallelogram"
    },
    {
        "href": "gmagick.solarizeimage.php",
        "name": "Gmagick::solarizeimage",
        "description": "Applies a solarizing effect to the image"
    },
    {
        "href": "gmagick.spreadimage.php",
        "name": "Gmagick::spreadimage",
        "description": "Randomly displaces each pixel in a block"
    },
    {
        "href": "gmagick.stripimage.php",
        "name": "Gmagick::stripimage",
        "description": "Strips an image of all profiles and comments"
    },
    {
        "href": "gmagick.swirlimage.php",
        "name": "Gmagick::swirlimage",
        "description": "Swirls the pixels about the center of the image"
    },
    {
        "href": "gmagick.thumbnailimage.php",
        "name": "Gmagick::thumbnailimage",
        "description": "Changes the size of an image"
    },
    {
        "href": "gmagick.trimimage.php",
        "name": "Gmagick::trimimage",
        "description": "Remove edges from the image"
    },
    {
        "href": "gmagick.write.php",
        "name": "Gmagick::write",
        "description": "Alias of Gmagick::writeimage"
    },
    {
        "href": "gmagick.writeimage.php",
        "name": "Gmagick::writeimage",
        "description": "Writes an image to the specified filename"
    },
    {
        "href": "gmagick.construct.php",
        "name": "Gmagick::__construct",
        "description": "The Gmagick constructor"
    },
    {
        "href": "gmagickdraw.annotate.php",
        "name": "GmagickDraw::annotate",
        "description": "Draws text on the image"
    },
    {
        "href": "gmagickdraw.arc.php",
        "name": "GmagickDraw::arc",
        "description": "Draws an arc"
    },
    {
        "href": "gmagickdraw.bezier.php",
        "name": "GmagickDraw::bezier",
        "description": "Draws a bezier curve"
    },
    {
        "href": "gmagickdraw.ellipse.php",
        "name": "GmagickDraw::ellipse",
        "description": "Draws an ellipse on the image"
    },
    {
        "href": "gmagickdraw.getfillcolor.php",
        "name": "GmagickDraw::getfillcolor",
        "description": "Returns the fill color"
    },
    {
        "href": "gmagickdraw.getfillopacity.php",
        "name": "GmagickDraw::getfillopacity",
        "description": "Returns the opacity used when drawing"
    },
    {
        "href": "gmagickdraw.getfont.php",
        "name": "GmagickDraw::getfont",
        "description": "Returns the font"
    },
    {
        "href": "gmagickdraw.getfontsize.php",
        "name": "GmagickDraw::getfontsize",
        "description": "Returns the font pointsize"
    },
    {
        "href": "gmagickdraw.getfontstyle.php",
        "name": "GmagickDraw::getfontstyle",
        "description": "Returns the font style"
    },
    {
        "href": "gmagickdraw.getfontweight.php",
        "name": "GmagickDraw::getfontweight",
        "description": "Returns the font weight"
    },
    {
        "href": "gmagickdraw.getstrokecolor.php",
        "name": "GmagickDraw::getstrokecolor",
        "description": "Returns the color used for stroking object outlines"
    },
    {
        "href": "gmagickdraw.getstrokeopacity.php",
        "name": "GmagickDraw::getstrokeopacity",
        "description": "Returns the opacity of stroked object outlines"
    },
    {
        "href": "gmagickdraw.getstrokewidth.php",
        "name": "GmagickDraw::getstrokewidth",
        "description": "Returns the width of the stroke used to draw object outlines"
    },
    {
        "href": "gmagickdraw.gettextdecoration.php",
        "name": "GmagickDraw::gettextdecoration",
        "description": "Returns the text decoration"
    },
    {
        "href": "gmagickdraw.gettextencoding.php",
        "name": "GmagickDraw::gettextencoding",
        "description": "Returns the code set used for text annotations"
    },
    {
        "href": "gmagickdraw.line.php",
        "name": "GmagickDraw::line",
        "description": "Draws a line"
    },
    {
        "href": "gmagickdraw.point.php",
        "name": "GmagickDraw::point",
        "description": "Draws a point"
    },
    {
        "href": "gmagickdraw.polygon.php",
        "name": "GmagickDraw::polygon",
        "description": "Draws a polygon"
    },
    {
        "href": "gmagickdraw.polyline.php",
        "name": "GmagickDraw::polyline",
        "description": "Draws a polyline"
    },
    {
        "href": "gmagickdraw.rectangle.php",
        "name": "GmagickDraw::rectangle",
        "description": "Draws a rectangle"
    },
    {
        "href": "gmagickdraw.rotate.php",
        "name": "GmagickDraw::rotate",
        "description": "Applies the specified rotation to the current coordinate space"
    },
    {
        "href": "gmagickdraw.roundrectangle.php",
        "name": "GmagickDraw::roundrectangle",
        "description": "Draws a rounded rectangle"
    },
    {
        "href": "gmagickdraw.scale.php",
        "name": "GmagickDraw::scale",
        "description": "Adjusts the scaling factor"
    },
    {
        "href": "gmagickdraw.setfillcolor.php",
        "name": "GmagickDraw::setfillcolor",
        "description": "Sets the fill color to be used for drawing filled objects"
    },
    {
        "href": "gmagickdraw.setfillopacity.php",
        "name": "GmagickDraw::setfillopacity",
        "description": "The setfillopacity purpose"
    },
    {
        "href": "gmagickdraw.setfont.php",
        "name": "GmagickDraw::setfont",
        "description": "Sets the fully-specified font to use when annotating with text"
    },
    {
        "href": "gmagickdraw.setfontsize.php",
        "name": "GmagickDraw::setfontsize",
        "description": "Sets the font pointsize to use when annotating with text"
    },
    {
        "href": "gmagickdraw.setfontstyle.php",
        "name": "GmagickDraw::setfontstyle",
        "description": "Sets the font style to use when annotating with text"
    },
    {
        "href": "gmagickdraw.setfontweight.php",
        "name": "GmagickDraw::setfontweight",
        "description": "Sets the font weight"
    },
    {
        "href": "gmagickdraw.setstrokecolor.php",
        "name": "GmagickDraw::setstrokecolor",
        "description": "Sets the color used for stroking object outlines"
    },
    {
        "href": "gmagickdraw.setstrokeopacity.php",
        "name": "GmagickDraw::setstrokeopacity",
        "description": "Specifies the opacity of stroked object outlines"
    },
    {
        "href": "gmagickdraw.setstrokewidth.php",
        "name": "GmagickDraw::setstrokewidth",
        "description": "Sets the width of the stroke used to draw object outlines"
    },
    {
        "href": "gmagickdraw.settextdecoration.php",
        "name": "GmagickDraw::settextdecoration",
        "description": "Specifies a decoration"
    },
    {
        "href": "gmagickdraw.settextencoding.php",
        "name": "GmagickDraw::settextencoding",
        "description": "Specifies the text code set"
    },
    {
        "href": "gmagickpixel.getcolor.php",
        "name": "GmagickPixel::getcolor",
        "description": "Returns the color"
    },
    {
        "href": "gmagickpixel.getcolorcount.php",
        "name": "GmagickPixel::getcolorcount",
        "description": "Returns the color count associated with this color"
    },
    {
        "href": "gmagickpixel.getcolorvalue.php",
        "name": "GmagickPixel::getcolorvalue",
        "description": "Gets the normalized value of the provided color channel"
    },
    {
        "href": "gmagickpixel.setcolor.php",
        "name": "GmagickPixel::setcolor",
        "description": "Sets the color"
    },
    {
        "href": "gmagickpixel.setcolorvalue.php",
        "name": "GmagickPixel::setcolorvalue",
        "description": "Sets the normalized value of one of the channels"
    },
    {
        "href": "gmagickpixel.construct.php",
        "name": "GmagickPixel::__construct",
        "description": "The GmagickPixel constructor"
    },
    {
        "href": "function.gmdate.php",
        "name": "gmdate",
        "description": "Format a GMT/UTC date/time"
    },
    {
        "href": "function.gmmktime.php",
        "name": "gmmktime",
        "description": "Get Unix timestamp for a GMT date"
    },
    {
        "href": "gmp.serialize.php",
        "name": "GMP::__serialize",
        "description": "Serializes the GMP object"
    },
    {
        "href": "gmp.unserialize.php",
        "name": "GMP::__unserialize",
        "description": "Deserializes the data parameter into a GMP object"
    },
    {
        "href": "function.gmp-abs.php",
        "name": "gmp_abs",
        "description": "Absolute value"
    },
    {
        "href": "function.gmp-add.php",
        "name": "gmp_add",
        "description": "Add numbers"
    },
    {
        "href": "function.gmp-and.php",
        "name": "gmp_and",
        "description": "Bitwise AND"
    },
    {
        "href": "function.gmp-binomial.php",
        "name": "gmp_binomial",
        "description": "Calculates binomial coefficient"
    },
    {
        "href": "function.gmp-clrbit.php",
        "name": "gmp_clrbit",
        "description": "Clear bit"
    },
    {
        "href": "function.gmp-cmp.php",
        "name": "gmp_cmp",
        "description": "Compare numbers"
    },
    {
        "href": "function.gmp-com.php",
        "name": "gmp_com",
        "description": "Calculates one's complement"
    },
    {
        "href": "function.gmp-div.php",
        "name": "gmp_div",
        "description": "Alias of gmp_div_q"
    },
    {
        "href": "function.gmp-divexact.php",
        "name": "gmp_divexact",
        "description": "Exact division of numbers"
    },
    {
        "href": "function.gmp-div-q.php",
        "name": "gmp_div_q",
        "description": "Divide numbers"
    },
    {
        "href": "function.gmp-div-qr.php",
        "name": "gmp_div_qr",
        "description": "Divide numbers and get quotient and remainder"
    },
    {
        "href": "function.gmp-div-r.php",
        "name": "gmp_div_r",
        "description": "Remainder of the division of numbers"
    },
    {
        "href": "function.gmp-export.php",
        "name": "gmp_export",
        "description": "Export to a binary string"
    },
    {
        "href": "function.gmp-fact.php",
        "name": "gmp_fact",
        "description": "Factorial"
    },
    {
        "href": "function.gmp-gcd.php",
        "name": "gmp_gcd",
        "description": "Calculate GCD"
    },
    {
        "href": "function.gmp-gcdext.php",
        "name": "gmp_gcdext",
        "description": "Calculate GCD and multipliers"
    },
    {
        "href": "function.gmp-hamdist.php",
        "name": "gmp_hamdist",
        "description": "Hamming distance"
    },
    {
        "href": "function.gmp-import.php",
        "name": "gmp_import",
        "description": "Import from a binary string"
    },
    {
        "href": "function.gmp-init.php",
        "name": "gmp_init",
        "description": "Create GMP number"
    },
    {
        "href": "function.gmp-intval.php",
        "name": "gmp_intval",
        "description": "Convert GMP number to integer"
    },
    {
        "href": "function.gmp-invert.php",
        "name": "gmp_invert",
        "description": "Inverse by modulo"
    },
    {
        "href": "function.gmp-jacobi.php",
        "name": "gmp_jacobi",
        "description": "Jacobi symbol"
    },
    {
        "href": "function.gmp-kronecker.php",
        "name": "gmp_kronecker",
        "description": "Kronecker symbol"
    },
    {
        "href": "function.gmp-lcm.php",
        "name": "gmp_lcm",
        "description": "Calculate LCM"
    },
    {
        "href": "function.gmp-legendre.php",
        "name": "gmp_legendre",
        "description": "Legendre symbol"
    },
    {
        "href": "function.gmp-mod.php",
        "name": "gmp_mod",
        "description": "Modulo operation"
    },
    {
        "href": "function.gmp-mul.php",
        "name": "gmp_mul",
        "description": "Multiply numbers"
    },
    {
        "href": "function.gmp-neg.php",
        "name": "gmp_neg",
        "description": "Negate number"
    },
    {
        "href": "function.gmp-nextprime.php",
        "name": "gmp_nextprime",
        "description": "Find next prime number"
    },
    {
        "href": "function.gmp-or.php",
        "name": "gmp_or",
        "description": "Bitwise OR"
    },
    {
        "href": "function.gmp-perfect-power.php",
        "name": "gmp_perfect_power",
        "description": "Perfect power check"
    },
    {
        "href": "function.gmp-perfect-square.php",
        "name": "gmp_perfect_square",
        "description": "Perfect square check"
    },
    {
        "href": "function.gmp-popcount.php",
        "name": "gmp_popcount",
        "description": "Population count"
    },
    {
        "href": "function.gmp-pow.php",
        "name": "gmp_pow",
        "description": "Raise number into power"
    },
    {
        "href": "function.gmp-powm.php",
        "name": "gmp_powm",
        "description": "Raise number into power with modulo"
    },
    {
        "href": "function.gmp-prob-prime.php",
        "name": "gmp_prob_prime",
        "description": "Check if number is \"probably prime\""
    },
    {
        "href": "function.gmp-random.php",
        "name": "gmp_random",
        "description": "Random number"
    },
    {
        "href": "function.gmp-random-bits.php",
        "name": "gmp_random_bits",
        "description": "Random number"
    },
    {
        "href": "function.gmp-random-range.php",
        "name": "gmp_random_range",
        "description": "Random number"
    },
    {
        "href": "function.gmp-random-seed.php",
        "name": "gmp_random_seed",
        "description": "Sets the RNG seed"
    },
    {
        "href": "function.gmp-root.php",
        "name": "gmp_root",
        "description": "Take the integer part of nth root"
    },
    {
        "href": "function.gmp-rootrem.php",
        "name": "gmp_rootrem",
        "description": "Take the integer part and remainder of nth root"
    },
    {
        "href": "function.gmp-scan0.php",
        "name": "gmp_scan0",
        "description": "Scan for 0"
    },
    {
        "href": "function.gmp-scan1.php",
        "name": "gmp_scan1",
        "description": "Scan for 1"
    },
    {
        "href": "function.gmp-setbit.php",
        "name": "gmp_setbit",
        "description": "Set bit"
    },
    {
        "href": "function.gmp-sign.php",
        "name": "gmp_sign",
        "description": "Sign of number"
    },
    {
        "href": "function.gmp-sqrt.php",
        "name": "gmp_sqrt",
        "description": "Calculate square root"
    },
    {
        "href": "function.gmp-sqrtrem.php",
        "name": "gmp_sqrtrem",
        "description": "Square root with remainder"
    },
    {
        "href": "function.gmp-strval.php",
        "name": "gmp_strval",
        "description": "Convert GMP number to string"
    },
    {
        "href": "function.gmp-sub.php",
        "name": "gmp_sub",
        "description": "Subtract numbers"
    },
    {
        "href": "function.gmp-testbit.php",
        "name": "gmp_testbit",
        "description": "Tests if a bit is set"
    },
    {
        "href": "function.gmp-xor.php",
        "name": "gmp_xor",
        "description": "Bitwise XOR"
    },
    {
        "href": "function.gmstrftime.php",
        "name": "gmstrftime",
        "description": "Format a GMT/UTC time/date according to locale settings"
    },
    {
        "href": "function.gnupg-adddecryptkey.php",
        "name": "gnupg_adddecryptkey",
        "description": "Add a key for decryption"
    },
    {
        "href": "function.gnupg-addencryptkey.php",
        "name": "gnupg_addencryptkey",
        "description": "Add a key for encryption"
    },
    {
        "href": "function.gnupg-addsignkey.php",
        "name": "gnupg_addsignkey",
        "description": "Add a key for signing"
    },
    {
        "href": "function.gnupg-cleardecryptkeys.php",
        "name": "gnupg_cleardecryptkeys",
        "description": "Removes all keys which were set for decryption before"
    },
    {
        "href": "function.gnupg-clearencryptkeys.php",
        "name": "gnupg_clearencryptkeys",
        "description": "Removes all keys which were set for encryption before"
    },
    {
        "href": "function.gnupg-clearsignkeys.php",
        "name": "gnupg_clearsignkeys",
        "description": "Removes all keys which were set for signing before"
    },
    {
        "href": "function.gnupg-decrypt.php",
        "name": "gnupg_decrypt",
        "description": "Decrypts a given text"
    },
    {
        "href": "function.gnupg-decryptverify.php",
        "name": "gnupg_decryptverify",
        "description": "Decrypts and verifies a given text"
    },
    {
        "href": "function.gnupg-encrypt.php",
        "name": "gnupg_encrypt",
        "description": "Encrypts a given text"
    },
    {
        "href": "function.gnupg-encryptsign.php",
        "name": "gnupg_encryptsign",
        "description": "Encrypts and signs a given text"
    },
    {
        "href": "function.gnupg-export.php",
        "name": "gnupg_export",
        "description": "Exports a key"
    },
    {
        "href": "function.gnupg-getengineinfo.php",
        "name": "gnupg_getengineinfo",
        "description": "Returns the engine info"
    },
    {
        "href": "function.gnupg-geterror.php",
        "name": "gnupg_geterror",
        "description": "Returns the errortext, if a function fails"
    },
    {
        "href": "function.gnupg-geterrorinfo.php",
        "name": "gnupg_geterrorinfo",
        "description": "Returns the error info"
    },
    {
        "href": "function.gnupg-getprotocol.php",
        "name": "gnupg_getprotocol",
        "description": "Returns the currently active protocol for all operations"
    },
    {
        "href": "function.gnupg-import.php",
        "name": "gnupg_import",
        "description": "Imports a key"
    },
    {
        "href": "function.gnupg-init.php",
        "name": "gnupg_init",
        "description": "Initialize a connection"
    },
    {
        "href": "function.gnupg-keyinfo.php",
        "name": "gnupg_keyinfo",
        "description": "Returns an array with information about all keys that matches the given pattern"
    },
    {
        "href": "function.gnupg-setarmor.php",
        "name": "gnupg_setarmor",
        "description": "Toggle armored output"
    },
    {
        "href": "function.gnupg-seterrormode.php",
        "name": "gnupg_seterrormode",
        "description": "Sets the mode for error_reporting"
    },
    {
        "href": "function.gnupg-setsignmode.php",
        "name": "gnupg_setsignmode",
        "description": "Sets the mode for signing"
    },
    {
        "href": "function.gnupg-sign.php",
        "name": "gnupg_sign",
        "description": "Signs a given text"
    },
    {
        "href": "function.gnupg-verify.php",
        "name": "gnupg_verify",
        "description": "Verifies a signed text"
    },
    {
        "href": "function.grapheme-extract.php",
        "name": "grapheme_extract",
        "description": "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8"
    },
    {
        "href": "function.grapheme-stripos.php",
        "name": "grapheme_stripos",
        "description": "Find position (in grapheme units) of first occurrence of a case-insensitive string"
    },
    {
        "href": "function.grapheme-stristr.php",
        "name": "grapheme_stristr",
        "description": "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack"
    },
    {
        "href": "function.grapheme-strlen.php",
        "name": "grapheme_strlen",
        "description": "Get string length in grapheme units"
    },
    {
        "href": "function.grapheme-strpos.php",
        "name": "grapheme_strpos",
        "description": "Find position (in grapheme units) of first occurrence of a string"
    },
    {
        "href": "function.grapheme-strripos.php",
        "name": "grapheme_strripos",
        "description": "Find position (in grapheme units) of last occurrence of a case-insensitive string"
    },
    {
        "href": "function.grapheme-strrpos.php",
        "name": "grapheme_strrpos",
        "description": "Find position (in grapheme units) of last occurrence of a string"
    },
    {
        "href": "function.grapheme-strstr.php",
        "name": "grapheme_strstr",
        "description": "Returns part of haystack string from the first occurrence of needle to the end of haystack"
    },
    {
        "href": "function.grapheme-substr.php",
        "name": "grapheme_substr",
        "description": "Return part of a string"
    },
    {
        "href": "function.gregoriantojd.php",
        "name": "gregoriantojd",
        "description": "Converts a Gregorian date to Julian Day Count"
    },
    {
        "href": "function.gzclose.php",
        "name": "gzclose",
        "description": "Close an open gz-file pointer"
    },
    {
        "href": "function.gzcompress.php",
        "name": "gzcompress",
        "description": "Compress a string"
    },
    {
        "href": "function.gzdecode.php",
        "name": "gzdecode",
        "description": "Decodes a gzip compressed string"
    },
    {
        "href": "function.gzdeflate.php",
        "name": "gzdeflate",
        "description": "Deflate a string"
    },
    {
        "href": "function.gzencode.php",
        "name": "gzencode",
        "description": "Create a gzip compressed string"
    },
    {
        "href": "function.gzeof.php",
        "name": "gzeof",
        "description": "Test for EOF on a gz-file pointer"
    },
    {
        "href": "function.gzfile.php",
        "name": "gzfile",
        "description": "Read entire gz-file into an array"
    },
    {
        "href": "function.gzgetc.php",
        "name": "gzgetc",
        "description": "Get character from gz-file pointer"
    },
    {
        "href": "function.gzgets.php",
        "name": "gzgets",
        "description": "Get line from file pointer"
    },
    {
        "href": "function.gzgetss.php",
        "name": "gzgetss",
        "description": "Get line from gz-file pointer and strip HTML tags"
    },
    {
        "href": "function.gzinflate.php",
        "name": "gzinflate",
        "description": "Inflate a deflated string"
    },
    {
        "href": "function.gzopen.php",
        "name": "gzopen",
        "description": "Open gz-file"
    },
    {
        "href": "function.gzpassthru.php",
        "name": "gzpassthru",
        "description": "Output all remaining data on a gz-file pointer"
    },
    {
        "href": "function.gzputs.php",
        "name": "gzputs",
        "description": "Alias of gzwrite"
    },
    {
        "href": "function.gzread.php",
        "name": "gzread",
        "description": "Binary-safe gz-file read"
    },
    {
        "href": "function.gzrewind.php",
        "name": "gzrewind",
        "description": "Rewind the position of a gz-file pointer"
    },
    {
        "href": "function.gzseek.php",
        "name": "gzseek",
        "description": "Seek on a gz-file pointer"
    },
    {
        "href": "function.gztell.php",
        "name": "gztell",
        "description": "Tell gz-file pointer read/write position"
    },
    {
        "href": "function.gzuncompress.php",
        "name": "gzuncompress",
        "description": "Uncompress a compressed string"
    },
    {
        "href": "function.gzwrite.php",
        "name": "gzwrite",
        "description": "Binary-safe gz-file write"
    },
    {
        "href": "function.hash.php",
        "name": "hash",
        "description": "Generate a hash value (message digest)"
    },
    {
        "href": "hashcontext.construct.php",
        "name": "HashContext::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "hashcontext.serialize.php",
        "name": "HashContext::__serialize",
        "description": "Serializes the HashContext object"
    },
    {
        "href": "hashcontext.unserialize.php",
        "name": "HashContext::__unserialize",
        "description": "Deserializes the data parameter into a HashContext object"
    },
    {
        "href": "function.hash-algos.php",
        "name": "hash_algos",
        "description": "Return a list of registered hashing algorithms"
    },
    {
        "href": "function.hash-copy.php",
        "name": "hash_copy",
        "description": "Copy hashing context"
    },
    {
        "href": "function.hash-equals.php",
        "name": "hash_equals",
        "description": "Timing attack safe string comparison"
    },
    {
        "href": "function.hash-file.php",
        "name": "hash_file",
        "description": "Generate a hash value using the contents of a given file"
    },
    {
        "href": "function.hash-final.php",
        "name": "hash_final",
        "description": "Finalize an incremental hash and return resulting digest"
    },
    {
        "href": "function.hash-hkdf.php",
        "name": "hash_hkdf",
        "description": "Generate a HKDF key derivation of a supplied key input"
    },
    {
        "href": "function.hash-hmac.php",
        "name": "hash_hmac",
        "description": "Generate a keyed hash value using the HMAC method"
    },
    {
        "href": "function.hash-hmac-algos.php",
        "name": "hash_hmac_algos",
        "description": "Return a list of registered hashing algorithms suitable for hash_hmac"
    },
    {
        "href": "function.hash-hmac-file.php",
        "name": "hash_hmac_file",
        "description": "Generate a keyed hash value using the HMAC method and the contents of a given file"
    },
    {
        "href": "function.hash-init.php",
        "name": "hash_init",
        "description": "Initialize an incremental hashing context"
    },
    {
        "href": "function.hash-pbkdf2.php",
        "name": "hash_pbkdf2",
        "description": "Generate a PBKDF2 key derivation of a supplied password"
    },
    {
        "href": "function.hash-update.php",
        "name": "hash_update",
        "description": "Pump data into an active hashing context"
    },
    {
        "href": "function.hash-update-file.php",
        "name": "hash_update_file",
        "description": "Pump data into an active hashing context from a file"
    },
    {
        "href": "function.hash-update-stream.php",
        "name": "hash_update_stream",
        "description": "Pump data into an active hashing context from an open stream"
    },
    {
        "href": "function.header.php",
        "name": "header",
        "description": "Send a raw HTTP header"
    },
    {
        "href": "function.headers-list.php",
        "name": "headers_list",
        "description": "Returns a list of response headers sent (or ready to send)"
    },
    {
        "href": "function.headers-sent.php",
        "name": "headers_sent",
        "description": "Checks if or where headers have been sent"
    },
    {
        "href": "function.header-register-callback.php",
        "name": "header_register_callback",
        "description": "Call a header function"
    },
    {
        "href": "function.header-remove.php",
        "name": "header_remove",
        "description": "Remove previously set headers"
    },
    {
        "href": "function.hebrev.php",
        "name": "hebrev",
        "description": "Convert logical Hebrew text to visual text"
    },
    {
        "href": "function.hebrevc.php",
        "name": "hebrevc",
        "description": "Convert logical Hebrew text to visual text with newline conversion"
    },
    {
        "href": "function.hex2bin.php",
        "name": "hex2bin",
        "description": "Decodes a hexadecimally encoded binary string"
    },
    {
        "href": "function.hexdec.php",
        "name": "hexdec",
        "description": "Hexadecimal to decimal"
    },
    {
        "href": "function.highlight-file.php",
        "name": "highlight_file",
        "description": "Syntax highlighting of a file"
    },
    {
        "href": "function.highlight-string.php",
        "name": "highlight_string",
        "description": "Syntax highlighting of a string"
    },
    {
        "href": "function.hrtime.php",
        "name": "hrtime",
        "description": "Get the system's high resolution time"
    },
    {
        "href": "hrtime-performancecounter.getfrequency.php",
        "name": "HRTime\\PerformanceCounter::getFrequency",
        "description": "Timer frequency in ticks per second"
    },
    {
        "href": "hrtime-performancecounter.getticks.php",
        "name": "HRTime\\PerformanceCounter::getTicks",
        "description": "Current ticks from the system"
    },
    {
        "href": "hrtime-performancecounter.gettickssince.php",
        "name": "HRTime\\PerformanceCounter::getTicksSince",
        "description": "Ticks elapsed since the given value"
    },
    {
        "href": "hrtime-stopwatch.getelapsedticks.php",
        "name": "HRTime\\StopWatch::getElapsedTicks",
        "description": "Get elapsed ticks for all intervals"
    },
    {
        "href": "hrtime-stopwatch.getelapsedtime.php",
        "name": "HRTime\\StopWatch::getElapsedTime",
        "description": "Get elapsed time for all intervals"
    },
    {
        "href": "hrtime-stopwatch.getlastelapsedticks.php",
        "name": "HRTime\\StopWatch::getLastElapsedTicks",
        "description": "Get elapsed ticks for the last interval"
    },
    {
        "href": "hrtime-stopwatch.getlastelapsedtime.php",
        "name": "HRTime\\StopWatch::getLastElapsedTime",
        "description": "Get elapsed time for the last interval"
    },
    {
        "href": "hrtime-stopwatch.isrunning.php",
        "name": "HRTime\\StopWatch::isRunning",
        "description": "Whether the measurement is running"
    },
    {
        "href": "hrtime-stopwatch.start.php",
        "name": "HRTime\\StopWatch::start",
        "description": "Start time measurement"
    },
    {
        "href": "hrtime-stopwatch.stop.php",
        "name": "HRTime\\StopWatch::stop",
        "description": "Stop time measurement"
    },
    {
        "href": "function.htmlentities.php",
        "name": "htmlentities",
        "description": "Convert all applicable characters to HTML entities"
    },
    {
        "href": "function.htmlspecialchars.php",
        "name": "htmlspecialchars",
        "description": "Convert special characters to HTML entities"
    },
    {
        "href": "function.htmlspecialchars-decode.php",
        "name": "htmlspecialchars_decode",
        "description": "Convert special HTML entities back to characters"
    },
    {
        "href": "function.html-entity-decode.php",
        "name": "html_entity_decode",
        "description": "Convert HTML entities to their corresponding characters"
    },
    {
        "href": "wrappers.http.php",
        "name": "http://",
        "description": "Accessing HTTP(s) URLs"
    },
    {
        "href": "context.http.php",
        "name": "HTTP context options",
        "description": "HTTP context option listing"
    },
    {
        "href": "function.http-build-query.php",
        "name": "http_build_query",
        "description": "Generate URL-encoded query string"
    },
    {
        "href": "function.http-response-code.php",
        "name": "http_response_code",
        "description": "Get or Set the HTTP response code"
    },
    {
        "href": "function.hypot.php",
        "name": "hypot",
        "description": "Calculate the length of the hypotenuse of a right-angle triangle"
    },
    {
        "href": "function.ibase-add-user.php",
        "name": "ibase_add_user",
        "description": "Add a user to a security database"
    },
    {
        "href": "function.ibase-affected-rows.php",
        "name": "ibase_affected_rows",
        "description": "Return the number of rows that were affected by the previous query"
    },
    {
        "href": "function.ibase-backup.php",
        "name": "ibase_backup",
        "description": "Initiates a backup task in the service manager and returns immediately"
    },
    {
        "href": "function.ibase-blob-add.php",
        "name": "ibase_blob_add",
        "description": "Add data into a newly created blob"
    },
    {
        "href": "function.ibase-blob-cancel.php",
        "name": "ibase_blob_cancel",
        "description": "Cancel creating blob"
    },
    {
        "href": "function.ibase-blob-close.php",
        "name": "ibase_blob_close",
        "description": "Close blob"
    },
    {
        "href": "function.ibase-blob-create.php",
        "name": "ibase_blob_create",
        "description": "Create a new blob for adding data"
    },
    {
        "href": "function.ibase-blob-echo.php",
        "name": "ibase_blob_echo",
        "description": "Output blob contents to browser"
    },
    {
        "href": "function.ibase-blob-get.php",
        "name": "ibase_blob_get",
        "description": "Get len bytes data from open blob"
    },
    {
        "href": "function.ibase-blob-import.php",
        "name": "ibase_blob_import",
        "description": "Create blob, copy file in it, and close it"
    },
    {
        "href": "function.ibase-blob-info.php",
        "name": "ibase_blob_info",
        "description": "Return blob length and other useful info"
    },
    {
        "href": "function.ibase-blob-open.php",
        "name": "ibase_blob_open",
        "description": "Open blob for retrieving data parts"
    },
    {
        "href": "function.ibase-close.php",
        "name": "ibase_close",
        "description": "Close a connection to an InterBase database"
    },
    {
        "href": "function.ibase-commit.php",
        "name": "ibase_commit",
        "description": "Commit a transaction"
    },
    {
        "href": "function.ibase-commit-ret.php",
        "name": "ibase_commit_ret",
        "description": "Commit a transaction without closing it"
    },
    {
        "href": "function.ibase-connect.php",
        "name": "ibase_connect",
        "description": "Open a connection to a database"
    },
    {
        "href": "function.ibase-db-info.php",
        "name": "ibase_db_info",
        "description": "Request statistics about a database"
    },
    {
        "href": "function.ibase-delete-user.php",
        "name": "ibase_delete_user",
        "description": "Delete a user from a security database"
    },
    {
        "href": "function.ibase-drop-db.php",
        "name": "ibase_drop_db",
        "description": "Drops a database"
    },
    {
        "href": "function.ibase-errcode.php",
        "name": "ibase_errcode",
        "description": "Return an error code"
    },
    {
        "href": "function.ibase-errmsg.php",
        "name": "ibase_errmsg",
        "description": "Return error messages"
    },
    {
        "href": "function.ibase-execute.php",
        "name": "ibase_execute",
        "description": "Execute a previously prepared query"
    },
    {
        "href": "function.ibase-fetch-assoc.php",
        "name": "ibase_fetch_assoc",
        "description": "Fetch a result row from a query as an associative array"
    },
    {
        "href": "function.ibase-fetch-object.php",
        "name": "ibase_fetch_object",
        "description": "Get an object from a InterBase database"
    },
    {
        "href": "function.ibase-fetch-row.php",
        "name": "ibase_fetch_row",
        "description": "Fetch a row from an InterBase database"
    },
    {
        "href": "function.ibase-field-info.php",
        "name": "ibase_field_info",
        "description": "Get information about a field"
    },
    {
        "href": "function.ibase-free-event-handler.php",
        "name": "ibase_free_event_handler",
        "description": "Cancels a registered event handler"
    },
    {
        "href": "function.ibase-free-query.php",
        "name": "ibase_free_query",
        "description": "Free memory allocated by a prepared query"
    },
    {
        "href": "function.ibase-free-result.php",
        "name": "ibase_free_result",
        "description": "Free a result set"
    },
    {
        "href": "function.ibase-gen-id.php",
        "name": "ibase_gen_id",
        "description": "Increments the named generator and returns its new value"
    },
    {
        "href": "function.ibase-maintain-db.php",
        "name": "ibase_maintain_db",
        "description": "Execute a maintenance command on the database server"
    },
    {
        "href": "function.ibase-modify-user.php",
        "name": "ibase_modify_user",
        "description": "Modify a user to a security database"
    },
    {
        "href": "function.ibase-name-result.php",
        "name": "ibase_name_result",
        "description": "Assigns a name to a result set"
    },
    {
        "href": "function.ibase-num-fields.php",
        "name": "ibase_num_fields",
        "description": "Get the number of fields in a result set"
    },
    {
        "href": "function.ibase-num-params.php",
        "name": "ibase_num_params",
        "description": "Return the number of parameters in a prepared query"
    },
    {
        "href": "function.ibase-param-info.php",
        "name": "ibase_param_info",
        "description": "Return information about a parameter in a prepared query"
    },
    {
        "href": "function.ibase-pconnect.php",
        "name": "ibase_pconnect",
        "description": "Open a persistent connection to an InterBase database"
    },
    {
        "href": "function.ibase-prepare.php",
        "name": "ibase_prepare",
        "description": "Prepare a query for later binding of parameter placeholders and execution"
    },
    {
        "href": "function.ibase-query.php",
        "name": "ibase_query",
        "description": "Execute a query on an InterBase database"
    },
    {
        "href": "function.ibase-restore.php",
        "name": "ibase_restore",
        "description": "Initiates a restore task in the service manager and returns immediately"
    },
    {
        "href": "function.ibase-rollback.php",
        "name": "ibase_rollback",
        "description": "Roll back a transaction"
    },
    {
        "href": "function.ibase-rollback-ret.php",
        "name": "ibase_rollback_ret",
        "description": "Roll back a transaction without closing it"
    },
    {
        "href": "function.ibase-server-info.php",
        "name": "ibase_server_info",
        "description": "Request information about a database server"
    },
    {
        "href": "function.ibase-service-attach.php",
        "name": "ibase_service_attach",
        "description": "Connect to the service manager"
    },
    {
        "href": "function.ibase-service-detach.php",
        "name": "ibase_service_detach",
        "description": "Disconnect from the service manager"
    },
    {
        "href": "function.ibase-set-event-handler.php",
        "name": "ibase_set_event_handler",
        "description": "Register a callback function to be called when events are posted"
    },
    {
        "href": "function.ibase-trans.php",
        "name": "ibase_trans",
        "description": "Begin a transaction"
    },
    {
        "href": "function.ibase-wait-event.php",
        "name": "ibase_wait_event",
        "description": "Wait for an event to be posted by the database"
    },
    {
        "href": "function.iconv.php",
        "name": "iconv",
        "description": "Convert string to requested character encoding"
    },
    {
        "href": "function.iconv-get-encoding.php",
        "name": "iconv_get_encoding",
        "description": "Retrieve internal configuration variables of iconv extension"
    },
    {
        "href": "function.iconv-mime-decode.php",
        "name": "iconv_mime_decode",
        "description": "Decodes a MIME header field"
    },
    {
        "href": "function.iconv-mime-decode-headers.php",
        "name": "iconv_mime_decode_headers",
        "description": "Decodes multiple MIME header fields at once"
    },
    {
        "href": "function.iconv-mime-encode.php",
        "name": "iconv_mime_encode",
        "description": "Composes a MIME header field"
    },
    {
        "href": "function.iconv-set-encoding.php",
        "name": "iconv_set_encoding",
        "description": "Set current setting for character encoding conversion"
    },
    {
        "href": "function.iconv-strlen.php",
        "name": "iconv_strlen",
        "description": "Returns the character count of string"
    },
    {
        "href": "function.iconv-strpos.php",
        "name": "iconv_strpos",
        "description": "Finds position of first occurrence of a needle within a haystack"
    },
    {
        "href": "function.iconv-strrpos.php",
        "name": "iconv_strrpos",
        "description": "Finds the last occurrence of a needle within a haystack"
    },
    {
        "href": "function.iconv-substr.php",
        "name": "iconv_substr",
        "description": "Cut out part of a string"
    },
    {
        "href": "function.idate.php",
        "name": "idate",
        "description": "Format a local time/date as integer"
    },
    {
        "href": "function.idn-to-ascii.php",
        "name": "idn_to_ascii",
        "description": "Convert domain name to IDNA ASCII form"
    },
    {
        "href": "function.idn-to-utf8.php",
        "name": "idn_to_utf8",
        "description": "Convert domain name from IDNA ASCII to Unicode"
    },
    {
        "href": "function.igbinary-serialize.php",
        "name": "igbinary_serialize",
        "description": "Generates a compact, storable binary representation of a value"
    },
    {
        "href": "function.igbinary-unserialize.php",
        "name": "igbinary_unserialize",
        "description": "Creates a PHP value from a stored representation from igbinary_serialize"
    },
    {
        "href": "function.ignore-user-abort.php",
        "name": "ignore_user_abort",
        "description": "Set whether a client disconnect should abort script execution"
    },
    {
        "href": "function.image2wbmp.php",
        "name": "image2wbmp",
        "description": "Output image to browser or file"
    },
    {
        "href": "function.imageaffine.php",
        "name": "imageaffine",
        "description": "Return an image containing the affine transformed src image, using an optional clipping area"
    },
    {
        "href": "function.imageaffinematrixconcat.php",
        "name": "imageaffinematrixconcat",
        "description": "Concatenate two affine transformation matrices"
    },
    {
        "href": "function.imageaffinematrixget.php",
        "name": "imageaffinematrixget",
        "description": "Get an affine transformation matrix"
    },
    {
        "href": "function.imagealphablending.php",
        "name": "imagealphablending",
        "description": "Set the blending mode for an image"
    },
    {
        "href": "function.imageantialias.php",
        "name": "imageantialias",
        "description": "Should antialias functions be used or not"
    },
    {
        "href": "function.imagearc.php",
        "name": "imagearc",
        "description": "Draws an arc"
    },
    {
        "href": "function.imageavif.php",
        "name": "imageavif",
        "description": "Output image to browser or file"
    },
    {
        "href": "function.imagebmp.php",
        "name": "imagebmp",
        "description": "Output a BMP image to browser or file"
    },
    {
        "href": "function.imagechar.php",
        "name": "imagechar",
        "description": "Draw a character horizontally"
    },
    {
        "href": "function.imagecharup.php",
        "name": "imagecharup",
        "description": "Draw a character vertically"
    },
    {
        "href": "function.imagecolorallocate.php",
        "name": "imagecolorallocate",
        "description": "Allocate a color for an image"
    },
    {
        "href": "function.imagecolorallocatealpha.php",
        "name": "imagecolorallocatealpha",
        "description": "Allocate a color for an image"
    },
    {
        "href": "function.imagecolorat.php",
        "name": "imagecolorat",
        "description": "Get the index of the color of a pixel"
    },
    {
        "href": "function.imagecolorclosest.php",
        "name": "imagecolorclosest",
        "description": "Get the index of the closest color to the specified color"
    },
    {
        "href": "function.imagecolorclosestalpha.php",
        "name": "imagecolorclosestalpha",
        "description": "Get the index of the closest color to the specified color + alpha"
    },
    {
        "href": "function.imagecolorclosesthwb.php",
        "name": "imagecolorclosesthwb",
        "description": "Get the index of the color which has the hue, white and blackness"
    },
    {
        "href": "function.imagecolordeallocate.php",
        "name": "imagecolordeallocate",
        "description": "De-allocate a color for an image"
    },
    {
        "href": "function.imagecolorexact.php",
        "name": "imagecolorexact",
        "description": "Get the index of the specified color"
    },
    {
        "href": "function.imagecolorexactalpha.php",
        "name": "imagecolorexactalpha",
        "description": "Get the index of the specified color + alpha"
    },
    {
        "href": "function.imagecolormatch.php",
        "name": "imagecolormatch",
        "description": "Makes the colors of the palette version of an image more closely match the true color version"
    },
    {
        "href": "function.imagecolorresolve.php",
        "name": "imagecolorresolve",
        "description": "Get the index of the specified color or its closest possible alternative"
    },
    {
        "href": "function.imagecolorresolvealpha.php",
        "name": "imagecolorresolvealpha",
        "description": "Get the index of the specified color + alpha or its closest possible alternative"
    },
    {
        "href": "function.imagecolorset.php",
        "name": "imagecolorset",
        "description": "Set the color for the specified palette index"
    },
    {
        "href": "function.imagecolorsforindex.php",
        "name": "imagecolorsforindex",
        "description": "Get the colors for an index"
    },
    {
        "href": "function.imagecolorstotal.php",
        "name": "imagecolorstotal",
        "description": "Find out the number of colors in an image's palette"
    },
    {
        "href": "function.imagecolortransparent.php",
        "name": "imagecolortransparent",
        "description": "Define a color as transparent"
    },
    {
        "href": "function.imageconvolution.php",
        "name": "imageconvolution",
        "description": "Apply a 3x3 convolution matrix, using coefficient and offset"
    },
    {
        "href": "function.imagecopy.php",
        "name": "imagecopy",
        "description": "Copy part of an image"
    },
    {
        "href": "function.imagecopymerge.php",
        "name": "imagecopymerge",
        "description": "Copy and merge part of an image"
    },
    {
        "href": "function.imagecopymergegray.php",
        "name": "imagecopymergegray",
        "description": "Copy and merge part of an image with gray scale"
    },
    {
        "href": "function.imagecopyresampled.php",
        "name": "imagecopyresampled",
        "description": "Copy and resize part of an image with resampling"
    },
    {
        "href": "function.imagecopyresized.php",
        "name": "imagecopyresized",
        "description": "Copy and resize part of an image"
    },
    {
        "href": "function.imagecreate.php",
        "name": "imagecreate",
        "description": "Create a new palette based image"
    },
    {
        "href": "function.imagecreatefromavif.php",
        "name": "imagecreatefromavif",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefrombmp.php",
        "name": "imagecreatefrombmp",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromgd.php",
        "name": "imagecreatefromgd",
        "description": "Create a new image from GD file or URL"
    },
    {
        "href": "function.imagecreatefromgd2.php",
        "name": "imagecreatefromgd2",
        "description": "Create a new image from GD2 file or URL"
    },
    {
        "href": "function.imagecreatefromgd2part.php",
        "name": "imagecreatefromgd2part",
        "description": "Create a new image from a given part of GD2 file or URL"
    },
    {
        "href": "function.imagecreatefromgif.php",
        "name": "imagecreatefromgif",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromjpeg.php",
        "name": "imagecreatefromjpeg",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefrompng.php",
        "name": "imagecreatefrompng",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromstring.php",
        "name": "imagecreatefromstring",
        "description": "Create a new image from the image stream in the string"
    },
    {
        "href": "function.imagecreatefromtga.php",
        "name": "imagecreatefromtga",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromwbmp.php",
        "name": "imagecreatefromwbmp",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromwebp.php",
        "name": "imagecreatefromwebp",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromxbm.php",
        "name": "imagecreatefromxbm",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatefromxpm.php",
        "name": "imagecreatefromxpm",
        "description": "Create a new image from file or URL"
    },
    {
        "href": "function.imagecreatetruecolor.php",
        "name": "imagecreatetruecolor",
        "description": "Create a new true color image"
    },
    {
        "href": "function.imagecrop.php",
        "name": "imagecrop",
        "description": "Crop an image to the given rectangle"
    },
    {
        "href": "function.imagecropauto.php",
        "name": "imagecropauto",
        "description": "Crop an image automatically using one of the available modes"
    },
    {
        "href": "function.imagedashedline.php",
        "name": "imagedashedline",
        "description": "Draw a dashed line"
    },
    {
        "href": "function.imagedestroy.php",
        "name": "imagedestroy",
        "description": "Destroy an image"
    },
    {
        "href": "function.imageellipse.php",
        "name": "imageellipse",
        "description": "Draw an ellipse"
    },
    {
        "href": "function.imagefill.php",
        "name": "imagefill",
        "description": "Flood fill"
    },
    {
        "href": "function.imagefilledarc.php",
        "name": "imagefilledarc",
        "description": "Draw a partial arc and fill it"
    },
    {
        "href": "function.imagefilledellipse.php",
        "name": "imagefilledellipse",
        "description": "Draw a filled ellipse"
    },
    {
        "href": "function.imagefilledpolygon.php",
        "name": "imagefilledpolygon",
        "description": "Draw a filled polygon"
    },
    {
        "href": "function.imagefilledrectangle.php",
        "name": "imagefilledrectangle",
        "description": "Draw a filled rectangle"
    },
    {
        "href": "function.imagefilltoborder.php",
        "name": "imagefilltoborder",
        "description": "Flood fill to specific color"
    },
    {
        "href": "function.imagefilter.php",
        "name": "imagefilter",
        "description": "Applies a filter to an image"
    },
    {
        "href": "function.imageflip.php",
        "name": "imageflip",
        "description": "Flips an image using a given mode"
    },
    {
        "href": "function.imagefontheight.php",
        "name": "imagefontheight",
        "description": "Get font height"
    },
    {
        "href": "function.imagefontwidth.php",
        "name": "imagefontwidth",
        "description": "Get font width"
    },
    {
        "href": "function.imageftbbox.php",
        "name": "imageftbbox",
        "description": "Give the bounding box of a text using fonts via freetype2"
    },
    {
        "href": "function.imagefttext.php",
        "name": "imagefttext",
        "description": "Write text to the image using fonts using FreeType 2"
    },
    {
        "href": "function.imagegammacorrect.php",
        "name": "imagegammacorrect",
        "description": "Apply a gamma correction to a GD image"
    },
    {
        "href": "function.imagegd.php",
        "name": "imagegd",
        "description": "Output GD image to browser or file"
    },
    {
        "href": "function.imagegd2.php",
        "name": "imagegd2",
        "description": "Output GD2 image to browser or file"
    },
    {
        "href": "function.imagegetclip.php",
        "name": "imagegetclip",
        "description": "Get the clipping rectangle"
    },
    {
        "href": "function.imagegetinterpolation.php",
        "name": "imagegetinterpolation",
        "description": "Get the interpolation method"
    },
    {
        "href": "function.imagegif.php",
        "name": "imagegif",
        "description": "Output image to browser or file"
    },
    {
        "href": "function.imagegrabscreen.php",
        "name": "imagegrabscreen",
        "description": "Captures the whole screen"
    },
    {
        "href": "function.imagegrabwindow.php",
        "name": "imagegrabwindow",
        "description": "Captures a window"
    },
    {
        "href": "function.imageinterlace.php",
        "name": "imageinterlace",
        "description": "Enable or disable interlace"
    },
    {
        "href": "function.imageistruecolor.php",
        "name": "imageistruecolor",
        "description": "Finds whether an image is a truecolor image"
    },
    {
        "href": "function.imagejpeg.php",
        "name": "imagejpeg",
        "description": "Output image to browser or file"
    },
    {
        "href": "function.imagelayereffect.php",
        "name": "imagelayereffect",
        "description": "Set the alpha blending flag to use layering effects"
    },
    {
        "href": "function.imageline.php",
        "name": "imageline",
        "description": "Draw a line"
    },
    {
        "href": "function.imageloadfont.php",
        "name": "imageloadfont",
        "description": "Load a new font"
    },
    {
        "href": "function.imageopenpolygon.php",
        "name": "imageopenpolygon",
        "description": "Draws an open polygon"
    },
    {
        "href": "function.imagepalettecopy.php",
        "name": "imagepalettecopy",
        "description": "Copy the palette from one image to another"
    },
    {
        "href": "function.imagepalettetotruecolor.php",
        "name": "imagepalettetotruecolor",
        "description": "Converts a palette based image to true color"
    },
    {
        "href": "function.imagepng.php",
        "name": "imagepng",
        "description": "Output a PNG image to either the browser or a file"
    },
    {
        "href": "function.imagepolygon.php",
        "name": "imagepolygon",
        "description": "Draws a polygon"
    },
    {
        "href": "function.imagerectangle.php",
        "name": "imagerectangle",
        "description": "Draw a rectangle"
    },
    {
        "href": "function.imageresolution.php",
        "name": "imageresolution",
        "description": "Get or set the resolution of the image"
    },
    {
        "href": "function.imagerotate.php",
        "name": "imagerotate",
        "description": "Rotate an image with a given angle"
    },
    {
        "href": "function.imagesavealpha.php",
        "name": "imagesavealpha",
        "description": "Whether to retain full alpha channel information when saving PNG images"
    },
    {
        "href": "function.imagescale.php",
        "name": "imagescale",
        "description": "Scale an image using the given new width and height"
    },
    {
        "href": "function.imagesetbrush.php",
        "name": "imagesetbrush",
        "description": "Set the brush image for line drawing"
    },
    {
        "href": "function.imagesetclip.php",
        "name": "imagesetclip",
        "description": "Set the clipping rectangle"
    },
    {
        "href": "function.imagesetinterpolation.php",
        "name": "imagesetinterpolation",
        "description": "Set the interpolation method"
    },
    {
        "href": "function.imagesetpixel.php",
        "name": "imagesetpixel",
        "description": "Set a single pixel"
    },
    {
        "href": "function.imagesetstyle.php",
        "name": "imagesetstyle",
        "description": "Set the style for line drawing"
    },
    {
        "href": "function.imagesetthickness.php",
        "name": "imagesetthickness",
        "description": "Set the thickness for line drawing"
    },
    {
        "href": "function.imagesettile.php",
        "name": "imagesettile",
        "description": "Set the tile image for filling"
    },
    {
        "href": "function.imagestring.php",
        "name": "imagestring",
        "description": "Draw a string horizontally"
    },
    {
        "href": "function.imagestringup.php",
        "name": "imagestringup",
        "description": "Draw a string vertically"
    },
    {
        "href": "function.imagesx.php",
        "name": "imagesx",
        "description": "Get image width"
    },
    {
        "href": "function.imagesy.php",
        "name": "imagesy",
        "description": "Get image height"
    },
    {
        "href": "function.imagetruecolortopalette.php",
        "name": "imagetruecolortopalette",
        "description": "Convert a true color image to a palette image"
    },
    {
        "href": "function.imagettfbbox.php",
        "name": "imagettfbbox",
        "description": "Give the bounding box of a text using TrueType fonts"
    },
    {
        "href": "function.imagettftext.php",
        "name": "imagettftext",
        "description": "Write text to the image using TrueType fonts"
    },
    {
        "href": "function.imagetypes.php",
        "name": "imagetypes",
        "description": "Return the image types supported by this PHP build"
    },
    {
        "href": "function.imagewbmp.php",
        "name": "imagewbmp",
        "description": "Output image to browser or file"
    },
    {
        "href": "function.imagewebp.php",
        "name": "imagewebp",
        "description": "Output a WebP image to browser or file"
    },
    {
        "href": "function.imagexbm.php",
        "name": "imagexbm",
        "description": "Output an XBM image to browser or file"
    },
    {
        "href": "function.image-type-to-extension.php",
        "name": "image_type_to_extension",
        "description": "Get file extension for image type"
    },
    {
        "href": "function.image-type-to-mime-type.php",
        "name": "image_type_to_mime_type",
        "description": "Get Mime-Type for image-type returned by getimagesize,   exif_read_data, exif_thumbnail, exif_imagetype"
    },
    {
        "href": "imagick.adaptiveblurimage.php",
        "name": "Imagick::adaptiveBlurImage",
        "description": "Adds adaptive blur filter to image"
    },
    {
        "href": "imagick.adaptiveresizeimage.php",
        "name": "Imagick::adaptiveResizeImage",
        "description": "Adaptively resize image with data dependent triangulation"
    },
    {
        "href": "imagick.adaptivesharpenimage.php",
        "name": "Imagick::adaptiveSharpenImage",
        "description": "Adaptively sharpen the image"
    },
    {
        "href": "imagick.adaptivethresholdimage.php",
        "name": "Imagick::adaptiveThresholdImage",
        "description": "Selects a threshold for each pixel based on a range of intensity"
    },
    {
        "href": "imagick.addimage.php",
        "name": "Imagick::addImage",
        "description": "Adds new image to Imagick object image list"
    },
    {
        "href": "imagick.addnoiseimage.php",
        "name": "Imagick::addNoiseImage",
        "description": "Adds random noise to the image"
    },
    {
        "href": "imagick.affinetransformimage.php",
        "name": "Imagick::affineTransformImage",
        "description": "Transforms an image"
    },
    {
        "href": "imagick.animateimages.php",
        "name": "Imagick::animateImages",
        "description": "Animates an image or images"
    },
    {
        "href": "imagick.annotateimage.php",
        "name": "Imagick::annotateImage",
        "description": "Annotates an image with text"
    },
    {
        "href": "imagick.appendimages.php",
        "name": "Imagick::appendImages",
        "description": "Append a set of images"
    },
    {
        "href": "imagick.autolevelimage.php",
        "name": "Imagick::autoLevelImage",
        "description": "Description"
    },
    {
        "href": "imagick.averageimages.php",
        "name": "Imagick::averageImages",
        "description": "Average a set of images"
    },
    {
        "href": "imagick.blackthresholdimage.php",
        "name": "Imagick::blackThresholdImage",
        "description": "Forces all pixels below the threshold into black"
    },
    {
        "href": "imagick.blueshiftimage.php",
        "name": "Imagick::blueShiftImage",
        "description": "Description"
    },
    {
        "href": "imagick.blurimage.php",
        "name": "Imagick::blurImage",
        "description": "Adds blur filter to image"
    },
    {
        "href": "imagick.borderimage.php",
        "name": "Imagick::borderImage",
        "description": "Surrounds the image with a border"
    },
    {
        "href": "imagick.brightnesscontrastimage.php",
        "name": "Imagick::brightnessContrastImage",
        "description": "Description"
    },
    {
        "href": "imagick.charcoalimage.php",
        "name": "Imagick::charcoalImage",
        "description": "Simulates a charcoal drawing"
    },
    {
        "href": "imagick.chopimage.php",
        "name": "Imagick::chopImage",
        "description": "Removes a region of an image and trims"
    },
    {
        "href": "imagick.clampimage.php",
        "name": "Imagick::clampImage",
        "description": "Description"
    },
    {
        "href": "imagick.clear.php",
        "name": "Imagick::clear",
        "description": "Clears all resources associated to Imagick object"
    },
    {
        "href": "imagick.clipimage.php",
        "name": "Imagick::clipImage",
        "description": "Clips along the first path from the 8BIM profile"
    },
    {
        "href": "imagick.clipimagepath.php",
        "name": "Imagick::clipImagePath",
        "description": "Description"
    },
    {
        "href": "imagick.clippathimage.php",
        "name": "Imagick::clipPathImage",
        "description": "Clips along the named paths from the 8BIM profile"
    },
    {
        "href": "imagick.clone.php",
        "name": "Imagick::clone",
        "description": "Makes an exact copy of the Imagick object"
    },
    {
        "href": "imagick.clutimage.php",
        "name": "Imagick::clutImage",
        "description": "Replaces colors in the image"
    },
    {
        "href": "imagick.coalesceimages.php",
        "name": "Imagick::coalesceImages",
        "description": "Composites a set of images"
    },
    {
        "href": "imagick.colorfloodfillimage.php",
        "name": "Imagick::colorFloodfillImage",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "href": "imagick.colorizeimage.php",
        "name": "Imagick::colorizeImage",
        "description": "Blends the fill color with the image"
    },
    {
        "href": "imagick.colormatriximage.php",
        "name": "Imagick::colorMatrixImage",
        "description": "Description"
    },
    {
        "href": "imagick.combineimages.php",
        "name": "Imagick::combineImages",
        "description": "Combines one or more images into a single image"
    },
    {
        "href": "imagick.commentimage.php",
        "name": "Imagick::commentImage",
        "description": "Adds a comment to your image"
    },
    {
        "href": "imagick.compareimagechannels.php",
        "name": "Imagick::compareImageChannels",
        "description": "Returns the difference in one or more images"
    },
    {
        "href": "imagick.compareimagelayers.php",
        "name": "Imagick::compareImageLayers",
        "description": "Returns the maximum bounding region between images"
    },
    {
        "href": "imagick.compareimages.php",
        "name": "Imagick::compareImages",
        "description": "Compares an image to a reconstructed image"
    },
    {
        "href": "imagick.compositeimage.php",
        "name": "Imagick::compositeImage",
        "description": "Composite one image onto another"
    },
    {
        "href": "imagick.contrastimage.php",
        "name": "Imagick::contrastImage",
        "description": "Change the contrast of the image"
    },
    {
        "href": "imagick.contraststretchimage.php",
        "name": "Imagick::contrastStretchImage",
        "description": "Enhances the contrast of a color image"
    },
    {
        "href": "imagick.convolveimage.php",
        "name": "Imagick::convolveImage",
        "description": "Applies a custom convolution kernel to the image"
    },
    {
        "href": "imagick.count.php",
        "name": "Imagick::count",
        "description": "Get the number of images"
    },
    {
        "href": "imagick.cropimage.php",
        "name": "Imagick::cropImage",
        "description": "Extracts a region of the image"
    },
    {
        "href": "imagick.cropthumbnailimage.php",
        "name": "Imagick::cropThumbnailImage",
        "description": "Creates a crop thumbnail"
    },
    {
        "href": "imagick.current.php",
        "name": "Imagick::current",
        "description": "Returns a reference to the current Imagick object"
    },
    {
        "href": "imagick.cyclecolormapimage.php",
        "name": "Imagick::cycleColormapImage",
        "description": "Displaces an image's colormap"
    },
    {
        "href": "imagick.decipherimage.php",
        "name": "Imagick::decipherImage",
        "description": "Deciphers an image"
    },
    {
        "href": "imagick.deconstructimages.php",
        "name": "Imagick::deconstructImages",
        "description": "Returns certain pixel differences between images"
    },
    {
        "href": "imagick.deleteimageartifact.php",
        "name": "Imagick::deleteImageArtifact",
        "description": "Delete image artifact"
    },
    {
        "href": "imagick.deleteimageproperty.php",
        "name": "Imagick::deleteImageProperty",
        "description": "Description"
    },
    {
        "href": "imagick.deskewimage.php",
        "name": "Imagick::deskewImage",
        "description": "Removes skew from the image"
    },
    {
        "href": "imagick.despeckleimage.php",
        "name": "Imagick::despeckleImage",
        "description": "Reduces the speckle noise in an image"
    },
    {
        "href": "imagick.destroy.php",
        "name": "Imagick::destroy",
        "description": "Destroys the Imagick object"
    },
    {
        "href": "imagick.displayimage.php",
        "name": "Imagick::displayImage",
        "description": "Displays an image"
    },
    {
        "href": "imagick.displayimages.php",
        "name": "Imagick::displayImages",
        "description": "Displays an image or image sequence"
    },
    {
        "href": "imagick.distortimage.php",
        "name": "Imagick::distortImage",
        "description": "Distorts an image using various distortion methods"
    },
    {
        "href": "imagick.drawimage.php",
        "name": "Imagick::drawImage",
        "description": "Renders the ImagickDraw object on the current image"
    },
    {
        "href": "imagick.edgeimage.php",
        "name": "Imagick::edgeImage",
        "description": "Enhance edges within the image"
    },
    {
        "href": "imagick.embossimage.php",
        "name": "Imagick::embossImage",
        "description": "Returns a grayscale image with a three-dimensional effect"
    },
    {
        "href": "imagick.encipherimage.php",
        "name": "Imagick::encipherImage",
        "description": "Enciphers an image"
    },
    {
        "href": "imagick.enhanceimage.php",
        "name": "Imagick::enhanceImage",
        "description": "Improves the quality of a noisy image"
    },
    {
        "href": "imagick.equalizeimage.php",
        "name": "Imagick::equalizeImage",
        "description": "Equalizes the image histogram"
    },
    {
        "href": "imagick.evaluateimage.php",
        "name": "Imagick::evaluateImage",
        "description": "Applies an expression to an image"
    },
    {
        "href": "imagick.exportimagepixels.php",
        "name": "Imagick::exportImagePixels",
        "description": "Exports raw image pixels"
    },
    {
        "href": "imagick.extentimage.php",
        "name": "Imagick::extentImage",
        "description": "Set image size"
    },
    {
        "href": "imagick.filter.php",
        "name": "Imagick::filter",
        "description": "Description"
    },
    {
        "href": "imagick.flattenimages.php",
        "name": "Imagick::flattenImages",
        "description": "Merges a sequence of images"
    },
    {
        "href": "imagick.flipimage.php",
        "name": "Imagick::flipImage",
        "description": "Creates a vertical mirror image"
    },
    {
        "href": "imagick.floodfillpaintimage.php",
        "name": "Imagick::floodFillPaintImage",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "href": "imagick.flopimage.php",
        "name": "Imagick::flopImage",
        "description": "Creates a horizontal mirror image"
    },
    {
        "href": "imagick.forwardfouriertransformimage.php",
        "name": "Imagick::forwardFourierTransformImage",
        "description": "Description"
    },
    {
        "href": "imagick.frameimage.php",
        "name": "Imagick::frameImage",
        "description": "Adds a simulated three-dimensional border"
    },
    {
        "href": "imagick.functionimage.php",
        "name": "Imagick::functionImage",
        "description": "Applies a function on the image"
    },
    {
        "href": "imagick.fximage.php",
        "name": "Imagick::fxImage",
        "description": "Evaluate expression for each pixel in the image"
    },
    {
        "href": "imagick.gammaimage.php",
        "name": "Imagick::gammaImage",
        "description": "Gamma-corrects an image"
    },
    {
        "href": "imagick.gaussianblurimage.php",
        "name": "Imagick::gaussianBlurImage",
        "description": "Blurs an image"
    },
    {
        "href": "imagick.getcolorspace.php",
        "name": "Imagick::getColorspace",
        "description": "Gets the colorspace"
    },
    {
        "href": "imagick.getcompression.php",
        "name": "Imagick::getCompression",
        "description": "Gets the object compression type"
    },
    {
        "href": "imagick.getcompressionquality.php",
        "name": "Imagick::getCompressionQuality",
        "description": "Gets the object compression quality"
    },
    {
        "href": "imagick.getcopyright.php",
        "name": "Imagick::getCopyright",
        "description": "Returns the ImageMagick API copyright as a string"
    },
    {
        "href": "imagick.getfilename.php",
        "name": "Imagick::getFilename",
        "description": "The filename associated with an image sequence"
    },
    {
        "href": "imagick.getfont.php",
        "name": "Imagick::getFont",
        "description": "Gets font"
    },
    {
        "href": "imagick.getformat.php",
        "name": "Imagick::getFormat",
        "description": "Returns the format of the Imagick object"
    },
    {
        "href": "imagick.getgravity.php",
        "name": "Imagick::getGravity",
        "description": "Gets the gravity"
    },
    {
        "href": "imagick.gethomeurl.php",
        "name": "Imagick::getHomeURL",
        "description": "Returns the ImageMagick home URL"
    },
    {
        "href": "imagick.getimage.php",
        "name": "Imagick::getImage",
        "description": "Returns a new Imagick object"
    },
    {
        "href": "imagick.getimagealphachannel.php",
        "name": "Imagick::getImageAlphaChannel",
        "description": "Gets the image alpha channel"
    },
    {
        "href": "imagick.getimageartifact.php",
        "name": "Imagick::getImageArtifact",
        "description": "Get image artifact"
    },
    {
        "href": "imagick.getimageattribute.php",
        "name": "Imagick::getImageAttribute",
        "description": "Returns a named attribute"
    },
    {
        "href": "imagick.getimagebackgroundcolor.php",
        "name": "Imagick::getImageBackgroundColor",
        "description": "Returns the image background color"
    },
    {
        "href": "imagick.getimageblob.php",
        "name": "Imagick::getImageBlob",
        "description": "Returns the image sequence as a blob"
    },
    {
        "href": "imagick.getimageblueprimary.php",
        "name": "Imagick::getImageBluePrimary",
        "description": "Returns the chromaticy blue primary point"
    },
    {
        "href": "imagick.getimagebordercolor.php",
        "name": "Imagick::getImageBorderColor",
        "description": "Returns the image border color"
    },
    {
        "href": "imagick.getimagechanneldepth.php",
        "name": "Imagick::getImageChannelDepth",
        "description": "Gets the depth for a particular image channel"
    },
    {
        "href": "imagick.getimagechanneldistortion.php",
        "name": "Imagick::getImageChannelDistortion",
        "description": "Compares image channels of an image to a reconstructed image"
    },
    {
        "href": "imagick.getimagechanneldistortions.php",
        "name": "Imagick::getImageChannelDistortions",
        "description": "Gets channel distortions"
    },
    {
        "href": "imagick.getimagechannelextrema.php",
        "name": "Imagick::getImageChannelExtrema",
        "description": "Gets the extrema for one or more image channels"
    },
    {
        "href": "imagick.getimagechannelkurtosis.php",
        "name": "Imagick::getImageChannelKurtosis",
        "description": "The getImageChannelKurtosis purpose"
    },
    {
        "href": "imagick.getimagechannelmean.php",
        "name": "Imagick::getImageChannelMean",
        "description": "Gets the mean and standard deviation"
    },
    {
        "href": "imagick.getimagechannelrange.php",
        "name": "Imagick::getImageChannelRange",
        "description": "Gets channel range"
    },
    {
        "href": "imagick.getimagechannelstatistics.php",
        "name": "Imagick::getImageChannelStatistics",
        "description": "Returns statistics for each channel in the image"
    },
    {
        "href": "imagick.getimageclipmask.php",
        "name": "Imagick::getImageClipMask",
        "description": "Gets image clip mask"
    },
    {
        "href": "imagick.getimagecolormapcolor.php",
        "name": "Imagick::getImageColormapColor",
        "description": "Returns the color of the specified colormap index"
    },
    {
        "href": "imagick.getimagecolors.php",
        "name": "Imagick::getImageColors",
        "description": "Gets the number of unique colors in the image"
    },
    {
        "href": "imagick.getimagecolorspace.php",
        "name": "Imagick::getImageColorspace",
        "description": "Gets the image colorspace"
    },
    {
        "href": "imagick.getimagecompose.php",
        "name": "Imagick::getImageCompose",
        "description": "Returns the composite operator associated with the image"
    },
    {
        "href": "imagick.getimagecompression.php",
        "name": "Imagick::getImageCompression",
        "description": "Gets the current image's compression type"
    },
    {
        "href": "imagick.getimagecompressionquality.php",
        "name": "Imagick::getImageCompressionQuality",
        "description": "Gets the current image's compression quality"
    },
    {
        "href": "imagick.getimagedelay.php",
        "name": "Imagick::getImageDelay",
        "description": "Gets the image delay"
    },
    {
        "href": "imagick.getimagedepth.php",
        "name": "Imagick::getImageDepth",
        "description": "Gets the image depth"
    },
    {
        "href": "imagick.getimagedispose.php",
        "name": "Imagick::getImageDispose",
        "description": "Gets the image disposal method"
    },
    {
        "href": "imagick.getimagedistortion.php",
        "name": "Imagick::getImageDistortion",
        "description": "Compares an image to a reconstructed image"
    },
    {
        "href": "imagick.getimageextrema.php",
        "name": "Imagick::getImageExtrema",
        "description": "Gets the extrema for the image"
    },
    {
        "href": "imagick.getimagefilename.php",
        "name": "Imagick::getImageFilename",
        "description": "Returns the filename of a particular image in a sequence"
    },
    {
        "href": "imagick.getimageformat.php",
        "name": "Imagick::getImageFormat",
        "description": "Returns the format of a particular image in a sequence"
    },
    {
        "href": "imagick.getimagegamma.php",
        "name": "Imagick::getImageGamma",
        "description": "Gets the image gamma"
    },
    {
        "href": "imagick.getimagegeometry.php",
        "name": "Imagick::getImageGeometry",
        "description": "Gets the width and height as an associative array"
    },
    {
        "href": "imagick.getimagegravity.php",
        "name": "Imagick::getImageGravity",
        "description": "Gets the image gravity"
    },
    {
        "href": "imagick.getimagegreenprimary.php",
        "name": "Imagick::getImageGreenPrimary",
        "description": "Returns the chromaticy green primary point"
    },
    {
        "href": "imagick.getimageheight.php",
        "name": "Imagick::getImageHeight",
        "description": "Returns the image height"
    },
    {
        "href": "imagick.getimagehistogram.php",
        "name": "Imagick::getImageHistogram",
        "description": "Gets the image histogram"
    },
    {
        "href": "imagick.getimageindex.php",
        "name": "Imagick::getImageIndex",
        "description": "Gets the index of the current active image"
    },
    {
        "href": "imagick.getimageinterlacescheme.php",
        "name": "Imagick::getImageInterlaceScheme",
        "description": "Gets the image interlace scheme"
    },
    {
        "href": "imagick.getimageinterpolatemethod.php",
        "name": "Imagick::getImageInterpolateMethod",
        "description": "Returns the interpolation method"
    },
    {
        "href": "imagick.getimageiterations.php",
        "name": "Imagick::getImageIterations",
        "description": "Gets the image iterations"
    },
    {
        "href": "imagick.getimagelength.php",
        "name": "Imagick::getImageLength",
        "description": "Returns the image length in bytes"
    },
    {
        "href": "imagick.getimagematte.php",
        "name": "Imagick::getImageMatte",
        "description": "Return if the image has a matte channel"
    },
    {
        "href": "imagick.getimagemattecolor.php",
        "name": "Imagick::getImageMatteColor",
        "description": "Returns the image matte color"
    },
    {
        "href": "imagick.getimagemimetype.php",
        "name": "Imagick::getImageMimeType",
        "description": "Description"
    },
    {
        "href": "imagick.getimageorientation.php",
        "name": "Imagick::getImageOrientation",
        "description": "Gets the image orientation"
    },
    {
        "href": "imagick.getimagepage.php",
        "name": "Imagick::getImagePage",
        "description": "Returns the page geometry"
    },
    {
        "href": "imagick.getimagepixelcolor.php",
        "name": "Imagick::getImagePixelColor",
        "description": "Returns the color of the specified pixel"
    },
    {
        "href": "imagick.getimageprofile.php",
        "name": "Imagick::getImageProfile",
        "description": "Returns the named image profile"
    },
    {
        "href": "imagick.getimageprofiles.php",
        "name": "Imagick::getImageProfiles",
        "description": "Returns the image profiles"
    },
    {
        "href": "imagick.getimageproperties.php",
        "name": "Imagick::getImageProperties",
        "description": "Returns the image properties"
    },
    {
        "href": "imagick.getimageproperty.php",
        "name": "Imagick::getImageProperty",
        "description": "Returns the named image property"
    },
    {
        "href": "imagick.getimageredprimary.php",
        "name": "Imagick::getImageRedPrimary",
        "description": "Returns the chromaticity red primary point"
    },
    {
        "href": "imagick.getimageregion.php",
        "name": "Imagick::getImageRegion",
        "description": "Extracts a region of the image"
    },
    {
        "href": "imagick.getimagerenderingintent.php",
        "name": "Imagick::getImageRenderingIntent",
        "description": "Gets the image rendering intent"
    },
    {
        "href": "imagick.getimageresolution.php",
        "name": "Imagick::getImageResolution",
        "description": "Gets the image X and Y resolution"
    },
    {
        "href": "imagick.getimagesblob.php",
        "name": "Imagick::getImagesBlob",
        "description": "Returns all image sequences as a blob"
    },
    {
        "href": "imagick.getimagescene.php",
        "name": "Imagick::getImageScene",
        "description": "Gets the image scene"
    },
    {
        "href": "imagick.getimagesignature.php",
        "name": "Imagick::getImageSignature",
        "description": "Generates an SHA-256 message digest"
    },
    {
        "href": "imagick.getimagesize.php",
        "name": "Imagick::getImageSize",
        "description": "Returns the image length in bytes"
    },
    {
        "href": "imagick.getimagetickspersecond.php",
        "name": "Imagick::getImageTicksPerSecond",
        "description": "Gets the image ticks-per-second"
    },
    {
        "href": "imagick.getimagetotalinkdensity.php",
        "name": "Imagick::getImageTotalInkDensity",
        "description": "Gets the image total ink density"
    },
    {
        "href": "imagick.getimagetype.php",
        "name": "Imagick::getImageType",
        "description": "Gets the potential image type"
    },
    {
        "href": "imagick.getimageunits.php",
        "name": "Imagick::getImageUnits",
        "description": "Gets the image units of resolution"
    },
    {
        "href": "imagick.getimagevirtualpixelmethod.php",
        "name": "Imagick::getImageVirtualPixelMethod",
        "description": "Returns the virtual pixel method"
    },
    {
        "href": "imagick.getimagewhitepoint.php",
        "name": "Imagick::getImageWhitePoint",
        "description": "Returns the chromaticity white point"
    },
    {
        "href": "imagick.getimagewidth.php",
        "name": "Imagick::getImageWidth",
        "description": "Returns the image width"
    },
    {
        "href": "imagick.getinterlacescheme.php",
        "name": "Imagick::getInterlaceScheme",
        "description": "Gets the object interlace scheme"
    },
    {
        "href": "imagick.getiteratorindex.php",
        "name": "Imagick::getIteratorIndex",
        "description": "Gets the index of the current active image"
    },
    {
        "href": "imagick.getnumberimages.php",
        "name": "Imagick::getNumberImages",
        "description": "Returns the number of images in the object"
    },
    {
        "href": "imagick.getoption.php",
        "name": "Imagick::getOption",
        "description": "Returns a value associated with the specified key"
    },
    {
        "href": "imagick.getpackagename.php",
        "name": "Imagick::getPackageName",
        "description": "Returns the ImageMagick package name"
    },
    {
        "href": "imagick.getpage.php",
        "name": "Imagick::getPage",
        "description": "Returns the page geometry"
    },
    {
        "href": "imagick.getpixeliterator.php",
        "name": "Imagick::getPixelIterator",
        "description": "Returns a MagickPixelIterator"
    },
    {
        "href": "imagick.getpixelregioniterator.php",
        "name": "Imagick::getPixelRegionIterator",
        "description": "Get an ImagickPixelIterator for an image section"
    },
    {
        "href": "imagick.getpointsize.php",
        "name": "Imagick::getPointSize",
        "description": "Gets point size"
    },
    {
        "href": "imagick.getquantum.php",
        "name": "Imagick::getQuantum",
        "description": "Description"
    },
    {
        "href": "imagick.getquantumdepth.php",
        "name": "Imagick::getQuantumDepth",
        "description": "Gets the quantum depth"
    },
    {
        "href": "imagick.getquantumrange.php",
        "name": "Imagick::getQuantumRange",
        "description": "Returns the Imagick quantum range"
    },
    {
        "href": "imagick.getregistry.php",
        "name": "Imagick::getRegistry",
        "description": "Description"
    },
    {
        "href": "imagick.getreleasedate.php",
        "name": "Imagick::getReleaseDate",
        "description": "Returns the ImageMagick release date"
    },
    {
        "href": "imagick.getresource.php",
        "name": "Imagick::getResource",
        "description": "Returns the specified resource's memory usage"
    },
    {
        "href": "imagick.getresourcelimit.php",
        "name": "Imagick::getResourceLimit",
        "description": "Returns the specified resource limit"
    },
    {
        "href": "imagick.getsamplingfactors.php",
        "name": "Imagick::getSamplingFactors",
        "description": "Gets the horizontal and vertical sampling factor"
    },
    {
        "href": "imagick.getsize.php",
        "name": "Imagick::getSize",
        "description": "Returns the size associated with the Imagick object"
    },
    {
        "href": "imagick.getsizeoffset.php",
        "name": "Imagick::getSizeOffset",
        "description": "Returns the size offset"
    },
    {
        "href": "imagick.getversion.php",
        "name": "Imagick::getVersion",
        "description": "Returns the ImageMagick API version"
    },
    {
        "href": "imagick.haldclutimage.php",
        "name": "Imagick::haldClutImage",
        "description": "Replaces colors in the image"
    },
    {
        "href": "imagick.hasnextimage.php",
        "name": "Imagick::hasNextImage",
        "description": "Checks if the object has more images"
    },
    {
        "href": "imagick.haspreviousimage.php",
        "name": "Imagick::hasPreviousImage",
        "description": "Checks if the object has a previous image"
    },
    {
        "href": "imagick.identifyformat.php",
        "name": "Imagick::identifyFormat",
        "description": "Description"
    },
    {
        "href": "imagick.identifyimage.php",
        "name": "Imagick::identifyImage",
        "description": "Identifies an image and fetches attributes"
    },
    {
        "href": "imagick.implodeimage.php",
        "name": "Imagick::implodeImage",
        "description": "Creates a new image as a copy"
    },
    {
        "href": "imagick.importimagepixels.php",
        "name": "Imagick::importImagePixels",
        "description": "Imports image pixels"
    },
    {
        "href": "imagick.inversefouriertransformimage.php",
        "name": "Imagick::inverseFourierTransformImage",
        "description": "Description"
    },
    {
        "href": "imagick.labelimage.php",
        "name": "Imagick::labelImage",
        "description": "Adds a label to an image"
    },
    {
        "href": "imagick.levelimage.php",
        "name": "Imagick::levelImage",
        "description": "Adjusts the levels of an image"
    },
    {
        "href": "imagick.linearstretchimage.php",
        "name": "Imagick::linearStretchImage",
        "description": "Stretches with saturation the image intensity"
    },
    {
        "href": "imagick.liquidrescaleimage.php",
        "name": "Imagick::liquidRescaleImage",
        "description": "Animates an image or images"
    },
    {
        "href": "imagick.listregistry.php",
        "name": "Imagick::listRegistry",
        "description": "Description"
    },
    {
        "href": "imagick.magnifyimage.php",
        "name": "Imagick::magnifyImage",
        "description": "Scales an image proportionally 2x"
    },
    {
        "href": "imagick.mapimage.php",
        "name": "Imagick::mapImage",
        "description": "Replaces the colors of an image with the closest color from a reference image"
    },
    {
        "href": "imagick.mattefloodfillimage.php",
        "name": "Imagick::matteFloodfillImage",
        "description": "Changes the transparency value of a color"
    },
    {
        "href": "imagick.medianfilterimage.php",
        "name": "Imagick::medianFilterImage",
        "description": "Applies a digital filter"
    },
    {
        "href": "imagick.mergeimagelayers.php",
        "name": "Imagick::mergeImageLayers",
        "description": "Merges image layers"
    },
    {
        "href": "imagick.minifyimage.php",
        "name": "Imagick::minifyImage",
        "description": "Scales an image proportionally to half its size"
    },
    {
        "href": "imagick.modulateimage.php",
        "name": "Imagick::modulateImage",
        "description": "Control the brightness, saturation, and hue"
    },
    {
        "href": "imagick.montageimage.php",
        "name": "Imagick::montageImage",
        "description": "Creates a composite image"
    },
    {
        "href": "imagick.morphimages.php",
        "name": "Imagick::morphImages",
        "description": "Method morphs a set of images"
    },
    {
        "href": "imagick.morphology.php",
        "name": "Imagick::morphology",
        "description": "Description"
    },
    {
        "href": "imagick.mosaicimages.php",
        "name": "Imagick::mosaicImages",
        "description": "Forms a mosaic from images"
    },
    {
        "href": "imagick.motionblurimage.php",
        "name": "Imagick::motionBlurImage",
        "description": "Simulates motion blur"
    },
    {
        "href": "imagick.negateimage.php",
        "name": "Imagick::negateImage",
        "description": "Negates the colors in the reference image"
    },
    {
        "href": "imagick.newimage.php",
        "name": "Imagick::newImage",
        "description": "Creates a new image"
    },
    {
        "href": "imagick.newpseudoimage.php",
        "name": "Imagick::newPseudoImage",
        "description": "Creates a new image"
    },
    {
        "href": "imagick.nextimage.php",
        "name": "Imagick::nextImage",
        "description": "Moves to the next image"
    },
    {
        "href": "imagick.normalizeimage.php",
        "name": "Imagick::normalizeImage",
        "description": "Enhances the contrast of a color image"
    },
    {
        "href": "imagick.oilpaintimage.php",
        "name": "Imagick::oilPaintImage",
        "description": "Simulates an oil painting"
    },
    {
        "href": "imagick.opaquepaintimage.php",
        "name": "Imagick::opaquePaintImage",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "href": "imagick.optimizeimagelayers.php",
        "name": "Imagick::optimizeImageLayers",
        "description": "Removes repeated portions of images to optimize"
    },
    {
        "href": "imagick.orderedposterizeimage.php",
        "name": "Imagick::orderedPosterizeImage",
        "description": "Performs an ordered dither"
    },
    {
        "href": "imagick.paintfloodfillimage.php",
        "name": "Imagick::paintFloodfillImage",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "href": "imagick.paintopaqueimage.php",
        "name": "Imagick::paintOpaqueImage",
        "description": "Change any pixel that matches color"
    },
    {
        "href": "imagick.painttransparentimage.php",
        "name": "Imagick::paintTransparentImage",
        "description": "Changes any pixel that matches color with the color defined by fill"
    },
    {
        "href": "imagick.pingimage.php",
        "name": "Imagick::pingImage",
        "description": "Fetch basic attributes about the image"
    },
    {
        "href": "imagick.pingimageblob.php",
        "name": "Imagick::pingImageBlob",
        "description": "Quickly fetch attributes"
    },
    {
        "href": "imagick.pingimagefile.php",
        "name": "Imagick::pingImageFile",
        "description": "Get basic image attributes in a lightweight manner"
    },
    {
        "href": "imagick.polaroidimage.php",
        "name": "Imagick::polaroidImage",
        "description": "Simulates a Polaroid picture"
    },
    {
        "href": "imagick.posterizeimage.php",
        "name": "Imagick::posterizeImage",
        "description": "Reduces the image to a limited number of color level"
    },
    {
        "href": "imagick.previewimages.php",
        "name": "Imagick::previewImages",
        "description": "Quickly pin-point appropriate parameters for image processing"
    },
    {
        "href": "imagick.previousimage.php",
        "name": "Imagick::previousImage",
        "description": "Move to the previous image in the object"
    },
    {
        "href": "imagick.profileimage.php",
        "name": "Imagick::profileImage",
        "description": "Adds or removes a profile from an image"
    },
    {
        "href": "imagick.quantizeimage.php",
        "name": "Imagick::quantizeImage",
        "description": "Analyzes the colors within a reference image"
    },
    {
        "href": "imagick.quantizeimages.php",
        "name": "Imagick::quantizeImages",
        "description": "Analyzes the colors within a sequence of images"
    },
    {
        "href": "imagick.queryfontmetrics.php",
        "name": "Imagick::queryFontMetrics",
        "description": "Returns an array representing the font metrics"
    },
    {
        "href": "imagick.queryfonts.php",
        "name": "Imagick::queryFonts",
        "description": "Returns the configured fonts"
    },
    {
        "href": "imagick.queryformats.php",
        "name": "Imagick::queryFormats",
        "description": "Returns formats supported by Imagick"
    },
    {
        "href": "imagick.radialblurimage.php",
        "name": "Imagick::radialBlurImage",
        "description": "Radial blurs an image"
    },
    {
        "href": "imagick.raiseimage.php",
        "name": "Imagick::raiseImage",
        "description": "Creates a simulated 3d button-like effect"
    },
    {
        "href": "imagick.randomthresholdimage.php",
        "name": "Imagick::randomThresholdImage",
        "description": "Creates a high-contrast, two-color image"
    },
    {
        "href": "imagick.readimage.php",
        "name": "Imagick::readImage",
        "description": "Reads image from filename"
    },
    {
        "href": "imagick.readimageblob.php",
        "name": "Imagick::readImageBlob",
        "description": "Reads image from a binary string"
    },
    {
        "href": "imagick.readimagefile.php",
        "name": "Imagick::readImageFile",
        "description": "Reads image from open filehandle"
    },
    {
        "href": "imagick.readimages.php",
        "name": "Imagick::readimages",
        "description": "Description"
    },
    {
        "href": "imagick.recolorimage.php",
        "name": "Imagick::recolorImage",
        "description": "Recolors image"
    },
    {
        "href": "imagick.reducenoiseimage.php",
        "name": "Imagick::reduceNoiseImage",
        "description": "Smooths the contours of an image"
    },
    {
        "href": "imagick.remapimage.php",
        "name": "Imagick::remapImage",
        "description": "Remaps image colors"
    },
    {
        "href": "imagick.removeimage.php",
        "name": "Imagick::removeImage",
        "description": "Removes an image from the image list"
    },
    {
        "href": "imagick.removeimageprofile.php",
        "name": "Imagick::removeImageProfile",
        "description": "Removes the named image profile and returns it"
    },
    {
        "href": "imagick.render.php",
        "name": "Imagick::render",
        "description": "Renders all preceding drawing commands"
    },
    {
        "href": "imagick.resampleimage.php",
        "name": "Imagick::resampleImage",
        "description": "Resample image to desired resolution"
    },
    {
        "href": "imagick.resetimagepage.php",
        "name": "Imagick::resetImagePage",
        "description": "Reset image page"
    },
    {
        "href": "imagick.resizeimage.php",
        "name": "Imagick::resizeImage",
        "description": "Scales an image"
    },
    {
        "href": "imagick.rollimage.php",
        "name": "Imagick::rollImage",
        "description": "Offsets an image"
    },
    {
        "href": "imagick.rotateimage.php",
        "name": "Imagick::rotateImage",
        "description": "Rotates an image"
    },
    {
        "href": "imagick.rotationalblurimage.php",
        "name": "Imagick::rotationalBlurImage",
        "description": "Description"
    },
    {
        "href": "imagick.roundcorners.php",
        "name": "Imagick::roundCorners",
        "description": "Rounds image corners"
    },
    {
        "href": "imagick.sampleimage.php",
        "name": "Imagick::sampleImage",
        "description": "Scales an image with pixel sampling"
    },
    {
        "href": "imagick.scaleimage.php",
        "name": "Imagick::scaleImage",
        "description": "Scales the size of an image"
    },
    {
        "href": "imagick.segmentimage.php",
        "name": "Imagick::segmentImage",
        "description": "Segments an image"
    },
    {
        "href": "imagick.selectiveblurimage.php",
        "name": "Imagick::selectiveBlurImage",
        "description": "Description"
    },
    {
        "href": "imagick.separateimagechannel.php",
        "name": "Imagick::separateImageChannel",
        "description": "Separates a channel from the image"
    },
    {
        "href": "imagick.sepiatoneimage.php",
        "name": "Imagick::sepiaToneImage",
        "description": "Sepia tones an image"
    },
    {
        "href": "imagick.setbackgroundcolor.php",
        "name": "Imagick::setBackgroundColor",
        "description": "Sets the object's default background color"
    },
    {
        "href": "imagick.setcolorspace.php",
        "name": "Imagick::setColorspace",
        "description": "Set colorspace"
    },
    {
        "href": "imagick.setcompression.php",
        "name": "Imagick::setCompression",
        "description": "Sets the object's default compression type"
    },
    {
        "href": "imagick.setcompressionquality.php",
        "name": "Imagick::setCompressionQuality",
        "description": "Sets the object's default compression quality"
    },
    {
        "href": "imagick.setfilename.php",
        "name": "Imagick::setFilename",
        "description": "Sets the filename before you read or write the image"
    },
    {
        "href": "imagick.setfirstiterator.php",
        "name": "Imagick::setFirstIterator",
        "description": "Sets the Imagick iterator to the first image"
    },
    {
        "href": "imagick.setfont.php",
        "name": "Imagick::setFont",
        "description": "Sets font"
    },
    {
        "href": "imagick.setformat.php",
        "name": "Imagick::setFormat",
        "description": "Sets the format of the Imagick object"
    },
    {
        "href": "imagick.setgravity.php",
        "name": "Imagick::setGravity",
        "description": "Sets the gravity"
    },
    {
        "href": "imagick.setimage.php",
        "name": "Imagick::setImage",
        "description": "Replaces image in the object"
    },
    {
        "href": "imagick.setimagealphachannel.php",
        "name": "Imagick::setImageAlphaChannel",
        "description": "Sets image alpha channel"
    },
    {
        "href": "imagick.setimageartifact.php",
        "name": "Imagick::setImageArtifact",
        "description": "Set image artifact"
    },
    {
        "href": "imagick.setimageattribute.php",
        "name": "Imagick::setImageAttribute",
        "description": "Description"
    },
    {
        "href": "imagick.setimagebackgroundcolor.php",
        "name": "Imagick::setImageBackgroundColor",
        "description": "Sets the image background color"
    },
    {
        "href": "imagick.setimagebias.php",
        "name": "Imagick::setImageBias",
        "description": "Sets the image bias for any method that convolves an image"
    },
    {
        "href": "imagick.setimagebiasquantum.php",
        "name": "Imagick::setImageBiasQuantum",
        "description": "Description"
    },
    {
        "href": "imagick.setimageblueprimary.php",
        "name": "Imagick::setImageBluePrimary",
        "description": "Sets the image chromaticity blue primary point"
    },
    {
        "href": "imagick.setimagebordercolor.php",
        "name": "Imagick::setImageBorderColor",
        "description": "Sets the image border color"
    },
    {
        "href": "imagick.setimagechanneldepth.php",
        "name": "Imagick::setImageChannelDepth",
        "description": "Sets the depth of a particular image channel"
    },
    {
        "href": "imagick.setimageclipmask.php",
        "name": "Imagick::setImageClipMask",
        "description": "Sets image clip mask"
    },
    {
        "href": "imagick.setimagecolormapcolor.php",
        "name": "Imagick::setImageColormapColor",
        "description": "Sets the color of the specified colormap index"
    },
    {
        "href": "imagick.setimagecolorspace.php",
        "name": "Imagick::setImageColorspace",
        "description": "Sets the image colorspace"
    },
    {
        "href": "imagick.setimagecompose.php",
        "name": "Imagick::setImageCompose",
        "description": "Sets the image composite operator"
    },
    {
        "href": "imagick.setimagecompression.php",
        "name": "Imagick::setImageCompression",
        "description": "Sets the image compression"
    },
    {
        "href": "imagick.setimagecompressionquality.php",
        "name": "Imagick::setImageCompressionQuality",
        "description": "Sets the image compression quality"
    },
    {
        "href": "imagick.setimagedelay.php",
        "name": "Imagick::setImageDelay",
        "description": "Sets the image delay"
    },
    {
        "href": "imagick.setimagedepth.php",
        "name": "Imagick::setImageDepth",
        "description": "Sets the image depth"
    },
    {
        "href": "imagick.setimagedispose.php",
        "name": "Imagick::setImageDispose",
        "description": "Sets the image disposal method"
    },
    {
        "href": "imagick.setimageextent.php",
        "name": "Imagick::setImageExtent",
        "description": "Sets the image size"
    },
    {
        "href": "imagick.setimagefilename.php",
        "name": "Imagick::setImageFilename",
        "description": "Sets the filename of a particular image"
    },
    {
        "href": "imagick.setimageformat.php",
        "name": "Imagick::setImageFormat",
        "description": "Sets the format of a particular image"
    },
    {
        "href": "imagick.setimagegamma.php",
        "name": "Imagick::setImageGamma",
        "description": "Sets the image gamma"
    },
    {
        "href": "imagick.setimagegravity.php",
        "name": "Imagick::setImageGravity",
        "description": "Sets the image gravity"
    },
    {
        "href": "imagick.setimagegreenprimary.php",
        "name": "Imagick::setImageGreenPrimary",
        "description": "Sets the image chromaticity green primary point"
    },
    {
        "href": "imagick.setimageindex.php",
        "name": "Imagick::setImageIndex",
        "description": "Set the iterator position"
    },
    {
        "href": "imagick.setimageinterlacescheme.php",
        "name": "Imagick::setImageInterlaceScheme",
        "description": "Sets the image compression"
    },
    {
        "href": "imagick.setimageinterpolatemethod.php",
        "name": "Imagick::setImageInterpolateMethod",
        "description": "Sets the image interpolate pixel method"
    },
    {
        "href": "imagick.setimageiterations.php",
        "name": "Imagick::setImageIterations",
        "description": "Sets the image iterations"
    },
    {
        "href": "imagick.setimagematte.php",
        "name": "Imagick::setImageMatte",
        "description": "Sets the image matte channel"
    },
    {
        "href": "imagick.setimagemattecolor.php",
        "name": "Imagick::setImageMatteColor",
        "description": "Sets the image matte color"
    },
    {
        "href": "imagick.setimageopacity.php",
        "name": "Imagick::setImageOpacity",
        "description": "Sets the image opacity level"
    },
    {
        "href": "imagick.setimageorientation.php",
        "name": "Imagick::setImageOrientation",
        "description": "Sets the image orientation"
    },
    {
        "href": "imagick.setimagepage.php",
        "name": "Imagick::setImagePage",
        "description": "Sets the page geometry of the image"
    },
    {
        "href": "imagick.setimageprofile.php",
        "name": "Imagick::setImageProfile",
        "description": "Adds a named profile to the Imagick object"
    },
    {
        "href": "imagick.setimageproperty.php",
        "name": "Imagick::setImageProperty",
        "description": "Sets an image property"
    },
    {
        "href": "imagick.setimageredprimary.php",
        "name": "Imagick::setImageRedPrimary",
        "description": "Sets the image chromaticity red primary point"
    },
    {
        "href": "imagick.setimagerenderingintent.php",
        "name": "Imagick::setImageRenderingIntent",
        "description": "Sets the image rendering intent"
    },
    {
        "href": "imagick.setimageresolution.php",
        "name": "Imagick::setImageResolution",
        "description": "Sets the image resolution"
    },
    {
        "href": "imagick.setimagescene.php",
        "name": "Imagick::setImageScene",
        "description": "Sets the image scene"
    },
    {
        "href": "imagick.setimagetickspersecond.php",
        "name": "Imagick::setImageTicksPerSecond",
        "description": "Sets the image ticks-per-second"
    },
    {
        "href": "imagick.setimagetype.php",
        "name": "Imagick::setImageType",
        "description": "Sets the image type"
    },
    {
        "href": "imagick.setimageunits.php",
        "name": "Imagick::setImageUnits",
        "description": "Sets the image units of resolution"
    },
    {
        "href": "imagick.setimagevirtualpixelmethod.php",
        "name": "Imagick::setImageVirtualPixelMethod",
        "description": "Sets the image virtual pixel method"
    },
    {
        "href": "imagick.setimagewhitepoint.php",
        "name": "Imagick::setImageWhitePoint",
        "description": "Sets the image chromaticity white point"
    },
    {
        "href": "imagick.setinterlacescheme.php",
        "name": "Imagick::setInterlaceScheme",
        "description": "Sets the image compression"
    },
    {
        "href": "imagick.setiteratorindex.php",
        "name": "Imagick::setIteratorIndex",
        "description": "Set the iterator position"
    },
    {
        "href": "imagick.setlastiterator.php",
        "name": "Imagick::setLastIterator",
        "description": "Sets the Imagick iterator to the last image"
    },
    {
        "href": "imagick.setoption.php",
        "name": "Imagick::setOption",
        "description": "Set an option"
    },
    {
        "href": "imagick.setpage.php",
        "name": "Imagick::setPage",
        "description": "Sets the page geometry of the Imagick object"
    },
    {
        "href": "imagick.setpointsize.php",
        "name": "Imagick::setPointSize",
        "description": "Sets point size"
    },
    {
        "href": "imagick.setprogressmonitor.php",
        "name": "Imagick::setProgressMonitor",
        "description": "Description"
    },
    {
        "href": "imagick.setregistry.php",
        "name": "Imagick::setRegistry",
        "description": "Description"
    },
    {
        "href": "imagick.setresolution.php",
        "name": "Imagick::setResolution",
        "description": "Sets the image resolution"
    },
    {
        "href": "imagick.setresourcelimit.php",
        "name": "Imagick::setResourceLimit",
        "description": "Sets the limit for a particular resource"
    },
    {
        "href": "imagick.setsamplingfactors.php",
        "name": "Imagick::setSamplingFactors",
        "description": "Sets the image sampling factors"
    },
    {
        "href": "imagick.setsize.php",
        "name": "Imagick::setSize",
        "description": "Sets the size of the Imagick object"
    },
    {
        "href": "imagick.setsizeoffset.php",
        "name": "Imagick::setSizeOffset",
        "description": "Sets the size and offset of the Imagick object"
    },
    {
        "href": "imagick.settype.php",
        "name": "Imagick::setType",
        "description": "Sets the image type attribute"
    },
    {
        "href": "imagick.shadeimage.php",
        "name": "Imagick::shadeImage",
        "description": "Creates a 3D effect"
    },
    {
        "href": "imagick.shadowimage.php",
        "name": "Imagick::shadowImage",
        "description": "Simulates an image shadow"
    },
    {
        "href": "imagick.sharpenimage.php",
        "name": "Imagick::sharpenImage",
        "description": "Sharpens an image"
    },
    {
        "href": "imagick.shaveimage.php",
        "name": "Imagick::shaveImage",
        "description": "Shaves pixels from the image edges"
    },
    {
        "href": "imagick.shearimage.php",
        "name": "Imagick::shearImage",
        "description": "Creating a parallelogram"
    },
    {
        "href": "imagick.sigmoidalcontrastimage.php",
        "name": "Imagick::sigmoidalContrastImage",
        "description": "Adjusts the contrast of an image"
    },
    {
        "href": "imagick.sketchimage.php",
        "name": "Imagick::sketchImage",
        "description": "Simulates a pencil sketch"
    },
    {
        "href": "imagick.smushimages.php",
        "name": "Imagick::smushImages",
        "description": "Description"
    },
    {
        "href": "imagick.solarizeimage.php",
        "name": "Imagick::solarizeImage",
        "description": "Applies a solarizing effect to the image"
    },
    {
        "href": "imagick.sparsecolorimage.php",
        "name": "Imagick::sparseColorImage",
        "description": "Interpolates colors"
    },
    {
        "href": "imagick.spliceimage.php",
        "name": "Imagick::spliceImage",
        "description": "Splices a solid color into the image"
    },
    {
        "href": "imagick.spreadimage.php",
        "name": "Imagick::spreadImage",
        "description": "Randomly displaces each pixel in a block"
    },
    {
        "href": "imagick.statisticimage.php",
        "name": "Imagick::statisticImage",
        "description": "Description"
    },
    {
        "href": "imagick.steganoimage.php",
        "name": "Imagick::steganoImage",
        "description": "Hides a digital watermark within the image"
    },
    {
        "href": "imagick.stereoimage.php",
        "name": "Imagick::stereoImage",
        "description": "Composites two images"
    },
    {
        "href": "imagick.stripimage.php",
        "name": "Imagick::stripImage",
        "description": "Strips an image of all profiles and comments"
    },
    {
        "href": "imagick.subimagematch.php",
        "name": "Imagick::subImageMatch",
        "description": "Description"
    },
    {
        "href": "imagick.swirlimage.php",
        "name": "Imagick::swirlImage",
        "description": "Swirls the pixels about the center of the image"
    },
    {
        "href": "imagick.textureimage.php",
        "name": "Imagick::textureImage",
        "description": "Repeatedly tiles the texture image"
    },
    {
        "href": "imagick.thresholdimage.php",
        "name": "Imagick::thresholdImage",
        "description": "Changes the value of individual pixels based on a threshold"
    },
    {
        "href": "imagick.thumbnailimage.php",
        "name": "Imagick::thumbnailImage",
        "description": "Changes the size of an image"
    },
    {
        "href": "imagick.tintimage.php",
        "name": "Imagick::tintImage",
        "description": "Applies a color vector to each pixel in the image"
    },
    {
        "href": "imagick.transformimage.php",
        "name": "Imagick::transformImage",
        "description": "Convenience method for setting crop size and the image geometry"
    },
    {
        "href": "imagick.transformimagecolorspace.php",
        "name": "Imagick::transformImageColorspace",
        "description": "Transforms an image to a new colorspace"
    },
    {
        "href": "imagick.transparentpaintimage.php",
        "name": "Imagick::transparentPaintImage",
        "description": "Paints pixels transparent"
    },
    {
        "href": "imagick.transposeimage.php",
        "name": "Imagick::transposeImage",
        "description": "Creates a vertical mirror image"
    },
    {
        "href": "imagick.transverseimage.php",
        "name": "Imagick::transverseImage",
        "description": "Creates a horizontal mirror image"
    },
    {
        "href": "imagick.trimimage.php",
        "name": "Imagick::trimImage",
        "description": "Remove edges from the image"
    },
    {
        "href": "imagick.uniqueimagecolors.php",
        "name": "Imagick::uniqueImageColors",
        "description": "Discards all but one of any pixel color"
    },
    {
        "href": "imagick.unsharpmaskimage.php",
        "name": "Imagick::unsharpMaskImage",
        "description": "Sharpens an image"
    },
    {
        "href": "imagick.valid.php",
        "name": "Imagick::valid",
        "description": "Checks if the current item is valid"
    },
    {
        "href": "imagick.vignetteimage.php",
        "name": "Imagick::vignetteImage",
        "description": "Adds vignette filter to the image"
    },
    {
        "href": "imagick.waveimage.php",
        "name": "Imagick::waveImage",
        "description": "Applies wave filter to the image"
    },
    {
        "href": "imagick.whitethresholdimage.php",
        "name": "Imagick::whiteThresholdImage",
        "description": "Force all pixels above the threshold into white"
    },
    {
        "href": "imagick.writeimage.php",
        "name": "Imagick::writeImage",
        "description": "Writes an image to the specified filename"
    },
    {
        "href": "imagick.writeimagefile.php",
        "name": "Imagick::writeImageFile",
        "description": "Writes an image to a filehandle"
    },
    {
        "href": "imagick.writeimages.php",
        "name": "Imagick::writeImages",
        "description": "Writes an image or image sequence"
    },
    {
        "href": "imagick.writeimagesfile.php",
        "name": "Imagick::writeImagesFile",
        "description": "Writes frames to a filehandle"
    },
    {
        "href": "imagick.construct.php",
        "name": "Imagick::__construct",
        "description": "The Imagick constructor"
    },
    {
        "href": "imagick.tostring.php",
        "name": "Imagick::__toString",
        "description": "Returns the image as a string"
    },
    {
        "href": "imagickdraw.affine.php",
        "name": "ImagickDraw::affine",
        "description": "Adjusts the current affine transformation matrix"
    },
    {
        "href": "imagickdraw.annotation.php",
        "name": "ImagickDraw::annotation",
        "description": "Draws text on the image"
    },
    {
        "href": "imagickdraw.arc.php",
        "name": "ImagickDraw::arc",
        "description": "Draws an arc"
    },
    {
        "href": "imagickdraw.bezier.php",
        "name": "ImagickDraw::bezier",
        "description": "Draws a bezier curve"
    },
    {
        "href": "imagickdraw.circle.php",
        "name": "ImagickDraw::circle",
        "description": "Draws a circle"
    },
    {
        "href": "imagickdraw.clear.php",
        "name": "ImagickDraw::clear",
        "description": "Clears the ImagickDraw"
    },
    {
        "href": "imagickdraw.clone.php",
        "name": "ImagickDraw::clone",
        "description": "Makes an exact copy of the specified ImagickDraw object"
    },
    {
        "href": "imagickdraw.color.php",
        "name": "ImagickDraw::color",
        "description": "Draws color on image"
    },
    {
        "href": "imagickdraw.comment.php",
        "name": "ImagickDraw::comment",
        "description": "Adds a comment"
    },
    {
        "href": "imagickdraw.composite.php",
        "name": "ImagickDraw::composite",
        "description": "Composites an image onto the current image"
    },
    {
        "href": "imagickdraw.destroy.php",
        "name": "ImagickDraw::destroy",
        "description": "Frees all associated resources"
    },
    {
        "href": "imagickdraw.ellipse.php",
        "name": "ImagickDraw::ellipse",
        "description": "Draws an ellipse on the image"
    },
    {
        "href": "imagickdraw.getclippath.php",
        "name": "ImagickDraw::getClipPath",
        "description": "Obtains the current clipping path ID"
    },
    {
        "href": "imagickdraw.getcliprule.php",
        "name": "ImagickDraw::getClipRule",
        "description": "Returns the current polygon fill rule"
    },
    {
        "href": "imagickdraw.getclipunits.php",
        "name": "ImagickDraw::getClipUnits",
        "description": "Returns the interpretation of clip path units"
    },
    {
        "href": "imagickdraw.getfillcolor.php",
        "name": "ImagickDraw::getFillColor",
        "description": "Returns the fill color"
    },
    {
        "href": "imagickdraw.getfillopacity.php",
        "name": "ImagickDraw::getFillOpacity",
        "description": "Returns the opacity used when drawing"
    },
    {
        "href": "imagickdraw.getfillrule.php",
        "name": "ImagickDraw::getFillRule",
        "description": "Returns the fill rule"
    },
    {
        "href": "imagickdraw.getfont.php",
        "name": "ImagickDraw::getFont",
        "description": "Returns the font"
    },
    {
        "href": "imagickdraw.getfontfamily.php",
        "name": "ImagickDraw::getFontFamily",
        "description": "Returns the font family"
    },
    {
        "href": "imagickdraw.getfontsize.php",
        "name": "ImagickDraw::getFontSize",
        "description": "Returns the font pointsize"
    },
    {
        "href": "imagickdraw.getfontstretch.php",
        "name": "ImagickDraw::getFontStretch",
        "description": "Description"
    },
    {
        "href": "imagickdraw.getfontstyle.php",
        "name": "ImagickDraw::getFontStyle",
        "description": "Returns the font style"
    },
    {
        "href": "imagickdraw.getfontweight.php",
        "name": "ImagickDraw::getFontWeight",
        "description": "Returns the font weight"
    },
    {
        "href": "imagickdraw.getgravity.php",
        "name": "ImagickDraw::getGravity",
        "description": "Returns the text placement gravity"
    },
    {
        "href": "imagickdraw.getstrokeantialias.php",
        "name": "ImagickDraw::getStrokeAntialias",
        "description": "Returns the current stroke antialias setting"
    },
    {
        "href": "imagickdraw.getstrokecolor.php",
        "name": "ImagickDraw::getStrokeColor",
        "description": "Returns the color used for stroking object outlines"
    },
    {
        "href": "imagickdraw.getstrokedasharray.php",
        "name": "ImagickDraw::getStrokeDashArray",
        "description": "Returns an array representing the pattern of dashes and gaps used to stroke paths"
    },
    {
        "href": "imagickdraw.getstrokedashoffset.php",
        "name": "ImagickDraw::getStrokeDashOffset",
        "description": "Returns the offset into the dash pattern to start the dash"
    },
    {
        "href": "imagickdraw.getstrokelinecap.php",
        "name": "ImagickDraw::getStrokeLineCap",
        "description": "Returns the shape to be used at the end of open subpaths when they are stroked"
    },
    {
        "href": "imagickdraw.getstrokelinejoin.php",
        "name": "ImagickDraw::getStrokeLineJoin",
        "description": "Returns the shape to be used at the corners of paths when they are stroked"
    },
    {
        "href": "imagickdraw.getstrokemiterlimit.php",
        "name": "ImagickDraw::getStrokeMiterLimit",
        "description": "Returns the stroke miter limit"
    },
    {
        "href": "imagickdraw.getstrokeopacity.php",
        "name": "ImagickDraw::getStrokeOpacity",
        "description": "Returns the opacity of stroked object outlines"
    },
    {
        "href": "imagickdraw.getstrokewidth.php",
        "name": "ImagickDraw::getStrokeWidth",
        "description": "Returns the width of the stroke used to draw object outlines"
    },
    {
        "href": "imagickdraw.gettextalignment.php",
        "name": "ImagickDraw::getTextAlignment",
        "description": "Returns the text alignment"
    },
    {
        "href": "imagickdraw.gettextantialias.php",
        "name": "ImagickDraw::getTextAntialias",
        "description": "Returns the current text antialias setting"
    },
    {
        "href": "imagickdraw.gettextdecoration.php",
        "name": "ImagickDraw::getTextDecoration",
        "description": "Returns the text decoration"
    },
    {
        "href": "imagickdraw.gettextencoding.php",
        "name": "ImagickDraw::getTextEncoding",
        "description": "Returns the code set used for text annotations"
    },
    {
        "href": "imagickdraw.gettextinterlinespacing.php",
        "name": "ImagickDraw::getTextInterlineSpacing",
        "description": "Description"
    },
    {
        "href": "imagickdraw.gettextinterwordspacing.php",
        "name": "ImagickDraw::getTextInterwordSpacing",
        "description": "Description"
    },
    {
        "href": "imagickdraw.gettextkerning.php",
        "name": "ImagickDraw::getTextKerning",
        "description": "Description"
    },
    {
        "href": "imagickdraw.gettextundercolor.php",
        "name": "ImagickDraw::getTextUnderColor",
        "description": "Returns the text under color"
    },
    {
        "href": "imagickdraw.getvectorgraphics.php",
        "name": "ImagickDraw::getVectorGraphics",
        "description": "Returns a string containing vector graphics"
    },
    {
        "href": "imagickdraw.line.php",
        "name": "ImagickDraw::line",
        "description": "Draws a line"
    },
    {
        "href": "imagickdraw.matte.php",
        "name": "ImagickDraw::matte",
        "description": "Paints on the image's opacity channel"
    },
    {
        "href": "imagickdraw.pathclose.php",
        "name": "ImagickDraw::pathClose",
        "description": "Adds a path element to the current path"
    },
    {
        "href": "imagickdraw.pathcurvetoabsolute.php",
        "name": "ImagickDraw::pathCurveToAbsolute",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetoquadraticbezierabsolute.php",
        "name": "ImagickDraw::pathCurveToQuadraticBezierAbsolute",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetoquadraticbezierrelative.php",
        "name": "ImagickDraw::pathCurveToQuadraticBezierRelative",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetoquadraticbeziersmoothabsolute.php",
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetoquadraticbeziersmoothrelative.php",
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetorelative.php",
        "name": "ImagickDraw::pathCurveToRelative",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetosmoothabsolute.php",
        "name": "ImagickDraw::pathCurveToSmoothAbsolute",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "href": "imagickdraw.pathcurvetosmoothrelative.php",
        "name": "ImagickDraw::pathCurveToSmoothRelative",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "href": "imagickdraw.pathellipticarcabsolute.php",
        "name": "ImagickDraw::pathEllipticArcAbsolute",
        "description": "Draws an elliptical arc"
    },
    {
        "href": "imagickdraw.pathellipticarcrelative.php",
        "name": "ImagickDraw::pathEllipticArcRelative",
        "description": "Draws an elliptical arc"
    },
    {
        "href": "imagickdraw.pathfinish.php",
        "name": "ImagickDraw::pathFinish",
        "description": "Terminates the current path"
    },
    {
        "href": "imagickdraw.pathlinetoabsolute.php",
        "name": "ImagickDraw::pathLineToAbsolute",
        "description": "Draws a line path"
    },
    {
        "href": "imagickdraw.pathlinetohorizontalabsolute.php",
        "name": "ImagickDraw::pathLineToHorizontalAbsolute",
        "description": "Draws a horizontal line path"
    },
    {
        "href": "imagickdraw.pathlinetohorizontalrelative.php",
        "name": "ImagickDraw::pathLineToHorizontalRelative",
        "description": "Draws a horizontal line"
    },
    {
        "href": "imagickdraw.pathlinetorelative.php",
        "name": "ImagickDraw::pathLineToRelative",
        "description": "Draws a line path"
    },
    {
        "href": "imagickdraw.pathlinetoverticalabsolute.php",
        "name": "ImagickDraw::pathLineToVerticalAbsolute",
        "description": "Draws a vertical line"
    },
    {
        "href": "imagickdraw.pathlinetoverticalrelative.php",
        "name": "ImagickDraw::pathLineToVerticalRelative",
        "description": "Draws a vertical line path"
    },
    {
        "href": "imagickdraw.pathmovetoabsolute.php",
        "name": "ImagickDraw::pathMoveToAbsolute",
        "description": "Starts a new sub-path"
    },
    {
        "href": "imagickdraw.pathmovetorelative.php",
        "name": "ImagickDraw::pathMoveToRelative",
        "description": "Starts a new sub-path"
    },
    {
        "href": "imagickdraw.pathstart.php",
        "name": "ImagickDraw::pathStart",
        "description": "Declares the start of a path drawing list"
    },
    {
        "href": "imagickdraw.point.php",
        "name": "ImagickDraw::point",
        "description": "Draws a point"
    },
    {
        "href": "imagickdraw.polygon.php",
        "name": "ImagickDraw::polygon",
        "description": "Draws a polygon"
    },
    {
        "href": "imagickdraw.polyline.php",
        "name": "ImagickDraw::polyline",
        "description": "Draws a polyline"
    },
    {
        "href": "imagickdraw.pop.php",
        "name": "ImagickDraw::pop",
        "description": "Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw"
    },
    {
        "href": "imagickdraw.popclippath.php",
        "name": "ImagickDraw::popClipPath",
        "description": "Terminates a clip path definition"
    },
    {
        "href": "imagickdraw.popdefs.php",
        "name": "ImagickDraw::popDefs",
        "description": "Terminates a definition list"
    },
    {
        "href": "imagickdraw.poppattern.php",
        "name": "ImagickDraw::popPattern",
        "description": "Terminates a pattern definition"
    },
    {
        "href": "imagickdraw.push.php",
        "name": "ImagickDraw::push",
        "description": "Clones the current ImagickDraw and pushes it to the stack"
    },
    {
        "href": "imagickdraw.pushclippath.php",
        "name": "ImagickDraw::pushClipPath",
        "description": "Starts a clip path definition"
    },
    {
        "href": "imagickdraw.pushdefs.php",
        "name": "ImagickDraw::pushDefs",
        "description": "Indicates that following commands create named elements for early processing"
    },
    {
        "href": "imagickdraw.pushpattern.php",
        "name": "ImagickDraw::pushPattern",
        "description": "Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern"
    },
    {
        "href": "imagickdraw.rectangle.php",
        "name": "ImagickDraw::rectangle",
        "description": "Draws a rectangle"
    },
    {
        "href": "imagickdraw.render.php",
        "name": "ImagickDraw::render",
        "description": "Renders all preceding drawing commands onto the image"
    },
    {
        "href": "imagickdraw.resetvectorgraphics.php",
        "name": "ImagickDraw::resetVectorGraphics",
        "description": "Description"
    },
    {
        "href": "imagickdraw.rotate.php",
        "name": "ImagickDraw::rotate",
        "description": "Applies the specified rotation to the current coordinate space"
    },
    {
        "href": "imagickdraw.roundrectangle.php",
        "name": "ImagickDraw::roundRectangle",
        "description": "Draws a rounded rectangle"
    },
    {
        "href": "imagickdraw.scale.php",
        "name": "ImagickDraw::scale",
        "description": "Adjusts the scaling factor"
    },
    {
        "href": "imagickdraw.setclippath.php",
        "name": "ImagickDraw::setClipPath",
        "description": "Associates a named clipping path with the image"
    },
    {
        "href": "imagickdraw.setcliprule.php",
        "name": "ImagickDraw::setClipRule",
        "description": "Set the polygon fill rule to be used by the clipping path"
    },
    {
        "href": "imagickdraw.setclipunits.php",
        "name": "ImagickDraw::setClipUnits",
        "description": "Sets the interpretation of clip path units"
    },
    {
        "href": "imagickdraw.setfillalpha.php",
        "name": "ImagickDraw::setFillAlpha",
        "description": "Sets the opacity to use when drawing using the fill color or fill texture"
    },
    {
        "href": "imagickdraw.setfillcolor.php",
        "name": "ImagickDraw::setFillColor",
        "description": "Sets the fill color to be used for drawing filled objects"
    },
    {
        "href": "imagickdraw.setfillopacity.php",
        "name": "ImagickDraw::setFillOpacity",
        "description": "Sets the opacity to use when drawing using the fill color or fill texture"
    },
    {
        "href": "imagickdraw.setfillpatternurl.php",
        "name": "ImagickDraw::setFillPatternURL",
        "description": "Sets the URL to use as a fill pattern for filling objects"
    },
    {
        "href": "imagickdraw.setfillrule.php",
        "name": "ImagickDraw::setFillRule",
        "description": "Sets the fill rule to use while drawing polygons"
    },
    {
        "href": "imagickdraw.setfont.php",
        "name": "ImagickDraw::setFont",
        "description": "Sets the fully-specified font to use when annotating with text"
    },
    {
        "href": "imagickdraw.setfontfamily.php",
        "name": "ImagickDraw::setFontFamily",
        "description": "Sets the font family to use when annotating with text"
    },
    {
        "href": "imagickdraw.setfontsize.php",
        "name": "ImagickDraw::setFontSize",
        "description": "Sets the font pointsize to use when annotating with text"
    },
    {
        "href": "imagickdraw.setfontstretch.php",
        "name": "ImagickDraw::setFontStretch",
        "description": "Sets the font stretch to use when annotating with text"
    },
    {
        "href": "imagickdraw.setfontstyle.php",
        "name": "ImagickDraw::setFontStyle",
        "description": "Sets the font style to use when annotating with text"
    },
    {
        "href": "imagickdraw.setfontweight.php",
        "name": "ImagickDraw::setFontWeight",
        "description": "Sets the font weight"
    },
    {
        "href": "imagickdraw.setgravity.php",
        "name": "ImagickDraw::setGravity",
        "description": "Sets the text placement gravity"
    },
    {
        "href": "imagickdraw.setresolution.php",
        "name": "ImagickDraw::setResolution",
        "description": "Description"
    },
    {
        "href": "imagickdraw.setstrokealpha.php",
        "name": "ImagickDraw::setStrokeAlpha",
        "description": "Specifies the opacity of stroked object outlines"
    },
    {
        "href": "imagickdraw.setstrokeantialias.php",
        "name": "ImagickDraw::setStrokeAntialias",
        "description": "Controls whether stroked outlines are antialiased"
    },
    {
        "href": "imagickdraw.setstrokecolor.php",
        "name": "ImagickDraw::setStrokeColor",
        "description": "Sets the color used for stroking object outlines"
    },
    {
        "href": "imagickdraw.setstrokedasharray.php",
        "name": "ImagickDraw::setStrokeDashArray",
        "description": "Specifies the pattern of dashes and gaps used to stroke paths"
    },
    {
        "href": "imagickdraw.setstrokedashoffset.php",
        "name": "ImagickDraw::setStrokeDashOffset",
        "description": "Specifies the offset into the dash pattern to start the dash"
    },
    {
        "href": "imagickdraw.setstrokelinecap.php",
        "name": "ImagickDraw::setStrokeLineCap",
        "description": "Specifies the shape to be used at the end of open subpaths when they are stroked"
    },
    {
        "href": "imagickdraw.setstrokelinejoin.php",
        "name": "ImagickDraw::setStrokeLineJoin",
        "description": "Specifies the shape to be used at the corners of paths when they are stroked"
    },
    {
        "href": "imagickdraw.setstrokemiterlimit.php",
        "name": "ImagickDraw::setStrokeMiterLimit",
        "description": "Specifies the miter limit"
    },
    {
        "href": "imagickdraw.setstrokeopacity.php",
        "name": "ImagickDraw::setStrokeOpacity",
        "description": "Specifies the opacity of stroked object outlines"
    },
    {
        "href": "imagickdraw.setstrokepatternurl.php",
        "name": "ImagickDraw::setStrokePatternURL",
        "description": "Sets the pattern used for stroking object outlines"
    },
    {
        "href": "imagickdraw.setstrokewidth.php",
        "name": "ImagickDraw::setStrokeWidth",
        "description": "Sets the width of the stroke used to draw object outlines"
    },
    {
        "href": "imagickdraw.settextalignment.php",
        "name": "ImagickDraw::setTextAlignment",
        "description": "Specifies a text alignment"
    },
    {
        "href": "imagickdraw.settextantialias.php",
        "name": "ImagickDraw::setTextAntialias",
        "description": "Controls whether text is antialiased"
    },
    {
        "href": "imagickdraw.settextdecoration.php",
        "name": "ImagickDraw::setTextDecoration",
        "description": "Specifies a decoration"
    },
    {
        "href": "imagickdraw.settextencoding.php",
        "name": "ImagickDraw::setTextEncoding",
        "description": "Specifies the text code set"
    },
    {
        "href": "imagickdraw.settextinterlinespacing.php",
        "name": "ImagickDraw::setTextInterlineSpacing",
        "description": "Description"
    },
    {
        "href": "imagickdraw.settextinterwordspacing.php",
        "name": "ImagickDraw::setTextInterwordSpacing",
        "description": "Description"
    },
    {
        "href": "imagickdraw.settextkerning.php",
        "name": "ImagickDraw::setTextKerning",
        "description": "Description"
    },
    {
        "href": "imagickdraw.settextundercolor.php",
        "name": "ImagickDraw::setTextUnderColor",
        "description": "Specifies the color of a background rectangle"
    },
    {
        "href": "imagickdraw.setvectorgraphics.php",
        "name": "ImagickDraw::setVectorGraphics",
        "description": "Sets the vector graphics"
    },
    {
        "href": "imagickdraw.setviewbox.php",
        "name": "ImagickDraw::setViewbox",
        "description": "Sets the overall canvas size"
    },
    {
        "href": "imagickdraw.skewx.php",
        "name": "ImagickDraw::skewX",
        "description": "Skews the current coordinate system in the horizontal direction"
    },
    {
        "href": "imagickdraw.skewy.php",
        "name": "ImagickDraw::skewY",
        "description": "Skews the current coordinate system in the vertical direction"
    },
    {
        "href": "imagickdraw.translate.php",
        "name": "ImagickDraw::translate",
        "description": "Applies a translation to the current coordinate system"
    },
    {
        "href": "imagickdraw.construct.php",
        "name": "ImagickDraw::__construct",
        "description": "The ImagickDraw constructor"
    },
    {
        "href": "imagickkernel.addkernel.php",
        "name": "ImagickKernel::addKernel",
        "description": "Description"
    },
    {
        "href": "imagickkernel.addunitykernel.php",
        "name": "ImagickKernel::addUnityKernel",
        "description": "Description"
    },
    {
        "href": "imagickkernel.frombuiltin.php",
        "name": "ImagickKernel::fromBuiltIn",
        "description": "Description"
    },
    {
        "href": "imagickkernel.frommatrix.php",
        "name": "ImagickKernel::fromMatrix",
        "description": "Description"
    },
    {
        "href": "imagickkernel.getmatrix.php",
        "name": "ImagickKernel::getMatrix",
        "description": "Description"
    },
    {
        "href": "imagickkernel.scale.php",
        "name": "ImagickKernel::scale",
        "description": "Description"
    },
    {
        "href": "imagickkernel.separate.php",
        "name": "ImagickKernel::separate",
        "description": "Description"
    },
    {
        "href": "imagickpixel.clear.php",
        "name": "ImagickPixel::clear",
        "description": "Clears resources associated with this object"
    },
    {
        "href": "imagickpixel.destroy.php",
        "name": "ImagickPixel::destroy",
        "description": "Deallocates resources associated with this object"
    },
    {
        "href": "imagickpixel.getcolor.php",
        "name": "ImagickPixel::getColor",
        "description": "Returns the color"
    },
    {
        "href": "imagickpixel.getcolorasstring.php",
        "name": "ImagickPixel::getColorAsString",
        "description": "Returns the color as a string"
    },
    {
        "href": "imagickpixel.getcolorcount.php",
        "name": "ImagickPixel::getColorCount",
        "description": "Returns the color count associated with this color"
    },
    {
        "href": "imagickpixel.getcolorquantum.php",
        "name": "ImagickPixel::getColorQuantum",
        "description": "Description"
    },
    {
        "href": "imagickpixel.getcolorvalue.php",
        "name": "ImagickPixel::getColorValue",
        "description": "Gets the normalized value of the provided color channel"
    },
    {
        "href": "imagickpixel.getcolorvaluequantum.php",
        "name": "ImagickPixel::getColorValueQuantum",
        "description": "Description"
    },
    {
        "href": "imagickpixel.gethsl.php",
        "name": "ImagickPixel::getHSL",
        "description": "Returns the normalized HSL color of the ImagickPixel object"
    },
    {
        "href": "imagickpixel.getindex.php",
        "name": "ImagickPixel::getIndex",
        "description": "Description"
    },
    {
        "href": "imagickpixel.ispixelsimilar.php",
        "name": "ImagickPixel::isPixelSimilar",
        "description": "Check the distance between this color and another"
    },
    {
        "href": "imagickpixel.ispixelsimilarquantum.php",
        "name": "ImagickPixel::isPixelSimilarQuantum",
        "description": "Description"
    },
    {
        "href": "imagickpixel.issimilar.php",
        "name": "ImagickPixel::isSimilar",
        "description": "Check the distance between this color and another"
    },
    {
        "href": "imagickpixel.setcolor.php",
        "name": "ImagickPixel::setColor",
        "description": "Sets the color"
    },
    {
        "href": "imagickpixel.setcolorcount.php",
        "name": "ImagickPixel::setColorCount",
        "description": "Description"
    },
    {
        "href": "imagickpixel.setcolorvalue.php",
        "name": "ImagickPixel::setColorValue",
        "description": "Sets the normalized value of one of the channels"
    },
    {
        "href": "imagickpixel.setcolorvaluequantum.php",
        "name": "ImagickPixel::setColorValueQuantum",
        "description": "Description"
    },
    {
        "href": "imagickpixel.sethsl.php",
        "name": "ImagickPixel::setHSL",
        "description": "Sets the normalized HSL color"
    },
    {
        "href": "imagickpixel.setindex.php",
        "name": "ImagickPixel::setIndex",
        "description": "Description"
    },
    {
        "href": "imagickpixel.construct.php",
        "name": "ImagickPixel::__construct",
        "description": "The ImagickPixel constructor"
    },
    {
        "href": "imagickpixeliterator.clear.php",
        "name": "ImagickPixelIterator::clear",
        "description": "Clear resources associated with a PixelIterator"
    },
    {
        "href": "imagickpixeliterator.destroy.php",
        "name": "ImagickPixelIterator::destroy",
        "description": "Deallocates resources associated with a PixelIterator"
    },
    {
        "href": "imagickpixeliterator.getcurrentiteratorrow.php",
        "name": "ImagickPixelIterator::getCurrentIteratorRow",
        "description": "Returns the current row of ImagickPixel objects"
    },
    {
        "href": "imagickpixeliterator.getiteratorrow.php",
        "name": "ImagickPixelIterator::getIteratorRow",
        "description": "Returns the current pixel iterator row"
    },
    {
        "href": "imagickpixeliterator.getnextiteratorrow.php",
        "name": "ImagickPixelIterator::getNextIteratorRow",
        "description": "Returns the next row of the pixel iterator"
    },
    {
        "href": "imagickpixeliterator.getpreviousiteratorrow.php",
        "name": "ImagickPixelIterator::getPreviousIteratorRow",
        "description": "Returns the previous row"
    },
    {
        "href": "imagickpixeliterator.newpixeliterator.php",
        "name": "ImagickPixelIterator::newPixelIterator",
        "description": "Returns a new pixel iterator"
    },
    {
        "href": "imagickpixeliterator.newpixelregioniterator.php",
        "name": "ImagickPixelIterator::newPixelRegionIterator",
        "description": "Returns a new pixel iterator"
    },
    {
        "href": "imagickpixeliterator.resetiterator.php",
        "name": "ImagickPixelIterator::resetIterator",
        "description": "Resets the pixel iterator"
    },
    {
        "href": "imagickpixeliterator.setiteratorfirstrow.php",
        "name": "ImagickPixelIterator::setIteratorFirstRow",
        "description": "Sets the pixel iterator to the first pixel row"
    },
    {
        "href": "imagickpixeliterator.setiteratorlastrow.php",
        "name": "ImagickPixelIterator::setIteratorLastRow",
        "description": "Sets the pixel iterator to the last pixel row"
    },
    {
        "href": "imagickpixeliterator.setiteratorrow.php",
        "name": "ImagickPixelIterator::setIteratorRow",
        "description": "Set the pixel iterator row"
    },
    {
        "href": "imagickpixeliterator.synciterator.php",
        "name": "ImagickPixelIterator::syncIterator",
        "description": "Syncs the pixel iterator"
    },
    {
        "href": "imagickpixeliterator.construct.php",
        "name": "ImagickPixelIterator::__construct",
        "description": "The ImagickPixelIterator constructor"
    },
    {
        "href": "function.imap-8bit.php",
        "name": "imap_8bit",
        "description": "Convert an 8bit string to a quoted-printable string"
    },
    {
        "href": "function.imap-alerts.php",
        "name": "imap_alerts",
        "description": "Returns all IMAP alert messages that have occurred"
    },
    {
        "href": "function.imap-append.php",
        "name": "imap_append",
        "description": "Append a string message to a specified mailbox"
    },
    {
        "href": "function.imap-base64.php",
        "name": "imap_base64",
        "description": "Decode BASE64 encoded text"
    },
    {
        "href": "function.imap-binary.php",
        "name": "imap_binary",
        "description": "Convert an 8bit string to a base64 string"
    },
    {
        "href": "function.imap-body.php",
        "name": "imap_body",
        "description": "Read the message body"
    },
    {
        "href": "function.imap-bodystruct.php",
        "name": "imap_bodystruct",
        "description": "Read the structure of a specified body section of a specific message"
    },
    {
        "href": "function.imap-check.php",
        "name": "imap_check",
        "description": "Check current mailbox"
    },
    {
        "href": "function.imap-clearflag-full.php",
        "name": "imap_clearflag_full",
        "description": "Clears flags on messages"
    },
    {
        "href": "function.imap-close.php",
        "name": "imap_close",
        "description": "Close an IMAP stream"
    },
    {
        "href": "function.imap-create.php",
        "name": "imap_create",
        "description": "Alias of imap_createmailbox"
    },
    {
        "href": "function.imap-createmailbox.php",
        "name": "imap_createmailbox",
        "description": "Create a new mailbox"
    },
    {
        "href": "function.imap-delete.php",
        "name": "imap_delete",
        "description": "Mark a message for deletion from current mailbox"
    },
    {
        "href": "function.imap-deletemailbox.php",
        "name": "imap_deletemailbox",
        "description": "Delete a mailbox"
    },
    {
        "href": "function.imap-errors.php",
        "name": "imap_errors",
        "description": "Returns all of the IMAP errors that have occurred"
    },
    {
        "href": "function.imap-expunge.php",
        "name": "imap_expunge",
        "description": "Delete all messages marked for deletion"
    },
    {
        "href": "function.imap-fetchbody.php",
        "name": "imap_fetchbody",
        "description": "Fetch a particular section of the body of the message"
    },
    {
        "href": "function.imap-fetchheader.php",
        "name": "imap_fetchheader",
        "description": "Returns header for a message"
    },
    {
        "href": "function.imap-fetchmime.php",
        "name": "imap_fetchmime",
        "description": "Fetch MIME headers for a particular section of the message"
    },
    {
        "href": "function.imap-fetchstructure.php",
        "name": "imap_fetchstructure",
        "description": "Read the structure of a particular message"
    },
    {
        "href": "function.imap-fetchtext.php",
        "name": "imap_fetchtext",
        "description": "Alias of imap_body"
    },
    {
        "href": "function.imap-fetch-overview.php",
        "name": "imap_fetch_overview",
        "description": "Read an overview of the information in the headers of the given message"
    },
    {
        "href": "function.imap-gc.php",
        "name": "imap_gc",
        "description": "Clears IMAP cache"
    },
    {
        "href": "function.imap-getacl.php",
        "name": "imap_getacl",
        "description": "Gets the ACL for a given mailbox"
    },
    {
        "href": "function.imap-getmailboxes.php",
        "name": "imap_getmailboxes",
        "description": "Read the list of mailboxes, returning detailed information on each one"
    },
    {
        "href": "function.imap-getsubscribed.php",
        "name": "imap_getsubscribed",
        "description": "List all the subscribed mailboxes"
    },
    {
        "href": "function.imap-get-quota.php",
        "name": "imap_get_quota",
        "description": "Retrieve the quota level settings, and usage statics per mailbox"
    },
    {
        "href": "function.imap-get-quotaroot.php",
        "name": "imap_get_quotaroot",
        "description": "Retrieve the quota settings per user"
    },
    {
        "href": "function.imap-header.php",
        "name": "imap_header",
        "description": "Alias of imap_headerinfo"
    },
    {
        "href": "function.imap-headerinfo.php",
        "name": "imap_headerinfo",
        "description": "Read the header of the message"
    },
    {
        "href": "function.imap-headers.php",
        "name": "imap_headers",
        "description": "Returns headers for all messages in a mailbox"
    },
    {
        "href": "function.imap-last-error.php",
        "name": "imap_last_error",
        "description": "Gets the last IMAP error that occurred during this page request"
    },
    {
        "href": "function.imap-list.php",
        "name": "imap_list",
        "description": "Read the list of mailboxes"
    },
    {
        "href": "function.imap-listmailbox.php",
        "name": "imap_listmailbox",
        "description": "Alias of imap_list"
    },
    {
        "href": "function.imap-listscan.php",
        "name": "imap_listscan",
        "description": "Returns the list of mailboxes that matches the given text"
    },
    {
        "href": "function.imap-listsubscribed.php",
        "name": "imap_listsubscribed",
        "description": "Alias of imap_lsub"
    },
    {
        "href": "function.imap-lsub.php",
        "name": "imap_lsub",
        "description": "List all the subscribed mailboxes"
    },
    {
        "href": "function.imap-mail.php",
        "name": "imap_mail",
        "description": "Send an email message"
    },
    {
        "href": "function.imap-mailboxmsginfo.php",
        "name": "imap_mailboxmsginfo",
        "description": "Get information about the current mailbox"
    },
    {
        "href": "function.imap-mail-compose.php",
        "name": "imap_mail_compose",
        "description": "Create a MIME message based on given envelope and body sections"
    },
    {
        "href": "function.imap-mail-copy.php",
        "name": "imap_mail_copy",
        "description": "Copy specified messages to a mailbox"
    },
    {
        "href": "function.imap-mail-move.php",
        "name": "imap_mail_move",
        "description": "Move specified messages to a mailbox"
    },
    {
        "href": "function.imap-mime-header-decode.php",
        "name": "imap_mime_header_decode",
        "description": "Decode MIME header elements"
    },
    {
        "href": "function.imap-msgno.php",
        "name": "imap_msgno",
        "description": "Gets the message sequence number for the given UID"
    },
    {
        "href": "function.imap-mutf7-to-utf8.php",
        "name": "imap_mutf7_to_utf8",
        "description": "Decode a modified UTF-7 string to UTF-8"
    },
    {
        "href": "function.imap-num-msg.php",
        "name": "imap_num_msg",
        "description": "Gets the number of messages in the current mailbox"
    },
    {
        "href": "function.imap-num-recent.php",
        "name": "imap_num_recent",
        "description": "Gets the number of recent messages in current mailbox"
    },
    {
        "href": "function.imap-open.php",
        "name": "imap_open",
        "description": "Open an IMAP stream to a mailbox"
    },
    {
        "href": "function.imap-ping.php",
        "name": "imap_ping",
        "description": "Check if the IMAP stream is still active"
    },
    {
        "href": "function.imap-qprint.php",
        "name": "imap_qprint",
        "description": "Convert a quoted-printable string to an 8 bit string"
    },
    {
        "href": "function.imap-rename.php",
        "name": "imap_rename",
        "description": "Alias of imap_renamemailbox"
    },
    {
        "href": "function.imap-renamemailbox.php",
        "name": "imap_renamemailbox",
        "description": "Rename an old mailbox to new mailbox"
    },
    {
        "href": "function.imap-reopen.php",
        "name": "imap_reopen",
        "description": "Reopen IMAP stream to new mailbox"
    },
    {
        "href": "function.imap-rfc822-parse-adrlist.php",
        "name": "imap_rfc822_parse_adrlist",
        "description": "Parses an address string"
    },
    {
        "href": "function.imap-rfc822-parse-headers.php",
        "name": "imap_rfc822_parse_headers",
        "description": "Parse mail headers from a string"
    },
    {
        "href": "function.imap-rfc822-write-address.php",
        "name": "imap_rfc822_write_address",
        "description": "Returns a properly formatted email address given the mailbox, host, and personal info"
    },
    {
        "href": "function.imap-savebody.php",
        "name": "imap_savebody",
        "description": "Save a specific body section to a file"
    },
    {
        "href": "function.imap-scan.php",
        "name": "imap_scan",
        "description": "Alias of imap_listscan"
    },
    {
        "href": "function.imap-scanmailbox.php",
        "name": "imap_scanmailbox",
        "description": "Alias of imap_listscan"
    },
    {
        "href": "function.imap-search.php",
        "name": "imap_search",
        "description": "This function returns an array of messages matching the given search criteria"
    },
    {
        "href": "function.imap-setacl.php",
        "name": "imap_setacl",
        "description": "Sets the ACL for a given mailbox"
    },
    {
        "href": "function.imap-setflag-full.php",
        "name": "imap_setflag_full",
        "description": "Sets flags on messages"
    },
    {
        "href": "function.imap-set-quota.php",
        "name": "imap_set_quota",
        "description": "Sets a quota for a given mailbox"
    },
    {
        "href": "function.imap-sort.php",
        "name": "imap_sort",
        "description": "Gets and sort messages"
    },
    {
        "href": "function.imap-status.php",
        "name": "imap_status",
        "description": "Returns status information on a mailbox"
    },
    {
        "href": "function.imap-subscribe.php",
        "name": "imap_subscribe",
        "description": "Subscribe to a mailbox"
    },
    {
        "href": "function.imap-thread.php",
        "name": "imap_thread",
        "description": "Returns a tree of threaded message"
    },
    {
        "href": "function.imap-timeout.php",
        "name": "imap_timeout",
        "description": "Set or fetch imap timeout"
    },
    {
        "href": "function.imap-uid.php",
        "name": "imap_uid",
        "description": "This function returns the UID for the given message sequence number"
    },
    {
        "href": "function.imap-undelete.php",
        "name": "imap_undelete",
        "description": "Unmark the message which is marked deleted"
    },
    {
        "href": "function.imap-unsubscribe.php",
        "name": "imap_unsubscribe",
        "description": "Unsubscribe from a mailbox"
    },
    {
        "href": "function.imap-utf7-decode.php",
        "name": "imap_utf7_decode",
        "description": "Decodes a modified UTF-7 encoded string"
    },
    {
        "href": "function.imap-utf7-encode.php",
        "name": "imap_utf7_encode",
        "description": "Converts ISO-8859-1 string to modified UTF-7 text"
    },
    {
        "href": "function.imap-utf8.php",
        "name": "imap_utf8",
        "description": "Converts MIME-encoded text to UTF-8"
    },
    {
        "href": "function.imap-utf8-to-mutf7.php",
        "name": "imap_utf8_to_mutf7",
        "description": "Encode a UTF-8 string to modified UTF-7"
    },
    {
        "href": "function.implode.php",
        "name": "implode",
        "description": "Join array elements with a string"
    },
    {
        "href": "function.inet-ntop.php",
        "name": "inet_ntop",
        "description": "Converts a packed internet address to a human readable representation"
    },
    {
        "href": "function.inet-pton.php",
        "name": "inet_pton",
        "description": "Converts a human readable IP address to its packed in_addr representation"
    },
    {
        "href": "infiniteiterator.next.php",
        "name": "InfiniteIterator::next",
        "description": "Moves the inner Iterator forward or rewinds it"
    },
    {
        "href": "infiniteiterator.construct.php",
        "name": "InfiniteIterator::__construct",
        "description": "Constructs an InfiniteIterator"
    },
    {
        "href": "function.inflate-add.php",
        "name": "inflate_add",
        "description": "Incrementally inflate encoded data"
    },
    {
        "href": "function.inflate-get-read-len.php",
        "name": "inflate_get_read_len",
        "description": "Get number of bytes read so far"
    },
    {
        "href": "function.inflate-get-status.php",
        "name": "inflate_get_status",
        "description": "Get decompression status"
    },
    {
        "href": "function.inflate-init.php",
        "name": "inflate_init",
        "description": "Initialize an incremental inflate context"
    },
    {
        "href": "function.ini-alter.php",
        "name": "ini_alter",
        "description": "Alias of ini_set"
    },
    {
        "href": "function.ini-get.php",
        "name": "ini_get",
        "description": "Gets the value of a configuration option"
    },
    {
        "href": "function.ini-get-all.php",
        "name": "ini_get_all",
        "description": "Gets all configuration options"
    },
    {
        "href": "function.ini-restore.php",
        "name": "ini_restore",
        "description": "Restores the value of a configuration option"
    },
    {
        "href": "function.ini-set.php",
        "name": "ini_set",
        "description": "Sets the value of a configuration option"
    },
    {
        "href": "function.inotify-add-watch.php",
        "name": "inotify_add_watch",
        "description": "Add a watch to an initialized inotify instance"
    },
    {
        "href": "function.inotify-init.php",
        "name": "inotify_init",
        "description": "Initialize an inotify instance"
    },
    {
        "href": "function.inotify-queue-len.php",
        "name": "inotify_queue_len",
        "description": "Return a number upper than zero if there are pending events"
    },
    {
        "href": "function.inotify-read.php",
        "name": "inotify_read",
        "description": "Read events from an inotify instance"
    },
    {
        "href": "function.inotify-rm-watch.php",
        "name": "inotify_rm_watch",
        "description": "Remove an existing watch from an inotify instance"
    },
    {
        "href": "function.intdiv.php",
        "name": "intdiv",
        "description": "Integer division"
    },
    {
        "href": "function.interface-exists.php",
        "name": "interface_exists",
        "description": "Checks if the interface has been defined"
    },
    {
        "href": "intlbreakiterator.createcharacterinstance.php",
        "name": "IntlBreakIterator::createCharacterInstance",
        "description": "Create break iterator for boundaries of combining character sequences"
    },
    {
        "href": "intlbreakiterator.createcodepointinstance.php",
        "name": "IntlBreakIterator::createCodePointInstance",
        "description": "Create break iterator for boundaries of code points"
    },
    {
        "href": "intlbreakiterator.createlineinstance.php",
        "name": "IntlBreakIterator::createLineInstance",
        "description": "Create break iterator for logically possible line breaks"
    },
    {
        "href": "intlbreakiterator.createsentenceinstance.php",
        "name": "IntlBreakIterator::createSentenceInstance",
        "description": "Create break iterator for sentence breaks"
    },
    {
        "href": "intlbreakiterator.createtitleinstance.php",
        "name": "IntlBreakIterator::createTitleInstance",
        "description": "Create break iterator for title-casing breaks"
    },
    {
        "href": "intlbreakiterator.createwordinstance.php",
        "name": "IntlBreakIterator::createWordInstance",
        "description": "Create break iterator for word breaks"
    },
    {
        "href": "intlbreakiterator.current.php",
        "name": "IntlBreakIterator::current",
        "description": "Get index of current position"
    },
    {
        "href": "intlbreakiterator.first.php",
        "name": "IntlBreakIterator::first",
        "description": "Set position to the first character in the text"
    },
    {
        "href": "intlbreakiterator.following.php",
        "name": "IntlBreakIterator::following",
        "description": "Advance the iterator to the first boundary following specified offset"
    },
    {
        "href": "intlbreakiterator.geterrorcode.php",
        "name": "IntlBreakIterator::getErrorCode",
        "description": "Get last error code on the object"
    },
    {
        "href": "intlbreakiterator.geterrormessage.php",
        "name": "IntlBreakIterator::getErrorMessage",
        "description": "Get last error message on the object"
    },
    {
        "href": "intlbreakiterator.getlocale.php",
        "name": "IntlBreakIterator::getLocale",
        "description": "Get the locale associated with the object"
    },
    {
        "href": "intlbreakiterator.getpartsiterator.php",
        "name": "IntlBreakIterator::getPartsIterator",
        "description": "Create iterator for navigating fragments between boundaries"
    },
    {
        "href": "intlbreakiterator.gettext.php",
        "name": "IntlBreakIterator::getText",
        "description": "Get the text being scanned"
    },
    {
        "href": "intlbreakiterator.isboundary.php",
        "name": "IntlBreakIterator::isBoundary",
        "description": "Tell whether an offset is a boundaryʼs offset"
    },
    {
        "href": "intlbreakiterator.last.php",
        "name": "IntlBreakIterator::last",
        "description": "Set the iterator position to index beyond the last character"
    },
    {
        "href": "intlbreakiterator.next.php",
        "name": "IntlBreakIterator::next",
        "description": "Advance the iterator the next boundary"
    },
    {
        "href": "intlbreakiterator.preceding.php",
        "name": "IntlBreakIterator::preceding",
        "description": "Set the iterator position to the first boundary before an offset"
    },
    {
        "href": "intlbreakiterator.previous.php",
        "name": "IntlBreakIterator::previous",
        "description": "Set the iterator position to the boundary immediately before the current"
    },
    {
        "href": "intlbreakiterator.settext.php",
        "name": "IntlBreakIterator::setText",
        "description": "Set the text being scanned"
    },
    {
        "href": "intlbreakiterator.construct.php",
        "name": "IntlBreakIterator::__construct",
        "description": "Private constructor for disallowing instantiation"
    },
    {
        "href": "intlcalendar.add.php",
        "name": "IntlCalendar::add",
        "description": "Add a (signed) amount of time to a field"
    },
    {
        "href": "intlcalendar.after.php",
        "name": "IntlCalendar::after",
        "description": "Whether this objectʼs time is after that of the passed object"
    },
    {
        "href": "intlcalendar.before.php",
        "name": "IntlCalendar::before",
        "description": "Whether this objectʼs time is before that of the passed object"
    },
    {
        "href": "intlcalendar.clear.php",
        "name": "IntlCalendar::clear",
        "description": "Clear a field or all fields"
    },
    {
        "href": "intlcalendar.createinstance.php",
        "name": "IntlCalendar::createInstance",
        "description": "Create a new IntlCalendar"
    },
    {
        "href": "intlcalendar.equals.php",
        "name": "IntlCalendar::equals",
        "description": "Compare time of two IntlCalendar objects for equality"
    },
    {
        "href": "intlcalendar.fielddifference.php",
        "name": "IntlCalendar::fieldDifference",
        "description": "Calculate difference between given time and this objectʼs time"
    },
    {
        "href": "intlcalendar.fromdatetime.php",
        "name": "IntlCalendar::fromDateTime",
        "description": "Create an IntlCalendar from a DateTime object or string"
    },
    {
        "href": "intlcalendar.get.php",
        "name": "IntlCalendar::get",
        "description": "Get the value for a field"
    },
    {
        "href": "intlcalendar.getactualmaximum.php",
        "name": "IntlCalendar::getActualMaximum",
        "description": "The maximum value for a field, considering the objectʼs current time"
    },
    {
        "href": "intlcalendar.getactualminimum.php",
        "name": "IntlCalendar::getActualMinimum",
        "description": "The minimum value for a field, considering the objectʼs current time"
    },
    {
        "href": "intlcalendar.getavailablelocales.php",
        "name": "IntlCalendar::getAvailableLocales",
        "description": "Get array of locales for which there is data"
    },
    {
        "href": "intlcalendar.getdayofweektype.php",
        "name": "IntlCalendar::getDayOfWeekType",
        "description": "Tell whether a day is a weekday, weekend or a day that has a transition between the two"
    },
    {
        "href": "intlcalendar.geterrorcode.php",
        "name": "IntlCalendar::getErrorCode",
        "description": "Get last error code on the object"
    },
    {
        "href": "intlcalendar.geterrormessage.php",
        "name": "IntlCalendar::getErrorMessage",
        "description": "Get last error message on the object"
    },
    {
        "href": "intlcalendar.getfirstdayofweek.php",
        "name": "IntlCalendar::getFirstDayOfWeek",
        "description": "Get the first day of the week for the calendarʼs locale"
    },
    {
        "href": "intlcalendar.getgreatestminimum.php",
        "name": "IntlCalendar::getGreatestMinimum",
        "description": "Get the largest local minimum value for a field"
    },
    {
        "href": "intlcalendar.getkeywordvaluesforlocale.php",
        "name": "IntlCalendar::getKeywordValuesForLocale",
        "description": "Get set of locale keyword values"
    },
    {
        "href": "intlcalendar.getleastmaximum.php",
        "name": "IntlCalendar::getLeastMaximum",
        "description": "Get the smallest local maximum for a field"
    },
    {
        "href": "intlcalendar.getlocale.php",
        "name": "IntlCalendar::getLocale",
        "description": "Get the locale associated with the object"
    },
    {
        "href": "intlcalendar.getmaximum.php",
        "name": "IntlCalendar::getMaximum",
        "description": "Get the global maximum value for a field"
    },
    {
        "href": "intlcalendar.getminimaldaysinfirstweek.php",
        "name": "IntlCalendar::getMinimalDaysInFirstWeek",
        "description": "Get minimal number of days the first week in a year or month can have"
    },
    {
        "href": "intlcalendar.getminimum.php",
        "name": "IntlCalendar::getMinimum",
        "description": "Get the global minimum value for a field"
    },
    {
        "href": "intlcalendar.getnow.php",
        "name": "IntlCalendar::getNow",
        "description": "Get number representing the current time"
    },
    {
        "href": "intlcalendar.getrepeatedwalltimeoption.php",
        "name": "IntlCalendar::getRepeatedWallTimeOption",
        "description": "Get behavior for handling repeating wall time"
    },
    {
        "href": "intlcalendar.getskippedwalltimeoption.php",
        "name": "IntlCalendar::getSkippedWallTimeOption",
        "description": "Get behavior for handling skipped wall time"
    },
    {
        "href": "intlcalendar.gettime.php",
        "name": "IntlCalendar::getTime",
        "description": "Get time currently represented by the object"
    },
    {
        "href": "intlcalendar.gettimezone.php",
        "name": "IntlCalendar::getTimeZone",
        "description": "Get the objectʼs timezone"
    },
    {
        "href": "intlcalendar.gettype.php",
        "name": "IntlCalendar::getType",
        "description": "Get the calendar type"
    },
    {
        "href": "intlcalendar.getweekendtransition.php",
        "name": "IntlCalendar::getWeekendTransition",
        "description": "Get time of the day at which weekend begins or ends"
    },
    {
        "href": "intlcalendar.indaylighttime.php",
        "name": "IntlCalendar::inDaylightTime",
        "description": "Whether the objectʼs time is in Daylight Savings Time"
    },
    {
        "href": "intlcalendar.isequivalentto.php",
        "name": "IntlCalendar::isEquivalentTo",
        "description": "Whether another calendar is equal but for a different time"
    },
    {
        "href": "intlcalendar.islenient.php",
        "name": "IntlCalendar::isLenient",
        "description": "Whether date/time interpretation is in lenient mode"
    },
    {
        "href": "intlcalendar.isset.php",
        "name": "IntlCalendar::isSet",
        "description": "Whether a field is set"
    },
    {
        "href": "intlcalendar.isweekend.php",
        "name": "IntlCalendar::isWeekend",
        "description": "Whether a certain date/time is in the weekend"
    },
    {
        "href": "intlcalendar.roll.php",
        "name": "IntlCalendar::roll",
        "description": "Add value to field without carrying into more significant fields"
    },
    {
        "href": "intlcalendar.set.php",
        "name": "IntlCalendar::set",
        "description": "Set a time field or several common fields at once"
    },
    {
        "href": "intlcalendar.setfirstdayofweek.php",
        "name": "IntlCalendar::setFirstDayOfWeek",
        "description": "Set the day on which the week is deemed to start"
    },
    {
        "href": "intlcalendar.setlenient.php",
        "name": "IntlCalendar::setLenient",
        "description": "Set whether date/time interpretation is to be lenient"
    },
    {
        "href": "intlcalendar.setminimaldaysinfirstweek.php",
        "name": "IntlCalendar::setMinimalDaysInFirstWeek",
        "description": "Set minimal number of days the first week in a year or month can have"
    },
    {
        "href": "intlcalendar.setrepeatedwalltimeoption.php",
        "name": "IntlCalendar::setRepeatedWallTimeOption",
        "description": "Set behavior for handling repeating wall times at negative timezone offset transitions"
    },
    {
        "href": "intlcalendar.setskippedwalltimeoption.php",
        "name": "IntlCalendar::setSkippedWallTimeOption",
        "description": "Set behavior for handling skipped wall times at positive timezone offset transitions"
    },
    {
        "href": "intlcalendar.settime.php",
        "name": "IntlCalendar::setTime",
        "description": "Set the calendar time in milliseconds since the epoch"
    },
    {
        "href": "intlcalendar.settimezone.php",
        "name": "IntlCalendar::setTimeZone",
        "description": "Set the timezone used by this calendar"
    },
    {
        "href": "intlcalendar.todatetime.php",
        "name": "IntlCalendar::toDateTime",
        "description": "Convert an IntlCalendar into a DateTime object"
    },
    {
        "href": "intlcalendar.construct.php",
        "name": "IntlCalendar::__construct",
        "description": "Private constructor for disallowing instantiation"
    },
    {
        "href": "intlchar.charage.php",
        "name": "IntlChar::charAge",
        "description": "Get the \"age\" of the code point"
    },
    {
        "href": "intlchar.chardigitvalue.php",
        "name": "IntlChar::charDigitValue",
        "description": "Get the decimal digit value of a decimal digit character"
    },
    {
        "href": "intlchar.chardirection.php",
        "name": "IntlChar::charDirection",
        "description": "Get bidirectional category value for a code point"
    },
    {
        "href": "intlchar.charfromname.php",
        "name": "IntlChar::charFromName",
        "description": "Find Unicode character by name and return its code point value"
    },
    {
        "href": "intlchar.charmirror.php",
        "name": "IntlChar::charMirror",
        "description": "Get the \"mirror-image\" character for a code point"
    },
    {
        "href": "intlchar.charname.php",
        "name": "IntlChar::charName",
        "description": "Retrieve the name of a Unicode character"
    },
    {
        "href": "intlchar.chartype.php",
        "name": "IntlChar::charType",
        "description": "Get the general category value for a code point"
    },
    {
        "href": "intlchar.chr.php",
        "name": "IntlChar::chr",
        "description": "Return Unicode character by code point value"
    },
    {
        "href": "intlchar.digit.php",
        "name": "IntlChar::digit",
        "description": "Get the decimal digit value of a code point for a given radix"
    },
    {
        "href": "intlchar.enumcharnames.php",
        "name": "IntlChar::enumCharNames",
        "description": "Enumerate all assigned Unicode characters within a range"
    },
    {
        "href": "intlchar.enumchartypes.php",
        "name": "IntlChar::enumCharTypes",
        "description": "Enumerate all code points with their Unicode general categories"
    },
    {
        "href": "intlchar.foldcase.php",
        "name": "IntlChar::foldCase",
        "description": "Perform case folding on a code point"
    },
    {
        "href": "intlchar.fordigit.php",
        "name": "IntlChar::forDigit",
        "description": "Get character representation for a given digit and radix"
    },
    {
        "href": "intlchar.getbidipairedbracket.php",
        "name": "IntlChar::getBidiPairedBracket",
        "description": "Get the paired bracket character for a code point"
    },
    {
        "href": "intlchar.getblockcode.php",
        "name": "IntlChar::getBlockCode",
        "description": "Get the Unicode allocation block containing a code point"
    },
    {
        "href": "intlchar.getcombiningclass.php",
        "name": "IntlChar::getCombiningClass",
        "description": "Get the combining class of a code point"
    },
    {
        "href": "intlchar.getfc-nfkc-closure.php",
        "name": "IntlChar::getFC_NFKC_Closure",
        "description": "Get the FC_NFKC_Closure property for a code point"
    },
    {
        "href": "intlchar.getintpropertymaxvalue.php",
        "name": "IntlChar::getIntPropertyMaxValue",
        "description": "Get the max value for a Unicode property"
    },
    {
        "href": "intlchar.getintpropertyminvalue.php",
        "name": "IntlChar::getIntPropertyMinValue",
        "description": "Get the min value for a Unicode property"
    },
    {
        "href": "intlchar.getintpropertyvalue.php",
        "name": "IntlChar::getIntPropertyValue",
        "description": "Get the value for a Unicode property for a code point"
    },
    {
        "href": "intlchar.getnumericvalue.php",
        "name": "IntlChar::getNumericValue",
        "description": "Get the numeric value for a Unicode code point"
    },
    {
        "href": "intlchar.getpropertyenum.php",
        "name": "IntlChar::getPropertyEnum",
        "description": "Get the property constant value for a given property name"
    },
    {
        "href": "intlchar.getpropertyname.php",
        "name": "IntlChar::getPropertyName",
        "description": "Get the Unicode name for a property"
    },
    {
        "href": "intlchar.getpropertyvalueenum.php",
        "name": "IntlChar::getPropertyValueEnum",
        "description": "Get the property value for a given value name"
    },
    {
        "href": "intlchar.getpropertyvaluename.php",
        "name": "IntlChar::getPropertyValueName",
        "description": "Get the Unicode name for a property value"
    },
    {
        "href": "intlchar.getunicodeversion.php",
        "name": "IntlChar::getUnicodeVersion",
        "description": "Get the Unicode version"
    },
    {
        "href": "intlchar.hasbinaryproperty.php",
        "name": "IntlChar::hasBinaryProperty",
        "description": "Check a binary Unicode property for a code point"
    },
    {
        "href": "intlchar.isalnum.php",
        "name": "IntlChar::isalnum",
        "description": "Check if code point is an alphanumeric character"
    },
    {
        "href": "intlchar.isalpha.php",
        "name": "IntlChar::isalpha",
        "description": "Check if code point is a letter character"
    },
    {
        "href": "intlchar.isbase.php",
        "name": "IntlChar::isbase",
        "description": "Check if code point is a base character"
    },
    {
        "href": "intlchar.isblank.php",
        "name": "IntlChar::isblank",
        "description": "Check if code point is a \"blank\" or \"horizontal space\" character"
    },
    {
        "href": "intlchar.iscntrl.php",
        "name": "IntlChar::iscntrl",
        "description": "Check if code point is a control character"
    },
    {
        "href": "intlchar.isdefined.php",
        "name": "IntlChar::isdefined",
        "description": "Check whether the code point is defined"
    },
    {
        "href": "intlchar.isdigit.php",
        "name": "IntlChar::isdigit",
        "description": "Check if code point is a digit character"
    },
    {
        "href": "intlchar.isgraph.php",
        "name": "IntlChar::isgraph",
        "description": "Check if code point is a graphic character"
    },
    {
        "href": "intlchar.isidignorable.php",
        "name": "IntlChar::isIDIgnorable",
        "description": "Check if code point is an ignorable character"
    },
    {
        "href": "intlchar.isidpart.php",
        "name": "IntlChar::isIDPart",
        "description": "Check if code point is permissible in an identifier"
    },
    {
        "href": "intlchar.isidstart.php",
        "name": "IntlChar::isIDStart",
        "description": "Check if code point is permissible as the first character in an identifier"
    },
    {
        "href": "intlchar.isisocontrol.php",
        "name": "IntlChar::isISOControl",
        "description": "Check if code point is an ISO control code"
    },
    {
        "href": "intlchar.isjavaidpart.php",
        "name": "IntlChar::isJavaIDPart",
        "description": "Check if code point is permissible in a Java identifier"
    },
    {
        "href": "intlchar.isjavaidstart.php",
        "name": "IntlChar::isJavaIDStart",
        "description": "Check if code point is permissible as the first character in a Java identifier"
    },
    {
        "href": "intlchar.isjavaspacechar.php",
        "name": "IntlChar::isJavaSpaceChar",
        "description": "Check if code point is a space character according to Java"
    },
    {
        "href": "intlchar.islower.php",
        "name": "IntlChar::islower",
        "description": "Check if code point is a lowercase letter"
    },
    {
        "href": "intlchar.ismirrored.php",
        "name": "IntlChar::isMirrored",
        "description": "Check if code point has the Bidi_Mirrored property"
    },
    {
        "href": "intlchar.isprint.php",
        "name": "IntlChar::isprint",
        "description": "Check if code point is a printable character"
    },
    {
        "href": "intlchar.ispunct.php",
        "name": "IntlChar::ispunct",
        "description": "Check if code point is punctuation character"
    },
    {
        "href": "intlchar.isspace.php",
        "name": "IntlChar::isspace",
        "description": "Check if code point is a space character"
    },
    {
        "href": "intlchar.istitle.php",
        "name": "IntlChar::istitle",
        "description": "Check if code point is a titlecase letter"
    },
    {
        "href": "intlchar.isualphabetic.php",
        "name": "IntlChar::isUAlphabetic",
        "description": "Check if code point has the Alphabetic Unicode property"
    },
    {
        "href": "intlchar.isulowercase.php",
        "name": "IntlChar::isULowercase",
        "description": "Check if code point has the Lowercase Unicode property"
    },
    {
        "href": "intlchar.isupper.php",
        "name": "IntlChar::isupper",
        "description": "Check if code point has the general category \"Lu\" (uppercase letter)"
    },
    {
        "href": "intlchar.isuuppercase.php",
        "name": "IntlChar::isUUppercase",
        "description": "Check if code point has the Uppercase Unicode property"
    },
    {
        "href": "intlchar.isuwhitespace.php",
        "name": "IntlChar::isUWhiteSpace",
        "description": "Check if code point has the White_Space Unicode property"
    },
    {
        "href": "intlchar.iswhitespace.php",
        "name": "IntlChar::isWhitespace",
        "description": "Check if code point is a whitespace character according to ICU"
    },
    {
        "href": "intlchar.isxdigit.php",
        "name": "IntlChar::isxdigit",
        "description": "Check if code point is a hexadecimal digit"
    },
    {
        "href": "intlchar.ord.php",
        "name": "IntlChar::ord",
        "description": "Return Unicode code point value of character"
    },
    {
        "href": "intlchar.tolower.php",
        "name": "IntlChar::tolower",
        "description": "Make Unicode character lowercase"
    },
    {
        "href": "intlchar.totitle.php",
        "name": "IntlChar::totitle",
        "description": "Make Unicode character titlecase"
    },
    {
        "href": "intlchar.toupper.php",
        "name": "IntlChar::toupper",
        "description": "Make Unicode character uppercase"
    },
    {
        "href": "intlcodepointbreakiterator.getlastcodepoint.php",
        "name": "IntlCodePointBreakIterator::getLastCodePoint",
        "description": "Get last code point passed over after advancing or receding the iterator"
    },
    {
        "href": "intldateformatter.create.php",
        "name": "IntlDateFormatter::create",
        "description": "Create a date formatter"
    },
    {
        "href": "intldateformatter.format.php",
        "name": "IntlDateFormatter::format",
        "description": "Format the date/time value as a string"
    },
    {
        "href": "intldateformatter.formatobject.php",
        "name": "IntlDateFormatter::formatObject",
        "description": "Formats an object"
    },
    {
        "href": "intldateformatter.getcalendar.php",
        "name": "IntlDateFormatter::getCalendar",
        "description": "Get the calendar type used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.getcalendarobject.php",
        "name": "IntlDateFormatter::getCalendarObject",
        "description": "Get copy of formatterʼs calendar object"
    },
    {
        "href": "intldateformatter.getdatetype.php",
        "name": "IntlDateFormatter::getDateType",
        "description": "Get the datetype used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.geterrorcode.php",
        "name": "IntlDateFormatter::getErrorCode",
        "description": "Get the error code from last operation"
    },
    {
        "href": "intldateformatter.geterrormessage.php",
        "name": "IntlDateFormatter::getErrorMessage",
        "description": "Get the error text from the last operation"
    },
    {
        "href": "intldateformatter.getlocale.php",
        "name": "IntlDateFormatter::getLocale",
        "description": "Get the locale used by formatter"
    },
    {
        "href": "intldateformatter.getpattern.php",
        "name": "IntlDateFormatter::getPattern",
        "description": "Get the pattern used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.gettimetype.php",
        "name": "IntlDateFormatter::getTimeType",
        "description": "Get the timetype used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.gettimezone.php",
        "name": "IntlDateFormatter::getTimeZone",
        "description": "Get formatterʼs timezone"
    },
    {
        "href": "intldateformatter.gettimezoneid.php",
        "name": "IntlDateFormatter::getTimeZoneId",
        "description": "Get the timezone-id used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.islenient.php",
        "name": "IntlDateFormatter::isLenient",
        "description": "Get the lenient used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.localtime.php",
        "name": "IntlDateFormatter::localtime",
        "description": "Parse string to a field-based time value"
    },
    {
        "href": "intldateformatter.parse.php",
        "name": "IntlDateFormatter::parse",
        "description": "Parse string to a timestamp value"
    },
    {
        "href": "intldateformatter.setcalendar.php",
        "name": "IntlDateFormatter::setCalendar",
        "description": "Sets the calendar type used by the formatter"
    },
    {
        "href": "intldateformatter.setlenient.php",
        "name": "IntlDateFormatter::setLenient",
        "description": "Set the leniency of the parser"
    },
    {
        "href": "intldateformatter.setpattern.php",
        "name": "IntlDateFormatter::setPattern",
        "description": "Set the pattern used for the IntlDateFormatter"
    },
    {
        "href": "intldateformatter.settimezone.php",
        "name": "IntlDateFormatter::setTimeZone",
        "description": "Sets formatterʼs timezone"
    },
    {
        "href": "intlgregoriancalendar.getgregorianchange.php",
        "name": "IntlGregorianCalendar::getGregorianChange",
        "description": "Get the Gregorian Calendar change date"
    },
    {
        "href": "intlgregoriancalendar.isleapyear.php",
        "name": "IntlGregorianCalendar::isLeapYear",
        "description": "Determine if the given year is a leap year"
    },
    {
        "href": "intlgregoriancalendar.setgregorianchange.php",
        "name": "IntlGregorianCalendar::setGregorianChange",
        "description": "Set the Gregorian Calendar the change date"
    },
    {
        "href": "intlgregoriancalendar.construct.php",
        "name": "IntlGregorianCalendar::__construct",
        "description": "Create the Gregorian Calendar class"
    },
    {
        "href": "intliterator.current.php",
        "name": "IntlIterator::current",
        "description": "Get the current element"
    },
    {
        "href": "intliterator.key.php",
        "name": "IntlIterator::key",
        "description": "Get the current key"
    },
    {
        "href": "intliterator.next.php",
        "name": "IntlIterator::next",
        "description": "Move forward to the next element"
    },
    {
        "href": "intliterator.rewind.php",
        "name": "IntlIterator::rewind",
        "description": "Rewind the iterator to the first element"
    },
    {
        "href": "intliterator.valid.php",
        "name": "IntlIterator::valid",
        "description": "Check if current position is valid"
    },
    {
        "href": "intlpartsiterator.getbreakiterator.php",
        "name": "IntlPartsIterator::getBreakIterator",
        "description": "Get IntlBreakIterator backing this parts iterator"
    },
    {
        "href": "intlrulebasedbreakiterator.getbinaryrules.php",
        "name": "IntlRuleBasedBreakIterator::getBinaryRules",
        "description": "Get the binary form of compiled rules"
    },
    {
        "href": "intlrulebasedbreakiterator.getrules.php",
        "name": "IntlRuleBasedBreakIterator::getRules",
        "description": "Get the rule set used to create this object"
    },
    {
        "href": "intlrulebasedbreakiterator.getrulestatus.php",
        "name": "IntlRuleBasedBreakIterator::getRuleStatus",
        "description": "Get the largest status value from the break rules that determined the current break position"
    },
    {
        "href": "intlrulebasedbreakiterator.getrulestatusvec.php",
        "name": "IntlRuleBasedBreakIterator::getRuleStatusVec",
        "description": "Get the status values from the break rules that determined the current break position"
    },
    {
        "href": "intlrulebasedbreakiterator.construct.php",
        "name": "IntlRuleBasedBreakIterator::__construct",
        "description": "Create iterator from ruleset"
    },
    {
        "href": "intltimezone.countequivalentids.php",
        "name": "IntlTimeZone::countEquivalentIDs",
        "description": "Get the number of IDs in the equivalency group that includes the given ID"
    },
    {
        "href": "intltimezone.createdefault.php",
        "name": "IntlTimeZone::createDefault",
        "description": "Create a new copy of the default timezone for this host"
    },
    {
        "href": "intltimezone.createenumeration.php",
        "name": "IntlTimeZone::createEnumeration",
        "description": "Get an enumeration over time zone IDs associated with the  given country or offset"
    },
    {
        "href": "intltimezone.createtimezone.php",
        "name": "IntlTimeZone::createTimeZone",
        "description": "Create a timezone object for the given ID"
    },
    {
        "href": "intltimezone.createtimezoneidenumeration.php",
        "name": "IntlTimeZone::createTimeZoneIDEnumeration",
        "description": "Get an enumeration over system time zone IDs with the given filter conditions"
    },
    {
        "href": "intltimezone.fromdatetimezone.php",
        "name": "IntlTimeZone::fromDateTimeZone",
        "description": "Create a timezone object from DateTimeZone"
    },
    {
        "href": "intltimezone.getcanonicalid.php",
        "name": "IntlTimeZone::getCanonicalID",
        "description": "Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID"
    },
    {
        "href": "intltimezone.getdisplayname.php",
        "name": "IntlTimeZone::getDisplayName",
        "description": "Get a name of this time zone suitable for presentation to the user"
    },
    {
        "href": "intltimezone.getdstsavings.php",
        "name": "IntlTimeZone::getDSTSavings",
        "description": "Get the amount of time to be added to local standard time to get local wall clock time"
    },
    {
        "href": "intltimezone.getequivalentid.php",
        "name": "IntlTimeZone::getEquivalentID",
        "description": "Get an ID in the equivalency group that includes the given ID"
    },
    {
        "href": "intltimezone.geterrorcode.php",
        "name": "IntlTimeZone::getErrorCode",
        "description": "Get last error code on the object"
    },
    {
        "href": "intltimezone.geterrormessage.php",
        "name": "IntlTimeZone::getErrorMessage",
        "description": "Get last error message on the object"
    },
    {
        "href": "intltimezone.getgmt.php",
        "name": "IntlTimeZone::getGMT",
        "description": "Create GMT (UTC) timezone"
    },
    {
        "href": "intltimezone.getid.php",
        "name": "IntlTimeZone::getID",
        "description": "Get timezone ID"
    },
    {
        "href": "intltimezone.getidforwindowsid.php",
        "name": "IntlTimeZone::getIDForWindowsID",
        "description": "Translate a Windows timezone into a system timezone"
    },
    {
        "href": "intltimezone.getoffset.php",
        "name": "IntlTimeZone::getOffset",
        "description": "Get the time zone raw and GMT offset for the given moment in time"
    },
    {
        "href": "intltimezone.getrawoffset.php",
        "name": "IntlTimeZone::getRawOffset",
        "description": "Get the raw GMT offset (before taking daylight savings time into account"
    },
    {
        "href": "intltimezone.getregion.php",
        "name": "IntlTimeZone::getRegion",
        "description": "Get the region code associated with the given system time zone ID"
    },
    {
        "href": "intltimezone.gettzdataversion.php",
        "name": "IntlTimeZone::getTZDataVersion",
        "description": "Get the timezone data version currently used by ICU"
    },
    {
        "href": "intltimezone.getunknown.php",
        "name": "IntlTimeZone::getUnknown",
        "description": "Get the \"unknown\" time zone"
    },
    {
        "href": "intltimezone.getwindowsid.php",
        "name": "IntlTimeZone::getWindowsID",
        "description": "Translate a system timezone into a Windows timezone"
    },
    {
        "href": "intltimezone.hassamerules.php",
        "name": "IntlTimeZone::hasSameRules",
        "description": "Check if this zone has the same rules and offset as another zone"
    },
    {
        "href": "intltimezone.todatetimezone.php",
        "name": "IntlTimeZone::toDateTimeZone",
        "description": "Convert to DateTimeZone object"
    },
    {
        "href": "intltimezone.usedaylighttime.php",
        "name": "IntlTimeZone::useDaylightTime",
        "description": "Check if this time zone uses daylight savings time"
    },
    {
        "href": "intltimezone.construct.php",
        "name": "IntlTimeZone::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "function.intl-error-name.php",
        "name": "intl_error_name",
        "description": "Get symbolic name for a given error code"
    },
    {
        "href": "function.intl-get-error-code.php",
        "name": "intl_get_error_code",
        "description": "Get the last error code"
    },
    {
        "href": "function.intl-get-error-message.php",
        "name": "intl_get_error_message",
        "description": "Get description of the last error"
    },
    {
        "href": "function.intl-is-failure.php",
        "name": "intl_is_failure",
        "description": "Check whether the given error code indicates failure"
    },
    {
        "href": "function.intval.php",
        "name": "intval",
        "description": "Get the integer value of a variable"
    },
    {
        "href": "function.in-array.php",
        "name": "in_array",
        "description": "Checks if a value exists in an array"
    },
    {
        "href": "function.ip2long.php",
        "name": "ip2long",
        "description": "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer"
    },
    {
        "href": "function.iptcembed.php",
        "name": "iptcembed",
        "description": "Embeds binary IPTC data into a JPEG image"
    },
    {
        "href": "function.iptcparse.php",
        "name": "iptcparse",
        "description": "Parse a binary IPTC block into single tags"
    },
    {
        "href": "function.isset.php",
        "name": "isset",
        "description": "Determine if a variable is declared and is different than null"
    },
    {
        "href": "function.is-a.php",
        "name": "is_a",
        "description": "Checks if the object is of this class or has this class as one of its parents"
    },
    {
        "href": "function.is-array.php",
        "name": "is_array",
        "description": "Finds whether a variable is an array"
    },
    {
        "href": "function.is-bool.php",
        "name": "is_bool",
        "description": "Finds out whether a variable is a boolean"
    },
    {
        "href": "function.is-callable.php",
        "name": "is_callable",
        "description": "Verify that a value can be called as a function from the current scope."
    },
    {
        "href": "function.is-countable.php",
        "name": "is_countable",
        "description": "Verify that the contents of a variable is a countable value"
    },
    {
        "href": "function.is-dir.php",
        "name": "is_dir",
        "description": "Tells whether the filename is a directory"
    },
    {
        "href": "function.is-double.php",
        "name": "is_double",
        "description": "Alias of is_float"
    },
    {
        "href": "function.is-executable.php",
        "name": "is_executable",
        "description": "Tells whether the filename is executable"
    },
    {
        "href": "function.is-file.php",
        "name": "is_file",
        "description": "Tells whether the filename is a regular file"
    },
    {
        "href": "function.is-finite.php",
        "name": "is_finite",
        "description": "Finds whether a value is a legal finite number"
    },
    {
        "href": "function.is-float.php",
        "name": "is_float",
        "description": "Finds whether the type of a variable is float"
    },
    {
        "href": "function.is-infinite.php",
        "name": "is_infinite",
        "description": "Finds whether a value is infinite"
    },
    {
        "href": "function.is-int.php",
        "name": "is_int",
        "description": "Find whether the type of a variable is integer"
    },
    {
        "href": "function.is-integer.php",
        "name": "is_integer",
        "description": "Alias of is_int"
    },
    {
        "href": "function.is-iterable.php",
        "name": "is_iterable",
        "description": "Verify that the contents of a variable is an iterable value"
    },
    {
        "href": "function.is-link.php",
        "name": "is_link",
        "description": "Tells whether the filename is a symbolic link"
    },
    {
        "href": "function.is-long.php",
        "name": "is_long",
        "description": "Alias of is_int"
    },
    {
        "href": "function.is-nan.php",
        "name": "is_nan",
        "description": "Finds whether a value is not a number"
    },
    {
        "href": "function.is-null.php",
        "name": "is_null",
        "description": "Finds whether a variable is null"
    },
    {
        "href": "function.is-numeric.php",
        "name": "is_numeric",
        "description": "Finds whether a variable is a number or a numeric string"
    },
    {
        "href": "function.is-object.php",
        "name": "is_object",
        "description": "Finds whether a variable is an object"
    },
    {
        "href": "function.is-readable.php",
        "name": "is_readable",
        "description": "Tells whether a file exists and is readable"
    },
    {
        "href": "function.is-real.php",
        "name": "is_real",
        "description": "Alias of is_float"
    },
    {
        "href": "function.is-resource.php",
        "name": "is_resource",
        "description": "Finds whether a variable is a resource"
    },
    {
        "href": "function.is-scalar.php",
        "name": "is_scalar",
        "description": "Finds whether a variable is a scalar"
    },
    {
        "href": "function.is-soap-fault.php",
        "name": "is_soap_fault",
        "description": "Checks if a SOAP call has failed"
    },
    {
        "href": "function.is-string.php",
        "name": "is_string",
        "description": "Find whether the type of a variable is string"
    },
    {
        "href": "function.is-subclass-of.php",
        "name": "is_subclass_of",
        "description": "Checks if the object has this class as one of its parents or implements it"
    },
    {
        "href": "function.is-tainted.php",
        "name": "is_tainted",
        "description": "Checks whether a string is tainted"
    },
    {
        "href": "function.is-uploaded-file.php",
        "name": "is_uploaded_file",
        "description": "Tells whether the file was uploaded via HTTP POST"
    },
    {
        "href": "function.is-writable.php",
        "name": "is_writable",
        "description": "Tells whether the filename is writable"
    },
    {
        "href": "function.is-writeable.php",
        "name": "is_writeable",
        "description": "Alias of is_writable"
    },
    {
        "href": "iterator.current.php",
        "name": "Iterator::current",
        "description": "Return the current element"
    },
    {
        "href": "iterator.key.php",
        "name": "Iterator::key",
        "description": "Return the key of the current element"
    },
    {
        "href": "iterator.next.php",
        "name": "Iterator::next",
        "description": "Move forward to next element"
    },
    {
        "href": "iterator.rewind.php",
        "name": "Iterator::rewind",
        "description": "Rewind the Iterator to the first element"
    },
    {
        "href": "iterator.valid.php",
        "name": "Iterator::valid",
        "description": "Checks if current position is valid"
    },
    {
        "href": "iteratoraggregate.getiterator.php",
        "name": "IteratorAggregate::getIterator",
        "description": "Retrieve an external iterator"
    },
    {
        "href": "iteratoriterator.current.php",
        "name": "IteratorIterator::current",
        "description": "Get the current value"
    },
    {
        "href": "iteratoriterator.getinneriterator.php",
        "name": "IteratorIterator::getInnerIterator",
        "description": "Get the inner iterator"
    },
    {
        "href": "iteratoriterator.key.php",
        "name": "IteratorIterator::key",
        "description": "Get the key of the current element"
    },
    {
        "href": "iteratoriterator.next.php",
        "name": "IteratorIterator::next",
        "description": "Forward to the next element"
    },
    {
        "href": "iteratoriterator.rewind.php",
        "name": "IteratorIterator::rewind",
        "description": "Rewind to the first element"
    },
    {
        "href": "iteratoriterator.valid.php",
        "name": "IteratorIterator::valid",
        "description": "Checks if the iterator is valid"
    },
    {
        "href": "iteratoriterator.construct.php",
        "name": "IteratorIterator::__construct",
        "description": "Create an iterator from anything that is traversable"
    },
    {
        "href": "function.iterator-apply.php",
        "name": "iterator_apply",
        "description": "Call a function for every element in an iterator"
    },
    {
        "href": "function.iterator-count.php",
        "name": "iterator_count",
        "description": "Count the elements in an iterator"
    },
    {
        "href": "function.iterator-to-array.php",
        "name": "iterator_to_array",
        "description": "Copy the iterator into an array"
    },
    {
        "href": "function.jddayofweek.php",
        "name": "jddayofweek",
        "description": "Returns the day of the week"
    },
    {
        "href": "function.jdmonthname.php",
        "name": "jdmonthname",
        "description": "Returns a month name"
    },
    {
        "href": "function.jdtofrench.php",
        "name": "jdtofrench",
        "description": "Converts a Julian Day Count to the French Republican Calendar"
    },
    {
        "href": "function.jdtogregorian.php",
        "name": "jdtogregorian",
        "description": "Converts Julian Day Count to Gregorian date"
    },
    {
        "href": "function.jdtojewish.php",
        "name": "jdtojewish",
        "description": "Converts a Julian day count to a Jewish calendar date"
    },
    {
        "href": "function.jdtojulian.php",
        "name": "jdtojulian",
        "description": "Converts a Julian Day Count to a Julian Calendar Date"
    },
    {
        "href": "function.jdtounix.php",
        "name": "jdtounix",
        "description": "Convert Julian Day to Unix timestamp"
    },
    {
        "href": "function.jewishtojd.php",
        "name": "jewishtojd",
        "description": "Converts a date in the Jewish Calendar to Julian Day Count"
    },
    {
        "href": "function.join.php",
        "name": "join",
        "description": "Alias of implode"
    },
    {
        "href": "function.jpeg2wbmp.php",
        "name": "jpeg2wbmp",
        "description": "Convert JPEG image file to WBMP image file"
    },
    {
        "href": "jsonserializable.jsonserialize.php",
        "name": "JsonSerializable::jsonSerialize",
        "description": "Specify data which should be serialized to JSON"
    },
    {
        "href": "function.json-decode.php",
        "name": "json_decode",
        "description": "Decodes a JSON string"
    },
    {
        "href": "function.json-encode.php",
        "name": "json_encode",
        "description": "Returns the JSON representation of a value"
    },
    {
        "href": "function.json-last-error.php",
        "name": "json_last_error",
        "description": "Returns the last error occurred"
    },
    {
        "href": "function.json-last-error-msg.php",
        "name": "json_last_error_msg",
        "description": "Returns the error string of the last json_encode() or json_decode() call"
    },
    {
        "href": "function.juliantojd.php",
        "name": "juliantojd",
        "description": "Converts a Julian Calendar date to Julian Day Count"
    },
    {
        "href": "function.key.php",
        "name": "key",
        "description": "Fetch a key from an array"
    },
    {
        "href": "function.key-exists.php",
        "name": "key_exists",
        "description": "Alias of array_key_exists"
    },
    {
        "href": "function.krsort.php",
        "name": "krsort",
        "description": "Sort an array by key in descending order"
    },
    {
        "href": "function.ksort.php",
        "name": "ksort",
        "description": "Sort an array by key in ascending order"
    },
    {
        "href": "function.lcfirst.php",
        "name": "lcfirst",
        "description": "Make a string's first character lowercase"
    },
    {
        "href": "function.lcg-value.php",
        "name": "lcg_value",
        "description": "Combined linear congruential generator"
    },
    {
        "href": "function.lchgrp.php",
        "name": "lchgrp",
        "description": "Changes group ownership of symlink"
    },
    {
        "href": "function.lchown.php",
        "name": "lchown",
        "description": "Changes user ownership of symlink"
    },
    {
        "href": "function.ldap-8859-to-t61.php",
        "name": "ldap_8859_to_t61",
        "description": "Translate 8859 characters to t61 characters"
    },
    {
        "href": "function.ldap-add.php",
        "name": "ldap_add",
        "description": "Add entries to LDAP directory"
    },
    {
        "href": "function.ldap-add-ext.php",
        "name": "ldap_add_ext",
        "description": "Add entries to LDAP directory"
    },
    {
        "href": "function.ldap-bind.php",
        "name": "ldap_bind",
        "description": "Bind to LDAP directory"
    },
    {
        "href": "function.ldap-bind-ext.php",
        "name": "ldap_bind_ext",
        "description": "Bind to LDAP directory"
    },
    {
        "href": "function.ldap-close.php",
        "name": "ldap_close",
        "description": "Alias of ldap_unbind"
    },
    {
        "href": "function.ldap-compare.php",
        "name": "ldap_compare",
        "description": "Compare value of attribute found in entry specified with DN"
    },
    {
        "href": "function.ldap-connect.php",
        "name": "ldap_connect",
        "description": "Connect to an LDAP server"
    },
    {
        "href": "function.ldap-control-paged-result.php",
        "name": "ldap_control_paged_result",
        "description": "Send LDAP pagination control"
    },
    {
        "href": "function.ldap-control-paged-result-response.php",
        "name": "ldap_control_paged_result_response",
        "description": "Retrieve the LDAP pagination cookie"
    },
    {
        "href": "function.ldap-count-entries.php",
        "name": "ldap_count_entries",
        "description": "Count the number of entries in a search"
    },
    {
        "href": "function.ldap-count-references.php",
        "name": "ldap_count_references",
        "description": "Counts the number of references in a search result"
    },
    {
        "href": "function.ldap-delete.php",
        "name": "ldap_delete",
        "description": "Delete an entry from a directory"
    },
    {
        "href": "function.ldap-delete-ext.php",
        "name": "ldap_delete_ext",
        "description": "Delete an entry from a directory"
    },
    {
        "href": "function.ldap-dn2ufn.php",
        "name": "ldap_dn2ufn",
        "description": "Convert DN to User Friendly Naming format"
    },
    {
        "href": "function.ldap-err2str.php",
        "name": "ldap_err2str",
        "description": "Convert LDAP error number into string error message"
    },
    {
        "href": "function.ldap-errno.php",
        "name": "ldap_errno",
        "description": "Return the LDAP error number of the last LDAP command"
    },
    {
        "href": "function.ldap-error.php",
        "name": "ldap_error",
        "description": "Return the LDAP error message of the last LDAP command"
    },
    {
        "href": "function.ldap-escape.php",
        "name": "ldap_escape",
        "description": "Escape a string for use in an LDAP filter or DN"
    },
    {
        "href": "function.ldap-exop.php",
        "name": "ldap_exop",
        "description": "Performs an extended operation"
    },
    {
        "href": "function.ldap-exop-passwd.php",
        "name": "ldap_exop_passwd",
        "description": "PASSWD extended operation helper"
    },
    {
        "href": "function.ldap-exop-refresh.php",
        "name": "ldap_exop_refresh",
        "description": "Refresh extended operation helper"
    },
    {
        "href": "function.ldap-exop-whoami.php",
        "name": "ldap_exop_whoami",
        "description": "WHOAMI extended operation helper"
    },
    {
        "href": "function.ldap-explode-dn.php",
        "name": "ldap_explode_dn",
        "description": "Splits DN into its component parts"
    },
    {
        "href": "function.ldap-first-attribute.php",
        "name": "ldap_first_attribute",
        "description": "Return first attribute"
    },
    {
        "href": "function.ldap-first-entry.php",
        "name": "ldap_first_entry",
        "description": "Return first result id"
    },
    {
        "href": "function.ldap-first-reference.php",
        "name": "ldap_first_reference",
        "description": "Return first reference"
    },
    {
        "href": "function.ldap-free-result.php",
        "name": "ldap_free_result",
        "description": "Free result memory"
    },
    {
        "href": "function.ldap-get-attributes.php",
        "name": "ldap_get_attributes",
        "description": "Get attributes from a search result entry"
    },
    {
        "href": "function.ldap-get-dn.php",
        "name": "ldap_get_dn",
        "description": "Get the DN of a result entry"
    },
    {
        "href": "function.ldap-get-entries.php",
        "name": "ldap_get_entries",
        "description": "Get all result entries"
    },
    {
        "href": "function.ldap-get-option.php",
        "name": "ldap_get_option",
        "description": "Get the current value for given option"
    },
    {
        "href": "function.ldap-get-values.php",
        "name": "ldap_get_values",
        "description": "Get all values from a result entry"
    },
    {
        "href": "function.ldap-get-values-len.php",
        "name": "ldap_get_values_len",
        "description": "Get all binary values from a result entry"
    },
    {
        "href": "function.ldap-list.php",
        "name": "ldap_list",
        "description": "Single-level search"
    },
    {
        "href": "function.ldap-modify.php",
        "name": "ldap_modify",
        "description": "Alias of ldap_mod_replace"
    },
    {
        "href": "function.ldap-modify-batch.php",
        "name": "ldap_modify_batch",
        "description": "Batch and execute modifications on an LDAP entry"
    },
    {
        "href": "function.ldap-mod-add.php",
        "name": "ldap_mod_add",
        "description": "Add attribute values to current attributes"
    },
    {
        "href": "function.ldap-mod_add-ext.php",
        "name": "ldap_mod_add_ext",
        "description": "Add attribute values to current attributes"
    },
    {
        "href": "function.ldap-mod-del.php",
        "name": "ldap_mod_del",
        "description": "Delete attribute values from current attributes"
    },
    {
        "href": "function.ldap-mod_del-ext.php",
        "name": "ldap_mod_del_ext",
        "description": "Delete attribute values from current attributes"
    },
    {
        "href": "function.ldap-mod-replace.php",
        "name": "ldap_mod_replace",
        "description": "Replace attribute values with new ones"
    },
    {
        "href": "function.ldap-mod_replace-ext.php",
        "name": "ldap_mod_replace_ext",
        "description": "Replace attribute values with new ones"
    },
    {
        "href": "function.ldap-next-attribute.php",
        "name": "ldap_next_attribute",
        "description": "Get the next attribute in result"
    },
    {
        "href": "function.ldap-next-entry.php",
        "name": "ldap_next_entry",
        "description": "Get next result entry"
    },
    {
        "href": "function.ldap-next-reference.php",
        "name": "ldap_next_reference",
        "description": "Get next reference"
    },
    {
        "href": "function.ldap-parse-exop.php",
        "name": "ldap_parse_exop",
        "description": "Parse result object from an LDAP extended operation"
    },
    {
        "href": "function.ldap-parse-reference.php",
        "name": "ldap_parse_reference",
        "description": "Extract information from reference entry"
    },
    {
        "href": "function.ldap-parse-result.php",
        "name": "ldap_parse_result",
        "description": "Extract information from result"
    },
    {
        "href": "function.ldap-read.php",
        "name": "ldap_read",
        "description": "Read an entry"
    },
    {
        "href": "function.ldap-rename.php",
        "name": "ldap_rename",
        "description": "Modify the name of an entry"
    },
    {
        "href": "function.ldap-rename-ext.php",
        "name": "ldap_rename_ext",
        "description": "Modify the name of an entry"
    },
    {
        "href": "function.ldap-sasl-bind.php",
        "name": "ldap_sasl_bind",
        "description": "Bind to LDAP directory using SASL"
    },
    {
        "href": "function.ldap-search.php",
        "name": "ldap_search",
        "description": "Search LDAP tree"
    },
    {
        "href": "function.ldap-set-option.php",
        "name": "ldap_set_option",
        "description": "Set the value of the given option"
    },
    {
        "href": "function.ldap-set-rebind-proc.php",
        "name": "ldap_set_rebind_proc",
        "description": "Set a callback function to do re-binds on referral chasing"
    },
    {
        "href": "function.ldap-sort.php",
        "name": "ldap_sort",
        "description": "Sort LDAP result entries on the client side"
    },
    {
        "href": "function.ldap-start-tls.php",
        "name": "ldap_start_tls",
        "description": "Start TLS"
    },
    {
        "href": "function.ldap-t61-to-8859.php",
        "name": "ldap_t61_to_8859",
        "description": "Translate t61 characters to 8859 characters"
    },
    {
        "href": "function.ldap-unbind.php",
        "name": "ldap_unbind",
        "description": "Unbind from LDAP directory"
    },
    {
        "href": "function.levenshtein.php",
        "name": "levenshtein",
        "description": "Calculate Levenshtein distance between two strings"
    },
    {
        "href": "function.libxml-clear-errors.php",
        "name": "libxml_clear_errors",
        "description": "Clear libxml error buffer"
    },
    {
        "href": "function.libxml-disable-entity-loader.php",
        "name": "libxml_disable_entity_loader",
        "description": "Disable the ability to load external entities"
    },
    {
        "href": "function.libxml-get-errors.php",
        "name": "libxml_get_errors",
        "description": "Retrieve array of errors"
    },
    {
        "href": "function.libxml-get-last-error.php",
        "name": "libxml_get_last_error",
        "description": "Retrieve last error from libxml"
    },
    {
        "href": "function.libxml-set-external-entity-loader.php",
        "name": "libxml_set_external_entity_loader",
        "description": "Changes the default external entity loader"
    },
    {
        "href": "function.libxml-set-streams-context.php",
        "name": "libxml_set_streams_context",
        "description": "Set the streams context for the next libxml document load or write"
    },
    {
        "href": "function.libxml-use-internal-errors.php",
        "name": "libxml_use_internal_errors",
        "description": "Disable libxml errors and allow user to fetch error information as needed"
    },
    {
        "href": "limititerator.current.php",
        "name": "LimitIterator::current",
        "description": "Get current element"
    },
    {
        "href": "limititerator.getinneriterator.php",
        "name": "LimitIterator::getInnerIterator",
        "description": "Get inner iterator"
    },
    {
        "href": "limititerator.getposition.php",
        "name": "LimitIterator::getPosition",
        "description": "Return the current position"
    },
    {
        "href": "limititerator.key.php",
        "name": "LimitIterator::key",
        "description": "Get current key"
    },
    {
        "href": "limititerator.next.php",
        "name": "LimitIterator::next",
        "description": "Move the iterator forward"
    },
    {
        "href": "limititerator.rewind.php",
        "name": "LimitIterator::rewind",
        "description": "Rewind the iterator to the specified starting offset"
    },
    {
        "href": "limititerator.seek.php",
        "name": "LimitIterator::seek",
        "description": "Seek to the given position"
    },
    {
        "href": "limititerator.valid.php",
        "name": "LimitIterator::valid",
        "description": "Check whether the current element is valid"
    },
    {
        "href": "limititerator.construct.php",
        "name": "LimitIterator::__construct",
        "description": "Construct a LimitIterator"
    },
    {
        "href": "function.link.php",
        "name": "link",
        "description": "Create a hard link"
    },
    {
        "href": "function.linkinfo.php",
        "name": "linkinfo",
        "description": "Gets information about a link"
    },
    {
        "href": "function.list.php",
        "name": "list",
        "description": "Assign variables as if they were an array"
    },
    {
        "href": "locale.acceptfromhttp.php",
        "name": "Locale::acceptFromHttp",
        "description": "Tries to find out best available locale based on HTTP \"Accept-Language\" header"
    },
    {
        "href": "locale.canonicalize.php",
        "name": "Locale::canonicalize",
        "description": "Canonicalize the locale string"
    },
    {
        "href": "locale.composelocale.php",
        "name": "Locale::composeLocale",
        "description": "Returns a correctly ordered and delimited locale ID"
    },
    {
        "href": "locale.filtermatches.php",
        "name": "Locale::filterMatches",
        "description": "Checks if a language tag filter matches with locale"
    },
    {
        "href": "locale.getallvariants.php",
        "name": "Locale::getAllVariants",
        "description": "Gets the variants for the input locale"
    },
    {
        "href": "locale.getdefault.php",
        "name": "Locale::getDefault",
        "description": "Gets the default locale value from the INTL global 'default_locale'"
    },
    {
        "href": "locale.getdisplaylanguage.php",
        "name": "Locale::getDisplayLanguage",
        "description": "Returns an appropriately localized display name for language of the inputlocale"
    },
    {
        "href": "locale.getdisplayname.php",
        "name": "Locale::getDisplayName",
        "description": "Returns an appropriately localized display name for the input locale"
    },
    {
        "href": "locale.getdisplayregion.php",
        "name": "Locale::getDisplayRegion",
        "description": "Returns an appropriately localized display name for region of the input locale"
    },
    {
        "href": "locale.getdisplayscript.php",
        "name": "Locale::getDisplayScript",
        "description": "Returns an appropriately localized display name for script of the input locale"
    },
    {
        "href": "locale.getdisplayvariant.php",
        "name": "Locale::getDisplayVariant",
        "description": "Returns an appropriately localized display name for variants of the input locale"
    },
    {
        "href": "locale.getkeywords.php",
        "name": "Locale::getKeywords",
        "description": "Gets the keywords for the input locale"
    },
    {
        "href": "locale.getprimarylanguage.php",
        "name": "Locale::getPrimaryLanguage",
        "description": "Gets the primary language for the input locale"
    },
    {
        "href": "locale.getregion.php",
        "name": "Locale::getRegion",
        "description": "Gets the region for the input locale"
    },
    {
        "href": "locale.getscript.php",
        "name": "Locale::getScript",
        "description": "Gets the script for the input locale"
    },
    {
        "href": "locale.lookup.php",
        "name": "Locale::lookup",
        "description": "Searches the language tag list for the best match to the language"
    },
    {
        "href": "locale.parselocale.php",
        "name": "Locale::parseLocale",
        "description": "Returns a key-value array of locale ID subtag elements"
    },
    {
        "href": "locale.setdefault.php",
        "name": "Locale::setDefault",
        "description": "Sets the default runtime locale"
    },
    {
        "href": "function.localeconv.php",
        "name": "localeconv",
        "description": "Get numeric formatting information"
    },
    {
        "href": "function.localtime.php",
        "name": "localtime",
        "description": "Get the local time"
    },
    {
        "href": "function.log.php",
        "name": "log",
        "description": "Natural logarithm"
    },
    {
        "href": "function.log1p.php",
        "name": "log1p",
        "description": "Returns log(1 + number), computed in a way that is accurate even when   the value of number is close to zero"
    },
    {
        "href": "function.log10.php",
        "name": "log10",
        "description": "Base-10 logarithm"
    },
    {
        "href": "function.long2ip.php",
        "name": "long2ip",
        "description": "Converts an long integer address into a string in (IPv4) Internet standard dotted format"
    },
    {
        "href": "function.lstat.php",
        "name": "lstat",
        "description": "Gives information about a file or symbolic link"
    },
    {
        "href": "function.ltrim.php",
        "name": "ltrim",
        "description": "Strip whitespace (or other characters) from the beginning of a string"
    },
    {
        "href": "lua.assign.php",
        "name": "Lua::assign",
        "description": "Assign a PHP variable to Lua"
    },
    {
        "href": "lua.call.php",
        "name": "Lua::call",
        "description": "Call Lua functions"
    },
    {
        "href": "lua.eval.php",
        "name": "Lua::eval",
        "description": "Evaluate a string as Lua code"
    },
    {
        "href": "lua.getversion.php",
        "name": "Lua::getVersion",
        "description": "The getversion purpose"
    },
    {
        "href": "lua.include.php",
        "name": "Lua::include",
        "description": "Parse a Lua script file"
    },
    {
        "href": "lua.registercallback.php",
        "name": "Lua::registerCallback",
        "description": "Register a PHP function to Lua"
    },
    {
        "href": "lua.construct.php",
        "name": "Lua::__construct",
        "description": "Lua constructor"
    },
    {
        "href": "luaclosure.invoke.php",
        "name": "LuaClosure::__invoke",
        "description": "Invoke luaclosure"
    },
    {
        "href": "luasandbox.callfunction.php",
        "name": "LuaSandbox::callFunction",
        "description": "Call a function in a Lua global variable"
    },
    {
        "href": "luasandbox.disableprofiler.php",
        "name": "LuaSandbox::disableProfiler",
        "description": "Disable the profiler"
    },
    {
        "href": "luasandbox.enableprofiler.php",
        "name": "LuaSandbox::enableProfiler",
        "description": "Enable the profiler."
    },
    {
        "href": "luasandbox.getcpuusage.php",
        "name": "LuaSandbox::getCPUUsage",
        "description": "Fetch the current CPU time usage of the Lua environment"
    },
    {
        "href": "luasandbox.getmemoryusage.php",
        "name": "LuaSandbox::getMemoryUsage",
        "description": "Fetch the current memory usage of the Lua environment"
    },
    {
        "href": "luasandbox.getpeakmemoryusage.php",
        "name": "LuaSandbox::getPeakMemoryUsage",
        "description": "Fetch the peak memory usage of the Lua environment"
    },
    {
        "href": "luasandbox.getprofilerfunctionreport.php",
        "name": "LuaSandbox::getProfilerFunctionReport",
        "description": "Fetch profiler data"
    },
    {
        "href": "luasandbox.getversioninfo.php",
        "name": "LuaSandbox::getVersionInfo",
        "description": "Return the versions of LuaSandbox and Lua"
    },
    {
        "href": "luasandbox.loadbinary.php",
        "name": "LuaSandbox::loadBinary",
        "description": "Load a precompiled binary chunk into the Lua environment"
    },
    {
        "href": "luasandbox.loadstring.php",
        "name": "LuaSandbox::loadString",
        "description": "Load Lua code into the Lua environment"
    },
    {
        "href": "luasandbox.pauseusagetimer.php",
        "name": "LuaSandbox::pauseUsageTimer",
        "description": "Pause the CPU usage timer"
    },
    {
        "href": "luasandbox.registerlibrary.php",
        "name": "LuaSandbox::registerLibrary",
        "description": "Register a set of PHP functions as a Lua library"
    },
    {
        "href": "luasandbox.setcpulimit.php",
        "name": "LuaSandbox::setCPULimit",
        "description": "Set the CPU time limit for the Lua environment"
    },
    {
        "href": "luasandbox.setmemorylimit.php",
        "name": "LuaSandbox::setMemoryLimit",
        "description": "Set the memory limit for the Lua environment"
    },
    {
        "href": "luasandbox.unpauseusagetimer.php",
        "name": "LuaSandbox::unpauseUsageTimer",
        "description": "Unpause the timer paused by LuaSandbox::pauseUsageTimer"
    },
    {
        "href": "luasandbox.wrapphpfunction.php",
        "name": "LuaSandbox::wrapPhpFunction",
        "description": "Wrap a PHP callable in a LuaSandboxFunction"
    },
    {
        "href": "luasandboxfunction.call.php",
        "name": "LuaSandboxFunction::call",
        "description": "Call a Lua function"
    },
    {
        "href": "luasandboxfunction.dump.php",
        "name": "LuaSandboxFunction::dump",
        "description": "Dump the function as a binary blob"
    },
    {
        "href": "luasandboxfunction.construct.php",
        "name": "LuaSandboxFunction::__construct",
        "description": "Unused"
    },
    {
        "href": "function.lzf-compress.php",
        "name": "lzf_compress",
        "description": "LZF compression"
    },
    {
        "href": "function.lzf-decompress.php",
        "name": "lzf_decompress",
        "description": "LZF decompression"
    },
    {
        "href": "function.lzf-optimized-for.php",
        "name": "lzf_optimized_for",
        "description": "Determines what LZF extension was optimized for"
    },
    {
        "href": "function.mail.php",
        "name": "mail",
        "description": "Send mail"
    },
    {
        "href": "function.mailparse-determine-best-xfer-encoding.php",
        "name": "mailparse_determine_best_xfer_encoding",
        "description": "Gets the best way of encoding"
    },
    {
        "href": "function.mailparse-msg-create.php",
        "name": "mailparse_msg_create",
        "description": "Create a mime mail resource"
    },
    {
        "href": "function.mailparse-msg-extract-part.php",
        "name": "mailparse_msg_extract_part",
        "description": "Extracts/decodes a message section"
    },
    {
        "href": "function.mailparse-msg-extract-part-file.php",
        "name": "mailparse_msg_extract_part_file",
        "description": "Extracts/decodes a message section"
    },
    {
        "href": "function.mailparse-msg-extract-whole-part-file.php",
        "name": "mailparse_msg_extract_whole_part_file",
        "description": "Extracts a message section including headers without decoding the transfer encoding"
    },
    {
        "href": "function.mailparse-msg-free.php",
        "name": "mailparse_msg_free",
        "description": "Frees a MIME resource"
    },
    {
        "href": "function.mailparse-msg-get-part.php",
        "name": "mailparse_msg_get_part",
        "description": "Returns a handle on a given section in a mimemessage"
    },
    {
        "href": "function.mailparse-msg-get-part-data.php",
        "name": "mailparse_msg_get_part_data",
        "description": "Returns an associative array of info about the message"
    },
    {
        "href": "function.mailparse-msg-get-structure.php",
        "name": "mailparse_msg_get_structure",
        "description": "Returns an array of mime section names in the supplied message"
    },
    {
        "href": "function.mailparse-msg-parse.php",
        "name": "mailparse_msg_parse",
        "description": "Incrementally parse data into buffer"
    },
    {
        "href": "function.mailparse-msg-parse-file.php",
        "name": "mailparse_msg_parse_file",
        "description": "Parses a file"
    },
    {
        "href": "function.mailparse-rfc822-parse-addresses.php",
        "name": "mailparse_rfc822_parse_addresses",
        "description": "Parse RFC 822 compliant addresses"
    },
    {
        "href": "function.mailparse-stream-encode.php",
        "name": "mailparse_stream_encode",
        "description": "Streams data from source file pointer, apply encoding and write to destfp"
    },
    {
        "href": "function.mailparse-uudecode-all.php",
        "name": "mailparse_uudecode_all",
        "description": "Scans the data from fp and extract each embedded uuencoded file"
    },
    {
        "href": "function.max.php",
        "name": "max",
        "description": "Find highest value"
    },
    {
        "href": "function.mb-check-encoding.php",
        "name": "mb_check_encoding",
        "description": "Check if strings are valid for the specified encoding"
    },
    {
        "href": "function.mb-chr.php",
        "name": "mb_chr",
        "description": "Return character by Unicode code point value"
    },
    {
        "href": "function.mb-convert-case.php",
        "name": "mb_convert_case",
        "description": "Perform case folding on a string"
    },
    {
        "href": "function.mb-convert-encoding.php",
        "name": "mb_convert_encoding",
        "description": "Convert character encoding"
    },
    {
        "href": "function.mb-convert-kana.php",
        "name": "mb_convert_kana",
        "description": "Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)"
    },
    {
        "href": "function.mb-convert-variables.php",
        "name": "mb_convert_variables",
        "description": "Convert character code in variable(s)"
    },
    {
        "href": "function.mb-decode-mimeheader.php",
        "name": "mb_decode_mimeheader",
        "description": "Decode string in MIME header field"
    },
    {
        "href": "function.mb-decode-numericentity.php",
        "name": "mb_decode_numericentity",
        "description": "Decode HTML numeric string reference to character"
    },
    {
        "href": "function.mb-detect-encoding.php",
        "name": "mb_detect_encoding",
        "description": "Detect character encoding"
    },
    {
        "href": "function.mb-detect-order.php",
        "name": "mb_detect_order",
        "description": "Set/Get character encoding detection order"
    },
    {
        "href": "function.mb-encode-mimeheader.php",
        "name": "mb_encode_mimeheader",
        "description": "Encode string for MIME header"
    },
    {
        "href": "function.mb-encode-numericentity.php",
        "name": "mb_encode_numericentity",
        "description": "Encode character to HTML numeric string reference"
    },
    {
        "href": "function.mb-encoding-aliases.php",
        "name": "mb_encoding_aliases",
        "description": "Get aliases of a known encoding type"
    },
    {
        "href": "function.mb-ereg.php",
        "name": "mb_ereg",
        "description": "Regular expression match with multibyte support"
    },
    {
        "href": "function.mb-eregi.php",
        "name": "mb_eregi",
        "description": "Regular expression match ignoring case with multibyte support"
    },
    {
        "href": "function.mb-eregi-replace.php",
        "name": "mb_eregi_replace",
        "description": "Replace regular expression with multibyte support ignoring case"
    },
    {
        "href": "function.mb-ereg-match.php",
        "name": "mb_ereg_match",
        "description": "Regular expression match for multibyte string"
    },
    {
        "href": "function.mb-ereg-replace.php",
        "name": "mb_ereg_replace",
        "description": "Replace regular expression with multibyte support"
    },
    {
        "href": "function.mb-ereg-replace-callback.php",
        "name": "mb_ereg_replace_callback",
        "description": "Perform a regular expression search and replace with multibyte support using a callback"
    },
    {
        "href": "function.mb-ereg-search.php",
        "name": "mb_ereg_search",
        "description": "Multibyte regular expression match for predefined multibyte string"
    },
    {
        "href": "function.mb-ereg-search-getpos.php",
        "name": "mb_ereg_search_getpos",
        "description": "Returns start point for next regular expression match"
    },
    {
        "href": "function.mb-ereg-search-getregs.php",
        "name": "mb_ereg_search_getregs",
        "description": "Retrieve the result from the last multibyte regular expression match"
    },
    {
        "href": "function.mb-ereg-search-init.php",
        "name": "mb_ereg_search_init",
        "description": "Setup string and regular expression for a multibyte regular expression match"
    },
    {
        "href": "function.mb-ereg-search-pos.php",
        "name": "mb_ereg_search_pos",
        "description": "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string"
    },
    {
        "href": "function.mb-ereg-search-regs.php",
        "name": "mb_ereg_search_regs",
        "description": "Returns the matched part of a multibyte regular expression"
    },
    {
        "href": "function.mb-ereg-search-setpos.php",
        "name": "mb_ereg_search_setpos",
        "description": "Set start point of next regular expression match"
    },
    {
        "href": "function.mb-get-info.php",
        "name": "mb_get_info",
        "description": "Get internal settings of mbstring"
    },
    {
        "href": "function.mb-http-input.php",
        "name": "mb_http_input",
        "description": "Detect HTTP input character encoding"
    },
    {
        "href": "function.mb-http-output.php",
        "name": "mb_http_output",
        "description": "Set/Get HTTP output character encoding"
    },
    {
        "href": "function.mb-internal-encoding.php",
        "name": "mb_internal_encoding",
        "description": "Set/Get internal character encoding"
    },
    {
        "href": "function.mb-language.php",
        "name": "mb_language",
        "description": "Set/Get current language"
    },
    {
        "href": "function.mb-list-encodings.php",
        "name": "mb_list_encodings",
        "description": "Returns an array of all supported encodings"
    },
    {
        "href": "function.mb-ord.php",
        "name": "mb_ord",
        "description": "Get Unicode code point of character"
    },
    {
        "href": "function.mb-output-handler.php",
        "name": "mb_output_handler",
        "description": "Callback function converts character encoding in output buffer"
    },
    {
        "href": "function.mb-parse-str.php",
        "name": "mb_parse_str",
        "description": "Parse GET/POST/COOKIE data and set global variable"
    },
    {
        "href": "function.mb-preferred-mime-name.php",
        "name": "mb_preferred_mime_name",
        "description": "Get MIME charset string"
    },
    {
        "href": "function.mb-regex-encoding.php",
        "name": "mb_regex_encoding",
        "description": "Set/Get character encoding for multibyte regex"
    },
    {
        "href": "function.mb-regex-set-options.php",
        "name": "mb_regex_set_options",
        "description": "Set/Get the default options for mbregex functions"
    },
    {
        "href": "function.mb-scrub.php",
        "name": "mb_scrub",
        "description": "Description"
    },
    {
        "href": "function.mb-send-mail.php",
        "name": "mb_send_mail",
        "description": "Send encoded mail"
    },
    {
        "href": "function.mb-split.php",
        "name": "mb_split",
        "description": "Split multibyte string using regular expression"
    },
    {
        "href": "function.mb-strcut.php",
        "name": "mb_strcut",
        "description": "Get part of string"
    },
    {
        "href": "function.mb-strimwidth.php",
        "name": "mb_strimwidth",
        "description": "Get truncated string with specified width"
    },
    {
        "href": "function.mb-stripos.php",
        "name": "mb_stripos",
        "description": "Finds position of first occurrence of a string within another, case insensitive"
    },
    {
        "href": "function.mb-stristr.php",
        "name": "mb_stristr",
        "description": "Finds first occurrence of a string within another, case insensitive"
    },
    {
        "href": "function.mb-strlen.php",
        "name": "mb_strlen",
        "description": "Get string length"
    },
    {
        "href": "function.mb-strpos.php",
        "name": "mb_strpos",
        "description": "Find position of first occurrence of string in a string"
    },
    {
        "href": "function.mb-strrchr.php",
        "name": "mb_strrchr",
        "description": "Finds the last occurrence of a character in a string within another"
    },
    {
        "href": "function.mb-strrichr.php",
        "name": "mb_strrichr",
        "description": "Finds the last occurrence of a character in a string within another, case insensitive"
    },
    {
        "href": "function.mb-strripos.php",
        "name": "mb_strripos",
        "description": "Finds position of last occurrence of a string within another, case insensitive"
    },
    {
        "href": "function.mb-strrpos.php",
        "name": "mb_strrpos",
        "description": "Find position of last occurrence of a string in a string"
    },
    {
        "href": "function.mb-strstr.php",
        "name": "mb_strstr",
        "description": "Finds first occurrence of a string within another"
    },
    {
        "href": "function.mb-strtolower.php",
        "name": "mb_strtolower",
        "description": "Make a string lowercase"
    },
    {
        "href": "function.mb-strtoupper.php",
        "name": "mb_strtoupper",
        "description": "Make a string uppercase"
    },
    {
        "href": "function.mb-strwidth.php",
        "name": "mb_strwidth",
        "description": "Return width of string"
    },
    {
        "href": "function.mb-str-split.php",
        "name": "mb_str_split",
        "description": "Given a multibyte string, return an array of its characters"
    },
    {
        "href": "function.mb-substitute-character.php",
        "name": "mb_substitute_character",
        "description": "Set/Get substitution character"
    },
    {
        "href": "function.mb-substr.php",
        "name": "mb_substr",
        "description": "Get part of string"
    },
    {
        "href": "function.mb-substr-count.php",
        "name": "mb_substr_count",
        "description": "Count the number of substring occurrences"
    },
    {
        "href": "function.mcrypt-create-iv.php",
        "name": "mcrypt_create_iv",
        "description": "Creates an initialization vector (IV) from a random source"
    },
    {
        "href": "function.mcrypt-decrypt.php",
        "name": "mcrypt_decrypt",
        "description": "Decrypts crypttext with given parameters"
    },
    {
        "href": "function.mcrypt-encrypt.php",
        "name": "mcrypt_encrypt",
        "description": "Encrypts plaintext with given parameters"
    },
    {
        "href": "function.mcrypt-enc-get-algorithms-name.php",
        "name": "mcrypt_enc_get_algorithms_name",
        "description": "Returns the name of the opened algorithm"
    },
    {
        "href": "function.mcrypt-enc-get-block-size.php",
        "name": "mcrypt_enc_get_block_size",
        "description": "Returns the blocksize of the opened algorithm"
    },
    {
        "href": "function.mcrypt-enc-get-iv-size.php",
        "name": "mcrypt_enc_get_iv_size",
        "description": "Returns the size of the IV of the opened algorithm"
    },
    {
        "href": "function.mcrypt-enc-get-key-size.php",
        "name": "mcrypt_enc_get_key_size",
        "description": "Returns the maximum supported keysize of the opened mode"
    },
    {
        "href": "function.mcrypt-enc-get-modes-name.php",
        "name": "mcrypt_enc_get_modes_name",
        "description": "Returns the name of the opened mode"
    },
    {
        "href": "function.mcrypt-enc-get-supported-key-sizes.php",
        "name": "mcrypt_enc_get_supported_key_sizes",
        "description": "Returns an array with the supported keysizes of the opened algorithm"
    },
    {
        "href": "function.mcrypt-enc-is-block-algorithm.php",
        "name": "mcrypt_enc_is_block_algorithm",
        "description": "Checks whether the algorithm of the opened mode is a block algorithm"
    },
    {
        "href": "function.mcrypt-enc-is-block-algorithm-mode.php",
        "name": "mcrypt_enc_is_block_algorithm_mode",
        "description": "Checks whether the encryption of the opened mode works on blocks"
    },
    {
        "href": "function.mcrypt-enc-is-block-mode.php",
        "name": "mcrypt_enc_is_block_mode",
        "description": "Checks whether the opened mode outputs blocks"
    },
    {
        "href": "function.mcrypt-enc-self-test.php",
        "name": "mcrypt_enc_self_test",
        "description": "Runs a self test on the opened module"
    },
    {
        "href": "function.mcrypt-generic.php",
        "name": "mcrypt_generic",
        "description": "This function encrypts data"
    },
    {
        "href": "function.mcrypt-generic-deinit.php",
        "name": "mcrypt_generic_deinit",
        "description": "This function deinitializes an encryption module"
    },
    {
        "href": "function.mcrypt-generic-init.php",
        "name": "mcrypt_generic_init",
        "description": "This function initializes all buffers needed for encryption"
    },
    {
        "href": "function.mcrypt-get-block-size.php",
        "name": "mcrypt_get_block_size",
        "description": "Gets the block size of the specified cipher"
    },
    {
        "href": "function.mcrypt-get-cipher-name.php",
        "name": "mcrypt_get_cipher_name",
        "description": "Gets the name of the specified cipher"
    },
    {
        "href": "function.mcrypt-get-iv-size.php",
        "name": "mcrypt_get_iv_size",
        "description": "Returns the size of the IV belonging to a specific cipher/mode combination"
    },
    {
        "href": "function.mcrypt-get-key-size.php",
        "name": "mcrypt_get_key_size",
        "description": "Gets the key size of the specified cipher"
    },
    {
        "href": "function.mcrypt-list-algorithms.php",
        "name": "mcrypt_list_algorithms",
        "description": "Gets an array of all supported ciphers"
    },
    {
        "href": "function.mcrypt-list-modes.php",
        "name": "mcrypt_list_modes",
        "description": "Gets an array of all supported modes"
    },
    {
        "href": "function.mcrypt-module-close.php",
        "name": "mcrypt_module_close",
        "description": "Closes the mcrypt module"
    },
    {
        "href": "function.mcrypt-module-get-algo-block-size.php",
        "name": "mcrypt_module_get_algo_block_size",
        "description": "Returns the blocksize of the specified algorithm"
    },
    {
        "href": "function.mcrypt-module-get-algo-key-size.php",
        "name": "mcrypt_module_get_algo_key_size",
        "description": "Returns the maximum supported keysize of the opened mode"
    },
    {
        "href": "function.mcrypt-module-get-supported-key-sizes.php",
        "name": "mcrypt_module_get_supported_key_sizes",
        "description": "Returns an array with the supported keysizes of the opened algorithm"
    },
    {
        "href": "function.mcrypt-module-is-block-algorithm.php",
        "name": "mcrypt_module_is_block_algorithm",
        "description": "This function checks whether the specified algorithm is a block algorithm"
    },
    {
        "href": "function.mcrypt-module-is-block-algorithm-mode.php",
        "name": "mcrypt_module_is_block_algorithm_mode",
        "description": "Returns if the specified module is a block algorithm or not"
    },
    {
        "href": "function.mcrypt-module-is-block-mode.php",
        "name": "mcrypt_module_is_block_mode",
        "description": "Returns if the specified mode outputs blocks or not"
    },
    {
        "href": "function.mcrypt-module-open.php",
        "name": "mcrypt_module_open",
        "description": "Opens the module of the algorithm and the mode to be used"
    },
    {
        "href": "function.mcrypt-module-self-test.php",
        "name": "mcrypt_module_self_test",
        "description": "This function runs a self test on the specified module"
    },
    {
        "href": "function.md5.php",
        "name": "md5",
        "description": "Calculate the md5 hash of a string"
    },
    {
        "href": "function.md5-file.php",
        "name": "md5_file",
        "description": "Calculates the md5 hash of a given file"
    },
    {
        "href": "function.mdecrypt-generic.php",
        "name": "mdecrypt_generic",
        "description": "Decrypts data"
    },
    {
        "href": "memcache.add.php",
        "name": "Memcache::add",
        "description": "Add an item to the server"
    },
    {
        "href": "memcache.addserver.php",
        "name": "Memcache::addServer",
        "description": "Add a memcached server to connection pool"
    },
    {
        "href": "memcache.close.php",
        "name": "Memcache::close",
        "description": "Close memcached server connection"
    },
    {
        "href": "memcache.connect.php",
        "name": "Memcache::connect",
        "description": "Open memcached server connection"
    },
    {
        "href": "memcache.decrement.php",
        "name": "Memcache::decrement",
        "description": "Decrement item's value"
    },
    {
        "href": "memcache.delete.php",
        "name": "Memcache::delete",
        "description": "Delete item from the server"
    },
    {
        "href": "memcache.flush.php",
        "name": "Memcache::flush",
        "description": "Flush all existing items at the server"
    },
    {
        "href": "memcache.get.php",
        "name": "Memcache::get",
        "description": "Retrieve item from the server"
    },
    {
        "href": "memcache.getextendedstats.php",
        "name": "Memcache::getExtendedStats",
        "description": "Get statistics from all servers in pool"
    },
    {
        "href": "memcache.getserverstatus.php",
        "name": "Memcache::getServerStatus",
        "description": "Returns server status"
    },
    {
        "href": "memcache.getstats.php",
        "name": "Memcache::getStats",
        "description": "Get statistics of the server"
    },
    {
        "href": "memcache.getversion.php",
        "name": "Memcache::getVersion",
        "description": "Return version of the server"
    },
    {
        "href": "memcache.increment.php",
        "name": "Memcache::increment",
        "description": "Increment item's value"
    },
    {
        "href": "memcache.pconnect.php",
        "name": "Memcache::pconnect",
        "description": "Open memcached server persistent connection"
    },
    {
        "href": "memcache.replace.php",
        "name": "Memcache::replace",
        "description": "Replace value of the existing item"
    },
    {
        "href": "memcache.set.php",
        "name": "Memcache::set",
        "description": "Store data at the server"
    },
    {
        "href": "memcache.setcompressthreshold.php",
        "name": "Memcache::setCompressThreshold",
        "description": "Enable automatic compression of large values"
    },
    {
        "href": "memcache.setserverparams.php",
        "name": "Memcache::setServerParams",
        "description": "Changes server parameters and status at runtime"
    },
    {
        "href": "memcached.add.php",
        "name": "Memcached::add",
        "description": "Add an item under a new key"
    },
    {
        "href": "memcached.addbykey.php",
        "name": "Memcached::addByKey",
        "description": "Add an item under a new key on a specific server"
    },
    {
        "href": "memcached.addserver.php",
        "name": "Memcached::addServer",
        "description": "Add a server to the server pool"
    },
    {
        "href": "memcached.addservers.php",
        "name": "Memcached::addServers",
        "description": "Add multiple servers to the server pool"
    },
    {
        "href": "memcached.append.php",
        "name": "Memcached::append",
        "description": "Append data to an existing item"
    },
    {
        "href": "memcached.appendbykey.php",
        "name": "Memcached::appendByKey",
        "description": "Append data to an existing item on a specific server"
    },
    {
        "href": "memcached.cas.php",
        "name": "Memcached::cas",
        "description": "Compare and swap an item"
    },
    {
        "href": "memcached.casbykey.php",
        "name": "Memcached::casByKey",
        "description": "Compare and swap an item on a specific server"
    },
    {
        "href": "memcached.decrement.php",
        "name": "Memcached::decrement",
        "description": "Decrement numeric item's value"
    },
    {
        "href": "memcached.decrementbykey.php",
        "name": "Memcached::decrementByKey",
        "description": "Decrement numeric item's value, stored on a specific server"
    },
    {
        "href": "memcached.delete.php",
        "name": "Memcached::delete",
        "description": "Delete an item"
    },
    {
        "href": "memcached.deletebykey.php",
        "name": "Memcached::deleteByKey",
        "description": "Delete an item from a specific server"
    },
    {
        "href": "memcached.deletemulti.php",
        "name": "Memcached::deleteMulti",
        "description": "Delete multiple items"
    },
    {
        "href": "memcached.deletemultibykey.php",
        "name": "Memcached::deleteMultiByKey",
        "description": "Delete multiple items from a specific server"
    },
    {
        "href": "memcached.fetch.php",
        "name": "Memcached::fetch",
        "description": "Fetch the next result"
    },
    {
        "href": "memcached.fetchall.php",
        "name": "Memcached::fetchAll",
        "description": "Fetch all the remaining results"
    },
    {
        "href": "memcached.flush.php",
        "name": "Memcached::flush",
        "description": "Invalidate all items in the cache"
    },
    {
        "href": "memcached.get.php",
        "name": "Memcached::get",
        "description": "Retrieve an item"
    },
    {
        "href": "memcached.getallkeys.php",
        "name": "Memcached::getAllKeys",
        "description": "Gets the keys stored on all the servers"
    },
    {
        "href": "memcached.getbykey.php",
        "name": "Memcached::getByKey",
        "description": "Retrieve an item from a specific server"
    },
    {
        "href": "memcached.getdelayed.php",
        "name": "Memcached::getDelayed",
        "description": "Request multiple items"
    },
    {
        "href": "memcached.getdelayedbykey.php",
        "name": "Memcached::getDelayedByKey",
        "description": "Request multiple items from a specific server"
    },
    {
        "href": "memcached.getmulti.php",
        "name": "Memcached::getMulti",
        "description": "Retrieve multiple items"
    },
    {
        "href": "memcached.getmultibykey.php",
        "name": "Memcached::getMultiByKey",
        "description": "Retrieve multiple items from a specific server"
    },
    {
        "href": "memcached.getoption.php",
        "name": "Memcached::getOption",
        "description": "Retrieve a Memcached option value"
    },
    {
        "href": "memcached.getresultcode.php",
        "name": "Memcached::getResultCode",
        "description": "Return the result code of the last operation"
    },
    {
        "href": "memcached.getresultmessage.php",
        "name": "Memcached::getResultMessage",
        "description": "Return the message describing the result of the last operation"
    },
    {
        "href": "memcached.getserverbykey.php",
        "name": "Memcached::getServerByKey",
        "description": "Map a key to a server"
    },
    {
        "href": "memcached.getserverlist.php",
        "name": "Memcached::getServerList",
        "description": "Get the list of the servers in the pool"
    },
    {
        "href": "memcached.getstats.php",
        "name": "Memcached::getStats",
        "description": "Get server pool statistics"
    },
    {
        "href": "memcached.getversion.php",
        "name": "Memcached::getVersion",
        "description": "Get server pool version info"
    },
    {
        "href": "memcached.increment.php",
        "name": "Memcached::increment",
        "description": "Increment numeric item's value"
    },
    {
        "href": "memcached.incrementbykey.php",
        "name": "Memcached::incrementByKey",
        "description": "Increment numeric item's value, stored on a specific server"
    },
    {
        "href": "memcached.ispersistent.php",
        "name": "Memcached::isPersistent",
        "description": "Check if a persitent connection to memcache is being used"
    },
    {
        "href": "memcached.ispristine.php",
        "name": "Memcached::isPristine",
        "description": "Check if the instance was recently created"
    },
    {
        "href": "memcached.prepend.php",
        "name": "Memcached::prepend",
        "description": "Prepend data to an existing item"
    },
    {
        "href": "memcached.prependbykey.php",
        "name": "Memcached::prependByKey",
        "description": "Prepend data to an existing item on a specific server"
    },
    {
        "href": "memcached.quit.php",
        "name": "Memcached::quit",
        "description": "Close any open connections"
    },
    {
        "href": "memcached.replace.php",
        "name": "Memcached::replace",
        "description": "Replace the item under an existing key"
    },
    {
        "href": "memcached.replacebykey.php",
        "name": "Memcached::replaceByKey",
        "description": "Replace the item under an existing key on a specific server"
    },
    {
        "href": "memcached.resetserverlist.php",
        "name": "Memcached::resetServerList",
        "description": "Clears all servers from the server list"
    },
    {
        "href": "memcached.set.php",
        "name": "Memcached::set",
        "description": "Store an item"
    },
    {
        "href": "memcached.setbykey.php",
        "name": "Memcached::setByKey",
        "description": "Store an item on a specific server"
    },
    {
        "href": "memcached.setmulti.php",
        "name": "Memcached::setMulti",
        "description": "Store multiple items"
    },
    {
        "href": "memcached.setmultibykey.php",
        "name": "Memcached::setMultiByKey",
        "description": "Store multiple items on a specific server"
    },
    {
        "href": "memcached.setoption.php",
        "name": "Memcached::setOption",
        "description": "Set a Memcached option"
    },
    {
        "href": "memcached.setoptions.php",
        "name": "Memcached::setOptions",
        "description": "Set Memcached options"
    },
    {
        "href": "memcached.setsaslauthdata.php",
        "name": "Memcached::setSaslAuthData",
        "description": "Set the credentials to use for authentication"
    },
    {
        "href": "memcached.touch.php",
        "name": "Memcached::touch",
        "description": "Set a new expiration on an item"
    },
    {
        "href": "memcached.touchbykey.php",
        "name": "Memcached::touchByKey",
        "description": "Set a new expiration on an item on a specific server"
    },
    {
        "href": "memcached.construct.php",
        "name": "Memcached::__construct",
        "description": "Create a Memcached instance"
    },
    {
        "href": "function.memcache-debug.php",
        "name": "memcache_debug",
        "description": "Turn debug output on/off"
    },
    {
        "href": "function.memory-get-peak-usage.php",
        "name": "memory_get_peak_usage",
        "description": "Returns the peak of memory allocated by PHP"
    },
    {
        "href": "function.memory-get-usage.php",
        "name": "memory_get_usage",
        "description": "Returns the amount of memory allocated to PHP"
    },
    {
        "href": "messageformatter.create.php",
        "name": "MessageFormatter::create",
        "description": "Constructs a new Message Formatter"
    },
    {
        "href": "messageformatter.format.php",
        "name": "MessageFormatter::format",
        "description": "Format the message"
    },
    {
        "href": "messageformatter.formatmessage.php",
        "name": "MessageFormatter::formatMessage",
        "description": "Quick format message"
    },
    {
        "href": "messageformatter.geterrorcode.php",
        "name": "MessageFormatter::getErrorCode",
        "description": "Get the error code from last operation"
    },
    {
        "href": "messageformatter.geterrormessage.php",
        "name": "MessageFormatter::getErrorMessage",
        "description": "Get the error text from the last operation"
    },
    {
        "href": "messageformatter.getlocale.php",
        "name": "MessageFormatter::getLocale",
        "description": "Get the locale for which the formatter was created"
    },
    {
        "href": "messageformatter.getpattern.php",
        "name": "MessageFormatter::getPattern",
        "description": "Get the pattern used by the formatter"
    },
    {
        "href": "messageformatter.parse.php",
        "name": "MessageFormatter::parse",
        "description": "Parse input string according to pattern"
    },
    {
        "href": "messageformatter.parsemessage.php",
        "name": "MessageFormatter::parseMessage",
        "description": "Quick parse input string"
    },
    {
        "href": "messageformatter.setpattern.php",
        "name": "MessageFormatter::setPattern",
        "description": "Set the pattern used by the formatter"
    },
    {
        "href": "function.metaphone.php",
        "name": "metaphone",
        "description": "Calculate the metaphone key of a string"
    },
    {
        "href": "function.method-exists.php",
        "name": "method_exists",
        "description": "Checks if the class method exists"
    },
    {
        "href": "function.mhash.php",
        "name": "mhash",
        "description": "Computes hash"
    },
    {
        "href": "function.mhash-count.php",
        "name": "mhash_count",
        "description": "Gets the highest available hash ID"
    },
    {
        "href": "function.mhash-get-block-size.php",
        "name": "mhash_get_block_size",
        "description": "Gets the block size of the specified hash"
    },
    {
        "href": "function.mhash-get-hash-name.php",
        "name": "mhash_get_hash_name",
        "description": "Gets the name of the specified hash"
    },
    {
        "href": "function.mhash-keygen-s2k.php",
        "name": "mhash_keygen_s2k",
        "description": "Generates a key"
    },
    {
        "href": "function.microtime.php",
        "name": "microtime",
        "description": "Return current Unix timestamp with microseconds"
    },
    {
        "href": "function.mime-content-type.php",
        "name": "mime_content_type",
        "description": "Detect MIME Content-type for a file"
    },
    {
        "href": "function.min.php",
        "name": "min",
        "description": "Find lowest value"
    },
    {
        "href": "function.mkdir.php",
        "name": "mkdir",
        "description": "Makes directory"
    },
    {
        "href": "function.mktime.php",
        "name": "mktime",
        "description": "Get Unix timestamp for a date"
    },
    {
        "href": "function.money-format.php",
        "name": "money_format",
        "description": "Formats a number as a currency string"
    },
    {
        "href": "mongodb-bson-binary.getdata.php",
        "name": "MongoDB\\BSON\\Binary::getData",
        "description": "Returns the Binary's data"
    },
    {
        "href": "mongodb-bson-binary.gettype.php",
        "name": "MongoDB\\BSON\\Binary::getType",
        "description": "Returns the Binary's type"
    },
    {
        "href": "mongodb-bson-binary.jsonserialize.php",
        "name": "MongoDB\\BSON\\Binary::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-binary.serialize.php",
        "name": "MongoDB\\BSON\\Binary::serialize",
        "description": "Serialize a Binary"
    },
    {
        "href": "mongodb-bson-binary.unserialize.php",
        "name": "MongoDB\\BSON\\Binary::unserialize",
        "description": "Unserialize a Binary"
    },
    {
        "href": "mongodb-bson-binary.construct.php",
        "name": "MongoDB\\BSON\\Binary::__construct",
        "description": "Construct a new Binary"
    },
    {
        "href": "mongodb-bson-binary.tostring.php",
        "name": "MongoDB\\BSON\\Binary::__toString",
        "description": "Returns the Binary's data"
    },
    {
        "href": "mongodb-bson-binaryinterface.getdata.php",
        "name": "MongoDB\\BSON\\BinaryInterface::getData",
        "description": "Returns the BinaryInterface's data"
    },
    {
        "href": "mongodb-bson-binaryinterface.gettype.php",
        "name": "MongoDB\\BSON\\BinaryInterface::getType",
        "description": "Returns the BinaryInterface's type"
    },
    {
        "href": "mongodb-bson-binaryinterface.tostring.php",
        "name": "MongoDB\\BSON\\BinaryInterface::__toString",
        "description": "Returns the BinaryInterface's data"
    },
    {
        "href": "mongodb-bson-dbpointer.jsonserialize.php",
        "name": "MongoDB\\BSON\\DBPointer::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-dbpointer.serialize.php",
        "name": "MongoDB\\BSON\\DBPointer::serialize",
        "description": "Serialize a DBPointer"
    },
    {
        "href": "mongodb-bson-dbpointer.unserialize.php",
        "name": "MongoDB\\BSON\\DBPointer::unserialize",
        "description": "Unserialize a DBPointer"
    },
    {
        "href": "mongodb-bson-dbpointer.construct.php",
        "name": "MongoDB\\BSON\\DBPointer::__construct",
        "description": "Construct a new DBPointer (unused)"
    },
    {
        "href": "mongodb-bson-dbpointer.tostring.php",
        "name": "MongoDB\\BSON\\DBPointer::__toString",
        "description": "Returns an empty string"
    },
    {
        "href": "mongodb-bson-decimal128.jsonserialize.php",
        "name": "MongoDB\\BSON\\Decimal128::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-decimal128.serialize.php",
        "name": "MongoDB\\BSON\\Decimal128::serialize",
        "description": "Serialize a Decimal128"
    },
    {
        "href": "mongodb-bson-decimal128.unserialize.php",
        "name": "MongoDB\\BSON\\Decimal128::unserialize",
        "description": "Unserialize a Decimal128"
    },
    {
        "href": "mongodb-bson-decimal128.construct.php",
        "name": "MongoDB\\BSON\\Decimal128::__construct",
        "description": "Construct a new Decimal128"
    },
    {
        "href": "mongodb-bson-decimal128.tostring.php",
        "name": "MongoDB\\BSON\\Decimal128::__toString",
        "description": "Returns the string representation of this Decimal128"
    },
    {
        "href": "mongodb-bson-decimal128interface.tostring.php",
        "name": "MongoDB\\BSON\\Decimal128Interface::__toString",
        "description": "Returns the string representation of this Decimal128Interface"
    },
    {
        "href": "function.mongodb.bson-fromjson.php",
        "name": "MongoDB\\BSON\\fromJSON",
        "description": "Returns the BSON representation of a JSON value"
    },
    {
        "href": "function.mongodb.bson-fromphp.php",
        "name": "MongoDB\\BSON\\fromPHP",
        "description": "Returns the BSON representation of a PHP value"
    },
    {
        "href": "mongodb-bson-int64.jsonserialize.php",
        "name": "MongoDB\\BSON\\Int64::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-int64.serialize.php",
        "name": "MongoDB\\BSON\\Int64::serialize",
        "description": "Serialize an Int64"
    },
    {
        "href": "mongodb-bson-int64.unserialize.php",
        "name": "MongoDB\\BSON\\Int64::unserialize",
        "description": "Unserialize an Int64"
    },
    {
        "href": "mongodb-bson-int64.construct.php",
        "name": "MongoDB\\BSON\\Int64::__construct",
        "description": "Construct a new Int64 (unused)"
    },
    {
        "href": "mongodb-bson-int64.tostring.php",
        "name": "MongoDB\\BSON\\Int64::__toString",
        "description": "Returns the string representation of this Int64"
    },
    {
        "href": "mongodb-bson-javascript.getcode.php",
        "name": "MongoDB\\BSON\\Javascript::getCode",
        "description": "Returns the Javascript's code"
    },
    {
        "href": "mongodb-bson-javascript.getscope.php",
        "name": "MongoDB\\BSON\\Javascript::getScope",
        "description": "Returns the Javascript's scope document"
    },
    {
        "href": "mongodb-bson-javascript.jsonserialize.php",
        "name": "MongoDB\\BSON\\Javascript::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-javascript.serialize.php",
        "name": "MongoDB\\BSON\\Javascript::serialize",
        "description": "Serialize a Javascript"
    },
    {
        "href": "mongodb-bson-javascript.unserialize.php",
        "name": "MongoDB\\BSON\\Javascript::unserialize",
        "description": "Unserialize a Javascript"
    },
    {
        "href": "mongodb-bson-javascript.construct.php",
        "name": "MongoDB\\BSON\\Javascript::__construct",
        "description": "Construct a new Javascript"
    },
    {
        "href": "mongodb-bson-javascript.tostring.php",
        "name": "MongoDB\\BSON\\Javascript::__toString",
        "description": "Returns the Javascript's code"
    },
    {
        "href": "mongodb-bson-javascriptinterface.getcode.php",
        "name": "MongoDB\\BSON\\JavascriptInterface::getCode",
        "description": "Returns the JavascriptInterface's code"
    },
    {
        "href": "mongodb-bson-javascriptinterface.getscope.php",
        "name": "MongoDB\\BSON\\JavascriptInterface::getScope",
        "description": "Returns the JavascriptInterface's scope document"
    },
    {
        "href": "mongodb-bson-javascriptinterface.tostring.php",
        "name": "MongoDB\\BSON\\JavascriptInterface::__toString",
        "description": "Returns the JavascriptInterface's code"
    },
    {
        "href": "mongodb-bson-maxkey.jsonserialize.php",
        "name": "MongoDB\\BSON\\MaxKey::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-maxkey.serialize.php",
        "name": "MongoDB\\BSON\\MaxKey::serialize",
        "description": "Serialize a MaxKey"
    },
    {
        "href": "mongodb-bson-maxkey.unserialize.php",
        "name": "MongoDB\\BSON\\MaxKey::unserialize",
        "description": "Unserialize a MaxKey"
    },
    {
        "href": "mongodb-bson-maxkey.construct.php",
        "name": "MongoDB\\BSON\\MaxKey::__construct",
        "description": "Construct a new MaxKey"
    },
    {
        "href": "mongodb-bson-minkey.jsonserialize.php",
        "name": "MongoDB\\BSON\\MinKey::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-minkey.serialize.php",
        "name": "MongoDB\\BSON\\MinKey::serialize",
        "description": "Serialize a MinKey"
    },
    {
        "href": "mongodb-bson-minkey.unserialize.php",
        "name": "MongoDB\\BSON\\MinKey::unserialize",
        "description": "Unserialize a MinKey"
    },
    {
        "href": "mongodb-bson-minkey.construct.php",
        "name": "MongoDB\\BSON\\MinKey::__construct",
        "description": "Construct a new MinKey"
    },
    {
        "href": "mongodb-bson-objectid.gettimestamp.php",
        "name": "MongoDB\\BSON\\ObjectId::getTimestamp",
        "description": "Returns the timestamp component of this ObjectId"
    },
    {
        "href": "mongodb-bson-objectid.jsonserialize.php",
        "name": "MongoDB\\BSON\\ObjectId::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-objectid.serialize.php",
        "name": "MongoDB\\BSON\\ObjectId::serialize",
        "description": "Serialize an ObjectId"
    },
    {
        "href": "mongodb-bson-objectid.unserialize.php",
        "name": "MongoDB\\BSON\\ObjectId::unserialize",
        "description": "Unserialize an ObjectId"
    },
    {
        "href": "mongodb-bson-objectid.construct.php",
        "name": "MongoDB\\BSON\\ObjectId::__construct",
        "description": "Construct a new ObjectId"
    },
    {
        "href": "mongodb-bson-objectid.tostring.php",
        "name": "MongoDB\\BSON\\ObjectId::__toString",
        "description": "Returns the hexidecimal representation of this ObjectId"
    },
    {
        "href": "mongodb-bson-objectidinterface.gettimestamp.php",
        "name": "MongoDB\\BSON\\ObjectIdInterface::getTimestamp",
        "description": "Returns the timestamp component of this ObjectIdInterface"
    },
    {
        "href": "mongodb-bson-objectidinterface.tostring.php",
        "name": "MongoDB\\BSON\\ObjectIdInterface::__toString",
        "description": "Returns the hexidecimal representation of this ObjectIdInterface"
    },
    {
        "href": "mongodb-bson-regex.getflags.php",
        "name": "MongoDB\\BSON\\Regex::getFlags",
        "description": "Returns the Regex's flags"
    },
    {
        "href": "mongodb-bson-regex.getpattern.php",
        "name": "MongoDB\\BSON\\Regex::getPattern",
        "description": "Returns the Regex's pattern"
    },
    {
        "href": "mongodb-bson-regex.jsonserialize.php",
        "name": "MongoDB\\BSON\\Regex::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-regex.serialize.php",
        "name": "MongoDB\\BSON\\Regex::serialize",
        "description": "Serialize a Regex"
    },
    {
        "href": "mongodb-bson-regex.unserialize.php",
        "name": "MongoDB\\BSON\\Regex::unserialize",
        "description": "Unserialize a Regex"
    },
    {
        "href": "mongodb-bson-regex.construct.php",
        "name": "MongoDB\\BSON\\Regex::__construct",
        "description": "Construct a new Regex"
    },
    {
        "href": "mongodb-bson-regex.tostring.php",
        "name": "MongoDB\\BSON\\Regex::__toString",
        "description": "Returns the string representation of this Regex"
    },
    {
        "href": "mongodb-bson-regexinterface.getflags.php",
        "name": "MongoDB\\BSON\\RegexInterface::getFlags",
        "description": "Returns the RegexInterface's flags"
    },
    {
        "href": "mongodb-bson-regexinterface.getpattern.php",
        "name": "MongoDB\\BSON\\RegexInterface::getPattern",
        "description": "Returns the RegexInterface's pattern"
    },
    {
        "href": "mongodb-bson-regexinterface.tostring.php",
        "name": "MongoDB\\BSON\\RegexInterface::__toString",
        "description": "Returns the string representation of this RegexInterface"
    },
    {
        "href": "mongodb-bson-serializable.bsonserialize.php",
        "name": "MongoDB\\BSON\\Serializable::bsonSerialize",
        "description": "Provides an array or document to serialize as BSON"
    },
    {
        "href": "mongodb-bson-symbol.jsonserialize.php",
        "name": "MongoDB\\BSON\\Symbol::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-symbol.serialize.php",
        "name": "MongoDB\\BSON\\Symbol::serialize",
        "description": "Serialize a Symbol"
    },
    {
        "href": "mongodb-bson-symbol.unserialize.php",
        "name": "MongoDB\\BSON\\Symbol::unserialize",
        "description": "Unserialize a Symbol"
    },
    {
        "href": "mongodb-bson-symbol.construct.php",
        "name": "MongoDB\\BSON\\Symbol::__construct",
        "description": "Construct a new Symbol (unused)"
    },
    {
        "href": "mongodb-bson-symbol.tostring.php",
        "name": "MongoDB\\BSON\\Symbol::__toString",
        "description": "Returns the Symbol as a string"
    },
    {
        "href": "mongodb-bson-timestamp.getincrement.php",
        "name": "MongoDB\\BSON\\Timestamp::getIncrement",
        "description": "Returns the increment component of this Timestamp"
    },
    {
        "href": "mongodb-bson-timestamp.gettimestamp.php",
        "name": "MongoDB\\BSON\\Timestamp::getTimestamp",
        "description": "Returns the timestamp component of this Timestamp"
    },
    {
        "href": "mongodb-bson-timestamp.jsonserialize.php",
        "name": "MongoDB\\BSON\\Timestamp::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-timestamp.serialize.php",
        "name": "MongoDB\\BSON\\Timestamp::serialize",
        "description": "Serialize a Timestamp"
    },
    {
        "href": "mongodb-bson-timestamp.unserialize.php",
        "name": "MongoDB\\BSON\\Timestamp::unserialize",
        "description": "Unserialize a Timestamp"
    },
    {
        "href": "mongodb-bson-timestamp.construct.php",
        "name": "MongoDB\\BSON\\Timestamp::__construct",
        "description": "Construct a new Timestamp"
    },
    {
        "href": "mongodb-bson-timestamp.tostring.php",
        "name": "MongoDB\\BSON\\Timestamp::__toString",
        "description": "Returns the string representation of this Timestamp"
    },
    {
        "href": "mongodb-bson-timestampinterface.getincrement.php",
        "name": "MongoDB\\BSON\\TimestampInterface::getIncrement",
        "description": "Returns the increment component of this TimestampInterface"
    },
    {
        "href": "mongodb-bson-timestampinterface.gettimestamp.php",
        "name": "MongoDB\\BSON\\TimestampInterface::getTimestamp",
        "description": "Returns the timestamp component of this TimestampInterface"
    },
    {
        "href": "mongodb-bson-timestampinterface.tostring.php",
        "name": "MongoDB\\BSON\\TimestampInterface::__toString",
        "description": "Returns the string representation of this TimestampInterface"
    },
    {
        "href": "function.mongodb.bson-tocanonicalextendedjson.php",
        "name": "MongoDB\\BSON\\toCanonicalExtendedJSON",
        "description": "Returns the Canonical Extended JSON representation of a BSON value"
    },
    {
        "href": "function.mongodb.bson-tojson.php",
        "name": "MongoDB\\BSON\\toJSON",
        "description": "Returns the Legacy Extended JSON representation of a BSON value"
    },
    {
        "href": "function.mongodb.bson-tophp.php",
        "name": "MongoDB\\BSON\\toPHP",
        "description": "Returns the PHP representation of a BSON value"
    },
    {
        "href": "function.mongodb.bson-torelaxedextendedjson.php",
        "name": "MongoDB\\BSON\\toRelaxedExtendedJSON",
        "description": "Returns the Relaxed Extended JSON representation of a BSON value"
    },
    {
        "href": "mongodb-bson-undefined.jsonserialize.php",
        "name": "MongoDB\\BSON\\Undefined::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-undefined.serialize.php",
        "name": "MongoDB\\BSON\\Undefined::serialize",
        "description": "Serialize a Undefined"
    },
    {
        "href": "mongodb-bson-undefined.unserialize.php",
        "name": "MongoDB\\BSON\\Undefined::unserialize",
        "description": "Unserialize a Undefined"
    },
    {
        "href": "mongodb-bson-undefined.construct.php",
        "name": "MongoDB\\BSON\\Undefined::__construct",
        "description": "Construct a new Undefined (unused)"
    },
    {
        "href": "mongodb-bson-undefined.tostring.php",
        "name": "MongoDB\\BSON\\Undefined::__toString",
        "description": "Returns an empty string"
    },
    {
        "href": "mongodb-bson-unserializable.bsonunserialize.php",
        "name": "MongoDB\\BSON\\Unserializable::bsonUnserialize",
        "description": "Constructs the object from a BSON array or document"
    },
    {
        "href": "mongodb-bson-utcdatetime.jsonserialize.php",
        "name": "MongoDB\\BSON\\UTCDateTime::jsonSerialize",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "href": "mongodb-bson-utcdatetime.serialize.php",
        "name": "MongoDB\\BSON\\UTCDateTime::serialize",
        "description": "Serialize a UTCDateTime"
    },
    {
        "href": "mongodb-bson-utcdatetime.todatetime.php",
        "name": "MongoDB\\BSON\\UTCDateTime::toDateTime",
        "description": "Returns the DateTime representation of this UTCDateTime"
    },
    {
        "href": "mongodb-bson-utcdatetime.unserialize.php",
        "name": "MongoDB\\BSON\\UTCDateTime::unserialize",
        "description": "Unserialize a UTCDateTime"
    },
    {
        "href": "mongodb-bson-utcdatetime.construct.php",
        "name": "MongoDB\\BSON\\UTCDateTime::__construct",
        "description": "Construct a new UTCDateTime"
    },
    {
        "href": "mongodb-bson-utcdatetime.tostring.php",
        "name": "MongoDB\\BSON\\UTCDateTime::__toString",
        "description": "Returns the string representation of this UTCDateTime"
    },
    {
        "href": "mongodb-bson-utcdatetimeinterface.todatetime.php",
        "name": "MongoDB\\BSON\\UTCDateTimeInterface::toDateTime",
        "description": "Returns the DateTime representation of this UTCDateTimeInterface"
    },
    {
        "href": "mongodb-bson-utcdatetimeinterface.tostring.php",
        "name": "MongoDB\\BSON\\UTCDateTimeInterface::__toString",
        "description": "Returns the string representation of this UTCDateTimeInterface"
    },
    {
        "href": "mongodb-driver-bulkwrite.count.php",
        "name": "MongoDB\\Driver\\BulkWrite::count",
        "description": "Count number of write operations in the bulk"
    },
    {
        "href": "mongodb-driver-bulkwrite.delete.php",
        "name": "MongoDB\\Driver\\BulkWrite::delete",
        "description": "Add a delete operation to the bulk"
    },
    {
        "href": "mongodb-driver-bulkwrite.insert.php",
        "name": "MongoDB\\Driver\\BulkWrite::insert",
        "description": "Add an insert operation to the bulk"
    },
    {
        "href": "mongodb-driver-bulkwrite.update.php",
        "name": "MongoDB\\Driver\\BulkWrite::update",
        "description": "Add an update operation to the bulk"
    },
    {
        "href": "mongodb-driver-bulkwrite.construct.php",
        "name": "MongoDB\\Driver\\BulkWrite::__construct",
        "description": "Create a new BulkWrite"
    },
    {
        "href": "mongodb-driver-clientencryption.createdatakey.php",
        "name": "MongoDB\\Driver\\ClientEncryption::createDataKey",
        "description": "Create a new encryption data key"
    },
    {
        "href": "mongodb-driver-clientencryption.decrypt.php",
        "name": "MongoDB\\Driver\\ClientEncryption::decrypt",
        "description": "Decrypt a value"
    },
    {
        "href": "mongodb-driver-clientencryption.encrypt.php",
        "name": "MongoDB\\Driver\\ClientEncryption::encrypt",
        "description": "Encrypt a value"
    },
    {
        "href": "mongodb-driver-command.construct.php",
        "name": "MongoDB\\Driver\\Command::__construct",
        "description": "Create a new Command"
    },
    {
        "href": "mongodb-driver-cursor.current.php",
        "name": "MongoDB\\Driver\\Cursor::current",
        "description": "Returns the current element"
    },
    {
        "href": "mongodb-driver-cursor.getid.php",
        "name": "MongoDB\\Driver\\Cursor::getId",
        "description": "Returns the ID for this cursor"
    },
    {
        "href": "mongodb-driver-cursor.getserver.php",
        "name": "MongoDB\\Driver\\Cursor::getServer",
        "description": "Returns the server associated with this cursor"
    },
    {
        "href": "mongodb-driver-cursor.isdead.php",
        "name": "MongoDB\\Driver\\Cursor::isDead",
        "description": "Checks if the cursor is exhausted or may have additional results"
    },
    {
        "href": "mongodb-driver-cursor.key.php",
        "name": "MongoDB\\Driver\\Cursor::key",
        "description": "Returns the current result's index within the cursor"
    },
    {
        "href": "mongodb-driver-cursor.next.php",
        "name": "MongoDB\\Driver\\Cursor::next",
        "description": "Advances the cursor to the next result"
    },
    {
        "href": "mongodb-driver-cursor.rewind.php",
        "name": "MongoDB\\Driver\\Cursor::rewind",
        "description": "Rewind the cursor to the first result"
    },
    {
        "href": "mongodb-driver-cursor.settypemap.php",
        "name": "MongoDB\\Driver\\Cursor::setTypeMap",
        "description": "Sets a type map to use for BSON unserialization"
    },
    {
        "href": "mongodb-driver-cursor.toarray.php",
        "name": "MongoDB\\Driver\\Cursor::toArray",
        "description": "Returns an array containing all results for this cursor"
    },
    {
        "href": "mongodb-driver-cursor.valid.php",
        "name": "MongoDB\\Driver\\Cursor::valid",
        "description": "Checks if the current position in the cursor is valid"
    },
    {
        "href": "mongodb-driver-cursor.construct.php",
        "name": "MongoDB\\Driver\\Cursor::__construct",
        "description": "Create a new Cursor (not used)"
    },
    {
        "href": "mongodb-driver-cursorid.serialize.php",
        "name": "MongoDB\\Driver\\CursorId::serialize",
        "description": "Serialize a CursorId"
    },
    {
        "href": "mongodb-driver-cursorid.unserialize.php",
        "name": "MongoDB\\Driver\\CursorId::unserialize",
        "description": "Unserialize a CursorId"
    },
    {
        "href": "mongodb-driver-cursorid.construct.php",
        "name": "MongoDB\\Driver\\CursorId::__construct",
        "description": "Create a new CursorId (not used)"
    },
    {
        "href": "mongodb-driver-cursorid.tostring.php",
        "name": "MongoDB\\Driver\\CursorId::__toString",
        "description": "String representation of the cursor ID"
    },
    {
        "href": "mongodb-driver-cursorinterface.getid.php",
        "name": "MongoDB\\Driver\\CursorInterface::getId",
        "description": "Returns the ID for this cursor"
    },
    {
        "href": "mongodb-driver-cursorinterface.getserver.php",
        "name": "MongoDB\\Driver\\CursorInterface::getServer",
        "description": "Returns the server associated with this cursor"
    },
    {
        "href": "mongodb-driver-cursorinterface.isdead.php",
        "name": "MongoDB\\Driver\\CursorInterface::isDead",
        "description": "Checks if the cursor may have additional results"
    },
    {
        "href": "mongodb-driver-cursorinterface.settypemap.php",
        "name": "MongoDB\\Driver\\CursorInterface::setTypeMap",
        "description": "Sets a type map to use for BSON unserialization"
    },
    {
        "href": "mongodb-driver-cursorinterface.toarray.php",
        "name": "MongoDB\\Driver\\CursorInterface::toArray",
        "description": "Returns an array containing all results for this cursor"
    },
    {
        "href": "mongodb-driver-commandexception.getresultdocument.php",
        "name": "MongoDB\\Driver\\Exception\\CommandException::getResultDocument",
        "description": "Returns the result document for the failed command"
    },
    {
        "href": "mongodb-driver-runtimeexception.haserrorlabel.php",
        "name": "MongoDB\\Driver\\Exception\\RuntimeException::hasErrorLabel",
        "description": "Returns whether an error label is associated with an exception"
    },
    {
        "href": "mongodb-driver-writeexception.getwriteresult.php",
        "name": "MongoDB\\Driver\\Exception\\WriteException::getWriteResult",
        "description": "Returns the WriteResult for the failed write operation"
    },
    {
        "href": "mongodb-driver-manager.addsubscriber.php",
        "name": "MongoDB\\Driver\\Manager::addSubscriber",
        "description": "Registers a monitoring event subscriber with this Manager"
    },
    {
        "href": "mongodb-driver-manager.createclientencryption.php",
        "name": "MongoDB\\Driver\\Manager::createClientEncryption",
        "description": "Create a new ClientEncryption object"
    },
    {
        "href": "mongodb-driver-manager.executebulkwrite.php",
        "name": "MongoDB\\Driver\\Manager::executeBulkWrite",
        "description": "Execute one or more write operations"
    },
    {
        "href": "mongodb-driver-manager.executecommand.php",
        "name": "MongoDB\\Driver\\Manager::executeCommand",
        "description": "Execute a database command"
    },
    {
        "href": "mongodb-driver-manager.executequery.php",
        "name": "MongoDB\\Driver\\Manager::executeQuery",
        "description": "Execute a database query"
    },
    {
        "href": "mongodb-driver-manager.executereadcommand.php",
        "name": "MongoDB\\Driver\\Manager::executeReadCommand",
        "description": "Execute a database command that reads"
    },
    {
        "href": "mongodb-driver-manager.executereadwritecommand.php",
        "name": "MongoDB\\Driver\\Manager::executeReadWriteCommand",
        "description": "Execute a database command that reads and writes"
    },
    {
        "href": "mongodb-driver-manager.executewritecommand.php",
        "name": "MongoDB\\Driver\\Manager::executeWriteCommand",
        "description": "Execute a database command that writes"
    },
    {
        "href": "mongodb-driver-manager.getreadconcern.php",
        "name": "MongoDB\\Driver\\Manager::getReadConcern",
        "description": "Return the ReadConcern for the Manager"
    },
    {
        "href": "mongodb-driver-manager.getreadpreference.php",
        "name": "MongoDB\\Driver\\Manager::getReadPreference",
        "description": "Return the ReadPreference for the Manager"
    },
    {
        "href": "mongodb-driver-manager.getservers.php",
        "name": "MongoDB\\Driver\\Manager::getServers",
        "description": "Return the servers to which this manager is connected"
    },
    {
        "href": "mongodb-driver-manager.getwriteconcern.php",
        "name": "MongoDB\\Driver\\Manager::getWriteConcern",
        "description": "Return the WriteConcern for the Manager"
    },
    {
        "href": "mongodb-driver-manager.removesubscriber.php",
        "name": "MongoDB\\Driver\\Manager::removeSubscriber",
        "description": "Unregisters a monitoring event subscriber with this Manager"
    },
    {
        "href": "mongodb-driver-manager.selectserver.php",
        "name": "MongoDB\\Driver\\Manager::selectServer",
        "description": "Select a server matching a read preference"
    },
    {
        "href": "mongodb-driver-manager.startsession.php",
        "name": "MongoDB\\Driver\\Manager::startSession",
        "description": "Start a new client session for use with this client"
    },
    {
        "href": "mongodb-driver-manager.construct.php",
        "name": "MongoDB\\Driver\\Manager::__construct",
        "description": "Create new MongoDB Manager"
    },
    {
        "href": "function.mongodb.driver.monitoring.addsubscriber.php",
        "name": "MongoDB\\Driver\\Monitoring\\addSubscriber",
        "description": "Registers a monitoring event subscriber globally"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getcommandname.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getCommandName",
        "description": "Returns the command name"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getdurationmicros.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getDurationMicros",
        "description": "Returns the command's duration in microseconds"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.geterror.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getError",
        "description": "Returns the Exception associated with the failed command"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getoperationid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getOperationId",
        "description": "Returns the command's operation ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getreply.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getReply",
        "description": "Returns the command reply document"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getrequestid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getRequestId",
        "description": "Returns the command's request ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getserver.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServer",
        "description": "Returns the Server on which the command was executed"
    },
    {
        "href": "mongodb-driver-monitoring-commandfailedevent.getserviceid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServiceId",
        "description": "Returns the load balancer service ID for the command"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getcommand.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommand",
        "description": "Returns the command document"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getcommandname.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommandName",
        "description": "Returns the command name"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getdatabasename.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getDatabaseName",
        "description": "Returns the database on which the command was executed"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getoperationid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getOperationId",
        "description": "Returns the command's operation ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getrequestid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getRequestId",
        "description": "Returns the command's request ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getserver.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServer",
        "description": "Returns the Server on which the command was executed"
    },
    {
        "href": "mongodb-driver-monitoring-commandstartedevent.getserviceid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServiceId",
        "description": "Returns the load balancer service ID for the command"
    },
    {
        "href": "mongodb-driver-monitoring-commandsubscriber.commandfailed.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandFailed",
        "description": "Notification method for a failed command"
    },
    {
        "href": "mongodb-driver-monitoring-commandsubscriber.commandstarted.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandStarted",
        "description": "Notification method for a started command"
    },
    {
        "href": "mongodb-driver-monitoring-commandsubscriber.commandsucceeded.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandSucceeded",
        "description": "Notification method for a successful command"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getcommandname.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getCommandName",
        "description": "Returns the command name"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getdurationmicros.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getDurationMicros",
        "description": "Returns the command's duration in microseconds"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getoperationid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getOperationId",
        "description": "Returns the command's operation ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getreply.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getReply",
        "description": "Returns the command reply document"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getrequestid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getRequestId",
        "description": "Returns the command's request ID"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getserver.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServer",
        "description": "Returns the Server on which the command was executed"
    },
    {
        "href": "mongodb-driver-monitoring-commandsucceededevent.getserviceid.php",
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServiceId",
        "description": "Returns the load balancer service ID for the command"
    },
    {
        "href": "function.mongodb.driver.monitoring.removesubscriber.php",
        "name": "MongoDB\\Driver\\Monitoring\\removeSubscriber",
        "description": "Unregisters a monitoring event subscriber globally"
    },
    {
        "href": "mongodb-driver-query.construct.php",
        "name": "MongoDB\\Driver\\Query::__construct",
        "description": "Create a new Query"
    },
    {
        "href": "mongodb-driver-readconcern.bsonserialize.php",
        "name": "MongoDB\\Driver\\ReadConcern::bsonSerialize",
        "description": "Returns an object for BSON serialization"
    },
    {
        "href": "mongodb-driver-readconcern.getlevel.php",
        "name": "MongoDB\\Driver\\ReadConcern::getLevel",
        "description": "Returns the ReadConcern's \"level\" option"
    },
    {
        "href": "mongodb-driver-readconcern.isdefault.php",
        "name": "MongoDB\\Driver\\ReadConcern::isDefault",
        "description": "Checks if this is the default read concern"
    },
    {
        "href": "mongodb-driver-readconcern.serialize.php",
        "name": "MongoDB\\Driver\\ReadConcern::serialize",
        "description": "Serialize a ReadConcern"
    },
    {
        "href": "mongodb-driver-readconcern.unserialize.php",
        "name": "MongoDB\\Driver\\ReadConcern::unserialize",
        "description": "Unserialize a ReadConcern"
    },
    {
        "href": "mongodb-driver-readconcern.construct.php",
        "name": "MongoDB\\Driver\\ReadConcern::__construct",
        "description": "Create a new ReadConcern"
    },
    {
        "href": "mongodb-driver-readpreference.bsonserialize.php",
        "name": "MongoDB\\Driver\\ReadPreference::bsonSerialize",
        "description": "Returns an object for BSON serialization"
    },
    {
        "href": "mongodb-driver-readpreference.gethedge.php",
        "name": "MongoDB\\Driver\\ReadPreference::getHedge",
        "description": "Returns the ReadPreference's \"hedge\" option"
    },
    {
        "href": "mongodb-driver-readpreference.getmaxstalenessseconds.php",
        "name": "MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds",
        "description": "Returns the ReadPreference's \"maxStalenessSeconds\" option"
    },
    {
        "href": "mongodb-driver-readpreference.getmode.php",
        "name": "MongoDB\\Driver\\ReadPreference::getMode",
        "description": "Returns the ReadPreference's \"mode\" option"
    },
    {
        "href": "mongodb-driver-readpreference.getmodestring.php",
        "name": "MongoDB\\Driver\\ReadPreference::getModeString",
        "description": "Returns the ReadPreference's \"mode\" option as a string"
    },
    {
        "href": "mongodb-driver-readpreference.gettagsets.php",
        "name": "MongoDB\\Driver\\ReadPreference::getTagSets",
        "description": "Returns the ReadPreference's \"tagSets\" option"
    },
    {
        "href": "mongodb-driver-readpreference.serialize.php",
        "name": "MongoDB\\Driver\\ReadPreference::serialize",
        "description": "Serialize a ReadPreference"
    },
    {
        "href": "mongodb-driver-readpreference.unserialize.php",
        "name": "MongoDB\\Driver\\ReadPreference::unserialize",
        "description": "Unserialize a ReadPreference"
    },
    {
        "href": "mongodb-driver-readpreference.construct.php",
        "name": "MongoDB\\Driver\\ReadPreference::__construct",
        "description": "Create a new ReadPreference"
    },
    {
        "href": "mongodb-driver-server.executebulkwrite.php",
        "name": "MongoDB\\Driver\\Server::executeBulkWrite",
        "description": "Execute one or more write operations on this server"
    },
    {
        "href": "mongodb-driver-server.executecommand.php",
        "name": "MongoDB\\Driver\\Server::executeCommand",
        "description": "Execute a database command on this server"
    },
    {
        "href": "mongodb-driver-server.executequery.php",
        "name": "MongoDB\\Driver\\Server::executeQuery",
        "description": "Execute a database query on this server"
    },
    {
        "href": "mongodb-driver-server.executereadcommand.php",
        "name": "MongoDB\\Driver\\Server::executeReadCommand",
        "description": "Execute a database command that reads on this server"
    },
    {
        "href": "mongodb-driver-server.executereadwritecommand.php",
        "name": "MongoDB\\Driver\\Server::executeReadWriteCommand",
        "description": "Execute a database command that reads and writes on this server"
    },
    {
        "href": "mongodb-driver-server.executewritecommand.php",
        "name": "MongoDB\\Driver\\Server::executeWriteCommand",
        "description": "Execute a database command that writes on this server"
    },
    {
        "href": "mongodb-driver-server.gethost.php",
        "name": "MongoDB\\Driver\\Server::getHost",
        "description": "Returns the hostname of this server"
    },
    {
        "href": "mongodb-driver-server.getinfo.php",
        "name": "MongoDB\\Driver\\Server::getInfo",
        "description": "Returns an array of information describing this server"
    },
    {
        "href": "mongodb-driver-server.getlatency.php",
        "name": "MongoDB\\Driver\\Server::getLatency",
        "description": "Returns the latency of this server in milliseconds"
    },
    {
        "href": "mongodb-driver-server.getport.php",
        "name": "MongoDB\\Driver\\Server::getPort",
        "description": "Returns the port on which this server is listening"
    },
    {
        "href": "mongodb-driver-server.gettags.php",
        "name": "MongoDB\\Driver\\Server::getTags",
        "description": "Returns an array of tags describing this server in a replica set"
    },
    {
        "href": "mongodb-driver-server.gettype.php",
        "name": "MongoDB\\Driver\\Server::getType",
        "description": "Returns an integer denoting the type of this server"
    },
    {
        "href": "mongodb-driver-server.isarbiter.php",
        "name": "MongoDB\\Driver\\Server::isArbiter",
        "description": "Checks if this server is an arbiter member of a replica set"
    },
    {
        "href": "mongodb-driver-server.ishidden.php",
        "name": "MongoDB\\Driver\\Server::isHidden",
        "description": "Checks if this server is a hidden member of a replica set"
    },
    {
        "href": "mongodb-driver-server.ispassive.php",
        "name": "MongoDB\\Driver\\Server::isPassive",
        "description": "Checks if this server is a passive member of a replica set"
    },
    {
        "href": "mongodb-driver-server.isprimary.php",
        "name": "MongoDB\\Driver\\Server::isPrimary",
        "description": "Checks if this server is a primary member of a replica set"
    },
    {
        "href": "mongodb-driver-server.issecondary.php",
        "name": "MongoDB\\Driver\\Server::isSecondary",
        "description": "Checks if this server is a secondary member of a replica set"
    },
    {
        "href": "mongodb-driver-server.construct.php",
        "name": "MongoDB\\Driver\\Server::__construct",
        "description": "Create a new Server (not used)"
    },
    {
        "href": "mongodb-driver-serverapi.bsonserialize.php",
        "name": "MongoDB\\Driver\\ServerApi::bsonSerialize",
        "description": "Returns an object for BSON serialization"
    },
    {
        "href": "mongodb-driver-serverapi.serialize.php",
        "name": "MongoDB\\Driver\\ServerApi::serialize",
        "description": "Serialize a ServerApi"
    },
    {
        "href": "mongodb-driver-serverapi.unserialize.php",
        "name": "MongoDB\\Driver\\ServerApi::unserialize",
        "description": "Unserialize a ServerApi"
    },
    {
        "href": "mongodb-driver-serverapi.construct.php",
        "name": "MongoDB\\Driver\\ServerApi::__construct",
        "description": "Create a new ServerApi instance"
    },
    {
        "href": "mongodb-driver-session.aborttransaction.php",
        "name": "MongoDB\\Driver\\Session::abortTransaction",
        "description": "Aborts a transaction"
    },
    {
        "href": "mongodb-driver-session.advanceclustertime.php",
        "name": "MongoDB\\Driver\\Session::advanceClusterTime",
        "description": "Advances the cluster time for this session"
    },
    {
        "href": "mongodb-driver-session.advanceoperationtime.php",
        "name": "MongoDB\\Driver\\Session::advanceOperationTime",
        "description": "Advances the operation time for this session"
    },
    {
        "href": "mongodb-driver-session.committransaction.php",
        "name": "MongoDB\\Driver\\Session::commitTransaction",
        "description": "Commits a transaction"
    },
    {
        "href": "mongodb-driver-session.endsession.php",
        "name": "MongoDB\\Driver\\Session::endSession",
        "description": "Terminates a session"
    },
    {
        "href": "mongodb-driver-session.getclustertime.php",
        "name": "MongoDB\\Driver\\Session::getClusterTime",
        "description": "Returns the cluster time for this session"
    },
    {
        "href": "mongodb-driver-session.getlogicalsessionid.php",
        "name": "MongoDB\\Driver\\Session::getLogicalSessionId",
        "description": "Returns the logical session ID for this session"
    },
    {
        "href": "mongodb-driver-session.getoperationtime.php",
        "name": "MongoDB\\Driver\\Session::getOperationTime",
        "description": "Returns the operation time for this session"
    },
    {
        "href": "mongodb-driver-session.getserver.php",
        "name": "MongoDB\\Driver\\Session::getServer",
        "description": "Returns the server to which this session is pinned"
    },
    {
        "href": "mongodb-driver-session.gettransactionoptions.php",
        "name": "MongoDB\\Driver\\Session::getTransactionOptions",
        "description": "Returns options for the currently running transaction"
    },
    {
        "href": "mongodb-driver-session.gettransactionstate.php",
        "name": "MongoDB\\Driver\\Session::getTransactionState",
        "description": "Returns the current transaction state for this session"
    },
    {
        "href": "mongodb-driver-session.isintransaction.php",
        "name": "MongoDB\\Driver\\Session::isInTransaction",
        "description": "Returns whether a multi-document transaction is in progress"
    },
    {
        "href": "mongodb-driver-session.starttransaction.php",
        "name": "MongoDB\\Driver\\Session::startTransaction",
        "description": "Starts a transaction"
    },
    {
        "href": "mongodb-driver-session.construct.php",
        "name": "MongoDB\\Driver\\Session::__construct",
        "description": "Create a new Session (not used)"
    },
    {
        "href": "mongodb-driver-writeconcern.bsonserialize.php",
        "name": "MongoDB\\Driver\\WriteConcern::bsonSerialize",
        "description": "Returns an object for BSON serialization"
    },
    {
        "href": "mongodb-driver-writeconcern.getjournal.php",
        "name": "MongoDB\\Driver\\WriteConcern::getJournal",
        "description": "Returns the WriteConcern's \"journal\" option"
    },
    {
        "href": "mongodb-driver-writeconcern.getw.php",
        "name": "MongoDB\\Driver\\WriteConcern::getW",
        "description": "Returns the WriteConcern's \"w\" option"
    },
    {
        "href": "mongodb-driver-writeconcern.getwtimeout.php",
        "name": "MongoDB\\Driver\\WriteConcern::getWtimeout",
        "description": "Returns the WriteConcern's \"wtimeout\" option"
    },
    {
        "href": "mongodb-driver-writeconcern.isdefault.php",
        "name": "MongoDB\\Driver\\WriteConcern::isDefault",
        "description": "Checks if this is the default write concern"
    },
    {
        "href": "mongodb-driver-writeconcern.serialize.php",
        "name": "MongoDB\\Driver\\WriteConcern::serialize",
        "description": "Serialize a WriteConcern"
    },
    {
        "href": "mongodb-driver-writeconcern.unserialize.php",
        "name": "MongoDB\\Driver\\WriteConcern::unserialize",
        "description": "Unserialize a WriteConcern"
    },
    {
        "href": "mongodb-driver-writeconcern.construct.php",
        "name": "MongoDB\\Driver\\WriteConcern::__construct",
        "description": "Create a new WriteConcern"
    },
    {
        "href": "mongodb-driver-writeconcernerror.getcode.php",
        "name": "MongoDB\\Driver\\WriteConcernError::getCode",
        "description": "Returns the WriteConcernError's error code"
    },
    {
        "href": "mongodb-driver-writeconcernerror.getinfo.php",
        "name": "MongoDB\\Driver\\WriteConcernError::getInfo",
        "description": "Returns metadata document for the WriteConcernError"
    },
    {
        "href": "mongodb-driver-writeconcernerror.getmessage.php",
        "name": "MongoDB\\Driver\\WriteConcernError::getMessage",
        "description": "Returns the WriteConcernError's error message"
    },
    {
        "href": "mongodb-driver-writeerror.getcode.php",
        "name": "MongoDB\\Driver\\WriteError::getCode",
        "description": "Returns the WriteError's error code"
    },
    {
        "href": "mongodb-driver-writeerror.getindex.php",
        "name": "MongoDB\\Driver\\WriteError::getIndex",
        "description": "Returns the index of the write operation corresponding to this WriteError"
    },
    {
        "href": "mongodb-driver-writeerror.getinfo.php",
        "name": "MongoDB\\Driver\\WriteError::getInfo",
        "description": "Returns metadata document for the WriteError"
    },
    {
        "href": "mongodb-driver-writeerror.getmessage.php",
        "name": "MongoDB\\Driver\\WriteError::getMessage",
        "description": "Returns the WriteError's error message"
    },
    {
        "href": "mongodb-driver-writeresult.getdeletedcount.php",
        "name": "MongoDB\\Driver\\WriteResult::getDeletedCount",
        "description": "Returns the number of documents deleted"
    },
    {
        "href": "mongodb-driver-writeresult.getinsertedcount.php",
        "name": "MongoDB\\Driver\\WriteResult::getInsertedCount",
        "description": "Returns the number of documents inserted (excluding upserts)"
    },
    {
        "href": "mongodb-driver-writeresult.getmatchedcount.php",
        "name": "MongoDB\\Driver\\WriteResult::getMatchedCount",
        "description": "Returns the number of documents selected for update"
    },
    {
        "href": "mongodb-driver-writeresult.getmodifiedcount.php",
        "name": "MongoDB\\Driver\\WriteResult::getModifiedCount",
        "description": "Returns the number of existing documents updated"
    },
    {
        "href": "mongodb-driver-writeresult.getserver.php",
        "name": "MongoDB\\Driver\\WriteResult::getServer",
        "description": "Returns the server associated with this write result"
    },
    {
        "href": "mongodb-driver-writeresult.getupsertedcount.php",
        "name": "MongoDB\\Driver\\WriteResult::getUpsertedCount",
        "description": "Returns the number of documents inserted by an upsert"
    },
    {
        "href": "mongodb-driver-writeresult.getupsertedids.php",
        "name": "MongoDB\\Driver\\WriteResult::getUpsertedIds",
        "description": "Returns an array of identifiers for upserted documents"
    },
    {
        "href": "mongodb-driver-writeresult.getwriteconcernerror.php",
        "name": "MongoDB\\Driver\\WriteResult::getWriteConcernError",
        "description": "Returns any write concern error that occurred"
    },
    {
        "href": "mongodb-driver-writeresult.getwriteerrors.php",
        "name": "MongoDB\\Driver\\WriteResult::getWriteErrors",
        "description": "Returns any write errors that occurred"
    },
    {
        "href": "mongodb-driver-writeresult.isacknowledged.php",
        "name": "MongoDB\\Driver\\WriteResult::isAcknowledged",
        "description": "Returns whether the write was acknowledged"
    },
    {
        "href": "function.move-uploaded-file.php",
        "name": "move_uploaded_file",
        "description": "Moves an uploaded file to a new location"
    },
    {
        "href": "function.mqseries-back.php",
        "name": "mqseries_back",
        "description": "MQSeries MQBACK"
    },
    {
        "href": "function.mqseries-begin.php",
        "name": "mqseries_begin",
        "description": "MQseries MQBEGIN"
    },
    {
        "href": "function.mqseries-close.php",
        "name": "mqseries_close",
        "description": "MQSeries MQCLOSE"
    },
    {
        "href": "function.mqseries-cmit.php",
        "name": "mqseries_cmit",
        "description": "MQSeries MQCMIT"
    },
    {
        "href": "function.mqseries-conn.php",
        "name": "mqseries_conn",
        "description": "MQSeries MQCONN"
    },
    {
        "href": "function.mqseries-connx.php",
        "name": "mqseries_connx",
        "description": "MQSeries MQCONNX"
    },
    {
        "href": "function.mqseries-disc.php",
        "name": "mqseries_disc",
        "description": "MQSeries MQDISC"
    },
    {
        "href": "function.mqseries-get.php",
        "name": "mqseries_get",
        "description": "MQSeries MQGET"
    },
    {
        "href": "function.mqseries-inq.php",
        "name": "mqseries_inq",
        "description": "MQSeries MQINQ"
    },
    {
        "href": "function.mqseries-open.php",
        "name": "mqseries_open",
        "description": "MQSeries MQOPEN"
    },
    {
        "href": "function.mqseries-put.php",
        "name": "mqseries_put",
        "description": "MQSeries MQPUT"
    },
    {
        "href": "function.mqseries-put1.php",
        "name": "mqseries_put1",
        "description": "MQSeries MQPUT1"
    },
    {
        "href": "function.mqseries-set.php",
        "name": "mqseries_set",
        "description": "MQSeries MQSET"
    },
    {
        "href": "function.mqseries-strerror.php",
        "name": "mqseries_strerror",
        "description": "Returns the error message corresponding to a result code (MQRC)"
    },
    {
        "href": "function.msg-get-queue.php",
        "name": "msg_get_queue",
        "description": "Create or attach to a message queue"
    },
    {
        "href": "function.msg-queue-exists.php",
        "name": "msg_queue_exists",
        "description": "Check whether a message queue exists"
    },
    {
        "href": "function.msg-receive.php",
        "name": "msg_receive",
        "description": "Receive a message from a message queue"
    },
    {
        "href": "function.msg-remove-queue.php",
        "name": "msg_remove_queue",
        "description": "Destroy a message queue"
    },
    {
        "href": "function.msg-send.php",
        "name": "msg_send",
        "description": "Send a message to a message queue"
    },
    {
        "href": "function.msg-set-queue.php",
        "name": "msg_set_queue",
        "description": "Set information in the message queue data structure"
    },
    {
        "href": "function.msg-stat-queue.php",
        "name": "msg_stat_queue",
        "description": "Returns information from the message queue data structure"
    },
    {
        "href": "function.mt-getrandmax.php",
        "name": "mt_getrandmax",
        "description": "Show largest possible random value"
    },
    {
        "href": "function.mt-rand.php",
        "name": "mt_rand",
        "description": "Generate a random value via the Mersenne Twister Random Number Generator"
    },
    {
        "href": "function.mt-srand.php",
        "name": "mt_srand",
        "description": "Seeds the Mersenne Twister Random Number Generator"
    },
    {
        "href": "multipleiterator.attachiterator.php",
        "name": "MultipleIterator::attachIterator",
        "description": "Attaches iterator information"
    },
    {
        "href": "multipleiterator.containsiterator.php",
        "name": "MultipleIterator::containsIterator",
        "description": "Checks if an iterator is attached"
    },
    {
        "href": "multipleiterator.countiterators.php",
        "name": "MultipleIterator::countIterators",
        "description": "Gets the number of attached iterator instances"
    },
    {
        "href": "multipleiterator.current.php",
        "name": "MultipleIterator::current",
        "description": "Gets the registered iterator instances"
    },
    {
        "href": "multipleiterator.detachiterator.php",
        "name": "MultipleIterator::detachIterator",
        "description": "Detaches an iterator"
    },
    {
        "href": "multipleiterator.getflags.php",
        "name": "MultipleIterator::getFlags",
        "description": "Gets the flag information"
    },
    {
        "href": "multipleiterator.key.php",
        "name": "MultipleIterator::key",
        "description": "Gets the registered iterator instances"
    },
    {
        "href": "multipleiterator.next.php",
        "name": "MultipleIterator::next",
        "description": "Moves all attached iterator instances forward"
    },
    {
        "href": "multipleiterator.rewind.php",
        "name": "MultipleIterator::rewind",
        "description": "Rewinds all attached iterator instances"
    },
    {
        "href": "multipleiterator.setflags.php",
        "name": "MultipleIterator::setFlags",
        "description": "Sets flags"
    },
    {
        "href": "multipleiterator.valid.php",
        "name": "MultipleIterator::valid",
        "description": "Checks the validity of sub iterators"
    },
    {
        "href": "multipleiterator.construct.php",
        "name": "MultipleIterator::__construct",
        "description": "Constructs a new MultipleIterator"
    },
    {
        "href": "mysqli.affected-rows.php",
        "name": "mysqli::$affected_rows",
        "description": "Gets the number of affected rows in a previous MySQL operation"
    },
    {
        "href": "mysqli.get-client-info.php",
        "name": "mysqli::$client_info",
        "description": "Get MySQL client info"
    },
    {
        "href": "mysqli.get-client-version.php",
        "name": "mysqli::$client_version",
        "description": "Returns the MySQL client version as an integer"
    },
    {
        "href": "mysqli.connect-errno.php",
        "name": "mysqli::$connect_errno",
        "description": "Returns the error code from last connect call"
    },
    {
        "href": "mysqli.connect-error.php",
        "name": "mysqli::$connect_error",
        "description": "Returns a description of the last connection error"
    },
    {
        "href": "mysqli.errno.php",
        "name": "mysqli::$errno",
        "description": "Returns the error code for the most recent function call"
    },
    {
        "href": "mysqli.error.php",
        "name": "mysqli::$error",
        "description": "Returns a string description of the last error"
    },
    {
        "href": "mysqli.error-list.php",
        "name": "mysqli::$error_list",
        "description": "Returns a list of errors from the last command executed"
    },
    {
        "href": "mysqli.field-count.php",
        "name": "mysqli::$field_count",
        "description": "Returns the number of columns for the most recent query"
    },
    {
        "href": "mysqli.get-host-info.php",
        "name": "mysqli::$host_info",
        "description": "Returns a string representing the type of connection used"
    },
    {
        "href": "mysqli.info.php",
        "name": "mysqli::$info",
        "description": "Retrieves information about the most recently executed query"
    },
    {
        "href": "mysqli.insert-id.php",
        "name": "mysqli::$insert_id",
        "description": "Returns the value generated for an AUTO_INCREMENT column by the last query"
    },
    {
        "href": "mysqli.get-proto-info.php",
        "name": "mysqli::$protocol_version",
        "description": "Returns the version of the MySQL protocol used"
    },
    {
        "href": "mysqli.get-server-info.php",
        "name": "mysqli::$server_info",
        "description": "Returns the version of the MySQL server"
    },
    {
        "href": "mysqli.get-server-version.php",
        "name": "mysqli::$server_version",
        "description": "Returns the version of the MySQL server as an integer"
    },
    {
        "href": "mysqli.sqlstate.php",
        "name": "mysqli::$sqlstate",
        "description": "Returns the SQLSTATE error from previous MySQL operation"
    },
    {
        "href": "mysqli.thread-id.php",
        "name": "mysqli::$thread_id",
        "description": "Returns the thread ID for the current connection"
    },
    {
        "href": "mysqli.warning-count.php",
        "name": "mysqli::$warning_count",
        "description": "Returns the number of warnings from the last query for the given link"
    },
    {
        "href": "mysqli.autocommit.php",
        "name": "mysqli::autocommit",
        "description": "Turns on or off auto-committing database modifications"
    },
    {
        "href": "mysqli.begin-transaction.php",
        "name": "mysqli::begin_transaction",
        "description": "Starts a transaction"
    },
    {
        "href": "mysqli.change-user.php",
        "name": "mysqli::change_user",
        "description": "Changes the user of the specified database connection"
    },
    {
        "href": "mysqli.character-set-name.php",
        "name": "mysqli::character_set_name",
        "description": "Returns the current character set of the database connection"
    },
    {
        "href": "mysqli.close.php",
        "name": "mysqli::close",
        "description": "Closes a previously opened database connection"
    },
    {
        "href": "mysqli.commit.php",
        "name": "mysqli::commit",
        "description": "Commits the current transaction"
    },
    {
        "href": "mysqli.debug.php",
        "name": "mysqli::debug",
        "description": "Performs debugging operations"
    },
    {
        "href": "mysqli.dump-debug-info.php",
        "name": "mysqli::dump_debug_info",
        "description": "Dump debugging information into the log"
    },
    {
        "href": "function.mysqli-escape-string.php",
        "name": "mysqli::escape_string",
        "description": "Alias of mysqli_real_escape_string"
    },
    {
        "href": "mysqli.get-charset.php",
        "name": "mysqli::get_charset",
        "description": "Returns a character set object"
    },
    {
        "href": "mysqli.get-connection-stats.php",
        "name": "mysqli::get_connection_stats",
        "description": "Returns statistics about the client connection"
    },
    {
        "href": "mysqli.get-warnings.php",
        "name": "mysqli::get_warnings",
        "description": "Get result of SHOW WARNINGS"
    },
    {
        "href": "mysqli.init.php",
        "name": "mysqli::init",
        "description": "Initializes MySQLi and returns an object for use with mysqli_real_connect()"
    },
    {
        "href": "mysqli.kill.php",
        "name": "mysqli::kill",
        "description": "Asks the server to kill a MySQL thread"
    },
    {
        "href": "mysqli.more-results.php",
        "name": "mysqli::more_results",
        "description": "Check if there are any more query results from a multi query"
    },
    {
        "href": "mysqli.multi-query.php",
        "name": "mysqli::multi_query",
        "description": "Performs one or more queries on the database"
    },
    {
        "href": "mysqli.next-result.php",
        "name": "mysqli::next_result",
        "description": "Prepare next result from multi_query"
    },
    {
        "href": "mysqli.options.php",
        "name": "mysqli::options",
        "description": "Set options"
    },
    {
        "href": "mysqli.ping.php",
        "name": "mysqli::ping",
        "description": "Pings a server connection, or tries to reconnect if the connection has gone down"
    },
    {
        "href": "mysqli.poll.php",
        "name": "mysqli::poll",
        "description": "Poll connections"
    },
    {
        "href": "mysqli.prepare.php",
        "name": "mysqli::prepare",
        "description": "Prepares an SQL statement for execution"
    },
    {
        "href": "mysqli.query.php",
        "name": "mysqli::query",
        "description": "Performs a query on the database"
    },
    {
        "href": "mysqli.real-connect.php",
        "name": "mysqli::real_connect",
        "description": "Opens a connection to a mysql server"
    },
    {
        "href": "mysqli.real-escape-string.php",
        "name": "mysqli::real_escape_string",
        "description": "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection"
    },
    {
        "href": "mysqli.real-query.php",
        "name": "mysqli::real_query",
        "description": "Execute an SQL query"
    },
    {
        "href": "mysqli.reap-async-query.php",
        "name": "mysqli::reap_async_query",
        "description": "Get result from async query"
    },
    {
        "href": "mysqli.refresh.php",
        "name": "mysqli::refresh",
        "description": "Refreshes"
    },
    {
        "href": "mysqli.release-savepoint.php",
        "name": "mysqli::release_savepoint",
        "description": "Removes the named savepoint from the set of savepoints of the current transaction"
    },
    {
        "href": "mysqli.rollback.php",
        "name": "mysqli::rollback",
        "description": "Rolls back current transaction"
    },
    {
        "href": "mysqli.savepoint.php",
        "name": "mysqli::savepoint",
        "description": "Set a named transaction savepoint"
    },
    {
        "href": "mysqli.select-db.php",
        "name": "mysqli::select_db",
        "description": "Selects the default database for database queries"
    },
    {
        "href": "mysqli.set-charset.php",
        "name": "mysqli::set_charset",
        "description": "Sets the client character set"
    },
    {
        "href": "function.mysqli-set-opt.php",
        "name": "mysqli::set_opt",
        "description": "Alias of mysqli_options"
    },
    {
        "href": "mysqli.ssl-set.php",
        "name": "mysqli::ssl_set",
        "description": "Used for establishing secure connections using SSL"
    },
    {
        "href": "mysqli.stat.php",
        "name": "mysqli::stat",
        "description": "Gets the current system status"
    },
    {
        "href": "mysqli.stmt-init.php",
        "name": "mysqli::stmt_init",
        "description": "Initializes a statement and returns an object for use with mysqli_stmt_prepare"
    },
    {
        "href": "mysqli.store-result.php",
        "name": "mysqli::store_result",
        "description": "Transfers a result set from the last query"
    },
    {
        "href": "mysqli.thread-safe.php",
        "name": "mysqli::thread_safe",
        "description": "Returns whether thread safety is given or not"
    },
    {
        "href": "mysqli.use-result.php",
        "name": "mysqli::use_result",
        "description": "Initiate a result set retrieval"
    },
    {
        "href": "mysqli.construct.php",
        "name": "mysqli::__construct",
        "description": "Open a new connection to the MySQL server"
    },
    {
        "href": "function.mysqli-connect.php",
        "name": "mysqli_connect",
        "description": "Alias of mysqli::__construct"
    },
    {
        "href": "mysqli-driver.report-mode.php",
        "name": "mysqli_driver::$report_mode",
        "description": "Sets mysqli error reporting mode"
    },
    {
        "href": "mysqli-driver.embedded-server-end.php",
        "name": "mysqli_driver::embedded_server_end",
        "description": "Stop embedded server"
    },
    {
        "href": "mysqli-driver.embedded-server-start.php",
        "name": "mysqli_driver::embedded_server_start",
        "description": "Initialize and start embedded server"
    },
    {
        "href": "function.mysqli-execute.php",
        "name": "mysqli_execute",
        "description": "Alias for mysqli_stmt_execute"
    },
    {
        "href": "function.mysqli-get-client-stats.php",
        "name": "mysqli_get_client_stats",
        "description": "Returns client per-process statistics"
    },
    {
        "href": "function.mysqli-get-links-stats.php",
        "name": "mysqli_get_links_stats",
        "description": "Return information about open and cached links"
    },
    {
        "href": "function.mysqli-report.php",
        "name": "mysqli_report",
        "description": "Alias of mysqli_driver-&gt;report_mode"
    },
    {
        "href": "mysqli-result.current-field.php",
        "name": "mysqli_result::$current_field",
        "description": "Get current field offset of a result pointer"
    },
    {
        "href": "mysqli-result.field-count.php",
        "name": "mysqli_result::$field_count",
        "description": "Gets the number of fields in the result set"
    },
    {
        "href": "mysqli-result.lengths.php",
        "name": "mysqli_result::$lengths",
        "description": "Returns the lengths of the columns of the current row in the result set"
    },
    {
        "href": "mysqli-result.num-rows.php",
        "name": "mysqli_result::$num_rows",
        "description": "Gets the number of rows in the result set"
    },
    {
        "href": "mysqli-result.data-seek.php",
        "name": "mysqli_result::data_seek",
        "description": "Adjusts the result pointer to an arbitrary row in the result"
    },
    {
        "href": "mysqli-result.fetch-all.php",
        "name": "mysqli_result::fetch_all",
        "description": "Fetch all result rows as an associative array, a numeric array, or both"
    },
    {
        "href": "mysqli-result.fetch-array.php",
        "name": "mysqli_result::fetch_array",
        "description": "Fetch the next row of a result set as an associative, a numeric array, or both"
    },
    {
        "href": "mysqli-result.fetch-assoc.php",
        "name": "mysqli_result::fetch_assoc",
        "description": "Fetch the next row of a result set as an associative array"
    },
    {
        "href": "mysqli-result.fetch-column.php",
        "name": "mysqli_result::fetch_column",
        "description": "Fetch a single column from the next row of a result set"
    },
    {
        "href": "mysqli-result.fetch-field.php",
        "name": "mysqli_result::fetch_field",
        "description": "Returns the next field in the result set"
    },
    {
        "href": "mysqli-result.fetch-fields.php",
        "name": "mysqli_result::fetch_fields",
        "description": "Returns an array of objects representing the fields in a result set"
    },
    {
        "href": "mysqli-result.fetch-field-direct.php",
        "name": "mysqli_result::fetch_field_direct",
        "description": "Fetch meta-data for a single field"
    },
    {
        "href": "mysqli-result.fetch-object.php",
        "name": "mysqli_result::fetch_object",
        "description": "Fetch the next row of a result set as an object"
    },
    {
        "href": "mysqli-result.fetch-row.php",
        "name": "mysqli_result::fetch_row",
        "description": "Fetch the next row of a result set as an enumerated array"
    },
    {
        "href": "mysqli-result.field-seek.php",
        "name": "mysqli_result::field_seek",
        "description": "Set result pointer to a specified field offset"
    },
    {
        "href": "mysqli-result.free.php",
        "name": "mysqli_result::free",
        "description": "Frees the memory associated with a result"
    },
    {
        "href": "mysqli-result.getiterator.php",
        "name": "mysqli_result::getIterator",
        "description": "Retrieve an external iterator"
    },
    {
        "href": "mysqli-result.construct.php",
        "name": "mysqli_result::__construct",
        "description": "Constructs a mysqli_result object"
    },
    {
        "href": "mysqli-sql-exception.getsqlstate.php",
        "name": "mysqli_sql_exception::getSqlState",
        "description": "Returns the SQLSTATE error code"
    },
    {
        "href": "mysqli-stmt.affected-rows.php",
        "name": "mysqli_stmt::$affected_rows",
        "description": "Returns the total number of rows changed, deleted, inserted, or  matched by the last statement executed"
    },
    {
        "href": "mysqli-stmt.errno.php",
        "name": "mysqli_stmt::$errno",
        "description": "Returns the error code for the most recent statement call"
    },
    {
        "href": "mysqli-stmt.error.php",
        "name": "mysqli_stmt::$error",
        "description": "Returns a string description for last statement error"
    },
    {
        "href": "mysqli-stmt.error-list.php",
        "name": "mysqli_stmt::$error_list",
        "description": "Returns a list of errors from the last statement executed"
    },
    {
        "href": "mysqli-stmt.field-count.php",
        "name": "mysqli_stmt::$field_count",
        "description": "Returns the number of columns in the given statement"
    },
    {
        "href": "mysqli-stmt.insert-id.php",
        "name": "mysqli_stmt::$insert_id",
        "description": "Get the ID generated from the previous INSERT operation"
    },
    {
        "href": "mysqli-stmt.num-rows.php",
        "name": "mysqli_stmt::$num_rows",
        "description": "Returns the number of rows fetched from the server"
    },
    {
        "href": "mysqli-stmt.param-count.php",
        "name": "mysqli_stmt::$param_count",
        "description": "Returns the number of parameters for the given statement"
    },
    {
        "href": "mysqli-stmt.sqlstate.php",
        "name": "mysqli_stmt::$sqlstate",
        "description": "Returns SQLSTATE error from previous statement operation"
    },
    {
        "href": "mysqli-stmt.attr-get.php",
        "name": "mysqli_stmt::attr_get",
        "description": "Used to get the current value of a statement attribute"
    },
    {
        "href": "mysqli-stmt.attr-set.php",
        "name": "mysqli_stmt::attr_set",
        "description": "Used to modify the behavior of a prepared statement"
    },
    {
        "href": "mysqli-stmt.bind-param.php",
        "name": "mysqli_stmt::bind_param",
        "description": "Binds variables to a prepared statement as parameters"
    },
    {
        "href": "mysqli-stmt.bind-result.php",
        "name": "mysqli_stmt::bind_result",
        "description": "Binds variables to a prepared statement for result storage"
    },
    {
        "href": "mysqli-stmt.close.php",
        "name": "mysqli_stmt::close",
        "description": "Closes a prepared statement"
    },
    {
        "href": "mysqli-stmt.data-seek.php",
        "name": "mysqli_stmt::data_seek",
        "description": "Seeks to an arbitrary row in statement result set"
    },
    {
        "href": "mysqli-stmt.execute.php",
        "name": "mysqli_stmt::execute",
        "description": "Executes a prepared statement"
    },
    {
        "href": "mysqli-stmt.fetch.php",
        "name": "mysqli_stmt::fetch",
        "description": "Fetch results from a prepared statement into the bound variables"
    },
    {
        "href": "mysqli-stmt.free-result.php",
        "name": "mysqli_stmt::free_result",
        "description": "Frees stored result memory for the given statement handle"
    },
    {
        "href": "mysqli-stmt.get-result.php",
        "name": "mysqli_stmt::get_result",
        "description": "Gets a result set from a prepared statement as a mysqli_result object"
    },
    {
        "href": "mysqli-stmt.get-warnings.php",
        "name": "mysqli_stmt::get_warnings",
        "description": "Get result of SHOW WARNINGS"
    },
    {
        "href": "mysqli-stmt.more-results.php",
        "name": "mysqli_stmt::more_results",
        "description": "Check if there are more query results from a multiple query"
    },
    {
        "href": "mysqli-stmt.next-result.php",
        "name": "mysqli_stmt::next_result",
        "description": "Reads the next result from a multiple query"
    },
    {
        "href": "mysqli-stmt.prepare.php",
        "name": "mysqli_stmt::prepare",
        "description": "Prepares an SQL statement for execution"
    },
    {
        "href": "mysqli-stmt.reset.php",
        "name": "mysqli_stmt::reset",
        "description": "Resets a prepared statement"
    },
    {
        "href": "mysqli-stmt.result-metadata.php",
        "name": "mysqli_stmt::result_metadata",
        "description": "Returns result set metadata from a prepared statement"
    },
    {
        "href": "mysqli-stmt.send-long-data.php",
        "name": "mysqli_stmt::send_long_data",
        "description": "Send data in blocks"
    },
    {
        "href": "mysqli-stmt.store-result.php",
        "name": "mysqli_stmt::store_result",
        "description": "Stores a result set in an internal buffer"
    },
    {
        "href": "mysqli-stmt.construct.php",
        "name": "mysqli_stmt::__construct",
        "description": "Constructs a new mysqli_stmt object"
    },
    {
        "href": "mysqli-warning.next.php",
        "name": "mysqli_warning::next",
        "description": "Fetch next warning"
    },
    {
        "href": "mysqli-warning.construct.php",
        "name": "mysqli_warning::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "function.mysql-affected-rows.php",
        "name": "mysql_affected_rows",
        "description": "Get number of affected rows in previous MySQL operation"
    },
    {
        "href": "function.mysql-client-encoding.php",
        "name": "mysql_client_encoding",
        "description": "Returns the name of the character set"
    },
    {
        "href": "function.mysql-close.php",
        "name": "mysql_close",
        "description": "Close MySQL connection"
    },
    {
        "href": "function.mysql-connect.php",
        "name": "mysql_connect",
        "description": "Open a connection to a MySQL Server"
    },
    {
        "href": "function.mysql-create-db.php",
        "name": "mysql_create_db",
        "description": "Create a MySQL database"
    },
    {
        "href": "function.mysql-data-seek.php",
        "name": "mysql_data_seek",
        "description": "Move internal result pointer"
    },
    {
        "href": "function.mysql-db-name.php",
        "name": "mysql_db_name",
        "description": "Retrieves database name from the call to mysql_list_dbs"
    },
    {
        "href": "function.mysql-db-query.php",
        "name": "mysql_db_query",
        "description": "Selects a database and executes a query on it"
    },
    {
        "href": "function.mysql-drop-db.php",
        "name": "mysql_drop_db",
        "description": "Drop (delete) a MySQL database"
    },
    {
        "href": "function.mysql-errno.php",
        "name": "mysql_errno",
        "description": "Returns the numerical value of the error message from previous MySQL operation"
    },
    {
        "href": "function.mysql-error.php",
        "name": "mysql_error",
        "description": "Returns the text of the error message from previous MySQL operation"
    },
    {
        "href": "function.mysql-escape-string.php",
        "name": "mysql_escape_string",
        "description": "Escapes a string for use in a mysql_query"
    },
    {
        "href": "function.mysql-fetch-array.php",
        "name": "mysql_fetch_array",
        "description": "Fetch a result row as an associative array, a numeric array, or both"
    },
    {
        "href": "function.mysql-fetch-assoc.php",
        "name": "mysql_fetch_assoc",
        "description": "Fetch a result row as an associative array"
    },
    {
        "href": "function.mysql-fetch-field.php",
        "name": "mysql_fetch_field",
        "description": "Get column information from a result and return as an object"
    },
    {
        "href": "function.mysql-fetch-lengths.php",
        "name": "mysql_fetch_lengths",
        "description": "Get the length of each output in a result"
    },
    {
        "href": "function.mysql-fetch-object.php",
        "name": "mysql_fetch_object",
        "description": "Fetch a result row as an object"
    },
    {
        "href": "function.mysql-fetch-row.php",
        "name": "mysql_fetch_row",
        "description": "Get a result row as an enumerated array"
    },
    {
        "href": "function.mysql-field-flags.php",
        "name": "mysql_field_flags",
        "description": "Get the flags associated with the specified field in a result"
    },
    {
        "href": "function.mysql-field-len.php",
        "name": "mysql_field_len",
        "description": "Returns the length of the specified field"
    },
    {
        "href": "function.mysql-field-name.php",
        "name": "mysql_field_name",
        "description": "Get the name of the specified field in a result"
    },
    {
        "href": "function.mysql-field-seek.php",
        "name": "mysql_field_seek",
        "description": "Set result pointer to a specified field offset"
    },
    {
        "href": "function.mysql-field-table.php",
        "name": "mysql_field_table",
        "description": "Get name of the table the specified field is in"
    },
    {
        "href": "function.mysql-field-type.php",
        "name": "mysql_field_type",
        "description": "Get the type of the specified field in a result"
    },
    {
        "href": "function.mysql-free-result.php",
        "name": "mysql_free_result",
        "description": "Free result memory"
    },
    {
        "href": "function.mysql-get-client-info.php",
        "name": "mysql_get_client_info",
        "description": "Get MySQL client info"
    },
    {
        "href": "function.mysql-get-host-info.php",
        "name": "mysql_get_host_info",
        "description": "Get MySQL host info"
    },
    {
        "href": "function.mysql-get-proto-info.php",
        "name": "mysql_get_proto_info",
        "description": "Get MySQL protocol info"
    },
    {
        "href": "function.mysql-get-server-info.php",
        "name": "mysql_get_server_info",
        "description": "Get MySQL server info"
    },
    {
        "href": "function.mysql-info.php",
        "name": "mysql_info",
        "description": "Get information about the most recent query"
    },
    {
        "href": "function.mysql-insert-id.php",
        "name": "mysql_insert_id",
        "description": "Get the ID generated in the last query"
    },
    {
        "href": "function.mysql-list-dbs.php",
        "name": "mysql_list_dbs",
        "description": "List databases available on a MySQL server"
    },
    {
        "href": "function.mysql-list-fields.php",
        "name": "mysql_list_fields",
        "description": "List MySQL table fields"
    },
    {
        "href": "function.mysql-list-processes.php",
        "name": "mysql_list_processes",
        "description": "List MySQL processes"
    },
    {
        "href": "function.mysql-list-tables.php",
        "name": "mysql_list_tables",
        "description": "List tables in a MySQL database"
    },
    {
        "href": "function.mysql-num-fields.php",
        "name": "mysql_num_fields",
        "description": "Get number of fields in result"
    },
    {
        "href": "function.mysql-num-rows.php",
        "name": "mysql_num_rows",
        "description": "Get number of rows in result"
    },
    {
        "href": "function.mysql-pconnect.php",
        "name": "mysql_pconnect",
        "description": "Open a persistent connection to a MySQL server"
    },
    {
        "href": "function.mysql-ping.php",
        "name": "mysql_ping",
        "description": "Ping a server connection or reconnect if there is no connection"
    },
    {
        "href": "function.mysql-query.php",
        "name": "mysql_query",
        "description": "Send a MySQL query"
    },
    {
        "href": "function.mysql-real-escape-string.php",
        "name": "mysql_real_escape_string",
        "description": "Escapes special characters in a string for use in an SQL statement"
    },
    {
        "href": "function.mysql-result.php",
        "name": "mysql_result",
        "description": "Get result data"
    },
    {
        "href": "function.mysql-select-db.php",
        "name": "mysql_select_db",
        "description": "Select a MySQL database"
    },
    {
        "href": "function.mysql-set-charset.php",
        "name": "mysql_set_charset",
        "description": "Sets the client character set"
    },
    {
        "href": "function.mysql-stat.php",
        "name": "mysql_stat",
        "description": "Get current system status"
    },
    {
        "href": "function.mysql-tablename.php",
        "name": "mysql_tablename",
        "description": "Get table name of field"
    },
    {
        "href": "function.mysql-thread-id.php",
        "name": "mysql_thread_id",
        "description": "Return the current thread ID"
    },
    {
        "href": "function.mysql-unbuffered-query.php",
        "name": "mysql_unbuffered_query",
        "description": "Send an SQL query to MySQL without fetching and buffering the result rows"
    },
    {
        "href": "mysql-xdevapi-client.close.php",
        "name": "mysql_xdevapi\\Client::close",
        "description": "Close client"
    },
    {
        "href": "function.natcasesort.php",
        "name": "natcasesort",
        "description": "Sort an array using a case insensitive \"natural order\" algorithm"
    },
    {
        "href": "function.natsort.php",
        "name": "natsort",
        "description": "Sort an array using a \"natural order\" algorithm"
    },
    {
        "href": "function.net-get-interfaces.php",
        "name": "net_get_interfaces",
        "description": "Get network interfaces"
    },
    {
        "href": "function.next.php",
        "name": "next",
        "description": "Advance the internal pointer of an array"
    },
    {
        "href": "function.ngettext.php",
        "name": "ngettext",
        "description": "Plural version of gettext"
    },
    {
        "href": "function.nl2br.php",
        "name": "nl2br",
        "description": "Inserts HTML line breaks before all newlines in a string"
    },
    {
        "href": "function.nl-langinfo.php",
        "name": "nl_langinfo",
        "description": "Query language and locale information"
    },
    {
        "href": "norewinditerator.current.php",
        "name": "NoRewindIterator::current",
        "description": "Get the current value"
    },
    {
        "href": "norewinditerator.getinneriterator.php",
        "name": "NoRewindIterator::getInnerIterator",
        "description": "Get the inner iterator"
    },
    {
        "href": "norewinditerator.key.php",
        "name": "NoRewindIterator::key",
        "description": "Get the current key"
    },
    {
        "href": "norewinditerator.next.php",
        "name": "NoRewindIterator::next",
        "description": "Forward to the next element"
    },
    {
        "href": "norewinditerator.rewind.php",
        "name": "NoRewindIterator::rewind",
        "description": "Prevents the rewind operation on the inner iterator"
    },
    {
        "href": "norewinditerator.valid.php",
        "name": "NoRewindIterator::valid",
        "description": "Validates the iterator"
    },
    {
        "href": "norewinditerator.construct.php",
        "name": "NoRewindIterator::__construct",
        "description": "Construct a NoRewindIterator"
    },
    {
        "href": "normalizer.getrawdecomposition.php",
        "name": "Normalizer::getRawDecomposition",
        "description": "Gets the Decomposition_Mapping property for the given UTF-8 encoded code point"
    },
    {
        "href": "normalizer.isnormalized.php",
        "name": "Normalizer::isNormalized",
        "description": "Checks if the provided string is already in the specified normalization   form"
    },
    {
        "href": "normalizer.normalize.php",
        "name": "Normalizer::normalize",
        "description": "Normalizes the input provided and returns the normalized string"
    },
    {
        "href": "numberformatter.create.php",
        "name": "NumberFormatter::create",
        "description": "Create a number formatter"
    },
    {
        "href": "numberformatter.format.php",
        "name": "NumberFormatter::format",
        "description": "Format a number"
    },
    {
        "href": "numberformatter.formatcurrency.php",
        "name": "NumberFormatter::formatCurrency",
        "description": "Format a currency value"
    },
    {
        "href": "numberformatter.getattribute.php",
        "name": "NumberFormatter::getAttribute",
        "description": "Get an attribute"
    },
    {
        "href": "numberformatter.geterrorcode.php",
        "name": "NumberFormatter::getErrorCode",
        "description": "Get formatter's last error code"
    },
    {
        "href": "numberformatter.geterrormessage.php",
        "name": "NumberFormatter::getErrorMessage",
        "description": "Get formatter's last error message"
    },
    {
        "href": "numberformatter.getlocale.php",
        "name": "NumberFormatter::getLocale",
        "description": "Get formatter locale"
    },
    {
        "href": "numberformatter.getpattern.php",
        "name": "NumberFormatter::getPattern",
        "description": "Get formatter pattern"
    },
    {
        "href": "numberformatter.getsymbol.php",
        "name": "NumberFormatter::getSymbol",
        "description": "Get a symbol value"
    },
    {
        "href": "numberformatter.gettextattribute.php",
        "name": "NumberFormatter::getTextAttribute",
        "description": "Get a text attribute"
    },
    {
        "href": "numberformatter.parse.php",
        "name": "NumberFormatter::parse",
        "description": "Parse a number"
    },
    {
        "href": "numberformatter.parsecurrency.php",
        "name": "NumberFormatter::parseCurrency",
        "description": "Parse a currency number"
    },
    {
        "href": "numberformatter.setattribute.php",
        "name": "NumberFormatter::setAttribute",
        "description": "Set an attribute"
    },
    {
        "href": "numberformatter.setpattern.php",
        "name": "NumberFormatter::setPattern",
        "description": "Set formatter pattern"
    },
    {
        "href": "numberformatter.setsymbol.php",
        "name": "NumberFormatter::setSymbol",
        "description": "Set a symbol value"
    },
    {
        "href": "numberformatter.settextattribute.php",
        "name": "NumberFormatter::setTextAttribute",
        "description": "Set a text attribute"
    },
    {
        "href": "function.number-format.php",
        "name": "number_format",
        "description": "Format a number with grouped thousands"
    },
    {
        "href": "oauth.disabledebug.php",
        "name": "OAuth::disableDebug",
        "description": "Turn off verbose debugging"
    },
    {
        "href": "oauth.disableredirects.php",
        "name": "OAuth::disableRedirects",
        "description": "Turn off redirects"
    },
    {
        "href": "oauth.disablesslchecks.php",
        "name": "OAuth::disableSSLChecks",
        "description": "Turn off SSL checks"
    },
    {
        "href": "oauth.enabledebug.php",
        "name": "OAuth::enableDebug",
        "description": "Turn on verbose debugging"
    },
    {
        "href": "oauth.enableredirects.php",
        "name": "OAuth::enableRedirects",
        "description": "Turn on redirects"
    },
    {
        "href": "oauth.enablesslchecks.php",
        "name": "OAuth::enableSSLChecks",
        "description": "Turn on SSL checks"
    },
    {
        "href": "oauth.fetch.php",
        "name": "OAuth::fetch",
        "description": "Fetch an OAuth protected resource"
    },
    {
        "href": "oauth.generatesignature.php",
        "name": "OAuth::generateSignature",
        "description": "Generate a signature"
    },
    {
        "href": "oauth.getaccesstoken.php",
        "name": "OAuth::getAccessToken",
        "description": "Fetch an access token"
    },
    {
        "href": "oauth.getcapath.php",
        "name": "OAuth::getCAPath",
        "description": "Gets CA information"
    },
    {
        "href": "oauth.getlastresponse.php",
        "name": "OAuth::getLastResponse",
        "description": "Get the last response"
    },
    {
        "href": "oauth.getlastresponseheaders.php",
        "name": "OAuth::getLastResponseHeaders",
        "description": "Get headers for last response"
    },
    {
        "href": "oauth.getlastresponseinfo.php",
        "name": "OAuth::getLastResponseInfo",
        "description": "Get HTTP information about the last response"
    },
    {
        "href": "oauth.getrequestheader.php",
        "name": "OAuth::getRequestHeader",
        "description": "Generate OAuth header string signature"
    },
    {
        "href": "oauth.getrequesttoken.php",
        "name": "OAuth::getRequestToken",
        "description": "Fetch a request token"
    },
    {
        "href": "oauth.setauthtype.php",
        "name": "OAuth::setAuthType",
        "description": "Set authorization type"
    },
    {
        "href": "oauth.setcapath.php",
        "name": "OAuth::setCAPath",
        "description": "Set CA path and info"
    },
    {
        "href": "oauth.setnonce.php",
        "name": "OAuth::setNonce",
        "description": "Set the nonce for subsequent requests"
    },
    {
        "href": "oauth.setrequestengine.php",
        "name": "OAuth::setRequestEngine",
        "description": "The setRequestEngine purpose"
    },
    {
        "href": "oauth.setrsacertificate.php",
        "name": "OAuth::setRSACertificate",
        "description": "Set the RSA certificate"
    },
    {
        "href": "oauth.setsslchecks.php",
        "name": "OAuth::setSSLChecks",
        "description": "Tweak specific SSL checks for requests"
    },
    {
        "href": "oauth.settimestamp.php",
        "name": "OAuth::setTimestamp",
        "description": "Set the timestamp"
    },
    {
        "href": "oauth.settoken.php",
        "name": "OAuth::setToken",
        "description": "Sets the token and secret"
    },
    {
        "href": "oauth.setversion.php",
        "name": "OAuth::setVersion",
        "description": "Set the OAuth version"
    },
    {
        "href": "oauth.construct.php",
        "name": "OAuth::__construct",
        "description": "Create a new OAuth object"
    },
    {
        "href": "oauth.destruct.php",
        "name": "OAuth::__destruct",
        "description": "The destructor"
    },
    {
        "href": "oauthprovider.addrequiredparameter.php",
        "name": "OAuthProvider::addRequiredParameter",
        "description": "Add required parameters"
    },
    {
        "href": "oauthprovider.callconsumerhandler.php",
        "name": "OAuthProvider::callconsumerHandler",
        "description": "Calls the consumerNonceHandler callback"
    },
    {
        "href": "oauthprovider.calltimestampnoncehandler.php",
        "name": "OAuthProvider::callTimestampNonceHandler",
        "description": "Calls the timestampNonceHandler callback"
    },
    {
        "href": "oauthprovider.calltokenhandler.php",
        "name": "OAuthProvider::calltokenHandler",
        "description": "Calls the tokenNonceHandler callback"
    },
    {
        "href": "oauthprovider.checkoauthrequest.php",
        "name": "OAuthProvider::checkOAuthRequest",
        "description": "Check an oauth request"
    },
    {
        "href": "oauthprovider.consumerhandler.php",
        "name": "OAuthProvider::consumerHandler",
        "description": "Set the consumerHandler handler callback"
    },
    {
        "href": "oauthprovider.generatetoken.php",
        "name": "OAuthProvider::generateToken",
        "description": "Generate a random token"
    },
    {
        "href": "oauthprovider.is2leggedendpoint.php",
        "name": "OAuthProvider::is2LeggedEndpoint",
        "description": "is2LeggedEndpoint"
    },
    {
        "href": "oauthprovider.isrequesttokenendpoint.php",
        "name": "OAuthProvider::isRequestTokenEndpoint",
        "description": "Sets isRequestTokenEndpoint"
    },
    {
        "href": "oauthprovider.removerequiredparameter.php",
        "name": "OAuthProvider::removeRequiredParameter",
        "description": "Remove a required parameter"
    },
    {
        "href": "oauthprovider.reportproblem.php",
        "name": "OAuthProvider::reportProblem",
        "description": "Report a problem"
    },
    {
        "href": "oauthprovider.setparam.php",
        "name": "OAuthProvider::setParam",
        "description": "Set a parameter"
    },
    {
        "href": "oauthprovider.setrequesttokenpath.php",
        "name": "OAuthProvider::setRequestTokenPath",
        "description": "Set request token path"
    },
    {
        "href": "oauthprovider.timestampnoncehandler.php",
        "name": "OAuthProvider::timestampNonceHandler",
        "description": "Set the timestampNonceHandler handler callback"
    },
    {
        "href": "oauthprovider.tokenhandler.php",
        "name": "OAuthProvider::tokenHandler",
        "description": "Set the tokenHandler handler callback"
    },
    {
        "href": "oauthprovider.construct.php",
        "name": "OAuthProvider::__construct",
        "description": "Constructs a new OAuthProvider object"
    },
    {
        "href": "function.oauth-get-sbs.php",
        "name": "oauth_get_sbs",
        "description": "Generate a Signature Base String"
    },
    {
        "href": "function.oauth-urlencode.php",
        "name": "oauth_urlencode",
        "description": "Encode a URI to RFC 3986"
    },
    {
        "href": "function.ob-clean.php",
        "name": "ob_clean",
        "description": "Clean (erase) the output buffer"
    },
    {
        "href": "function.ob-end-clean.php",
        "name": "ob_end_clean",
        "description": "Clean (erase) the output buffer and turn off output buffering"
    },
    {
        "href": "function.ob-end-flush.php",
        "name": "ob_end_flush",
        "description": "Flush (send) the output buffer and turn off output buffering"
    },
    {
        "href": "function.ob-flush.php",
        "name": "ob_flush",
        "description": "Flush (send) the output buffer"
    },
    {
        "href": "function.ob-get-clean.php",
        "name": "ob_get_clean",
        "description": "Get current buffer contents and delete current output buffer"
    },
    {
        "href": "function.ob-get-contents.php",
        "name": "ob_get_contents",
        "description": "Return the contents of the output buffer"
    },
    {
        "href": "function.ob-get-flush.php",
        "name": "ob_get_flush",
        "description": "Flush the output buffer, return it as a string and turn off output buffering"
    },
    {
        "href": "function.ob-get-length.php",
        "name": "ob_get_length",
        "description": "Return the length of the output buffer"
    },
    {
        "href": "function.ob-get-level.php",
        "name": "ob_get_level",
        "description": "Return the nesting level of the output buffering mechanism"
    },
    {
        "href": "function.ob-get-status.php",
        "name": "ob_get_status",
        "description": "Get status of output buffers"
    },
    {
        "href": "function.ob-gzhandler.php",
        "name": "ob_gzhandler",
        "description": "ob_start callback function to gzip output buffer"
    },
    {
        "href": "function.ob-iconv-handler.php",
        "name": "ob_iconv_handler",
        "description": "Convert character encoding as output buffer handler"
    },
    {
        "href": "function.ob-implicit-flush.php",
        "name": "ob_implicit_flush",
        "description": "Turn implicit flush on/off"
    },
    {
        "href": "function.ob-list-handlers.php",
        "name": "ob_list_handlers",
        "description": "List all output handlers in use"
    },
    {
        "href": "function.ob-start.php",
        "name": "ob_start",
        "description": "Turn on output buffering"
    },
    {
        "href": "function.ob-tidyhandler.php",
        "name": "ob_tidyhandler",
        "description": "ob_start callback function to repair the buffer"
    },
    {
        "href": "function.ocibindbyname.php",
        "name": "ocibindbyname",
        "description": "Alias of oci_bind_by_name"
    },
    {
        "href": "function.ocicancel.php",
        "name": "ocicancel",
        "description": "Alias of oci_cancel"
    },
    {
        "href": "function.ocicloselob.php",
        "name": "ocicloselob",
        "description": "Alias of OCILob::close"
    },
    {
        "href": "function.ocicollappend.php",
        "name": "ocicollappend",
        "description": "Alias of OCICollection::append"
    },
    {
        "href": "function.ocicollassign.php",
        "name": "ocicollassign",
        "description": "Alias of OCICollection::assign"
    },
    {
        "href": "function.ocicollassignelem.php",
        "name": "ocicollassignelem",
        "description": "Alias of OCICollection::assignElem"
    },
    {
        "href": "ocicollection.append.php",
        "name": "OCICollection::append",
        "description": "Appends element to the collection"
    },
    {
        "href": "ocicollection.assign.php",
        "name": "OCICollection::assign",
        "description": "Assigns a value to the collection from another existing collection"
    },
    {
        "href": "ocicollection.assignelem.php",
        "name": "OCICollection::assignElem",
        "description": "Assigns a value to the element of the collection"
    },
    {
        "href": "ocicollection.free.php",
        "name": "OCICollection::free",
        "description": "Frees the resources associated with the collection object"
    },
    {
        "href": "ocicollection.getelem.php",
        "name": "OCICollection::getElem",
        "description": "Returns value of the element"
    },
    {
        "href": "ocicollection.max.php",
        "name": "OCICollection::max",
        "description": "Returns the maximum number of elements in the collection"
    },
    {
        "href": "ocicollection.size.php",
        "name": "OCICollection::size",
        "description": "Returns size of the collection"
    },
    {
        "href": "ocicollection.trim.php",
        "name": "OCICollection::trim",
        "description": "Trims elements from the end of the collection"
    },
    {
        "href": "function.ocicollgetelem.php",
        "name": "ocicollgetelem",
        "description": "Alias of OCICollection::getElem"
    },
    {
        "href": "function.ocicollmax.php",
        "name": "ocicollmax",
        "description": "Alias of OCICollection::max"
    },
    {
        "href": "function.ocicollsize.php",
        "name": "ocicollsize",
        "description": "Alias of OCICollection::size"
    },
    {
        "href": "function.ocicolltrim.php",
        "name": "ocicolltrim",
        "description": "Alias of OCICollection::trim"
    },
    {
        "href": "function.ocicolumnisnull.php",
        "name": "ocicolumnisnull",
        "description": "Alias of oci_field_is_null"
    },
    {
        "href": "function.ocicolumnname.php",
        "name": "ocicolumnname",
        "description": "Alias of oci_field_name"
    },
    {
        "href": "function.ocicolumnprecision.php",
        "name": "ocicolumnprecision",
        "description": "Alias of oci_field_precision"
    },
    {
        "href": "function.ocicolumnscale.php",
        "name": "ocicolumnscale",
        "description": "Alias of oci_field_scale"
    },
    {
        "href": "function.ocicolumnsize.php",
        "name": "ocicolumnsize",
        "description": "Alias of oci_field_size"
    },
    {
        "href": "function.ocicolumntype.php",
        "name": "ocicolumntype",
        "description": "Alias of oci_field_type"
    },
    {
        "href": "function.ocicolumntyperaw.php",
        "name": "ocicolumntyperaw",
        "description": "Alias of oci_field_type_raw"
    },
    {
        "href": "function.ocicommit.php",
        "name": "ocicommit",
        "description": "Alias of oci_commit"
    },
    {
        "href": "function.ocidefinebyname.php",
        "name": "ocidefinebyname",
        "description": "Alias of oci_define_by_name"
    },
    {
        "href": "function.ocierror.php",
        "name": "ocierror",
        "description": "Alias of oci_error"
    },
    {
        "href": "function.ociexecute.php",
        "name": "ociexecute",
        "description": "Alias of oci_execute"
    },
    {
        "href": "function.ocifetch.php",
        "name": "ocifetch",
        "description": "Alias of oci_fetch"
    },
    {
        "href": "function.ocifetchinto.php",
        "name": "ocifetchinto",
        "description": "Obsolete variant of oci_fetch_array, oci_fetch_object,   oci_fetch_assoc and   oci_fetch_row"
    },
    {
        "href": "function.ocifetchstatement.php",
        "name": "ocifetchstatement",
        "description": "Alias of oci_fetch_all"
    },
    {
        "href": "function.ocifreecollection.php",
        "name": "ocifreecollection",
        "description": "Alias of OCICollection::free"
    },
    {
        "href": "function.ocifreecursor.php",
        "name": "ocifreecursor",
        "description": "Alias of oci_free_statement"
    },
    {
        "href": "function.ocifreedesc.php",
        "name": "ocifreedesc",
        "description": "Alias of OCILob::free"
    },
    {
        "href": "function.ocifreestatement.php",
        "name": "ocifreestatement",
        "description": "Alias of oci_free_statement"
    },
    {
        "href": "function.ociinternaldebug.php",
        "name": "ociinternaldebug",
        "description": "Alias of oci_internal_debug"
    },
    {
        "href": "function.ociloadlob.php",
        "name": "ociloadlob",
        "description": "Alias of OCILob::load"
    },
    {
        "href": "ocilob.append.php",
        "name": "OCILob::append",
        "description": "Appends data from the large object to another large object"
    },
    {
        "href": "ocilob.close.php",
        "name": "OCILob::close",
        "description": "Closes LOB descriptor"
    },
    {
        "href": "ocilob.eof.php",
        "name": "OCILob::eof",
        "description": "Tests for end-of-file on a large object's descriptor"
    },
    {
        "href": "ocilob.erase.php",
        "name": "OCILob::erase",
        "description": "Erases a specified portion of the internal LOB data"
    },
    {
        "href": "ocilob.export.php",
        "name": "OCILob::export",
        "description": "Exports LOB's contents to a file"
    },
    {
        "href": "ocilob.flush.php",
        "name": "OCILob::flush",
        "description": "Flushes/writes buffer of the LOB to the server"
    },
    {
        "href": "ocilob.free.php",
        "name": "OCILob::free",
        "description": "Frees resources associated with the LOB descriptor"
    },
    {
        "href": "ocilob.getbuffering.php",
        "name": "OCILob::getBuffering",
        "description": "Returns current state of buffering for the large object"
    },
    {
        "href": "ocilob.import.php",
        "name": "OCILob::import",
        "description": "Imports file data to the LOB"
    },
    {
        "href": "ocilob.load.php",
        "name": "OCILob::load",
        "description": "Returns large object's contents"
    },
    {
        "href": "ocilob.read.php",
        "name": "OCILob::read",
        "description": "Reads part of the large object"
    },
    {
        "href": "ocilob.rewind.php",
        "name": "OCILob::rewind",
        "description": "Moves the internal pointer to the beginning of the large object"
    },
    {
        "href": "ocilob.save.php",
        "name": "OCILob::save",
        "description": "Saves data to the large object"
    },
    {
        "href": "ocilob.savefile.php",
        "name": "OCILob::saveFile",
        "description": "Alias of OCILob::import"
    },
    {
        "href": "ocilob.seek.php",
        "name": "OCILob::seek",
        "description": "Sets the internal pointer of the large object"
    },
    {
        "href": "ocilob.setbuffering.php",
        "name": "OCILob::setBuffering",
        "description": "Changes current state of buffering for the large object"
    },
    {
        "href": "ocilob.size.php",
        "name": "OCILob::size",
        "description": "Returns size of large object"
    },
    {
        "href": "ocilob.tell.php",
        "name": "OCILob::tell",
        "description": "Returns the current position of internal pointer of large object"
    },
    {
        "href": "ocilob.truncate.php",
        "name": "OCILob::truncate",
        "description": "Truncates large object"
    },
    {
        "href": "ocilob.write.php",
        "name": "OCILob::write",
        "description": "Writes data to the large object"
    },
    {
        "href": "ocilob.writetemporary.php",
        "name": "OCILob::writeTemporary",
        "description": "Writes a temporary large object"
    },
    {
        "href": "ocilob.writetofile.php",
        "name": "OCILob::writeToFile",
        "description": "Alias of OCILob::export"
    },
    {
        "href": "function.ocilogoff.php",
        "name": "ocilogoff",
        "description": "Alias of oci_close"
    },
    {
        "href": "function.ocilogon.php",
        "name": "ocilogon",
        "description": "Alias of oci_connect"
    },
    {
        "href": "function.ocinewcollection.php",
        "name": "ocinewcollection",
        "description": "Alias of oci_new_collection"
    },
    {
        "href": "function.ocinewcursor.php",
        "name": "ocinewcursor",
        "description": "Alias of oci_new_cursor"
    },
    {
        "href": "function.ocinewdescriptor.php",
        "name": "ocinewdescriptor",
        "description": "Alias of oci_new_descriptor"
    },
    {
        "href": "function.ocinlogon.php",
        "name": "ocinlogon",
        "description": "Alias of oci_new_connect"
    },
    {
        "href": "function.ocinumcols.php",
        "name": "ocinumcols",
        "description": "Alias of oci_num_fields"
    },
    {
        "href": "function.ociparse.php",
        "name": "ociparse",
        "description": "Alias of oci_parse"
    },
    {
        "href": "function.ociplogon.php",
        "name": "ociplogon",
        "description": "Alias of oci_pconnect"
    },
    {
        "href": "function.ociresult.php",
        "name": "ociresult",
        "description": "Alias of oci_result"
    },
    {
        "href": "function.ocirollback.php",
        "name": "ocirollback",
        "description": "Alias of oci_rollback"
    },
    {
        "href": "function.ocirowcount.php",
        "name": "ocirowcount",
        "description": "Alias of oci_num_rows"
    },
    {
        "href": "function.ocisavelob.php",
        "name": "ocisavelob",
        "description": "Alias of OCILob::save"
    },
    {
        "href": "function.ocisavelobfile.php",
        "name": "ocisavelobfile",
        "description": "Alias of OCILob::import"
    },
    {
        "href": "function.ociserverversion.php",
        "name": "ociserverversion",
        "description": "Alias of oci_server_version"
    },
    {
        "href": "function.ocisetprefetch.php",
        "name": "ocisetprefetch",
        "description": "Alias of oci_set_prefetch"
    },
    {
        "href": "function.ocistatementtype.php",
        "name": "ocistatementtype",
        "description": "Alias of oci_statement_type"
    },
    {
        "href": "function.ociwritelobtofile.php",
        "name": "ociwritelobtofile",
        "description": "Alias of OCILob::export"
    },
    {
        "href": "function.ociwritetemporarylob.php",
        "name": "ociwritetemporarylob",
        "description": "Alias of OCILob::writeTemporary"
    },
    {
        "href": "function.oci-bind-array-by-name.php",
        "name": "oci_bind_array_by_name",
        "description": "Binds a PHP array to an Oracle PL/SQL array parameter"
    },
    {
        "href": "function.oci-bind-by-name.php",
        "name": "oci_bind_by_name",
        "description": "Binds a PHP variable to an Oracle placeholder"
    },
    {
        "href": "function.oci-cancel.php",
        "name": "oci_cancel",
        "description": "Cancels reading from cursor"
    },
    {
        "href": "function.oci-client-version.php",
        "name": "oci_client_version",
        "description": "Returns the Oracle client library version"
    },
    {
        "href": "function.oci-close.php",
        "name": "oci_close",
        "description": "Closes an Oracle connection"
    },
    {
        "href": "function.oci-commit.php",
        "name": "oci_commit",
        "description": "Commits the outstanding database transaction"
    },
    {
        "href": "function.oci-connect.php",
        "name": "oci_connect",
        "description": "Connect to an Oracle database"
    },
    {
        "href": "function.oci-define-by-name.php",
        "name": "oci_define_by_name",
        "description": "Associates a PHP variable with a column for query fetches"
    },
    {
        "href": "function.oci-error.php",
        "name": "oci_error",
        "description": "Returns the last error found"
    },
    {
        "href": "function.oci-execute.php",
        "name": "oci_execute",
        "description": "Executes a statement"
    },
    {
        "href": "function.oci-fetch.php",
        "name": "oci_fetch",
        "description": "Fetches the next row from a query into internal buffers"
    },
    {
        "href": "function.oci-fetch-all.php",
        "name": "oci_fetch_all",
        "description": "Fetches multiple rows from a query into a two-dimensional array"
    },
    {
        "href": "function.oci-fetch-array.php",
        "name": "oci_fetch_array",
        "description": "Returns the next row from a query as an associative or numeric array"
    },
    {
        "href": "function.oci-fetch-assoc.php",
        "name": "oci_fetch_assoc",
        "description": "Returns the next row from a query as an associative array"
    },
    {
        "href": "function.oci-fetch-object.php",
        "name": "oci_fetch_object",
        "description": "Returns the next row from a query as an object"
    },
    {
        "href": "function.oci-fetch-row.php",
        "name": "oci_fetch_row",
        "description": "Returns the next row from a query as a numeric array"
    },
    {
        "href": "function.oci-field-is-null.php",
        "name": "oci_field_is_null",
        "description": "Checks if a field in the currently fetched row is null"
    },
    {
        "href": "function.oci-field-name.php",
        "name": "oci_field_name",
        "description": "Returns the name of a field from the statement"
    },
    {
        "href": "function.oci-field-precision.php",
        "name": "oci_field_precision",
        "description": "Tell the precision of a field"
    },
    {
        "href": "function.oci-field-scale.php",
        "name": "oci_field_scale",
        "description": "Tell the scale of the field"
    },
    {
        "href": "function.oci-field-size.php",
        "name": "oci_field_size",
        "description": "Returns field's size"
    },
    {
        "href": "function.oci-field-type.php",
        "name": "oci_field_type",
        "description": "Returns a field's data type name"
    },
    {
        "href": "function.oci-field-type-raw.php",
        "name": "oci_field_type_raw",
        "description": "Tell the raw Oracle data type of the field"
    },
    {
        "href": "function.oci-free-descriptor.php",
        "name": "oci_free_descriptor",
        "description": "Frees a descriptor"
    },
    {
        "href": "function.oci-free-statement.php",
        "name": "oci_free_statement",
        "description": "Frees all resources associated with statement or cursor"
    },
    {
        "href": "function.oci-get-implicit-resultset.php",
        "name": "oci_get_implicit_resultset",
        "description": "Returns the next child statement resource from a parent statement resource that has Oracle Database Implicit Result Sets"
    },
    {
        "href": "function.oci-internal-debug.php",
        "name": "oci_internal_debug",
        "description": "Enables or disables internal debug output"
    },
    {
        "href": "function.oci-lob-copy.php",
        "name": "oci_lob_copy",
        "description": "Copies large object"
    },
    {
        "href": "function.oci-lob-is-equal.php",
        "name": "oci_lob_is_equal",
        "description": "Compares two LOB/FILE locators for equality"
    },
    {
        "href": "function.oci-new-collection.php",
        "name": "oci_new_collection",
        "description": "Allocates new collection object"
    },
    {
        "href": "function.oci-new-connect.php",
        "name": "oci_new_connect",
        "description": "Connect to the Oracle server using a unique connection"
    },
    {
        "href": "function.oci-new-cursor.php",
        "name": "oci_new_cursor",
        "description": "Allocates and returns a new cursor (statement handle)"
    },
    {
        "href": "function.oci-new-descriptor.php",
        "name": "oci_new_descriptor",
        "description": "Initializes a new empty LOB or FILE descriptor"
    },
    {
        "href": "function.oci-num-fields.php",
        "name": "oci_num_fields",
        "description": "Returns the number of result columns in a statement"
    },
    {
        "href": "function.oci-num-rows.php",
        "name": "oci_num_rows",
        "description": "Returns number of rows affected during statement execution"
    },
    {
        "href": "function.oci-parse.php",
        "name": "oci_parse",
        "description": "Prepares an Oracle statement for execution"
    },
    {
        "href": "function.oci-password-change.php",
        "name": "oci_password_change",
        "description": "Changes password of Oracle's user"
    },
    {
        "href": "function.oci-pconnect.php",
        "name": "oci_pconnect",
        "description": "Connect to an Oracle database using a persistent connection"
    },
    {
        "href": "function.oci-register-taf-callback.php",
        "name": "oci_register_taf_callback",
        "description": "Register a user-defined callback function for Oracle Database TAF"
    },
    {
        "href": "function.oci-result.php",
        "name": "oci_result",
        "description": "Returns field's value from the fetched row"
    },
    {
        "href": "function.oci-rollback.php",
        "name": "oci_rollback",
        "description": "Rolls back the outstanding database transaction"
    },
    {
        "href": "function.oci-server-version.php",
        "name": "oci_server_version",
        "description": "Returns the Oracle Database version"
    },
    {
        "href": "function.oci-set-action.php",
        "name": "oci_set_action",
        "description": "Sets the action name"
    },
    {
        "href": "function.oci-set-call-timout.php",
        "name": "oci_set_call_timeout",
        "description": "Sets a millisecond timeout for database calls"
    },
    {
        "href": "function.oci-set-client-identifier.php",
        "name": "oci_set_client_identifier",
        "description": "Sets the client identifier"
    },
    {
        "href": "function.oci-set-client-info.php",
        "name": "oci_set_client_info",
        "description": "Sets the client information"
    },
    {
        "href": "function.oci-set-db-operation.php",
        "name": "oci_set_db_operation",
        "description": "Sets the database operation"
    },
    {
        "href": "function.oci-set-edition.php",
        "name": "oci_set_edition",
        "description": "Sets the database edition"
    },
    {
        "href": "function.oci-set-module-name.php",
        "name": "oci_set_module_name",
        "description": "Sets the module name"
    },
    {
        "href": "function.oci-set-prefetch.php",
        "name": "oci_set_prefetch",
        "description": "Sets number of rows to be prefetched by queries"
    },
    {
        "href": "function.oci-set-prefetch-lob.php",
        "name": "oci_set_prefetch_lob",
        "description": "Sets the amount of data prefetched for each CLOB or BLOB."
    },
    {
        "href": "function.oci-statement-type.php",
        "name": "oci_statement_type",
        "description": "Returns the type of a statement"
    },
    {
        "href": "function.oci-unregister-taf-callback.php",
        "name": "oci_unregister_taf_callback",
        "description": "Unregister a user-defined callback function for Oracle Database TAF"
    },
    {
        "href": "function.octdec.php",
        "name": "octdec",
        "description": "Octal to decimal"
    },
    {
        "href": "function.odbc-autocommit.php",
        "name": "odbc_autocommit",
        "description": "Toggle autocommit behaviour"
    },
    {
        "href": "function.odbc-binmode.php",
        "name": "odbc_binmode",
        "description": "Handling of binary column data"
    },
    {
        "href": "function.odbc-close.php",
        "name": "odbc_close",
        "description": "Close an ODBC connection"
    },
    {
        "href": "function.odbc-close-all.php",
        "name": "odbc_close_all",
        "description": "Close all ODBC connections"
    },
    {
        "href": "function.odbc-columnprivileges.php",
        "name": "odbc_columnprivileges",
        "description": "Lists columns and associated privileges for the given table"
    },
    {
        "href": "function.odbc-columns.php",
        "name": "odbc_columns",
        "description": "Lists the column names in specified tables"
    },
    {
        "href": "function.odbc-commit.php",
        "name": "odbc_commit",
        "description": "Commit an ODBC transaction"
    },
    {
        "href": "function.odbc-connect.php",
        "name": "odbc_connect",
        "description": "Connect to a datasource"
    },
    {
        "href": "function.odbc-cursor.php",
        "name": "odbc_cursor",
        "description": "Get cursorname"
    },
    {
        "href": "function.odbc-data-source.php",
        "name": "odbc_data_source",
        "description": "Returns information about available DSNs"
    },
    {
        "href": "function.odbc-do.php",
        "name": "odbc_do",
        "description": "Alias of odbc_exec"
    },
    {
        "href": "function.odbc-error.php",
        "name": "odbc_error",
        "description": "Get the last error code"
    },
    {
        "href": "function.odbc-errormsg.php",
        "name": "odbc_errormsg",
        "description": "Get the last error message"
    },
    {
        "href": "function.odbc-exec.php",
        "name": "odbc_exec",
        "description": "Directly execute an SQL statement"
    },
    {
        "href": "function.odbc-execute.php",
        "name": "odbc_execute",
        "description": "Execute a prepared statement"
    },
    {
        "href": "function.odbc-fetch-array.php",
        "name": "odbc_fetch_array",
        "description": "Fetch a result row as an associative array"
    },
    {
        "href": "function.odbc-fetch-into.php",
        "name": "odbc_fetch_into",
        "description": "Fetch one result row into array"
    },
    {
        "href": "function.odbc-fetch-object.php",
        "name": "odbc_fetch_object",
        "description": "Fetch a result row as an object"
    },
    {
        "href": "function.odbc-fetch-row.php",
        "name": "odbc_fetch_row",
        "description": "Fetch a row"
    },
    {
        "href": "function.odbc-field-len.php",
        "name": "odbc_field_len",
        "description": "Get the length (precision) of a field"
    },
    {
        "href": "function.odbc-field-name.php",
        "name": "odbc_field_name",
        "description": "Get the columnname"
    },
    {
        "href": "function.odbc-field-num.php",
        "name": "odbc_field_num",
        "description": "Return column number"
    },
    {
        "href": "function.odbc-field-precision.php",
        "name": "odbc_field_precision",
        "description": "Alias of odbc_field_len"
    },
    {
        "href": "function.odbc-field-scale.php",
        "name": "odbc_field_scale",
        "description": "Get the scale of a field"
    },
    {
        "href": "function.odbc-field-type.php",
        "name": "odbc_field_type",
        "description": "Datatype of a field"
    },
    {
        "href": "function.odbc-foreignkeys.php",
        "name": "odbc_foreignkeys",
        "description": "Retrieves a list of foreign keys"
    },
    {
        "href": "function.odbc-free-result.php",
        "name": "odbc_free_result",
        "description": "Free resources associated with a result"
    },
    {
        "href": "function.odbc-gettypeinfo.php",
        "name": "odbc_gettypeinfo",
        "description": "Retrieves information about data types supported by the data source"
    },
    {
        "href": "function.odbc-longreadlen.php",
        "name": "odbc_longreadlen",
        "description": "Handling of LONG columns"
    },
    {
        "href": "function.odbc-next-result.php",
        "name": "odbc_next_result",
        "description": "Checks if multiple results are available"
    },
    {
        "href": "function.odbc-num-fields.php",
        "name": "odbc_num_fields",
        "description": "Number of columns in a result"
    },
    {
        "href": "function.odbc-num-rows.php",
        "name": "odbc_num_rows",
        "description": "Number of rows in a result"
    },
    {
        "href": "function.odbc-pconnect.php",
        "name": "odbc_pconnect",
        "description": "Open a persistent database connection"
    },
    {
        "href": "function.odbc-prepare.php",
        "name": "odbc_prepare",
        "description": "Prepares a statement for execution"
    },
    {
        "href": "function.odbc-primarykeys.php",
        "name": "odbc_primarykeys",
        "description": "Gets the primary keys for a table"
    },
    {
        "href": "function.odbc-procedurecolumns.php",
        "name": "odbc_procedurecolumns",
        "description": "Retrieve information about parameters to procedures"
    },
    {
        "href": "function.odbc-procedures.php",
        "name": "odbc_procedures",
        "description": "Get the list of procedures stored in a specific data source"
    },
    {
        "href": "function.odbc-result.php",
        "name": "odbc_result",
        "description": "Get result data"
    },
    {
        "href": "function.odbc-result-all.php",
        "name": "odbc_result_all",
        "description": "Print result as HTML table"
    },
    {
        "href": "function.odbc-rollback.php",
        "name": "odbc_rollback",
        "description": "Rollback a transaction"
    },
    {
        "href": "function.odbc-setoption.php",
        "name": "odbc_setoption",
        "description": "Adjust ODBC settings"
    },
    {
        "href": "function.odbc-specialcolumns.php",
        "name": "odbc_specialcolumns",
        "description": "Retrieves special columns"
    },
    {
        "href": "function.odbc-statistics.php",
        "name": "odbc_statistics",
        "description": "Retrieve statistics about a table"
    },
    {
        "href": "function.odbc-tableprivileges.php",
        "name": "odbc_tableprivileges",
        "description": "Lists tables and the privileges associated with each table"
    },
    {
        "href": "function.odbc-tables.php",
        "name": "odbc_tables",
        "description": "Get the list of table names stored in a specific data source"
    },
    {
        "href": "wrappers.audio.php",
        "name": "ogg://",
        "description": "Audio streams"
    },
    {
        "href": "function.opcache-compile-file.php",
        "name": "opcache_compile_file",
        "description": "Compiles and caches a PHP script without executing it"
    },
    {
        "href": "function.opcache-get-configuration.php",
        "name": "opcache_get_configuration",
        "description": "Get configuration information about the cache"
    },
    {
        "href": "function.opcache-get-status.php",
        "name": "opcache_get_status",
        "description": "Get status information about the cache"
    },
    {
        "href": "function.opcache-invalidate.php",
        "name": "opcache_invalidate",
        "description": "Invalidates a cached script"
    },
    {
        "href": "function.opcache-is-script-cached.php",
        "name": "opcache_is_script_cached",
        "description": "Tells whether a script is cached in OPCache"
    },
    {
        "href": "function.opcache-reset.php",
        "name": "opcache_reset",
        "description": "Resets the contents of the opcode cache"
    },
    {
        "href": "function.openal-buffer-create.php",
        "name": "openal_buffer_create",
        "description": "Generate OpenAL buffer"
    },
    {
        "href": "function.openal-buffer-data.php",
        "name": "openal_buffer_data",
        "description": "Load a buffer with data"
    },
    {
        "href": "function.openal-buffer-destroy.php",
        "name": "openal_buffer_destroy",
        "description": "Destroys an OpenAL buffer"
    },
    {
        "href": "function.openal-buffer-get.php",
        "name": "openal_buffer_get",
        "description": "Retrieve an OpenAL buffer property"
    },
    {
        "href": "function.openal-buffer-loadwav.php",
        "name": "openal_buffer_loadwav",
        "description": "Load a .wav file into a buffer"
    },
    {
        "href": "function.openal-context-create.php",
        "name": "openal_context_create",
        "description": "Create an audio processing context"
    },
    {
        "href": "function.openal-context-current.php",
        "name": "openal_context_current",
        "description": "Make the specified context current"
    },
    {
        "href": "function.openal-context-destroy.php",
        "name": "openal_context_destroy",
        "description": "Destroys a context"
    },
    {
        "href": "function.openal-context-process.php",
        "name": "openal_context_process",
        "description": "Process the specified context"
    },
    {
        "href": "function.openal-context-suspend.php",
        "name": "openal_context_suspend",
        "description": "Suspend the specified context"
    },
    {
        "href": "function.openal-device-close.php",
        "name": "openal_device_close",
        "description": "Close an OpenAL device"
    },
    {
        "href": "function.openal-device-open.php",
        "name": "openal_device_open",
        "description": "Initialize the OpenAL audio layer"
    },
    {
        "href": "function.openal-listener-get.php",
        "name": "openal_listener_get",
        "description": "Retrieve a listener property"
    },
    {
        "href": "function.openal-listener-set.php",
        "name": "openal_listener_set",
        "description": "Set a listener property"
    },
    {
        "href": "function.openal-source-create.php",
        "name": "openal_source_create",
        "description": "Generate a source resource"
    },
    {
        "href": "function.openal-source-destroy.php",
        "name": "openal_source_destroy",
        "description": "Destroy a source resource"
    },
    {
        "href": "function.openal-source-get.php",
        "name": "openal_source_get",
        "description": "Retrieve an OpenAL source property"
    },
    {
        "href": "function.openal-source-pause.php",
        "name": "openal_source_pause",
        "description": "Pause the source"
    },
    {
        "href": "function.openal-source-play.php",
        "name": "openal_source_play",
        "description": "Start playing the source"
    },
    {
        "href": "function.openal-source-rewind.php",
        "name": "openal_source_rewind",
        "description": "Rewind the source"
    },
    {
        "href": "function.openal-source-set.php",
        "name": "openal_source_set",
        "description": "Set source property"
    },
    {
        "href": "function.openal-source-stop.php",
        "name": "openal_source_stop",
        "description": "Stop playing the source"
    },
    {
        "href": "function.openal-stream.php",
        "name": "openal_stream",
        "description": "Begin streaming on a source"
    },
    {
        "href": "function.opendir.php",
        "name": "opendir",
        "description": "Open directory handle"
    },
    {
        "href": "function.openlog.php",
        "name": "openlog",
        "description": "Open connection to system logger"
    },
    {
        "href": "function.openssl-cipher-iv-length.php",
        "name": "openssl_cipher_iv_length",
        "description": "Gets the cipher iv length"
    },
    {
        "href": "function.openssl-cms-decrypt.php",
        "name": "openssl_cms_decrypt",
        "description": "Decrypt a CMS message"
    },
    {
        "href": "function.openssl-cms-encrypt.php",
        "name": "openssl_cms_encrypt",
        "description": "Encrypt a CMS message"
    },
    {
        "href": "function.openssl-cms-read.php",
        "name": "openssl_cms_read",
        "description": "Export the CMS file to an array of PEM certificates"
    },
    {
        "href": "function.openssl-cms-sign.php",
        "name": "openssl_cms_sign",
        "description": "Sign a file"
    },
    {
        "href": "function.openssl-cms-verify.php",
        "name": "openssl_cms_verify",
        "description": "Verify a CMS signature"
    },
    {
        "href": "function.openssl-csr-export.php",
        "name": "openssl_csr_export",
        "description": "Exports a CSR as a string"
    },
    {
        "href": "function.openssl-csr-export-to-file.php",
        "name": "openssl_csr_export_to_file",
        "description": "Exports a CSR to a file"
    },
    {
        "href": "function.openssl-csr-get-public-key.php",
        "name": "openssl_csr_get_public_key",
        "description": "Returns the public key of a CSR"
    },
    {
        "href": "function.openssl-csr-get-subject.php",
        "name": "openssl_csr_get_subject",
        "description": "Returns the subject of a CSR"
    },
    {
        "href": "function.openssl-csr-new.php",
        "name": "openssl_csr_new",
        "description": "Generates a CSR"
    },
    {
        "href": "function.openssl-csr-sign.php",
        "name": "openssl_csr_sign",
        "description": "Sign a CSR with another certificate (or itself) and generate a certificate"
    },
    {
        "href": "function.openssl-decrypt.php",
        "name": "openssl_decrypt",
        "description": "Decrypts data"
    },
    {
        "href": "function.openssl-dh-compute-key.php",
        "name": "openssl_dh_compute_key",
        "description": "Computes shared secret for public value of remote DH public key and local DH key"
    },
    {
        "href": "function.openssl-digest.php",
        "name": "openssl_digest",
        "description": "Computes a digest"
    },
    {
        "href": "function.openssl-encrypt.php",
        "name": "openssl_encrypt",
        "description": "Encrypts data"
    },
    {
        "href": "function.openssl-error-string.php",
        "name": "openssl_error_string",
        "description": "Return openSSL error message"
    },
    {
        "href": "function.openssl-free-key.php",
        "name": "openssl_free_key",
        "description": "Free key resource"
    },
    {
        "href": "function.openssl-get-cert-locations.php",
        "name": "openssl_get_cert_locations",
        "description": "Retrieve the available certificate locations"
    },
    {
        "href": "function.openssl-get-cipher-methods.php",
        "name": "openssl_get_cipher_methods",
        "description": "Gets available cipher methods"
    },
    {
        "href": "function.openssl-get-curve-names.php",
        "name": "openssl_get_curve_names",
        "description": "Gets list of available curve names for ECC"
    },
    {
        "href": "function.openssl-get-md-methods.php",
        "name": "openssl_get_md_methods",
        "description": "Gets available digest methods"
    },
    {
        "href": "function.openssl-get-privatekey.php",
        "name": "openssl_get_privatekey",
        "description": "Alias of openssl_pkey_get_private"
    },
    {
        "href": "function.openssl-get-publickey.php",
        "name": "openssl_get_publickey",
        "description": "Alias of openssl_pkey_get_public"
    },
    {
        "href": "function.openssl-open.php",
        "name": "openssl_open",
        "description": "Open sealed data"
    },
    {
        "href": "function.openssl-pbkdf2.php",
        "name": "openssl_pbkdf2",
        "description": "Generates a PKCS5 v2 PBKDF2 string"
    },
    {
        "href": "function.openssl-pkcs7-decrypt.php",
        "name": "openssl_pkcs7_decrypt",
        "description": "Decrypts an S/MIME encrypted message"
    },
    {
        "href": "function.openssl-pkcs7-encrypt.php",
        "name": "openssl_pkcs7_encrypt",
        "description": "Encrypt an S/MIME message"
    },
    {
        "href": "function.openssl-pkcs7-read.php",
        "name": "openssl_pkcs7_read",
        "description": "Export the PKCS7 file to an array of PEM certificates"
    },
    {
        "href": "function.openssl-pkcs7-sign.php",
        "name": "openssl_pkcs7_sign",
        "description": "Sign an S/MIME message"
    },
    {
        "href": "function.openssl-pkcs7-verify.php",
        "name": "openssl_pkcs7_verify",
        "description": "Verifies the signature of an S/MIME signed message"
    },
    {
        "href": "function.openssl-pkcs12-export.php",
        "name": "openssl_pkcs12_export",
        "description": "Exports a PKCS#12 Compatible Certificate Store File to variable"
    },
    {
        "href": "function.openssl-pkcs12-export-to-file.php",
        "name": "openssl_pkcs12_export_to_file",
        "description": "Exports a PKCS#12 Compatible Certificate Store File"
    },
    {
        "href": "function.openssl-pkcs12-read.php",
        "name": "openssl_pkcs12_read",
        "description": "Parse a PKCS#12 Certificate Store into an array"
    },
    {
        "href": "function.openssl-pkey-derive.php",
        "name": "openssl_pkey_derive",
        "description": "Computes shared secret for public value of remote and local DH or ECDH key"
    },
    {
        "href": "function.openssl-pkey-export.php",
        "name": "openssl_pkey_export",
        "description": "Gets an exportable representation of a key into a string"
    },
    {
        "href": "function.openssl-pkey-export-to-file.php",
        "name": "openssl_pkey_export_to_file",
        "description": "Gets an exportable representation of a key into a file"
    },
    {
        "href": "function.openssl-pkey-free.php",
        "name": "openssl_pkey_free",
        "description": "Frees a private key"
    },
    {
        "href": "function.openssl-pkey-get-details.php",
        "name": "openssl_pkey_get_details",
        "description": "Returns an array with the key details"
    },
    {
        "href": "function.openssl-pkey-get-private.php",
        "name": "openssl_pkey_get_private",
        "description": "Get a private key"
    },
    {
        "href": "function.openssl-pkey-get-public.php",
        "name": "openssl_pkey_get_public",
        "description": "Extract public key from certificate and prepare it for use"
    },
    {
        "href": "function.openssl-pkey-new.php",
        "name": "openssl_pkey_new",
        "description": "Generates a new private key"
    },
    {
        "href": "function.openssl-private-decrypt.php",
        "name": "openssl_private_decrypt",
        "description": "Decrypts data with private key"
    },
    {
        "href": "function.openssl-private-encrypt.php",
        "name": "openssl_private_encrypt",
        "description": "Encrypts data with private key"
    },
    {
        "href": "function.openssl-public-decrypt.php",
        "name": "openssl_public_decrypt",
        "description": "Decrypts data with public key"
    },
    {
        "href": "function.openssl-public-encrypt.php",
        "name": "openssl_public_encrypt",
        "description": "Encrypts data with public key"
    },
    {
        "href": "function.openssl-random-pseudo-bytes.php",
        "name": "openssl_random_pseudo_bytes",
        "description": "Generate a pseudo-random string of bytes"
    },
    {
        "href": "function.openssl-seal.php",
        "name": "openssl_seal",
        "description": "Seal (encrypt) data"
    },
    {
        "href": "function.openssl-sign.php",
        "name": "openssl_sign",
        "description": "Generate signature"
    },
    {
        "href": "function.openssl-spki-export.php",
        "name": "openssl_spki_export",
        "description": "Exports a valid PEM formatted public key signed public key and challenge"
    },
    {
        "href": "function.openssl-spki-export-challenge.php",
        "name": "openssl_spki_export_challenge",
        "description": "Exports the challenge associated with a signed public key and challenge"
    },
    {
        "href": "function.openssl-spki-new.php",
        "name": "openssl_spki_new",
        "description": "Generate a new signed public key and challenge"
    },
    {
        "href": "function.openssl-spki-verify.php",
        "name": "openssl_spki_verify",
        "description": "Verifies a signed public key and challenge"
    },
    {
        "href": "function.openssl-verify.php",
        "name": "openssl_verify",
        "description": "Verify signature"
    },
    {
        "href": "function.openssl-x509-checkpurpose.php",
        "name": "openssl_x509_checkpurpose",
        "description": "Verifies if a certificate can be used for a particular purpose"
    },
    {
        "href": "function.openssl-x509-check-private-key.php",
        "name": "openssl_x509_check_private_key",
        "description": "Checks if a private key corresponds to a certificate"
    },
    {
        "href": "function.openssl-x509-export.php",
        "name": "openssl_x509_export",
        "description": "Exports a certificate as a string"
    },
    {
        "href": "function.openssl-x509-export-to-file.php",
        "name": "openssl_x509_export_to_file",
        "description": "Exports a certificate to file"
    },
    {
        "href": "function.openssl-x509-fingerprint.php",
        "name": "openssl_x509_fingerprint",
        "description": "Calculates the fingerprint, or digest, of a given X.509 certificate"
    },
    {
        "href": "function.openssl-x509-free.php",
        "name": "openssl_x509_free",
        "description": "Free certificate resource"
    },
    {
        "href": "function.openssl-x509-parse.php",
        "name": "openssl_x509_parse",
        "description": "Parse an X509 certificate and return the information as an array"
    },
    {
        "href": "function.openssl-x509-read.php",
        "name": "openssl_x509_read",
        "description": "Parse an X.509 certificate and return an object for  it"
    },
    {
        "href": "function.openssl-x509-verify.php",
        "name": "openssl_x509_verify",
        "description": "Verifies digital signature of x509 certificate against a public key"
    },
    {
        "href": "function.ord.php",
        "name": "ord",
        "description": "Convert the first byte of a string to a value between 0 and 255"
    },
    {
        "href": "outeriterator.getinneriterator.php",
        "name": "OuterIterator::getInnerIterator",
        "description": "Returns the inner iterator for the current entry"
    },
    {
        "href": "function.output-add-rewrite-var.php",
        "name": "output_add_rewrite_var",
        "description": "Add URL rewriter values"
    },
    {
        "href": "function.output-reset-rewrite-vars.php",
        "name": "output_reset_rewrite_vars",
        "description": "Reset URL rewriter values"
    },
    {
        "href": "function.pack.php",
        "name": "pack",
        "description": "Pack data into binary string"
    },
    {
        "href": "parallel.bootstrap.php",
        "name": "parallel\\bootstrap",
        "description": "Bootstrapping"
    },
    {
        "href": "parallel-channel.close.php",
        "name": "parallel\\Channel::close",
        "description": "Closing"
    },
    {
        "href": "parallel-channel.make.php",
        "name": "parallel\\Channel::make",
        "description": "Access"
    },
    {
        "href": "parallel-channel.open.php",
        "name": "parallel\\Channel::open",
        "description": "Access"
    },
    {
        "href": "parallel-channel.recv.php",
        "name": "parallel\\Channel::recv",
        "description": "Sharing"
    },
    {
        "href": "parallel-channel.send.php",
        "name": "parallel\\Channel::send",
        "description": "Sharing"
    },
    {
        "href": "parallel-channel.construct.php",
        "name": "parallel\\Channel::__construct",
        "description": "Channel Construction"
    },
    {
        "href": "parallel-events.addchannel.php",
        "name": "parallel\\Events::addChannel",
        "description": "Targets"
    },
    {
        "href": "parallel-events.addfuture.php",
        "name": "parallel\\Events::addFuture",
        "description": "Targets"
    },
    {
        "href": "parallel-events.poll.php",
        "name": "parallel\\Events::poll",
        "description": "Polling"
    },
    {
        "href": "parallel-events.remove.php",
        "name": "parallel\\Events::remove",
        "description": "Targets"
    },
    {
        "href": "parallel-events.setblocking.php",
        "name": "parallel\\Events::setBlocking",
        "description": "Behaviour"
    },
    {
        "href": "parallel-events.setinput.php",
        "name": "parallel\\Events::setInput",
        "description": "Input"
    },
    {
        "href": "parallel-events.settimeout.php",
        "name": "parallel\\Events::setTimeout",
        "description": "Behaviour"
    },
    {
        "href": "parallel-events-input.add.php",
        "name": "parallel\\Events\\Input::add",
        "description": "Inputs"
    },
    {
        "href": "parallel-events-input.clear.php",
        "name": "parallel\\Events\\Input::clear",
        "description": "Inputs"
    },
    {
        "href": "parallel-events-input.remove.php",
        "name": "parallel\\Events\\Input::remove",
        "description": "Inputs"
    },
    {
        "href": "parallel-future.cancel.php",
        "name": "parallel\\Future::cancel",
        "description": "Cancellation"
    },
    {
        "href": "parallel-future.cancelled.php",
        "name": "parallel\\Future::cancelled",
        "description": "State Detection"
    },
    {
        "href": "parallel-future.done.php",
        "name": "parallel\\Future::done",
        "description": "State Detection"
    },
    {
        "href": "parallel-future.value.php",
        "name": "parallel\\Future::value",
        "description": "Resolution"
    },
    {
        "href": "parallel.run.php",
        "name": "parallel\\run",
        "description": "Execution"
    },
    {
        "href": "parallel-runtime.close.php",
        "name": "parallel\\Runtime::close",
        "description": "Runtime Graceful Join"
    },
    {
        "href": "parallel-runtime.kill.php",
        "name": "parallel\\Runtime::kill",
        "description": "Runtime Join"
    },
    {
        "href": "parallel-runtime.run.php",
        "name": "parallel\\Runtime::run",
        "description": "Execution"
    },
    {
        "href": "parallel-runtime.construct.php",
        "name": "parallel\\Runtime::__construct",
        "description": "Runtime Construction"
    },
    {
        "href": "parallel-sync.get.php",
        "name": "parallel\\Sync::get",
        "description": "Access"
    },
    {
        "href": "parallel-sync.notify.php",
        "name": "parallel\\Sync::notify",
        "description": "Synchronization"
    },
    {
        "href": "parallel-sync.set.php",
        "name": "parallel\\Sync::set",
        "description": "Access"
    },
    {
        "href": "parallel-sync.wait.php",
        "name": "parallel\\Sync::wait",
        "description": "Synchronization"
    },
    {
        "href": "parallel-sync.construct.php",
        "name": "parallel\\Sync::__construct",
        "description": "Construction"
    },
    {
        "href": "parallel-sync.invoke.php",
        "name": "parallel\\Sync::__invoke",
        "description": "Synchronization"
    },
    {
        "href": "parentiterator.accept.php",
        "name": "ParentIterator::accept",
        "description": "Determines acceptability"
    },
    {
        "href": "parentiterator.getchildren.php",
        "name": "ParentIterator::getChildren",
        "description": "Return the inner iterator's children contained in a ParentIterator"
    },
    {
        "href": "parentiterator.haschildren.php",
        "name": "ParentIterator::hasChildren",
        "description": "Check whether the inner iterator's current element has children"
    },
    {
        "href": "parentiterator.next.php",
        "name": "ParentIterator::next",
        "description": "Move the iterator forward"
    },
    {
        "href": "parentiterator.rewind.php",
        "name": "ParentIterator::rewind",
        "description": "Rewind the iterator"
    },
    {
        "href": "parentiterator.construct.php",
        "name": "ParentIterator::__construct",
        "description": "Constructs a ParentIterator"
    },
    {
        "href": "parle-lexer.advance.php",
        "name": "Parle\\Lexer::advance",
        "description": "Process next lexer rule"
    },
    {
        "href": "parle-lexer.build.php",
        "name": "Parle\\Lexer::build",
        "description": "Finalize the lexer rule set"
    },
    {
        "href": "parle-lexer.callout.php",
        "name": "Parle\\Lexer::callout",
        "description": "Define token callback"
    },
    {
        "href": "parle-lexer.consume.php",
        "name": "Parle\\Lexer::consume",
        "description": "Pass the data for processing"
    },
    {
        "href": "parle-lexer.dump.php",
        "name": "Parle\\Lexer::dump",
        "description": "Dump the state machine"
    },
    {
        "href": "parle-lexer.gettoken.php",
        "name": "Parle\\Lexer::getToken",
        "description": "Retrieve the current token"
    },
    {
        "href": "parle-lexer.insertmacro.php",
        "name": "Parle\\Lexer::insertMacro",
        "description": "Insert regex macro"
    },
    {
        "href": "parle-lexer.push.php",
        "name": "Parle\\Lexer::push",
        "description": "Add a lexer rule"
    },
    {
        "href": "parle-lexer.reset.php",
        "name": "Parle\\Lexer::reset",
        "description": "Reset lexer"
    },
    {
        "href": "parle-parser.advance.php",
        "name": "Parle\\Parser::advance",
        "description": "Process next parser rule"
    },
    {
        "href": "parle-parser.build.php",
        "name": "Parle\\Parser::build",
        "description": "Finalize the grammar rules"
    },
    {
        "href": "parle-parser.consume.php",
        "name": "Parle\\Parser::consume",
        "description": "Consume the data for processing"
    },
    {
        "href": "parle-parser.dump.php",
        "name": "Parle\\Parser::dump",
        "description": "Dump the grammar"
    },
    {
        "href": "parle-parser.errorinfo.php",
        "name": "Parle\\Parser::errorInfo",
        "description": "Retrieve the error information"
    },
    {
        "href": "parle-parser.left.php",
        "name": "Parle\\Parser::left",
        "description": "Declare a token with left-associativity"
    },
    {
        "href": "parle-parser.nonassoc.php",
        "name": "Parle\\Parser::nonassoc",
        "description": "Declare a token with no associativity"
    },
    {
        "href": "parle-parser.precedence.php",
        "name": "Parle\\Parser::precedence",
        "description": "Declare a precedence rule"
    },
    {
        "href": "parle-parser.push.php",
        "name": "Parle\\Parser::push",
        "description": "Add a grammar rule"
    },
    {
        "href": "parle-parser.reset.php",
        "name": "Parle\\Parser::reset",
        "description": "Reset parser state"
    },
    {
        "href": "parle-parser.right.php",
        "name": "Parle\\Parser::right",
        "description": "Declare a token with right-associativity"
    },
    {
        "href": "parle-parser.sigil.php",
        "name": "Parle\\Parser::sigil",
        "description": "Retrieve a matching part of a rule"
    },
    {
        "href": "parle-parser.token.php",
        "name": "Parle\\Parser::token",
        "description": "Declare a token"
    },
    {
        "href": "parle-parser.tokenid.php",
        "name": "Parle\\Parser::tokenId",
        "description": "Get token id"
    },
    {
        "href": "parle-parser.trace.php",
        "name": "Parle\\Parser::trace",
        "description": "Trace the parser operation"
    },
    {
        "href": "parle-parser.validate.php",
        "name": "Parle\\Parser::validate",
        "description": "Validate input"
    },
    {
        "href": "parle-rlexer.advance.php",
        "name": "Parle\\RLexer::advance",
        "description": "Process next lexer rule"
    },
    {
        "href": "parle-rlexer.build.php",
        "name": "Parle\\RLexer::build",
        "description": "Finalize the lexer rule set"
    },
    {
        "href": "parle-rlexer.callout.php",
        "name": "Parle\\RLexer::callout",
        "description": "Define token callback"
    },
    {
        "href": "parle-rlexer.consume.php",
        "name": "Parle\\RLexer::consume",
        "description": "Pass the data for processing"
    },
    {
        "href": "parle-rlexer.dump.php",
        "name": "Parle\\RLexer::dump",
        "description": "Dump the state machine"
    },
    {
        "href": "parle-rlexer.gettoken.php",
        "name": "Parle\\RLexer::getToken",
        "description": "Retrieve the current token"
    },
    {
        "href": "parle-rlexer.insertmacro.php",
        "name": "Parle\\RLexer::insertMacro",
        "description": "Insert regex macro"
    },
    {
        "href": "parle-rlexer.push.php",
        "name": "Parle\\RLexer::push",
        "description": "Add a lexer rule"
    },
    {
        "href": "parle-rlexer.pushstate.php",
        "name": "Parle\\RLexer::pushState",
        "description": "Push a new start state"
    },
    {
        "href": "parle-rlexer.reset.php",
        "name": "Parle\\RLexer::reset",
        "description": "Reset lexer"
    },
    {
        "href": "parle-rparser.advance.php",
        "name": "Parle\\RParser::advance",
        "description": "Process next parser rule"
    },
    {
        "href": "parle-rparser.build.php",
        "name": "Parle\\RParser::build",
        "description": "Finalize the grammar rules"
    },
    {
        "href": "parle-rparser.consume.php",
        "name": "Parle\\RParser::consume",
        "description": "Consume the data for processing"
    },
    {
        "href": "parle-rparser.dump.php",
        "name": "Parle\\RParser::dump",
        "description": "Dump the grammar"
    },
    {
        "href": "parle-rparser.errorinfo.php",
        "name": "Parle\\RParser::errorInfo",
        "description": "Retrieve the error information"
    },
    {
        "href": "parle-rparser.left.php",
        "name": "Parle\\RParser::left",
        "description": "Declare a token with left-associativity"
    },
    {
        "href": "parle-rparser.nonassoc.php",
        "name": "Parle\\RParser::nonassoc",
        "description": "Declare a token with no associativity"
    },
    {
        "href": "parle-rparser.precedence.php",
        "name": "Parle\\RParser::precedence",
        "description": "Declare a precedence rule"
    },
    {
        "href": "parle-rparser.push.php",
        "name": "Parle\\RParser::push",
        "description": "Add a grammar rule"
    },
    {
        "href": "parle-rparser.reset.php",
        "name": "Parle\\RParser::reset",
        "description": "Reset parser state"
    },
    {
        "href": "parle-rparser.right.php",
        "name": "Parle\\RParser::right",
        "description": "Declare a token with right-associativity"
    },
    {
        "href": "parle-rparser.sigil.php",
        "name": "Parle\\RParser::sigil",
        "description": "Retrieve a matching part of a rule"
    },
    {
        "href": "parle-rparser.token.php",
        "name": "Parle\\RParser::token",
        "description": "Declare a token"
    },
    {
        "href": "parle-rparser.tokenid.php",
        "name": "Parle\\RParser::tokenId",
        "description": "Get token id"
    },
    {
        "href": "parle-rparser.trace.php",
        "name": "Parle\\RParser::trace",
        "description": "Trace the parser operation"
    },
    {
        "href": "parle-rparser.validate.php",
        "name": "Parle\\RParser::validate",
        "description": "Validate input"
    },
    {
        "href": "parle-stack.pop.php",
        "name": "Parle\\Stack::pop",
        "description": "Pop an item from the stack"
    },
    {
        "href": "parle-stack.push.php",
        "name": "Parle\\Stack::push",
        "description": "Push an item into the stack"
    },
    {
        "href": "function.parse-ini-file.php",
        "name": "parse_ini_file",
        "description": "Parse a configuration file"
    },
    {
        "href": "function.parse-ini-string.php",
        "name": "parse_ini_string",
        "description": "Parse a configuration string"
    },
    {
        "href": "function.parse-str.php",
        "name": "parse_str",
        "description": "Parses the string into variables"
    },
    {
        "href": "function.parse-url.php",
        "name": "parse_url",
        "description": "Parse a URL and return its components"
    },
    {
        "href": "function.passthru.php",
        "name": "passthru",
        "description": "Execute an external program and display raw output"
    },
    {
        "href": "function.password-algos.php",
        "name": "password_algos",
        "description": "Get available password hashing algorithm IDs"
    },
    {
        "href": "function.password-get-info.php",
        "name": "password_get_info",
        "description": "Returns information about the given hash"
    },
    {
        "href": "function.password-hash.php",
        "name": "password_hash",
        "description": "Creates a password hash"
    },
    {
        "href": "function.password-needs-rehash.php",
        "name": "password_needs_rehash",
        "description": "Checks if the given hash matches the given options"
    },
    {
        "href": "function.password-verify.php",
        "name": "password_verify",
        "description": "Verifies that a password matches a hash"
    },
    {
        "href": "function.pathinfo.php",
        "name": "pathinfo",
        "description": "Returns information about a file path"
    },
    {
        "href": "function.pclose.php",
        "name": "pclose",
        "description": "Closes process file pointer"
    },
    {
        "href": "function.pcntl-alarm.php",
        "name": "pcntl_alarm",
        "description": "Set an alarm clock for delivery of a signal"
    },
    {
        "href": "function.pcntl-async-signals.php",
        "name": "pcntl_async_signals",
        "description": "Enable/disable asynchronous signal handling or return the old setting"
    },
    {
        "href": "function.pcntl-errno.php",
        "name": "pcntl_errno",
        "description": "Alias of pcntl_get_last_error"
    },
    {
        "href": "function.pcntl-exec.php",
        "name": "pcntl_exec",
        "description": "Executes specified program in current process space"
    },
    {
        "href": "function.pcntl-fork.php",
        "name": "pcntl_fork",
        "description": "Forks the currently running process"
    },
    {
        "href": "function.pcntl-getpriority.php",
        "name": "pcntl_getpriority",
        "description": "Get the priority of any process"
    },
    {
        "href": "function.pcntl-get-last-error.php",
        "name": "pcntl_get_last_error",
        "description": "Retrieve the error number set by the last pcntl function which failed"
    },
    {
        "href": "function.pcntl-setpriority.php",
        "name": "pcntl_setpriority",
        "description": "Change the priority of any process"
    },
    {
        "href": "function.pcntl-signal.php",
        "name": "pcntl_signal",
        "description": "Installs a signal handler"
    },
    {
        "href": "function.pcntl-signal-dispatch.php",
        "name": "pcntl_signal_dispatch",
        "description": "Calls signal handlers for pending signals"
    },
    {
        "href": "function.pcntl-signal-get-handler.php",
        "name": "pcntl_signal_get_handler",
        "description": "Get the current handler for specified signal"
    },
    {
        "href": "function.pcntl-sigprocmask.php",
        "name": "pcntl_sigprocmask",
        "description": "Sets and retrieves blocked signals"
    },
    {
        "href": "function.pcntl-sigtimedwait.php",
        "name": "pcntl_sigtimedwait",
        "description": "Waits for signals, with a timeout"
    },
    {
        "href": "function.pcntl-sigwaitinfo.php",
        "name": "pcntl_sigwaitinfo",
        "description": "Waits for signals"
    },
    {
        "href": "function.pcntl-strerror.php",
        "name": "pcntl_strerror",
        "description": "Retrieve the system error message associated with the given errno"
    },
    {
        "href": "function.pcntl-wait.php",
        "name": "pcntl_wait",
        "description": "Waits on or returns the status of a forked child"
    },
    {
        "href": "function.pcntl-waitpid.php",
        "name": "pcntl_waitpid",
        "description": "Waits on or returns the status of a forked child"
    },
    {
        "href": "function.pcntl-wexitstatus.php",
        "name": "pcntl_wexitstatus",
        "description": "Returns the return code of a terminated child"
    },
    {
        "href": "function.pcntl-wifexited.php",
        "name": "pcntl_wifexited",
        "description": "Checks if status code represents a normal exit"
    },
    {
        "href": "function.pcntl-wifsignaled.php",
        "name": "pcntl_wifsignaled",
        "description": "Checks whether the status code represents a termination due to a signal"
    },
    {
        "href": "function.pcntl-wifstopped.php",
        "name": "pcntl_wifstopped",
        "description": "Checks whether the child process is currently stopped"
    },
    {
        "href": "function.pcntl-wstopsig.php",
        "name": "pcntl_wstopsig",
        "description": "Returns the signal which caused the child to stop"
    },
    {
        "href": "function.pcntl-wtermsig.php",
        "name": "pcntl_wtermsig",
        "description": "Returns the signal which caused the child to terminate"
    },
    {
        "href": "pdo.begintransaction.php",
        "name": "PDO::beginTransaction",
        "description": "Initiates a transaction"
    },
    {
        "href": "pdo.commit.php",
        "name": "PDO::commit",
        "description": "Commits a transaction"
    },
    {
        "href": "pdo.cubrid-schema.php",
        "name": "PDO::cubrid_schema",
        "description": "Get the requested schema information"
    },
    {
        "href": "pdo.errorcode.php",
        "name": "PDO::errorCode",
        "description": "Fetch the SQLSTATE associated with the last operation on the database handle"
    },
    {
        "href": "pdo.errorinfo.php",
        "name": "PDO::errorInfo",
        "description": "Fetch extended error information associated with the last operation on the database handle"
    },
    {
        "href": "pdo.exec.php",
        "name": "PDO::exec",
        "description": "Execute an SQL statement and return the number of affected rows"
    },
    {
        "href": "pdo.getattribute.php",
        "name": "PDO::getAttribute",
        "description": "Retrieve a database connection attribute"
    },
    {
        "href": "pdo.getavailabledrivers.php",
        "name": "PDO::getAvailableDrivers",
        "description": "Return an array of available PDO drivers"
    },
    {
        "href": "pdo.intransaction.php",
        "name": "PDO::inTransaction",
        "description": "Checks if inside a transaction"
    },
    {
        "href": "pdo.lastinsertid.php",
        "name": "PDO::lastInsertId",
        "description": "Returns the ID of the last inserted row or sequence value"
    },
    {
        "href": "pdo.pgsqlcopyfromarray.php",
        "name": "PDO::pgsqlCopyFromArray",
        "description": "Copy data from PHP array into table"
    },
    {
        "href": "pdo.pgsqlcopyfromfile.php",
        "name": "PDO::pgsqlCopyFromFile",
        "description": "Copy data from file into table"
    },
    {
        "href": "pdo.pgsqlcopytoarray.php",
        "name": "PDO::pgsqlCopyToArray",
        "description": "Copy data from database table into PHP array"
    },
    {
        "href": "pdo.pgsqlcopytofile.php",
        "name": "PDO::pgsqlCopyToFile",
        "description": "Copy data from table into file"
    },
    {
        "href": "pdo.pgsqlgetnotify.php",
        "name": "PDO::pgsqlGetNotify",
        "description": "Get asynchronous notification"
    },
    {
        "href": "pdo.pgsqlgetpid.php",
        "name": "PDO::pgsqlGetPid",
        "description": "Get the server PID"
    },
    {
        "href": "pdo.pgsqllobcreate.php",
        "name": "PDO::pgsqlLOBCreate",
        "description": "Creates a new large object"
    },
    {
        "href": "pdo.pgsqllobopen.php",
        "name": "PDO::pgsqlLOBOpen",
        "description": "Opens an existing large object stream"
    },
    {
        "href": "pdo.pgsqllobunlink.php",
        "name": "PDO::pgsqlLOBUnlink",
        "description": "Deletes the large object"
    },
    {
        "href": "pdo.prepare.php",
        "name": "PDO::prepare",
        "description": "Prepares a statement for execution and returns a statement object"
    },
    {
        "href": "pdo.query.php",
        "name": "PDO::query",
        "description": "Prepares and executes an SQL statement without placeholders"
    },
    {
        "href": "pdo.quote.php",
        "name": "PDO::quote",
        "description": "Quotes a string for use in a query"
    },
    {
        "href": "pdo.rollback.php",
        "name": "PDO::rollBack",
        "description": "Rolls back a transaction"
    },
    {
        "href": "pdo.setattribute.php",
        "name": "PDO::setAttribute",
        "description": "Set an attribute"
    },
    {
        "href": "pdo.sqlitecreateaggregate.php",
        "name": "PDO::sqliteCreateAggregate",
        "description": "Registers an aggregating User Defined Function for use in SQL statements"
    },
    {
        "href": "pdo.sqlitecreatecollation.php",
        "name": "PDO::sqliteCreateCollation",
        "description": "Registers a User Defined Function for use as a collating function in SQL statements"
    },
    {
        "href": "pdo.sqlitecreatefunction.php",
        "name": "PDO::sqliteCreateFunction",
        "description": "Registers a User Defined Function for use in SQL statements"
    },
    {
        "href": "pdo.construct.php",
        "name": "PDO::__construct",
        "description": "Creates a PDO instance representing a connection to a database"
    },
    {
        "href": "pdostatement.bindcolumn.php",
        "name": "PDOStatement::bindColumn",
        "description": "Bind a column to a PHP variable"
    },
    {
        "href": "pdostatement.bindparam.php",
        "name": "PDOStatement::bindParam",
        "description": "Binds a parameter to the specified variable name"
    },
    {
        "href": "pdostatement.bindvalue.php",
        "name": "PDOStatement::bindValue",
        "description": "Binds a value to a parameter"
    },
    {
        "href": "pdostatement.closecursor.php",
        "name": "PDOStatement::closeCursor",
        "description": "Closes the cursor, enabling the statement to be executed again"
    },
    {
        "href": "pdostatement.columncount.php",
        "name": "PDOStatement::columnCount",
        "description": "Returns the number of columns in the result set"
    },
    {
        "href": "pdostatement.debugdumpparams.php",
        "name": "PDOStatement::debugDumpParams",
        "description": "Dump an SQL prepared command"
    },
    {
        "href": "pdostatement.errorcode.php",
        "name": "PDOStatement::errorCode",
        "description": "Fetch the SQLSTATE associated with the last operation on the statement handle"
    },
    {
        "href": "pdostatement.errorinfo.php",
        "name": "PDOStatement::errorInfo",
        "description": "Fetch extended error information associated with the last operation on the statement handle"
    },
    {
        "href": "pdostatement.execute.php",
        "name": "PDOStatement::execute",
        "description": "Executes a prepared statement"
    },
    {
        "href": "pdostatement.fetch.php",
        "name": "PDOStatement::fetch",
        "description": "Fetches the next row from a result set"
    },
    {
        "href": "pdostatement.fetchall.php",
        "name": "PDOStatement::fetchAll",
        "description": "Fetches the remaining rows from a result set"
    },
    {
        "href": "pdostatement.fetchcolumn.php",
        "name": "PDOStatement::fetchColumn",
        "description": "Returns a single column from the next row of a result set"
    },
    {
        "href": "pdostatement.fetchobject.php",
        "name": "PDOStatement::fetchObject",
        "description": "Fetches the next row and returns it as an object"
    },
    {
        "href": "pdostatement.getattribute.php",
        "name": "PDOStatement::getAttribute",
        "description": "Retrieve a statement attribute"
    },
    {
        "href": "pdostatement.getcolumnmeta.php",
        "name": "PDOStatement::getColumnMeta",
        "description": "Returns metadata for a column in a result set"
    },
    {
        "href": "pdostatement.getiterator.php",
        "name": "PDOStatement::getIterator",
        "description": "Gets result set iterator"
    },
    {
        "href": "pdostatement.nextrowset.php",
        "name": "PDOStatement::nextRowset",
        "description": "Advances to the next rowset in a multi-rowset statement handle"
    },
    {
        "href": "pdostatement.rowcount.php",
        "name": "PDOStatement::rowCount",
        "description": "Returns the number of rows affected by the last SQL statement"
    },
    {
        "href": "pdostatement.setattribute.php",
        "name": "PDOStatement::setAttribute",
        "description": "Set a statement attribute"
    },
    {
        "href": "pdostatement.setfetchmode.php",
        "name": "PDOStatement::setFetchMode",
        "description": "Set the default fetch mode for this statement"
    },
    {
        "href": "ref.pdo-cubrid.connection.php",
        "name": "PDO_CUBRID DSN",
        "description": "Connecting to CUBRID databases"
    },
    {
        "href": "ref.pdo-dblib.connection.php",
        "name": "PDO_DBLIB DSN",
        "description": "Connecting to Microsoft SQL Server and Sybase databases"
    },
    {
        "href": "ref.pdo-firebird.connection.php",
        "name": "PDO_FIREBIRD DSN",
        "description": "Connecting to Firebird databases"
    },
    {
        "href": "ref.pdo-ibm.connection.php",
        "name": "PDO_IBM DSN",
        "description": "Connecting to IBM databases"
    },
    {
        "href": "ref.pdo-informix.connection.php",
        "name": "PDO_INFORMIX DSN",
        "description": "Connecting to Informix databases"
    },
    {
        "href": "ref.pdo-mysql.connection.php",
        "name": "PDO_MYSQL DSN",
        "description": "Connecting to MySQL databases"
    },
    {
        "href": "ref.pdo-oci.connection.php",
        "name": "PDO_OCI DSN",
        "description": "Connecting to Oracle databases"
    },
    {
        "href": "ref.pdo-odbc.connection.php",
        "name": "PDO_ODBC DSN",
        "description": "Connecting to ODBC or DB2 databases"
    },
    {
        "href": "ref.pdo-pgsql.connection.php",
        "name": "PDO_PGSQL DSN",
        "description": "Connecting to PostgreSQL databases"
    },
    {
        "href": "ref.pdo-sqlite.connection.php",
        "name": "PDO_SQLITE DSN",
        "description": "Connecting to SQLite databases"
    },
    {
        "href": "ref.pdo-sqlsrv.connection.php",
        "name": "PDO_SQLSRV DSN",
        "description": "Connecting to MS SQL Server and SQL Azure databases"
    },
    {
        "href": "function.pfsockopen.php",
        "name": "pfsockopen",
        "description": "Open persistent Internet or Unix domain socket connection"
    },
    {
        "href": "function.pg-affected-rows.php",
        "name": "pg_affected_rows",
        "description": "Returns number of affected records (tuples)"
    },
    {
        "href": "function.pg-cancel-query.php",
        "name": "pg_cancel_query",
        "description": "Cancel an asynchronous query"
    },
    {
        "href": "function.pg-client-encoding.php",
        "name": "pg_client_encoding",
        "description": "Gets the client encoding"
    },
    {
        "href": "function.pg-close.php",
        "name": "pg_close",
        "description": "Closes a PostgreSQL connection"
    },
    {
        "href": "function.pg-connect.php",
        "name": "pg_connect",
        "description": "Open a PostgreSQL connection"
    },
    {
        "href": "function.pg-connection-busy.php",
        "name": "pg_connection_busy",
        "description": "Get connection is busy or not"
    },
    {
        "href": "function.pg-connection-reset.php",
        "name": "pg_connection_reset",
        "description": "Reset connection (reconnect)"
    },
    {
        "href": "function.pg-connection-status.php",
        "name": "pg_connection_status",
        "description": "Get connection status"
    },
    {
        "href": "function.pg-connect-poll.php",
        "name": "pg_connect_poll",
        "description": "Poll the status of an in-progress asynchronous PostgreSQL connection   attempt"
    },
    {
        "href": "function.pg-consume-input.php",
        "name": "pg_consume_input",
        "description": "Reads input on the connection"
    },
    {
        "href": "function.pg-convert.php",
        "name": "pg_convert",
        "description": "Convert associative array values into forms suitable for SQL statements"
    },
    {
        "href": "function.pg-copy-from.php",
        "name": "pg_copy_from",
        "description": "Insert records into a table from an array"
    },
    {
        "href": "function.pg-copy-to.php",
        "name": "pg_copy_to",
        "description": "Copy a table to an array"
    },
    {
        "href": "function.pg-dbname.php",
        "name": "pg_dbname",
        "description": "Get the database name"
    },
    {
        "href": "function.pg-delete.php",
        "name": "pg_delete",
        "description": "Deletes records"
    },
    {
        "href": "function.pg-end-copy.php",
        "name": "pg_end_copy",
        "description": "Sync with PostgreSQL backend"
    },
    {
        "href": "function.pg-escape-bytea.php",
        "name": "pg_escape_bytea",
        "description": "Escape a string for insertion into a bytea field"
    },
    {
        "href": "function.pg-escape-identifier.php",
        "name": "pg_escape_identifier",
        "description": "Escape a identifier for insertion into a text field"
    },
    {
        "href": "function.pg-escape-literal.php",
        "name": "pg_escape_literal",
        "description": "Escape a literal for insertion into a text field"
    },
    {
        "href": "function.pg-escape-string.php",
        "name": "pg_escape_string",
        "description": "Escape a string for query"
    },
    {
        "href": "function.pg-execute.php",
        "name": "pg_execute",
        "description": "Sends a request to execute a prepared statement with given parameters, and waits for the result"
    },
    {
        "href": "function.pg-fetch-all.php",
        "name": "pg_fetch_all",
        "description": "Fetches all rows from a result as an array"
    },
    {
        "href": "function.pg-fetch-all-columns.php",
        "name": "pg_fetch_all_columns",
        "description": "Fetches all rows in a particular result column as an array"
    },
    {
        "href": "function.pg-fetch-array.php",
        "name": "pg_fetch_array",
        "description": "Fetch a row as an array"
    },
    {
        "href": "function.pg-fetch-assoc.php",
        "name": "pg_fetch_assoc",
        "description": "Fetch a row as an associative array"
    },
    {
        "href": "function.pg-fetch-object.php",
        "name": "pg_fetch_object",
        "description": "Fetch a row as an object"
    },
    {
        "href": "function.pg-fetch-result.php",
        "name": "pg_fetch_result",
        "description": "Returns values from a result instance"
    },
    {
        "href": "function.pg-fetch-row.php",
        "name": "pg_fetch_row",
        "description": "Get a row as an enumerated array"
    },
    {
        "href": "function.pg-field-is-null.php",
        "name": "pg_field_is_null",
        "description": "Test if a field is SQL NULL"
    },
    {
        "href": "function.pg-field-name.php",
        "name": "pg_field_name",
        "description": "Returns the name of a field"
    },
    {
        "href": "function.pg-field-num.php",
        "name": "pg_field_num",
        "description": "Returns the field number of the named field"
    },
    {
        "href": "function.pg-field-prtlen.php",
        "name": "pg_field_prtlen",
        "description": "Returns the printed length"
    },
    {
        "href": "function.pg-field-size.php",
        "name": "pg_field_size",
        "description": "Returns the internal storage size of the named field"
    },
    {
        "href": "function.pg-field-table.php",
        "name": "pg_field_table",
        "description": "Returns the name or oid of the tables field"
    },
    {
        "href": "function.pg-field-type.php",
        "name": "pg_field_type",
        "description": "Returns the type name for the corresponding field number"
    },
    {
        "href": "function.pg-field-type-oid.php",
        "name": "pg_field_type_oid",
        "description": "Returns the type ID (OID) for the corresponding field number"
    },
    {
        "href": "function.pg-flush.php",
        "name": "pg_flush",
        "description": "Flush outbound query data on the connection"
    },
    {
        "href": "function.pg-free-result.php",
        "name": "pg_free_result",
        "description": "Free result memory"
    },
    {
        "href": "function.pg-get-notify.php",
        "name": "pg_get_notify",
        "description": "Gets SQL NOTIFY message"
    },
    {
        "href": "function.pg-get-pid.php",
        "name": "pg_get_pid",
        "description": "Gets the backend's process ID"
    },
    {
        "href": "function.pg-get-result.php",
        "name": "pg_get_result",
        "description": "Get asynchronous query result"
    },
    {
        "href": "function.pg-host.php",
        "name": "pg_host",
        "description": "Returns the host name associated with the connection"
    },
    {
        "href": "function.pg-insert.php",
        "name": "pg_insert",
        "description": "Insert array into table"
    },
    {
        "href": "function.pg-last-error.php",
        "name": "pg_last_error",
        "description": "Get the last error message string of a connection"
    },
    {
        "href": "function.pg-last-notice.php",
        "name": "pg_last_notice",
        "description": "Returns the last notice message from PostgreSQL server"
    },
    {
        "href": "function.pg-last-oid.php",
        "name": "pg_last_oid",
        "description": "Returns the last row's OID"
    },
    {
        "href": "function.pg-lo-close.php",
        "name": "pg_lo_close",
        "description": "Close a large object"
    },
    {
        "href": "function.pg-lo-create.php",
        "name": "pg_lo_create",
        "description": "Create a large object"
    },
    {
        "href": "function.pg-lo-export.php",
        "name": "pg_lo_export",
        "description": "Export a large object to file"
    },
    {
        "href": "function.pg-lo-import.php",
        "name": "pg_lo_import",
        "description": "Import a large object from file"
    },
    {
        "href": "function.pg-lo-open.php",
        "name": "pg_lo_open",
        "description": "Open a large object"
    },
    {
        "href": "function.pg-lo-read.php",
        "name": "pg_lo_read",
        "description": "Read a large object"
    },
    {
        "href": "function.pg-lo-read-all.php",
        "name": "pg_lo_read_all",
        "description": "Reads an entire large object and send straight to browser"
    },
    {
        "href": "function.pg-lo-seek.php",
        "name": "pg_lo_seek",
        "description": "Seeks position within a large object"
    },
    {
        "href": "function.pg-lo-tell.php",
        "name": "pg_lo_tell",
        "description": "Returns current seek position a of large object"
    },
    {
        "href": "function.pg-lo-truncate.php",
        "name": "pg_lo_truncate",
        "description": "Truncates a large object"
    },
    {
        "href": "function.pg-lo-unlink.php",
        "name": "pg_lo_unlink",
        "description": "Delete a large object"
    },
    {
        "href": "function.pg-lo-write.php",
        "name": "pg_lo_write",
        "description": "Write to a large object"
    },
    {
        "href": "function.pg-meta-data.php",
        "name": "pg_meta_data",
        "description": "Get meta data for table"
    },
    {
        "href": "function.pg-num-fields.php",
        "name": "pg_num_fields",
        "description": "Returns the number of fields in a result"
    },
    {
        "href": "function.pg-num-rows.php",
        "name": "pg_num_rows",
        "description": "Returns the number of rows in a result"
    },
    {
        "href": "function.pg-options.php",
        "name": "pg_options",
        "description": "Get the options associated with the connection"
    },
    {
        "href": "function.pg-parameter-status.php",
        "name": "pg_parameter_status",
        "description": "Looks up a current parameter setting of the server"
    },
    {
        "href": "function.pg-pconnect.php",
        "name": "pg_pconnect",
        "description": "Open a persistent PostgreSQL connection"
    },
    {
        "href": "function.pg-ping.php",
        "name": "pg_ping",
        "description": "Ping database connection"
    },
    {
        "href": "function.pg-port.php",
        "name": "pg_port",
        "description": "Return the port number associated with the connection"
    },
    {
        "href": "function.pg-prepare.php",
        "name": "pg_prepare",
        "description": "Submits a request to create a prepared statement with the   given parameters, and waits for completion"
    },
    {
        "href": "function.pg-put-line.php",
        "name": "pg_put_line",
        "description": "Send a NULL-terminated string to PostgreSQL backend"
    },
    {
        "href": "function.pg-query.php",
        "name": "pg_query",
        "description": "Execute a query"
    },
    {
        "href": "function.pg-query-params.php",
        "name": "pg_query_params",
        "description": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text"
    },
    {
        "href": "function.pg-result-error.php",
        "name": "pg_result_error",
        "description": "Get error message associated with result"
    },
    {
        "href": "function.pg-result-error-field.php",
        "name": "pg_result_error_field",
        "description": "Returns an individual field of an error report"
    },
    {
        "href": "function.pg-result-seek.php",
        "name": "pg_result_seek",
        "description": "Set internal row offset in result instance"
    },
    {
        "href": "function.pg-result-status.php",
        "name": "pg_result_status",
        "description": "Get status of query result"
    },
    {
        "href": "function.pg-select.php",
        "name": "pg_select",
        "description": "Select records"
    },
    {
        "href": "function.pg-send-execute.php",
        "name": "pg_send_execute",
        "description": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)"
    },
    {
        "href": "function.pg-send-prepare.php",
        "name": "pg_send_prepare",
        "description": "Sends a request to create a prepared statement with the given parameters, without waiting for completion"
    },
    {
        "href": "function.pg-send-query.php",
        "name": "pg_send_query",
        "description": "Sends asynchronous query"
    },
    {
        "href": "function.pg-send-query-params.php",
        "name": "pg_send_query_params",
        "description": "Submits a command and separate parameters to the server without waiting for the result(s)"
    },
    {
        "href": "function.pg-set-client-encoding.php",
        "name": "pg_set_client_encoding",
        "description": "Set the client encoding"
    },
    {
        "href": "function.pg-set-error-verbosity.php",
        "name": "pg_set_error_verbosity",
        "description": "Determines the verbosity of messages returned by pg_last_error    and pg_result_error"
    },
    {
        "href": "function.pg-socket.php",
        "name": "pg_socket",
        "description": "Get a read only handle to the socket underlying a PostgreSQL connection"
    },
    {
        "href": "function.pg-trace.php",
        "name": "pg_trace",
        "description": "Enable tracing a PostgreSQL connection"
    },
    {
        "href": "function.pg-transaction-status.php",
        "name": "pg_transaction_status",
        "description": "Returns the current in-transaction status of the server"
    },
    {
        "href": "function.pg-tty.php",
        "name": "pg_tty",
        "description": "Return the TTY name associated with the connection"
    },
    {
        "href": "function.pg-unescape-bytea.php",
        "name": "pg_unescape_bytea",
        "description": "Unescape binary for bytea type"
    },
    {
        "href": "function.pg-untrace.php",
        "name": "pg_untrace",
        "description": "Disable tracing of a PostgreSQL connection"
    },
    {
        "href": "function.pg-update.php",
        "name": "pg_update",
        "description": "Update table"
    },
    {
        "href": "function.pg-version.php",
        "name": "pg_version",
        "description": "Returns an array with client, protocol and server version (when available)"
    },
    {
        "href": "wrappers.phar.php",
        "name": "phar://",
        "description": "PHP Archive"
    },
    {
        "href": "phar.addemptydir.php",
        "name": "Phar::addEmptyDir",
        "description": "Add an empty directory to the phar archive"
    },
    {
        "href": "phar.addfile.php",
        "name": "Phar::addFile",
        "description": "Add a file from the filesystem to the phar archive"
    },
    {
        "href": "phar.addfromstring.php",
        "name": "Phar::addFromString",
        "description": "Add a file from a string to the phar archive"
    },
    {
        "href": "phar.apiversion.php",
        "name": "Phar::apiVersion",
        "description": "Returns the api version"
    },
    {
        "href": "phar.buildfromdirectory.php",
        "name": "Phar::buildFromDirectory",
        "description": "Construct a phar archive from the files within a directory"
    },
    {
        "href": "phar.buildfromiterator.php",
        "name": "Phar::buildFromIterator",
        "description": "Construct a phar archive from an iterator"
    },
    {
        "href": "phar.cancompress.php",
        "name": "Phar::canCompress",
        "description": "Returns whether phar extension supports compression using either zlib or bzip2"
    },
    {
        "href": "phar.canwrite.php",
        "name": "Phar::canWrite",
        "description": "Returns whether phar extension supports writing and creating phars"
    },
    {
        "href": "phar.compress.php",
        "name": "Phar::compress",
        "description": "Compresses the entire Phar archive using Gzip or Bzip2 compression"
    },
    {
        "href": "phar.compressfiles.php",
        "name": "Phar::compressFiles",
        "description": "Compresses all files in the current Phar archive"
    },
    {
        "href": "phar.converttodata.php",
        "name": "Phar::convertToData",
        "description": "Convert a phar archive to a non-executable tar or zip file"
    },
    {
        "href": "phar.converttoexecutable.php",
        "name": "Phar::convertToExecutable",
        "description": "Convert a phar archive to another executable phar archive file format"
    },
    {
        "href": "phar.copy.php",
        "name": "Phar::copy",
        "description": "Copy a file internal to the phar archive to another new file within the phar"
    },
    {
        "href": "phar.count.php",
        "name": "Phar::count",
        "description": "Returns the number of entries (files) in the Phar archive"
    },
    {
        "href": "phar.createdefaultstub.php",
        "name": "Phar::createDefaultStub",
        "description": "Create a phar-file format specific stub"
    },
    {
        "href": "phar.decompress.php",
        "name": "Phar::decompress",
        "description": "Decompresses the entire Phar archive"
    },
    {
        "href": "phar.decompressfiles.php",
        "name": "Phar::decompressFiles",
        "description": "Decompresses all files in the current Phar archive"
    },
    {
        "href": "phar.delete.php",
        "name": "Phar::delete",
        "description": "Delete a file within a phar archive"
    },
    {
        "href": "phar.delmetadata.php",
        "name": "Phar::delMetadata",
        "description": "Deletes the global metadata of the phar"
    },
    {
        "href": "phar.extractto.php",
        "name": "Phar::extractTo",
        "description": "Extract the contents of a phar archive to a directory"
    },
    {
        "href": "phar.getalias.php",
        "name": "Phar::getAlias",
        "description": "Get the alias for Phar"
    },
    {
        "href": "phar.getmetadata.php",
        "name": "Phar::getMetadata",
        "description": "Returns phar archive meta-data"
    },
    {
        "href": "phar.getmodified.php",
        "name": "Phar::getModified",
        "description": "Return whether phar was modified"
    },
    {
        "href": "phar.getpath.php",
        "name": "Phar::getPath",
        "description": "Get the real path to the Phar archive on disk"
    },
    {
        "href": "phar.getsignature.php",
        "name": "Phar::getSignature",
        "description": "Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive"
    },
    {
        "href": "phar.getstub.php",
        "name": "Phar::getStub",
        "description": "Return the PHP loader or bootstrap stub of a Phar archive"
    },
    {
        "href": "phar.getsupportedcompression.php",
        "name": "Phar::getSupportedCompression",
        "description": "Return array of supported compression algorithms"
    },
    {
        "href": "phar.getsupportedsignatures.php",
        "name": "Phar::getSupportedSignatures",
        "description": "Return array of supported signature types"
    },
    {
        "href": "phar.getversion.php",
        "name": "Phar::getVersion",
        "description": "Return version info of Phar archive"
    },
    {
        "href": "phar.hasmetadata.php",
        "name": "Phar::hasMetadata",
        "description": "Returns whether phar has global meta-data"
    },
    {
        "href": "phar.interceptfilefuncs.php",
        "name": "Phar::interceptFileFuncs",
        "description": "Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions"
    },
    {
        "href": "phar.isbuffering.php",
        "name": "Phar::isBuffering",
        "description": "Used to determine whether Phar write operations are being buffered, or are flushing directly to disk"
    },
    {
        "href": "phar.iscompressed.php",
        "name": "Phar::isCompressed",
        "description": "Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)"
    },
    {
        "href": "phar.isfileformat.php",
        "name": "Phar::isFileFormat",
        "description": "Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter"
    },
    {
        "href": "phar.isvalidpharfilename.php",
        "name": "Phar::isValidPharFilename",
        "description": "Returns whether the given filename is a valid phar filename"
    },
    {
        "href": "phar.iswritable.php",
        "name": "Phar::isWritable",
        "description": "Returns true if the phar archive can be modified"
    },
    {
        "href": "phar.loadphar.php",
        "name": "Phar::loadPhar",
        "description": "Loads any phar archive with an alias"
    },
    {
        "href": "phar.mapphar.php",
        "name": "Phar::mapPhar",
        "description": "Reads the currently executed file (a phar) and registers its manifest"
    },
    {
        "href": "phar.mount.php",
        "name": "Phar::mount",
        "description": "Mount an external path or file to a virtual location within the phar archive"
    },
    {
        "href": "phar.mungserver.php",
        "name": "Phar::mungServer",
        "description": "Defines a list of up to 4 $_SERVER variables that should be modified for execution"
    },
    {
        "href": "phar.offsetexists.php",
        "name": "Phar::offsetExists",
        "description": "Determines whether a file exists in the phar"
    },
    {
        "href": "phar.offsetget.php",
        "name": "Phar::offsetGet",
        "description": "Gets a PharFileInfo object for a specific file"
    },
    {
        "href": "phar.offsetset.php",
        "name": "Phar::offsetSet",
        "description": "Set the contents of an internal file to those of an external file"
    },
    {
        "href": "phar.offsetunset.php",
        "name": "Phar::offsetUnset",
        "description": "Remove a file from a phar"
    },
    {
        "href": "phar.running.php",
        "name": "Phar::running",
        "description": "Returns the full path on disk or full phar URL to the currently executing Phar archive"
    },
    {
        "href": "phar.setalias.php",
        "name": "Phar::setAlias",
        "description": "Set the alias for the Phar archive"
    },
    {
        "href": "phar.setdefaultstub.php",
        "name": "Phar::setDefaultStub",
        "description": "Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader"
    },
    {
        "href": "phar.setmetadata.php",
        "name": "Phar::setMetadata",
        "description": "Sets phar archive meta-data"
    },
    {
        "href": "phar.setsignaturealgorithm.php",
        "name": "Phar::setSignatureAlgorithm",
        "description": "Set the signature algorithm for a phar and apply it"
    },
    {
        "href": "phar.setstub.php",
        "name": "Phar::setStub",
        "description": "Used to set the PHP loader or bootstrap stub of a Phar archive"
    },
    {
        "href": "phar.startbuffering.php",
        "name": "Phar::startBuffering",
        "description": "Start buffering Phar write operations, do not modify the Phar object on disk"
    },
    {
        "href": "phar.stopbuffering.php",
        "name": "Phar::stopBuffering",
        "description": "Stop buffering write requests to the Phar archive, and save changes to disk"
    },
    {
        "href": "phar.unlinkarchive.php",
        "name": "Phar::unlinkArchive",
        "description": "Completely remove a phar archive from disk and from memory"
    },
    {
        "href": "phar.webphar.php",
        "name": "Phar::webPhar",
        "description": "Routes a request from a web browser to an internal file within the phar archive"
    },
    {
        "href": "phar.construct.php",
        "name": "Phar::__construct",
        "description": "Construct a Phar archive object"
    },
    {
        "href": "phar.destruct.php",
        "name": "Phar::__destruct",
        "description": "Destructs a Phar archive object"
    },
    {
        "href": "context.phar.php",
        "name": "Phar context options",
        "description": "Phar context option listing"
    },
    {
        "href": "phardata.addemptydir.php",
        "name": "PharData::addEmptyDir",
        "description": "Add an empty directory to the tar/zip archive"
    },
    {
        "href": "phardata.addfile.php",
        "name": "PharData::addFile",
        "description": "Add a file from the filesystem to the tar/zip archive"
    },
    {
        "href": "phardata.addfromstring.php",
        "name": "PharData::addFromString",
        "description": "Add a file from the filesystem to the tar/zip archive"
    },
    {
        "href": "phardata.buildfromdirectory.php",
        "name": "PharData::buildFromDirectory",
        "description": "Construct a tar/zip archive from the files within a directory"
    },
    {
        "href": "phardata.buildfromiterator.php",
        "name": "PharData::buildFromIterator",
        "description": "Construct a tar or zip archive from an iterator"
    },
    {
        "href": "phardata.compress.php",
        "name": "PharData::compress",
        "description": "Compresses the entire tar/zip archive using Gzip or Bzip2 compression"
    },
    {
        "href": "phardata.compressfiles.php",
        "name": "PharData::compressFiles",
        "description": "Compresses all files in the current tar/zip archive"
    },
    {
        "href": "phardata.converttodata.php",
        "name": "PharData::convertToData",
        "description": "Convert a phar archive to a non-executable tar or zip file"
    },
    {
        "href": "phardata.converttoexecutable.php",
        "name": "PharData::convertToExecutable",
        "description": "Convert a non-executable tar/zip archive to an executable phar archive"
    },
    {
        "href": "phardata.copy.php",
        "name": "PharData::copy",
        "description": "Copy a file internal to the phar archive to another new file within the phar"
    },
    {
        "href": "phardata.decompress.php",
        "name": "PharData::decompress",
        "description": "Decompresses the entire Phar archive"
    },
    {
        "href": "phardata.decompressfiles.php",
        "name": "PharData::decompressFiles",
        "description": "Decompresses all files in the current zip archive"
    },
    {
        "href": "phardata.delete.php",
        "name": "PharData::delete",
        "description": "Delete a file within a tar/zip archive"
    },
    {
        "href": "phardata.delmetadata.php",
        "name": "PharData::delMetadata",
        "description": "Deletes the global metadata of a zip archive"
    },
    {
        "href": "phardata.extractto.php",
        "name": "PharData::extractTo",
        "description": "Extract the contents of a tar/zip archive to a directory"
    },
    {
        "href": "phardata.iswritable.php",
        "name": "PharData::isWritable",
        "description": "Returns true if the tar/zip archive can be modified"
    },
    {
        "href": "phardata.offsetset.php",
        "name": "PharData::offsetSet",
        "description": "Set the contents of a file within the tar/zip to those of an external file or string"
    },
    {
        "href": "phardata.offsetunset.php",
        "name": "PharData::offsetUnset",
        "description": "Remove a file from a tar/zip archive"
    },
    {
        "href": "phardata.setalias.php",
        "name": "PharData::setAlias",
        "description": "Dummy function (Phar::setAlias is not valid for PharData)"
    },
    {
        "href": "phardata.setdefaultstub.php",
        "name": "PharData::setDefaultStub",
        "description": "Dummy function (Phar::setDefaultStub is not valid for PharData)"
    },
    {
        "href": "phardata.setmetadata.php",
        "name": "PharData::setMetadata",
        "description": "Sets phar archive meta-data"
    },
    {
        "href": "phardata.setsignaturealgorithm.php",
        "name": "PharData::setSignatureAlgorithm",
        "description": "Set the signature algorithm for a phar and apply it"
    },
    {
        "href": "phardata.setstub.php",
        "name": "PharData::setStub",
        "description": "Dummy function (Phar::setStub is not valid for PharData)"
    },
    {
        "href": "phardata.construct.php",
        "name": "PharData::__construct",
        "description": "Construct a non-executable tar or zip archive object"
    },
    {
        "href": "phardata.destruct.php",
        "name": "PharData::__destruct",
        "description": "Destructs a non-executable tar or zip archive object"
    },
    {
        "href": "pharfileinfo.chmod.php",
        "name": "PharFileInfo::chmod",
        "description": "Sets file-specific permission bits"
    },
    {
        "href": "pharfileinfo.compress.php",
        "name": "PharFileInfo::compress",
        "description": "Compresses the current Phar entry with either zlib or bzip2 compression"
    },
    {
        "href": "pharfileinfo.decompress.php",
        "name": "PharFileInfo::decompress",
        "description": "Decompresses the current Phar entry within the phar"
    },
    {
        "href": "pharfileinfo.delmetadata.php",
        "name": "PharFileInfo::delMetadata",
        "description": "Deletes the metadata of the entry"
    },
    {
        "href": "pharfileinfo.getcompressedsize.php",
        "name": "PharFileInfo::getCompressedSize",
        "description": "Returns the actual size of the file (with compression) inside the Phar archive"
    },
    {
        "href": "pharfileinfo.getcontent.php",
        "name": "PharFileInfo::getContent",
        "description": "Get the complete file contents of the entry"
    },
    {
        "href": "pharfileinfo.getcrc32.php",
        "name": "PharFileInfo::getCRC32",
        "description": "Returns CRC32 code or throws an exception if CRC has not been verified"
    },
    {
        "href": "pharfileinfo.getmetadata.php",
        "name": "PharFileInfo::getMetadata",
        "description": "Returns file-specific meta-data saved with a file"
    },
    {
        "href": "pharfileinfo.getpharflags.php",
        "name": "PharFileInfo::getPharFlags",
        "description": "Returns the Phar file entry flags"
    },
    {
        "href": "pharfileinfo.hasmetadata.php",
        "name": "PharFileInfo::hasMetadata",
        "description": "Returns the metadata of the entry"
    },
    {
        "href": "pharfileinfo.iscompressed.php",
        "name": "PharFileInfo::isCompressed",
        "description": "Returns whether the entry is compressed"
    },
    {
        "href": "pharfileinfo.iscrcchecked.php",
        "name": "PharFileInfo::isCRCChecked",
        "description": "Returns whether file entry has had its CRC verified"
    },
    {
        "href": "pharfileinfo.setmetadata.php",
        "name": "PharFileInfo::setMetadata",
        "description": "Sets file-specific meta-data saved with a file"
    },
    {
        "href": "pharfileinfo.construct.php",
        "name": "PharFileInfo::__construct",
        "description": "Construct a Phar entry object"
    },
    {
        "href": "pharfileinfo.destruct.php",
        "name": "PharFileInfo::__destruct",
        "description": "Destructs a Phar entry object"
    },
    {
        "href": "wrappers.php.php",
        "name": "php://",
        "description": "Accessing various I/O streams"
    },
    {
        "href": "function.phpcredits.php",
        "name": "phpcredits",
        "description": "Prints out the credits for PHP"
    },
    {
        "href": "function.phpdbg-break-file.php",
        "name": "phpdbg_break_file",
        "description": "Inserts a breakpoint at a line in a file"
    },
    {
        "href": "function.phpdbg-break-function.php",
        "name": "phpdbg_break_function",
        "description": "Inserts a breakpoint at entry to a function"
    },
    {
        "href": "function.phpdbg-break-method.php",
        "name": "phpdbg_break_method",
        "description": "Inserts a breakpoint at entry to a method"
    },
    {
        "href": "function.phpdbg-break-next.php",
        "name": "phpdbg_break_next",
        "description": "Inserts a breakpoint at the next opcode"
    },
    {
        "href": "function.phpdbg-clear.php",
        "name": "phpdbg_clear",
        "description": "Clears all breakpoints"
    },
    {
        "href": "function.phpdbg-color.php",
        "name": "phpdbg_color",
        "description": "Sets the color of certain elements"
    },
    {
        "href": "function.phpdbg-end-oplog.php",
        "name": "phpdbg_end_oplog",
        "description": "Description"
    },
    {
        "href": "function.phpdbg-exec.php",
        "name": "phpdbg_exec",
        "description": "Attempts to set the execution context"
    },
    {
        "href": "function.phpdbg-get-executable.php",
        "name": "phpdbg_get_executable",
        "description": "Description"
    },
    {
        "href": "function.phpdbg-prompt.php",
        "name": "phpdbg_prompt",
        "description": "Sets the command prompt"
    },
    {
        "href": "function.phpdbg-start-oplog.php",
        "name": "phpdbg_start_oplog",
        "description": "Description"
    },
    {
        "href": "function.phpinfo.php",
        "name": "phpinfo",
        "description": "Outputs information about PHP's configuration"
    },
    {
        "href": "phptoken.gettokenname.php",
        "name": "PhpToken::getTokenName",
        "description": "Returns the name of the token."
    },
    {
        "href": "phptoken.is.php",
        "name": "PhpToken::is",
        "description": "Tells whether the token is of given kind."
    },
    {
        "href": "phptoken.isignorable.php",
        "name": "PhpToken::isIgnorable",
        "description": "Tells whether the token would be ignored by the PHP parser."
    },
    {
        "href": "phptoken.tokenize.php",
        "name": "PhpToken::tokenize",
        "description": "Splits given source into PHP tokens, represented by PhpToken objects."
    },
    {
        "href": "phptoken.construct.php",
        "name": "PhpToken::__construct",
        "description": "Returns a new PhpToken object"
    },
    {
        "href": "phptoken.tostring.php",
        "name": "PhpToken::__toString",
        "description": "Returns the textual content of the token."
    },
    {
        "href": "function.phpversion.php",
        "name": "phpversion",
        "description": "Gets the current PHP version"
    },
    {
        "href": "function.php-ini-loaded-file.php",
        "name": "php_ini_loaded_file",
        "description": "Retrieve a path to the loaded php.ini file"
    },
    {
        "href": "function.php-ini-scanned-files.php",
        "name": "php_ini_scanned_files",
        "description": "Return a list of .ini files parsed from the additional ini dir"
    },
    {
        "href": "function.php-sapi-name.php",
        "name": "php_sapi_name",
        "description": "Returns the type of interface between web server and PHP"
    },
    {
        "href": "function.php-strip-whitespace.php",
        "name": "php_strip_whitespace",
        "description": "Return source with stripped comments and whitespace"
    },
    {
        "href": "function.php-uname.php",
        "name": "php_uname",
        "description": "Returns information about the operating system PHP is running on"
    },
    {
        "href": "php-user-filter.filter.php",
        "name": "php_user_filter::filter",
        "description": "Called when applying the filter"
    },
    {
        "href": "php-user-filter.onclose.php",
        "name": "php_user_filter::onClose",
        "description": "Called when closing the filter"
    },
    {
        "href": "php-user-filter.oncreate.php",
        "name": "php_user_filter::onCreate",
        "description": "Called when creating the filter"
    },
    {
        "href": "pht-atomicinteger.dec.php",
        "name": "pht\\AtomicInteger::dec",
        "description": "Decrements the atomic integer's value by one"
    },
    {
        "href": "pht-atomicinteger.get.php",
        "name": "pht\\AtomicInteger::get",
        "description": "Gets the atomic integer's value"
    },
    {
        "href": "pht-atomicinteger.inc.php",
        "name": "pht\\AtomicInteger::inc",
        "description": "Increments the atomic integer's value by one"
    },
    {
        "href": "pht-atomicinteger.lock.php",
        "name": "pht\\AtomicInteger::lock",
        "description": "Acquires the atomic integer's mutex lock"
    },
    {
        "href": "pht-atomicinteger.set.php",
        "name": "pht\\AtomicInteger::set",
        "description": "Sets the atomic integer's value"
    },
    {
        "href": "pht-atomicinteger.unlock.php",
        "name": "pht\\AtomicInteger::unlock",
        "description": "Releases the atomic integer's mutex lock"
    },
    {
        "href": "pht-atomicinteger.construct.php",
        "name": "pht\\AtomicInteger::__construct",
        "description": "AtomicInteger creation"
    },
    {
        "href": "pht-hashtable.lock.php",
        "name": "pht\\HashTable::lock",
        "description": "Acquires the hash table's mutex lock"
    },
    {
        "href": "pht-hashtable.size.php",
        "name": "pht\\HashTable::size",
        "description": "Gets the size of the hash table"
    },
    {
        "href": "pht-hashtable.unlock.php",
        "name": "pht\\HashTable::unlock",
        "description": "Releases the hash table's mutex lock"
    },
    {
        "href": "pht-queue.front.php",
        "name": "pht\\Queue::front",
        "description": "Returns the first value from a queue"
    },
    {
        "href": "pht-queue.lock.php",
        "name": "pht\\Queue::lock",
        "description": "Acquires the queue's mutex lock"
    },
    {
        "href": "pht-queue.pop.php",
        "name": "pht\\Queue::pop",
        "description": "Pops a value off of the front of a queue"
    },
    {
        "href": "pht-queue.push.php",
        "name": "pht\\Queue::push",
        "description": "Pushes a value to the end of a queue"
    },
    {
        "href": "pht-queue.size.php",
        "name": "pht\\Queue::size",
        "description": "Gets the size of the queue"
    },
    {
        "href": "pht-queue.unlock.php",
        "name": "pht\\Queue::unlock",
        "description": "Releases the queue's mutex lock"
    },
    {
        "href": "pht-runnable.run.php",
        "name": "pht\\Runnable::run",
        "description": "The entry point of a threaded class"
    },
    {
        "href": "pht-thread.addClassTask.php",
        "name": "pht\\Thread::addClassTask",
        "description": "Class threading"
    },
    {
        "href": "pht-thread.addFileTask.php",
        "name": "pht\\Thread::addFileTask",
        "description": "File threading"
    },
    {
        "href": "pht-thread.addFunctionTask.php",
        "name": "pht\\Thread::addFunctionTask",
        "description": "Function threading"
    },
    {
        "href": "pht-thread.join.php",
        "name": "pht\\Thread::join",
        "description": "Joins a thread"
    },
    {
        "href": "pht-thread.start.php",
        "name": "pht\\Thread::start",
        "description": "Starts the new thread"
    },
    {
        "href": "pht-thread.taskCount.php",
        "name": "pht\\Thread::taskCount",
        "description": "Gets a thread's task count"
    },
    {
        "href": "pht-threaded.lock.php",
        "name": "pht\\Threaded::lock",
        "description": "Acquires the mutex lock"
    },
    {
        "href": "pht-threaded.unlock.php",
        "name": "pht\\Threaded::unlock",
        "description": "Releases the mutex lock"
    },
    {
        "href": "pht-vector.deleteAt.php",
        "name": "pht\\Vector::deleteAt",
        "description": "Deletes a value in the vector"
    },
    {
        "href": "pht-vector.insertAt.php",
        "name": "pht\\Vector::insertAt",
        "description": "Inserts a value into the vector"
    },
    {
        "href": "pht-vector.lock.php",
        "name": "pht\\Vector::lock",
        "description": "Acquires the vector's mutex lock"
    },
    {
        "href": "pht-vector.pop.php",
        "name": "pht\\Vector::pop",
        "description": "Pops a value to the vector"
    },
    {
        "href": "pht-vector.push.php",
        "name": "pht\\Vector::push",
        "description": "Pushes a value to the vector"
    },
    {
        "href": "pht-vector.resize.php",
        "name": "pht\\Vector::resize",
        "description": "Resizes a vector"
    },
    {
        "href": "pht-vector.shift.php",
        "name": "pht\\Vector::shift",
        "description": "Shifts a value from the vector"
    },
    {
        "href": "pht-vector.size.php",
        "name": "pht\\Vector::size",
        "description": "Gets the size of the vector"
    },
    {
        "href": "pht-vector.unlock.php",
        "name": "pht\\Vector::unlock",
        "description": "Releases the vector's mutex lock"
    },
    {
        "href": "pht-vector.unshift.php",
        "name": "pht\\Vector::unshift",
        "description": "Unshifts a value to the vector front"
    },
    {
        "href": "pht-vector.updateAt.php",
        "name": "pht\\Vector::updateAt",
        "description": "Updates a value in the vector"
    },
    {
        "href": "pht-vector.construct.php",
        "name": "pht\\Vector::__construct",
        "description": "Vector creation"
    },
    {
        "href": "function.pi.php",
        "name": "pi",
        "description": "Get value of pi"
    },
    {
        "href": "function.png2wbmp.php",
        "name": "png2wbmp",
        "description": "Convert PNG image file to WBMP image file"
    },
    {
        "href": "pool.collect.php",
        "name": "Pool::collect",
        "description": "Collect references to completed tasks"
    },
    {
        "href": "pool.resize.php",
        "name": "Pool::resize",
        "description": "Resize the Pool"
    },
    {
        "href": "pool.shutdown.php",
        "name": "Pool::shutdown",
        "description": "Shutdown all workers"
    },
    {
        "href": "pool.submit.php",
        "name": "Pool::submit",
        "description": "Submits an object for execution"
    },
    {
        "href": "pool.submitTo.php",
        "name": "Pool::submitTo",
        "description": "Submits a task to a specific worker for execution"
    },
    {
        "href": "pool.construct.php",
        "name": "Pool::__construct",
        "description": "Creates a new Pool of Workers"
    },
    {
        "href": "function.popen.php",
        "name": "popen",
        "description": "Opens process file pointer"
    },
    {
        "href": "function.pos.php",
        "name": "pos",
        "description": "Alias of current"
    },
    {
        "href": "function.posix-access.php",
        "name": "posix_access",
        "description": "Determine accessibility of a file"
    },
    {
        "href": "function.posix-ctermid.php",
        "name": "posix_ctermid",
        "description": "Get path name of controlling terminal"
    },
    {
        "href": "function.posix-errno.php",
        "name": "posix_errno",
        "description": "Alias of posix_get_last_error"
    },
    {
        "href": "function.posix-getcwd.php",
        "name": "posix_getcwd",
        "description": "Pathname of current directory"
    },
    {
        "href": "function.posix-getegid.php",
        "name": "posix_getegid",
        "description": "Return the effective group ID of the current process"
    },
    {
        "href": "function.posix-geteuid.php",
        "name": "posix_geteuid",
        "description": "Return the effective user ID of the current process"
    },
    {
        "href": "function.posix-getgid.php",
        "name": "posix_getgid",
        "description": "Return the real group ID of the current process"
    },
    {
        "href": "function.posix-getgrgid.php",
        "name": "posix_getgrgid",
        "description": "Return info about a group by group id"
    },
    {
        "href": "function.posix-getgrnam.php",
        "name": "posix_getgrnam",
        "description": "Return info about a group by name"
    },
    {
        "href": "function.posix-getgroups.php",
        "name": "posix_getgroups",
        "description": "Return the group set of the current process"
    },
    {
        "href": "function.posix-getlogin.php",
        "name": "posix_getlogin",
        "description": "Return login name"
    },
    {
        "href": "function.posix-getpgid.php",
        "name": "posix_getpgid",
        "description": "Get process group id for job control"
    },
    {
        "href": "function.posix-getpgrp.php",
        "name": "posix_getpgrp",
        "description": "Return the current process group identifier"
    },
    {
        "href": "function.posix-getpid.php",
        "name": "posix_getpid",
        "description": "Return the current process identifier"
    },
    {
        "href": "function.posix-getppid.php",
        "name": "posix_getppid",
        "description": "Return the parent process identifier"
    },
    {
        "href": "function.posix-getpwnam.php",
        "name": "posix_getpwnam",
        "description": "Return info about a user by username"
    },
    {
        "href": "function.posix-getpwuid.php",
        "name": "posix_getpwuid",
        "description": "Return info about a user by user id"
    },
    {
        "href": "function.posix-getrlimit.php",
        "name": "posix_getrlimit",
        "description": "Return info about system resource limits"
    },
    {
        "href": "function.posix-getsid.php",
        "name": "posix_getsid",
        "description": "Get the current sid of the process"
    },
    {
        "href": "function.posix-getuid.php",
        "name": "posix_getuid",
        "description": "Return the real user ID of the current process"
    },
    {
        "href": "function.posix-get-last-error.php",
        "name": "posix_get_last_error",
        "description": "Retrieve the error number set by the last posix function that failed"
    },
    {
        "href": "function.posix-initgroups.php",
        "name": "posix_initgroups",
        "description": "Calculate the group access list"
    },
    {
        "href": "function.posix-isatty.php",
        "name": "posix_isatty",
        "description": "Determine if a file descriptor is an interactive terminal"
    },
    {
        "href": "function.posix-kill.php",
        "name": "posix_kill",
        "description": "Send a signal to a process"
    },
    {
        "href": "function.posix-mkfifo.php",
        "name": "posix_mkfifo",
        "description": "Create a fifo special file (a named pipe)"
    },
    {
        "href": "function.posix-mknod.php",
        "name": "posix_mknod",
        "description": "Create a special or ordinary file (POSIX.1)"
    },
    {
        "href": "function.posix-setegid.php",
        "name": "posix_setegid",
        "description": "Set the effective GID of the current process"
    },
    {
        "href": "function.posix-seteuid.php",
        "name": "posix_seteuid",
        "description": "Set the effective UID of the current process"
    },
    {
        "href": "function.posix-setgid.php",
        "name": "posix_setgid",
        "description": "Set the GID of the current process"
    },
    {
        "href": "function.posix-setpgid.php",
        "name": "posix_setpgid",
        "description": "Set process group id for job control"
    },
    {
        "href": "function.posix-setrlimit.php",
        "name": "posix_setrlimit",
        "description": "Set system resource limits"
    },
    {
        "href": "function.posix-setsid.php",
        "name": "posix_setsid",
        "description": "Make the current process a session leader"
    },
    {
        "href": "function.posix-setuid.php",
        "name": "posix_setuid",
        "description": "Set the UID of the current process"
    },
    {
        "href": "function.posix-strerror.php",
        "name": "posix_strerror",
        "description": "Retrieve the system error message associated with the given errno"
    },
    {
        "href": "function.posix-times.php",
        "name": "posix_times",
        "description": "Get process times"
    },
    {
        "href": "function.posix-ttyname.php",
        "name": "posix_ttyname",
        "description": "Determine terminal device name"
    },
    {
        "href": "function.posix-uname.php",
        "name": "posix_uname",
        "description": "Get system name"
    },
    {
        "href": "function.pow.php",
        "name": "pow",
        "description": "Exponential expression"
    },
    {
        "href": "function.preg-filter.php",
        "name": "preg_filter",
        "description": "Perform a regular expression search and replace"
    },
    {
        "href": "function.preg-grep.php",
        "name": "preg_grep",
        "description": "Return array entries that match the pattern"
    },
    {
        "href": "function.preg-last-error.php",
        "name": "preg_last_error",
        "description": "Returns the error code of the last PCRE regex execution"
    },
    {
        "href": "function.preg-last-error-msg.php",
        "name": "preg_last_error_msg",
        "description": "Returns the error message of the last PCRE regex execution"
    },
    {
        "href": "function.preg-match.php",
        "name": "preg_match",
        "description": "Perform a regular expression match"
    },
    {
        "href": "function.preg-match-all.php",
        "name": "preg_match_all",
        "description": "Perform a global regular expression match"
    },
    {
        "href": "function.preg-quote.php",
        "name": "preg_quote",
        "description": "Quote regular expression characters"
    },
    {
        "href": "function.preg-replace.php",
        "name": "preg_replace",
        "description": "Perform a regular expression search and replace"
    },
    {
        "href": "function.preg-replace-callback.php",
        "name": "preg_replace_callback",
        "description": "Perform a regular expression search and replace using a callback"
    },
    {
        "href": "function.preg-replace-callback-array.php",
        "name": "preg_replace_callback_array",
        "description": "Perform a regular expression search and replace using callbacks"
    },
    {
        "href": "function.preg-split.php",
        "name": "preg_split",
        "description": "Split string by a regular expression"
    },
    {
        "href": "function.prev.php",
        "name": "prev",
        "description": "Rewind the internal array pointer"
    },
    {
        "href": "function.print.php",
        "name": "print",
        "description": "Output a string"
    },
    {
        "href": "function.printf.php",
        "name": "printf",
        "description": "Output a formatted string"
    },
    {
        "href": "function.print-r.php",
        "name": "print_r",
        "description": "Prints human-readable information about a variable"
    },
    {
        "href": "function.proc-close.php",
        "name": "proc_close",
        "description": "Close a process opened by proc_open and return the exit code of that process"
    },
    {
        "href": "function.proc-get-status.php",
        "name": "proc_get_status",
        "description": "Get information about a process opened by proc_open"
    },
    {
        "href": "function.proc-nice.php",
        "name": "proc_nice",
        "description": "Change the priority of the current process"
    },
    {
        "href": "function.proc-open.php",
        "name": "proc_open",
        "description": "Execute a command and open file pointers for input/output"
    },
    {
        "href": "function.proc-terminate.php",
        "name": "proc_terminate",
        "description": "Kills a process opened by proc_open"
    },
    {
        "href": "function.property-exists.php",
        "name": "property_exists",
        "description": "Checks if the object or class has a property"
    },
    {
        "href": "function.pspell-add-to-personal.php",
        "name": "pspell_add_to_personal",
        "description": "Add the word to a personal wordlist"
    },
    {
        "href": "function.pspell-add-to-session.php",
        "name": "pspell_add_to_session",
        "description": "Add the word to the wordlist in the current session"
    },
    {
        "href": "function.pspell-check.php",
        "name": "pspell_check",
        "description": "Check a word"
    },
    {
        "href": "function.pspell-clear-session.php",
        "name": "pspell_clear_session",
        "description": "Clear the current session"
    },
    {
        "href": "function.pspell-config-create.php",
        "name": "pspell_config_create",
        "description": "Create a config used to open a dictionary"
    },
    {
        "href": "function.pspell-config-data-dir.php",
        "name": "pspell_config_data_dir",
        "description": "Location of language data files"
    },
    {
        "href": "function.pspell-config-dict-dir.php",
        "name": "pspell_config_dict_dir",
        "description": "Location of the main word list"
    },
    {
        "href": "function.pspell-config-ignore.php",
        "name": "pspell_config_ignore",
        "description": "Ignore words less than N characters long"
    },
    {
        "href": "function.pspell-config-mode.php",
        "name": "pspell_config_mode",
        "description": "Change the mode number of suggestions returned"
    },
    {
        "href": "function.pspell-config-personal.php",
        "name": "pspell_config_personal",
        "description": "Set a file that contains personal wordlist"
    },
    {
        "href": "function.pspell-config-repl.php",
        "name": "pspell_config_repl",
        "description": "Set a file that contains replacement pairs"
    },
    {
        "href": "function.pspell-config-runtogether.php",
        "name": "pspell_config_runtogether",
        "description": "Consider run-together words as valid compounds"
    },
    {
        "href": "function.pspell-config-save-repl.php",
        "name": "pspell_config_save_repl",
        "description": "Determine whether to save a replacement pairs list  along with the wordlist"
    },
    {
        "href": "function.pspell-new.php",
        "name": "pspell_new",
        "description": "Load a new dictionary"
    },
    {
        "href": "function.pspell-new-config.php",
        "name": "pspell_new_config",
        "description": "Load a new dictionary with settings based on a given config"
    },
    {
        "href": "function.pspell-new-personal.php",
        "name": "pspell_new_personal",
        "description": "Load a new dictionary with personal wordlist"
    },
    {
        "href": "function.pspell-save-wordlist.php",
        "name": "pspell_save_wordlist",
        "description": "Save the personal wordlist to a file"
    },
    {
        "href": "function.pspell-store-replacement.php",
        "name": "pspell_store_replacement",
        "description": "Store a replacement pair for a word"
    },
    {
        "href": "function.pspell-suggest.php",
        "name": "pspell_suggest",
        "description": "Suggest spellings of a word"
    },
    {
        "href": "function.ps-add-bookmark.php",
        "name": "ps_add_bookmark",
        "description": "Add bookmark to current page"
    },
    {
        "href": "function.ps-add-launchlink.php",
        "name": "ps_add_launchlink",
        "description": "Adds link which launches file"
    },
    {
        "href": "function.ps-add-locallink.php",
        "name": "ps_add_locallink",
        "description": "Adds link to a page in the same document"
    },
    {
        "href": "function.ps-add-note.php",
        "name": "ps_add_note",
        "description": "Adds note to current page"
    },
    {
        "href": "function.ps-add-pdflink.php",
        "name": "ps_add_pdflink",
        "description": "Adds link to a page in a second pdf document"
    },
    {
        "href": "function.ps-add-weblink.php",
        "name": "ps_add_weblink",
        "description": "Adds link to a web location"
    },
    {
        "href": "function.ps-arc.php",
        "name": "ps_arc",
        "description": "Draws an arc counterclockwise"
    },
    {
        "href": "function.ps-arcn.php",
        "name": "ps_arcn",
        "description": "Draws an arc clockwise"
    },
    {
        "href": "function.ps-begin-page.php",
        "name": "ps_begin_page",
        "description": "Start a new page"
    },
    {
        "href": "function.ps-begin-pattern.php",
        "name": "ps_begin_pattern",
        "description": "Start a new pattern"
    },
    {
        "href": "function.ps-begin-template.php",
        "name": "ps_begin_template",
        "description": "Start a new template"
    },
    {
        "href": "function.ps-circle.php",
        "name": "ps_circle",
        "description": "Draws a circle"
    },
    {
        "href": "function.ps-clip.php",
        "name": "ps_clip",
        "description": "Clips drawing to current path"
    },
    {
        "href": "function.ps-close.php",
        "name": "ps_close",
        "description": "Closes a PostScript document"
    },
    {
        "href": "function.ps-closepath.php",
        "name": "ps_closepath",
        "description": "Closes path"
    },
    {
        "href": "function.ps-closepath-stroke.php",
        "name": "ps_closepath_stroke",
        "description": "Closes and strokes path"
    },
    {
        "href": "function.ps-close-image.php",
        "name": "ps_close_image",
        "description": "Closes image and frees memory"
    },
    {
        "href": "function.ps-continue-text.php",
        "name": "ps_continue_text",
        "description": "Continue text in next line"
    },
    {
        "href": "function.ps-curveto.php",
        "name": "ps_curveto",
        "description": "Draws a curve"
    },
    {
        "href": "function.ps-delete.php",
        "name": "ps_delete",
        "description": "Deletes all resources of a PostScript document"
    },
    {
        "href": "function.ps-end-page.php",
        "name": "ps_end_page",
        "description": "End a page"
    },
    {
        "href": "function.ps-end-pattern.php",
        "name": "ps_end_pattern",
        "description": "End a pattern"
    },
    {
        "href": "function.ps-end-template.php",
        "name": "ps_end_template",
        "description": "End a template"
    },
    {
        "href": "function.ps-fill.php",
        "name": "ps_fill",
        "description": "Fills the current path"
    },
    {
        "href": "function.ps-fill-stroke.php",
        "name": "ps_fill_stroke",
        "description": "Fills and strokes the current path"
    },
    {
        "href": "function.ps-findfont.php",
        "name": "ps_findfont",
        "description": "Loads a font"
    },
    {
        "href": "function.ps-get-buffer.php",
        "name": "ps_get_buffer",
        "description": "Fetches the full buffer containig the generated PS data"
    },
    {
        "href": "function.ps-get-parameter.php",
        "name": "ps_get_parameter",
        "description": "Gets certain parameters"
    },
    {
        "href": "function.ps-get-value.php",
        "name": "ps_get_value",
        "description": "Gets certain values"
    },
    {
        "href": "function.ps-hyphenate.php",
        "name": "ps_hyphenate",
        "description": "Hyphenates a word"
    },
    {
        "href": "function.ps-include-file.php",
        "name": "ps_include_file",
        "description": "Reads an external file with raw PostScript code"
    },
    {
        "href": "function.ps-lineto.php",
        "name": "ps_lineto",
        "description": "Draws a line"
    },
    {
        "href": "function.ps-makespotcolor.php",
        "name": "ps_makespotcolor",
        "description": "Create spot color"
    },
    {
        "href": "function.ps-moveto.php",
        "name": "ps_moveto",
        "description": "Sets current point"
    },
    {
        "href": "function.ps-new.php",
        "name": "ps_new",
        "description": "Creates a new PostScript document object"
    },
    {
        "href": "function.ps-open-file.php",
        "name": "ps_open_file",
        "description": "Opens a file for output"
    },
    {
        "href": "function.ps-open-image.php",
        "name": "ps_open_image",
        "description": "Reads an image for later placement"
    },
    {
        "href": "function.ps-open-image-file.php",
        "name": "ps_open_image_file",
        "description": "Opens image from file"
    },
    {
        "href": "function.ps-open-memory-image.php",
        "name": "ps_open_memory_image",
        "description": "Takes an GD image and returns an image for placement in a PS document"
    },
    {
        "href": "function.ps-place-image.php",
        "name": "ps_place_image",
        "description": "Places image on the page"
    },
    {
        "href": "function.ps-rect.php",
        "name": "ps_rect",
        "description": "Draws a rectangle"
    },
    {
        "href": "function.ps-restore.php",
        "name": "ps_restore",
        "description": "Restore previously save context"
    },
    {
        "href": "function.ps-rotate.php",
        "name": "ps_rotate",
        "description": "Sets rotation factor"
    },
    {
        "href": "function.ps-save.php",
        "name": "ps_save",
        "description": "Save current context"
    },
    {
        "href": "function.ps-scale.php",
        "name": "ps_scale",
        "description": "Sets scaling factor"
    },
    {
        "href": "function.ps-setcolor.php",
        "name": "ps_setcolor",
        "description": "Sets current color"
    },
    {
        "href": "function.ps-setdash.php",
        "name": "ps_setdash",
        "description": "Sets appearance of a dashed line"
    },
    {
        "href": "function.ps-setflat.php",
        "name": "ps_setflat",
        "description": "Sets flatness"
    },
    {
        "href": "function.ps-setfont.php",
        "name": "ps_setfont",
        "description": "Sets font to use for following output"
    },
    {
        "href": "function.ps-setgray.php",
        "name": "ps_setgray",
        "description": "Sets gray value"
    },
    {
        "href": "function.ps-setlinecap.php",
        "name": "ps_setlinecap",
        "description": "Sets appearance of line ends"
    },
    {
        "href": "function.ps-setlinejoin.php",
        "name": "ps_setlinejoin",
        "description": "Sets how contected lines are joined"
    },
    {
        "href": "function.ps-setlinewidth.php",
        "name": "ps_setlinewidth",
        "description": "Sets width of a line"
    },
    {
        "href": "function.ps-setmiterlimit.php",
        "name": "ps_setmiterlimit",
        "description": "Sets the miter limit"
    },
    {
        "href": "function.ps-setoverprintmode.php",
        "name": "ps_setoverprintmode",
        "description": "Sets overprint mode"
    },
    {
        "href": "function.ps-setpolydash.php",
        "name": "ps_setpolydash",
        "description": "Sets appearance of a dashed line"
    },
    {
        "href": "function.ps-set-border-color.php",
        "name": "ps_set_border_color",
        "description": "Sets color of border for annotations"
    },
    {
        "href": "function.ps-set-border-dash.php",
        "name": "ps_set_border_dash",
        "description": "Sets length of dashes for border of annotations"
    },
    {
        "href": "function.ps-set-border-style.php",
        "name": "ps_set_border_style",
        "description": "Sets border style of annotations"
    },
    {
        "href": "function.ps-set-info.php",
        "name": "ps_set_info",
        "description": "Sets information fields of document"
    },
    {
        "href": "function.ps-set-parameter.php",
        "name": "ps_set_parameter",
        "description": "Sets certain parameters"
    },
    {
        "href": "function.ps-set-text-pos.php",
        "name": "ps_set_text_pos",
        "description": "Sets position for text output"
    },
    {
        "href": "function.ps-set-value.php",
        "name": "ps_set_value",
        "description": "Sets certain values"
    },
    {
        "href": "function.ps-shading.php",
        "name": "ps_shading",
        "description": "Creates a shading for later use"
    },
    {
        "href": "function.ps-shading-pattern.php",
        "name": "ps_shading_pattern",
        "description": "Creates a pattern based on a shading"
    },
    {
        "href": "function.ps-shfill.php",
        "name": "ps_shfill",
        "description": "Fills an area with a shading"
    },
    {
        "href": "function.ps-show.php",
        "name": "ps_show",
        "description": "Output text"
    },
    {
        "href": "function.ps-show2.php",
        "name": "ps_show2",
        "description": "Output a text at current position"
    },
    {
        "href": "function.ps-show-boxed.php",
        "name": "ps_show_boxed",
        "description": "Output text in a box"
    },
    {
        "href": "function.ps-show-xy.php",
        "name": "ps_show_xy",
        "description": "Output text at given position"
    },
    {
        "href": "function.ps-show-xy2.php",
        "name": "ps_show_xy2",
        "description": "Output text at position"
    },
    {
        "href": "function.ps-stringwidth.php",
        "name": "ps_stringwidth",
        "description": "Gets width of a string"
    },
    {
        "href": "function.ps-string-geometry.php",
        "name": "ps_string_geometry",
        "description": "Gets geometry of a string"
    },
    {
        "href": "function.ps-stroke.php",
        "name": "ps_stroke",
        "description": "Draws the current path"
    },
    {
        "href": "function.ps-symbol.php",
        "name": "ps_symbol",
        "description": "Output a glyph"
    },
    {
        "href": "function.ps-symbol-name.php",
        "name": "ps_symbol_name",
        "description": "Gets name of a glyph"
    },
    {
        "href": "function.ps-symbol-width.php",
        "name": "ps_symbol_width",
        "description": "Gets width of a glyph"
    },
    {
        "href": "function.ps-translate.php",
        "name": "ps_translate",
        "description": "Sets translation"
    },
    {
        "href": "function.putenv.php",
        "name": "putenv",
        "description": "Sets the value of an environment variable"
    },
    {
        "href": "function.quoted-printable-decode.php",
        "name": "quoted_printable_decode",
        "description": "Convert a quoted-printable string to an 8 bit string"
    },
    {
        "href": "function.quoted-printable-encode.php",
        "name": "quoted_printable_encode",
        "description": "Convert a 8 bit string to a quoted-printable string"
    },
    {
        "href": "function.quotemeta.php",
        "name": "quotemeta",
        "description": "Quote meta characters"
    },
    {
        "href": "function.rad2deg.php",
        "name": "rad2deg",
        "description": "Converts the radian number to the equivalent number in degrees"
    },
    {
        "href": "function.radius-acct-open.php",
        "name": "radius_acct_open",
        "description": "Creates a Radius handle for accounting"
    },
    {
        "href": "function.radius-add-server.php",
        "name": "radius_add_server",
        "description": "Adds a server"
    },
    {
        "href": "function.radius-auth-open.php",
        "name": "radius_auth_open",
        "description": "Creates a Radius handle for authentication"
    },
    {
        "href": "function.radius-close.php",
        "name": "radius_close",
        "description": "Frees all ressources"
    },
    {
        "href": "function.radius-config.php",
        "name": "radius_config",
        "description": "Causes the library to read the given configuration file"
    },
    {
        "href": "function.radius-create-request.php",
        "name": "radius_create_request",
        "description": "Create accounting or authentication request"
    },
    {
        "href": "function.radius-cvt-addr.php",
        "name": "radius_cvt_addr",
        "description": "Converts raw data to IP-Address"
    },
    {
        "href": "function.radius-cvt-int.php",
        "name": "radius_cvt_int",
        "description": "Converts raw data to integer"
    },
    {
        "href": "function.radius-cvt-string.php",
        "name": "radius_cvt_string",
        "description": "Converts raw data to string"
    },
    {
        "href": "function.radius-demangle.php",
        "name": "radius_demangle",
        "description": "Demangles data"
    },
    {
        "href": "function.radius-demangle-mppe-key.php",
        "name": "radius_demangle_mppe_key",
        "description": "Derives mppe-keys from mangled data"
    },
    {
        "href": "function.radius-get-attr.php",
        "name": "radius_get_attr",
        "description": "Extracts an attribute"
    },
    {
        "href": "function.radius-get-tagged-attr-data.php",
        "name": "radius_get_tagged_attr_data",
        "description": "Extracts the data from a tagged attribute"
    },
    {
        "href": "function.radius-get-tagged-attr-tag.php",
        "name": "radius_get_tagged_attr_tag",
        "description": "Extracts the tag from a tagged attribute"
    },
    {
        "href": "function.radius-get-vendor-attr.php",
        "name": "radius_get_vendor_attr",
        "description": "Extracts a vendor specific attribute"
    },
    {
        "href": "function.radius-put-addr.php",
        "name": "radius_put_addr",
        "description": "Attaches an IP address attribute"
    },
    {
        "href": "function.radius-put-attr.php",
        "name": "radius_put_attr",
        "description": "Attaches a binary attribute"
    },
    {
        "href": "function.radius-put-int.php",
        "name": "radius_put_int",
        "description": "Attaches an integer attribute"
    },
    {
        "href": "function.radius-put-string.php",
        "name": "radius_put_string",
        "description": "Attaches a string attribute"
    },
    {
        "href": "function.radius-put-vendor-addr.php",
        "name": "radius_put_vendor_addr",
        "description": "Attaches a vendor specific IP address attribute"
    },
    {
        "href": "function.radius-put-vendor-attr.php",
        "name": "radius_put_vendor_attr",
        "description": "Attaches a vendor specific binary attribute"
    },
    {
        "href": "function.radius-put-vendor-int.php",
        "name": "radius_put_vendor_int",
        "description": "Attaches a vendor specific integer attribute"
    },
    {
        "href": "function.radius-put-vendor-string.php",
        "name": "radius_put_vendor_string",
        "description": "Attaches a vendor specific string attribute"
    },
    {
        "href": "function.radius-request-authenticator.php",
        "name": "radius_request_authenticator",
        "description": "Returns the request authenticator"
    },
    {
        "href": "function.radius-salt-encrypt-attr.php",
        "name": "radius_salt_encrypt_attr",
        "description": "Salt-encrypts a value"
    },
    {
        "href": "function.radius-send-request.php",
        "name": "radius_send_request",
        "description": "Sends the request and waits for a reply"
    },
    {
        "href": "function.radius-server-secret.php",
        "name": "radius_server_secret",
        "description": "Returns the shared secret"
    },
    {
        "href": "function.radius-strerror.php",
        "name": "radius_strerror",
        "description": "Returns an error message"
    },
    {
        "href": "function.rand.php",
        "name": "rand",
        "description": "Generate a random integer"
    },
    {
        "href": "function.random-bytes.php",
        "name": "random_bytes",
        "description": "Generates cryptographically secure pseudo-random bytes"
    },
    {
        "href": "function.random-int.php",
        "name": "random_int",
        "description": "Generates cryptographically secure pseudo-random integers"
    },
    {
        "href": "function.range.php",
        "name": "range",
        "description": "Create an array containing a range of elements"
    },
    {
        "href": "wrappers.rar.php",
        "name": "rar://",
        "description": "RAR"
    },
    {
        "href": "rararchive.close.php",
        "name": "RarArchive::close",
        "description": "Close RAR archive and free all resources"
    },
    {
        "href": "rararchive.getcomment.php",
        "name": "RarArchive::getComment",
        "description": "Get comment text from the RAR archive"
    },
    {
        "href": "rararchive.getentries.php",
        "name": "RarArchive::getEntries",
        "description": "Get full list of entries from the RAR archive"
    },
    {
        "href": "rararchive.getentry.php",
        "name": "RarArchive::getEntry",
        "description": "Get entry object from the RAR archive"
    },
    {
        "href": "rararchive.isbroken.php",
        "name": "RarArchive::isBroken",
        "description": "Test whether an archive is broken (incomplete)"
    },
    {
        "href": "rararchive.issolid.php",
        "name": "RarArchive::isSolid",
        "description": "Check whether the RAR archive is solid"
    },
    {
        "href": "rararchive.open.php",
        "name": "RarArchive::open",
        "description": "Open RAR archive"
    },
    {
        "href": "rararchive.setallowbroken.php",
        "name": "RarArchive::setAllowBroken",
        "description": "Whether opening broken archives is allowed"
    },
    {
        "href": "rararchive.tostring.php",
        "name": "RarArchive::__toString",
        "description": "Get text representation"
    },
    {
        "href": "rarentry.extract.php",
        "name": "RarEntry::extract",
        "description": "Extract entry from the archive"
    },
    {
        "href": "rarentry.getattr.php",
        "name": "RarEntry::getAttr",
        "description": "Get attributes of the entry"
    },
    {
        "href": "rarentry.getcrc.php",
        "name": "RarEntry::getCrc",
        "description": "Get CRC of the entry"
    },
    {
        "href": "rarentry.getfiletime.php",
        "name": "RarEntry::getFileTime",
        "description": "Get entry last modification time"
    },
    {
        "href": "rarentry.gethostos.php",
        "name": "RarEntry::getHostOs",
        "description": "Get entry host OS"
    },
    {
        "href": "rarentry.getmethod.php",
        "name": "RarEntry::getMethod",
        "description": "Get pack method of the entry"
    },
    {
        "href": "rarentry.getname.php",
        "name": "RarEntry::getName",
        "description": "Get name of the entry"
    },
    {
        "href": "rarentry.getpackedsize.php",
        "name": "RarEntry::getPackedSize",
        "description": "Get packed size of the entry"
    },
    {
        "href": "rarentry.getstream.php",
        "name": "RarEntry::getStream",
        "description": "Get file handler for entry"
    },
    {
        "href": "rarentry.getunpackedsize.php",
        "name": "RarEntry::getUnpackedSize",
        "description": "Get unpacked size of the entry"
    },
    {
        "href": "rarentry.getversion.php",
        "name": "RarEntry::getVersion",
        "description": "Get minimum version of RAR program required to unpack the entry"
    },
    {
        "href": "rarentry.isdirectory.php",
        "name": "RarEntry::isDirectory",
        "description": "Test whether an entry represents a directory"
    },
    {
        "href": "rarentry.isencrypted.php",
        "name": "RarEntry::isEncrypted",
        "description": "Test whether an entry is encrypted"
    },
    {
        "href": "rarentry.tostring.php",
        "name": "RarEntry::__toString",
        "description": "Get text representation of entry"
    },
    {
        "href": "rarexception.isusingexceptions.php",
        "name": "RarException::isUsingExceptions",
        "description": "Check whether error handling with exceptions is in use"
    },
    {
        "href": "rarexception.setusingexceptions.php",
        "name": "RarException::setUsingExceptions",
        "description": "Activate and deactivate error handling with exceptions"
    },
    {
        "href": "function.rar-wrapper-cache-stats.php",
        "name": "rar_wrapper_cache_stats",
        "description": "Cache hits and misses for the URL wrapper"
    },
    {
        "href": "function.rawurldecode.php",
        "name": "rawurldecode",
        "description": "Decode URL-encoded strings"
    },
    {
        "href": "function.rawurlencode.php",
        "name": "rawurlencode",
        "description": "URL-encode according to RFC 3986"
    },
    {
        "href": "function.readdir.php",
        "name": "readdir",
        "description": "Read entry from directory handle"
    },
    {
        "href": "function.readfile.php",
        "name": "readfile",
        "description": "Outputs a file"
    },
    {
        "href": "function.readgzfile.php",
        "name": "readgzfile",
        "description": "Output a gz-file"
    },
    {
        "href": "function.readline.php",
        "name": "readline",
        "description": "Reads a line"
    },
    {
        "href": "function.readline-add-history.php",
        "name": "readline_add_history",
        "description": "Adds a line to the history"
    },
    {
        "href": "function.readline-callback-handler-install.php",
        "name": "readline_callback_handler_install",
        "description": "Initializes the readline callback interface and terminal, prints the prompt and returns immediately"
    },
    {
        "href": "function.readline-callback-handler-remove.php",
        "name": "readline_callback_handler_remove",
        "description": "Removes a previously installed callback handler and restores terminal settings"
    },
    {
        "href": "function.readline-callback-read-char.php",
        "name": "readline_callback_read_char",
        "description": "Reads a character and informs the readline callback interface when a line is received"
    },
    {
        "href": "function.readline-clear-history.php",
        "name": "readline_clear_history",
        "description": "Clears the history"
    },
    {
        "href": "function.readline-completion-function.php",
        "name": "readline_completion_function",
        "description": "Registers a completion function"
    },
    {
        "href": "function.readline-info.php",
        "name": "readline_info",
        "description": "Gets/sets various internal readline variables"
    },
    {
        "href": "function.readline-list-history.php",
        "name": "readline_list_history",
        "description": "Lists the history"
    },
    {
        "href": "function.readline-on-new-line.php",
        "name": "readline_on_new_line",
        "description": "Inform readline that the cursor has moved to a new line"
    },
    {
        "href": "function.readline-read-history.php",
        "name": "readline_read_history",
        "description": "Reads the history"
    },
    {
        "href": "function.readline-redisplay.php",
        "name": "readline_redisplay",
        "description": "Redraws the display"
    },
    {
        "href": "function.readline-write-history.php",
        "name": "readline_write_history",
        "description": "Writes the history"
    },
    {
        "href": "function.readlink.php",
        "name": "readlink",
        "description": "Returns the target of a symbolic link"
    },
    {
        "href": "function.read-exif-data.php",
        "name": "read_exif_data",
        "description": "Alias of exif_read_data"
    },
    {
        "href": "function.realpath.php",
        "name": "realpath",
        "description": "Returns canonicalized absolute pathname"
    },
    {
        "href": "function.realpath-cache-get.php",
        "name": "realpath_cache_get",
        "description": "Get realpath cache entries"
    },
    {
        "href": "function.realpath-cache-size.php",
        "name": "realpath_cache_size",
        "description": "Get realpath cache size"
    },
    {
        "href": "function.recode.php",
        "name": "recode",
        "description": "Alias of recode_string"
    },
    {
        "href": "function.recode-file.php",
        "name": "recode_file",
        "description": "Recode from file to file according to recode request"
    },
    {
        "href": "function.recode-string.php",
        "name": "recode_string",
        "description": "Recode a string according to a recode request"
    },
    {
        "href": "recursivearrayiterator.getchildren.php",
        "name": "RecursiveArrayIterator::getChildren",
        "description": "Returns an iterator for the current entry if it is an array or an object"
    },
    {
        "href": "recursivearrayiterator.haschildren.php",
        "name": "RecursiveArrayIterator::hasChildren",
        "description": "Returns whether current entry is an array or an object"
    },
    {
        "href": "recursivecachingiterator.getchildren.php",
        "name": "RecursiveCachingIterator::getChildren",
        "description": "Return the inner iterator's children as a RecursiveCachingIterator"
    },
    {
        "href": "recursivecachingiterator.haschildren.php",
        "name": "RecursiveCachingIterator::hasChildren",
        "description": "Check whether the current element of the inner iterator has children"
    },
    {
        "href": "recursivecachingiterator.construct.php",
        "name": "RecursiveCachingIterator::__construct",
        "description": "Construct"
    },
    {
        "href": "recursivecallbackfilteriterator.getchildren.php",
        "name": "RecursiveCallbackFilterIterator::getChildren",
        "description": "Return the inner iterator's children contained in a RecursiveCallbackFilterIterator"
    },
    {
        "href": "recursivecallbackfilteriterator.haschildren.php",
        "name": "RecursiveCallbackFilterIterator::hasChildren",
        "description": "Check whether the inner iterator's current element has children"
    },
    {
        "href": "recursivecallbackfilteriterator.construct.php",
        "name": "RecursiveCallbackFilterIterator::__construct",
        "description": "Create a RecursiveCallbackFilterIterator from a RecursiveIterator"
    },
    {
        "href": "recursivedirectoryiterator.getchildren.php",
        "name": "RecursiveDirectoryIterator::getChildren",
        "description": "Returns an iterator for the current entry if it is a directory"
    },
    {
        "href": "recursivedirectoryiterator.getsubpath.php",
        "name": "RecursiveDirectoryIterator::getSubPath",
        "description": "Get sub path"
    },
    {
        "href": "recursivedirectoryiterator.getsubpathname.php",
        "name": "RecursiveDirectoryIterator::getSubPathname",
        "description": "Get sub path and name"
    },
    {
        "href": "recursivedirectoryiterator.haschildren.php",
        "name": "RecursiveDirectoryIterator::hasChildren",
        "description": "Returns whether current entry is a directory and not '.' or '..'"
    },
    {
        "href": "recursivedirectoryiterator.key.php",
        "name": "RecursiveDirectoryIterator::key",
        "description": "Return path and filename of current dir entry"
    },
    {
        "href": "recursivedirectoryiterator.next.php",
        "name": "RecursiveDirectoryIterator::next",
        "description": "Move to next entry"
    },
    {
        "href": "recursivedirectoryiterator.rewind.php",
        "name": "RecursiveDirectoryIterator::rewind",
        "description": "Rewind dir back to the start"
    },
    {
        "href": "recursivedirectoryiterator.construct.php",
        "name": "RecursiveDirectoryIterator::__construct",
        "description": "Constructs a RecursiveDirectoryIterator"
    },
    {
        "href": "recursivefilteriterator.getchildren.php",
        "name": "RecursiveFilterIterator::getChildren",
        "description": "Return the inner iterator's children contained in a RecursiveFilterIterator"
    },
    {
        "href": "recursivefilteriterator.haschildren.php",
        "name": "RecursiveFilterIterator::hasChildren",
        "description": "Check whether the inner iterator's current element has children"
    },
    {
        "href": "recursivefilteriterator.construct.php",
        "name": "RecursiveFilterIterator::__construct",
        "description": "Create a RecursiveFilterIterator from a RecursiveIterator"
    },
    {
        "href": "recursiveiterator.getchildren.php",
        "name": "RecursiveIterator::getChildren",
        "description": "Returns an iterator for the current entry"
    },
    {
        "href": "recursiveiterator.haschildren.php",
        "name": "RecursiveIterator::hasChildren",
        "description": "Returns if an iterator can be created for the current entry"
    },
    {
        "href": "recursiveiteratoriterator.beginchildren.php",
        "name": "RecursiveIteratorIterator::beginChildren",
        "description": "Begin children"
    },
    {
        "href": "recursiveiteratoriterator.beginiteration.php",
        "name": "RecursiveIteratorIterator::beginIteration",
        "description": "Begin Iteration"
    },
    {
        "href": "recursiveiteratoriterator.callgetchildren.php",
        "name": "RecursiveIteratorIterator::callGetChildren",
        "description": "Get children"
    },
    {
        "href": "recursiveiteratoriterator.callhaschildren.php",
        "name": "RecursiveIteratorIterator::callHasChildren",
        "description": "Has children"
    },
    {
        "href": "recursiveiteratoriterator.current.php",
        "name": "RecursiveIteratorIterator::current",
        "description": "Access the current element value"
    },
    {
        "href": "recursiveiteratoriterator.endchildren.php",
        "name": "RecursiveIteratorIterator::endChildren",
        "description": "End children"
    },
    {
        "href": "recursiveiteratoriterator.enditeration.php",
        "name": "RecursiveIteratorIterator::endIteration",
        "description": "End Iteration"
    },
    {
        "href": "recursiveiteratoriterator.getdepth.php",
        "name": "RecursiveIteratorIterator::getDepth",
        "description": "Get the current depth of the recursive iteration"
    },
    {
        "href": "recursiveiteratoriterator.getinneriterator.php",
        "name": "RecursiveIteratorIterator::getInnerIterator",
        "description": "Get inner iterator"
    },
    {
        "href": "recursiveiteratoriterator.getmaxdepth.php",
        "name": "RecursiveIteratorIterator::getMaxDepth",
        "description": "Get max depth"
    },
    {
        "href": "recursiveiteratoriterator.getsubiterator.php",
        "name": "RecursiveIteratorIterator::getSubIterator",
        "description": "The current active sub iterator"
    },
    {
        "href": "recursiveiteratoriterator.key.php",
        "name": "RecursiveIteratorIterator::key",
        "description": "Access the current key"
    },
    {
        "href": "recursiveiteratoriterator.next.php",
        "name": "RecursiveIteratorIterator::next",
        "description": "Move forward to the next element"
    },
    {
        "href": "recursiveiteratoriterator.nextelement.php",
        "name": "RecursiveIteratorIterator::nextElement",
        "description": "Next element"
    },
    {
        "href": "recursiveiteratoriterator.rewind.php",
        "name": "RecursiveIteratorIterator::rewind",
        "description": "Rewind the iterator to the first element of the top level inner iterator"
    },
    {
        "href": "recursiveiteratoriterator.setmaxdepth.php",
        "name": "RecursiveIteratorIterator::setMaxDepth",
        "description": "Set max depth"
    },
    {
        "href": "recursiveiteratoriterator.valid.php",
        "name": "RecursiveIteratorIterator::valid",
        "description": "Check whether the current position is valid"
    },
    {
        "href": "recursiveiteratoriterator.construct.php",
        "name": "RecursiveIteratorIterator::__construct",
        "description": "Construct a RecursiveIteratorIterator"
    },
    {
        "href": "recursiveregexiterator.getchildren.php",
        "name": "RecursiveRegexIterator::getChildren",
        "description": "Returns an iterator for the current entry"
    },
    {
        "href": "recursiveregexiterator.haschildren.php",
        "name": "RecursiveRegexIterator::hasChildren",
        "description": "Returns whether an iterator can be obtained for the current entry"
    },
    {
        "href": "recursiveregexiterator.construct.php",
        "name": "RecursiveRegexIterator::__construct",
        "description": "Creates a new RecursiveRegexIterator"
    },
    {
        "href": "recursivetreeiterator.beginchildren.php",
        "name": "RecursiveTreeIterator::beginChildren",
        "description": "Begin children"
    },
    {
        "href": "recursivetreeiterator.beginiteration.php",
        "name": "RecursiveTreeIterator::beginIteration",
        "description": "Begin iteration"
    },
    {
        "href": "recursivetreeiterator.callgetchildren.php",
        "name": "RecursiveTreeIterator::callGetChildren",
        "description": "Get children"
    },
    {
        "href": "recursivetreeiterator.callhaschildren.php",
        "name": "RecursiveTreeIterator::callHasChildren",
        "description": "Has children"
    },
    {
        "href": "recursivetreeiterator.current.php",
        "name": "RecursiveTreeIterator::current",
        "description": "Get current element"
    },
    {
        "href": "recursivetreeiterator.endchildren.php",
        "name": "RecursiveTreeIterator::endChildren",
        "description": "End children"
    },
    {
        "href": "recursivetreeiterator.enditeration.php",
        "name": "RecursiveTreeIterator::endIteration",
        "description": "End iteration"
    },
    {
        "href": "recursivetreeiterator.getentry.php",
        "name": "RecursiveTreeIterator::getEntry",
        "description": "Get current entry"
    },
    {
        "href": "recursivetreeiterator.getpostfix.php",
        "name": "RecursiveTreeIterator::getPostfix",
        "description": "Get the postfix"
    },
    {
        "href": "recursivetreeiterator.getprefix.php",
        "name": "RecursiveTreeIterator::getPrefix",
        "description": "Get the prefix"
    },
    {
        "href": "recursivetreeiterator.key.php",
        "name": "RecursiveTreeIterator::key",
        "description": "Get the key of the current element"
    },
    {
        "href": "recursivetreeiterator.next.php",
        "name": "RecursiveTreeIterator::next",
        "description": "Move to next element"
    },
    {
        "href": "recursivetreeiterator.nextelement.php",
        "name": "RecursiveTreeIterator::nextElement",
        "description": "Next element"
    },
    {
        "href": "recursivetreeiterator.rewind.php",
        "name": "RecursiveTreeIterator::rewind",
        "description": "Rewind iterator"
    },
    {
        "href": "recursivetreeiterator.setpostfix.php",
        "name": "RecursiveTreeIterator::setPostfix",
        "description": "Set postfix"
    },
    {
        "href": "recursivetreeiterator.setprefixpart.php",
        "name": "RecursiveTreeIterator::setPrefixPart",
        "description": "Set a part of the prefix"
    },
    {
        "href": "recursivetreeiterator.valid.php",
        "name": "RecursiveTreeIterator::valid",
        "description": "Check validity"
    },
    {
        "href": "recursivetreeiterator.construct.php",
        "name": "RecursiveTreeIterator::__construct",
        "description": "Construct a RecursiveTreeIterator"
    },
    {
        "href": "reflection.export.php",
        "name": "Reflection::export",
        "description": "Exports"
    },
    {
        "href": "reflection.getmodifiernames.php",
        "name": "Reflection::getModifierNames",
        "description": "Gets modifier names"
    },
    {
        "href": "reflectionattribute.getarguments.php",
        "name": "ReflectionAttribute::getArguments",
        "description": "Gets arguments passed to attribute"
    },
    {
        "href": "reflectionattribute.getname.php",
        "name": "ReflectionAttribute::getName",
        "description": "Gets attribute name"
    },
    {
        "href": "reflectionattribute.gettarget.php",
        "name": "ReflectionAttribute::getTarget",
        "description": "Returns the target of the attribute as bitmask"
    },
    {
        "href": "reflectionattribute.isrepeated.php",
        "name": "ReflectionAttribute::isRepeated",
        "description": "Returns whether the attribute of this name could occur repeatedly on a code element"
    },
    {
        "href": "reflectionattribute.newinstance.php",
        "name": "ReflectionAttribute::newInstance",
        "description": "Instantiates the attribute class represented by this ReflectionAttribute class and arguments"
    },
    {
        "href": "reflectionattribute.construct.php",
        "name": "ReflectionAttribute::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "reflectionclass.export.php",
        "name": "ReflectionClass::export",
        "description": "Exports a class"
    },
    {
        "href": "reflectionclass.getattributes.php",
        "name": "ReflectionClass::getAttributes",
        "description": "Gets Attributes"
    },
    {
        "href": "reflectionclass.getconstant.php",
        "name": "ReflectionClass::getConstant",
        "description": "Gets defined constant"
    },
    {
        "href": "reflectionclass.getconstants.php",
        "name": "ReflectionClass::getConstants",
        "description": "Gets constants"
    },
    {
        "href": "reflectionclass.getconstructor.php",
        "name": "ReflectionClass::getConstructor",
        "description": "Gets the constructor of the class"
    },
    {
        "href": "reflectionclass.getdefaultproperties.php",
        "name": "ReflectionClass::getDefaultProperties",
        "description": "Gets default properties"
    },
    {
        "href": "reflectionclass.getdoccomment.php",
        "name": "ReflectionClass::getDocComment",
        "description": "Gets doc comments"
    },
    {
        "href": "reflectionclass.getendline.php",
        "name": "ReflectionClass::getEndLine",
        "description": "Gets end line"
    },
    {
        "href": "reflectionclass.getextension.php",
        "name": "ReflectionClass::getExtension",
        "description": "Gets a ReflectionExtension object for the extension which defined the class"
    },
    {
        "href": "reflectionclass.getextensionname.php",
        "name": "ReflectionClass::getExtensionName",
        "description": "Gets the name of the extension which defined the class"
    },
    {
        "href": "reflectionclass.getfilename.php",
        "name": "ReflectionClass::getFileName",
        "description": "Gets the filename of the file in which the class has been defined"
    },
    {
        "href": "reflectionclass.getinterfacenames.php",
        "name": "ReflectionClass::getInterfaceNames",
        "description": "Gets the interface names"
    },
    {
        "href": "reflectionclass.getinterfaces.php",
        "name": "ReflectionClass::getInterfaces",
        "description": "Gets the interfaces"
    },
    {
        "href": "reflectionclass.getmethod.php",
        "name": "ReflectionClass::getMethod",
        "description": "Gets a ReflectionMethod for a class method"
    },
    {
        "href": "reflectionclass.getmethods.php",
        "name": "ReflectionClass::getMethods",
        "description": "Gets an array of methods"
    },
    {
        "href": "reflectionclass.getmodifiers.php",
        "name": "ReflectionClass::getModifiers",
        "description": "Gets the class modifiers"
    },
    {
        "href": "reflectionclass.getname.php",
        "name": "ReflectionClass::getName",
        "description": "Gets class name"
    },
    {
        "href": "reflectionclass.getnamespacename.php",
        "name": "ReflectionClass::getNamespaceName",
        "description": "Gets namespace name"
    },
    {
        "href": "reflectionclass.getparentclass.php",
        "name": "ReflectionClass::getParentClass",
        "description": "Gets parent class"
    },
    {
        "href": "reflectionclass.getproperties.php",
        "name": "ReflectionClass::getProperties",
        "description": "Gets properties"
    },
    {
        "href": "reflectionclass.getproperty.php",
        "name": "ReflectionClass::getProperty",
        "description": "Gets a ReflectionProperty for a class's property"
    },
    {
        "href": "reflectionclass.getreflectionconstant.php",
        "name": "ReflectionClass::getReflectionConstant",
        "description": "Gets a ReflectionClassConstant for a class's constant"
    },
    {
        "href": "reflectionclass.getreflectionconstants.php",
        "name": "ReflectionClass::getReflectionConstants",
        "description": "Gets class constants"
    },
    {
        "href": "reflectionclass.getshortname.php",
        "name": "ReflectionClass::getShortName",
        "description": "Gets short name"
    },
    {
        "href": "reflectionclass.getstartline.php",
        "name": "ReflectionClass::getStartLine",
        "description": "Gets starting line number"
    },
    {
        "href": "reflectionclass.getstaticproperties.php",
        "name": "ReflectionClass::getStaticProperties",
        "description": "Gets static properties"
    },
    {
        "href": "reflectionclass.getstaticpropertyvalue.php",
        "name": "ReflectionClass::getStaticPropertyValue",
        "description": "Gets static property value"
    },
    {
        "href": "reflectionclass.gettraitaliases.php",
        "name": "ReflectionClass::getTraitAliases",
        "description": "Returns an array of trait aliases"
    },
    {
        "href": "reflectionclass.gettraitnames.php",
        "name": "ReflectionClass::getTraitNames",
        "description": "Returns an array of names of traits used by this class"
    },
    {
        "href": "reflectionclass.gettraits.php",
        "name": "ReflectionClass::getTraits",
        "description": "Returns an array of traits used by this class"
    },
    {
        "href": "reflectionclass.hasconstant.php",
        "name": "ReflectionClass::hasConstant",
        "description": "Checks if constant is defined"
    },
    {
        "href": "reflectionclass.hasmethod.php",
        "name": "ReflectionClass::hasMethod",
        "description": "Checks if method is defined"
    },
    {
        "href": "reflectionclass.hasproperty.php",
        "name": "ReflectionClass::hasProperty",
        "description": "Checks if property is defined"
    },
    {
        "href": "reflectionclass.implementsinterface.php",
        "name": "ReflectionClass::implementsInterface",
        "description": "Implements interface"
    },
    {
        "href": "reflectionclass.innamespace.php",
        "name": "ReflectionClass::inNamespace",
        "description": "Checks if in namespace"
    },
    {
        "href": "reflectionclass.isabstract.php",
        "name": "ReflectionClass::isAbstract",
        "description": "Checks if class is abstract"
    },
    {
        "href": "reflectionclass.isanonymous.php",
        "name": "ReflectionClass::isAnonymous",
        "description": "Checks if class is anonymous"
    },
    {
        "href": "reflectionclass.iscloneable.php",
        "name": "ReflectionClass::isCloneable",
        "description": "Returns whether this class is cloneable"
    },
    {
        "href": "reflectionclass.isfinal.php",
        "name": "ReflectionClass::isFinal",
        "description": "Checks if class is final"
    },
    {
        "href": "reflectionclass.isinstance.php",
        "name": "ReflectionClass::isInstance",
        "description": "Checks class for instance"
    },
    {
        "href": "reflectionclass.isinstantiable.php",
        "name": "ReflectionClass::isInstantiable",
        "description": "Checks if the class is instantiable"
    },
    {
        "href": "reflectionclass.isinterface.php",
        "name": "ReflectionClass::isInterface",
        "description": "Checks if the class is an interface"
    },
    {
        "href": "reflectionclass.isinternal.php",
        "name": "ReflectionClass::isInternal",
        "description": "Checks if class is defined internally by an extension, or the core"
    },
    {
        "href": "reflectionclass.isiterable.php",
        "name": "ReflectionClass::isIterable",
        "description": "Check whether this class is iterable"
    },
    {
        "href": "reflectionclass.isiterateable.php",
        "name": "ReflectionClass::isIterateable",
        "description": "Alias of ReflectionClass::isIterable"
    },
    {
        "href": "reflectionclass.issubclassof.php",
        "name": "ReflectionClass::isSubclassOf",
        "description": "Checks if a subclass"
    },
    {
        "href": "reflectionclass.istrait.php",
        "name": "ReflectionClass::isTrait",
        "description": "Returns whether this is a trait"
    },
    {
        "href": "reflectionclass.isuserdefined.php",
        "name": "ReflectionClass::isUserDefined",
        "description": "Checks if user defined"
    },
    {
        "href": "reflectionclass.newinstance.php",
        "name": "ReflectionClass::newInstance",
        "description": "Creates a new class instance from given arguments"
    },
    {
        "href": "reflectionclass.newinstanceargs.php",
        "name": "ReflectionClass::newInstanceArgs",
        "description": "Creates a new class instance from given arguments"
    },
    {
        "href": "reflectionclass.newinstancewithoutconstructor.php",
        "name": "ReflectionClass::newInstanceWithoutConstructor",
        "description": "Creates a new class instance without invoking the constructor"
    },
    {
        "href": "reflectionclass.setstaticpropertyvalue.php",
        "name": "ReflectionClass::setStaticPropertyValue",
        "description": "Sets static property value"
    },
    {
        "href": "reflectionclass.construct.php",
        "name": "ReflectionClass::__construct",
        "description": "Constructs a ReflectionClass"
    },
    {
        "href": "reflectionclass.tostring.php",
        "name": "ReflectionClass::__toString",
        "description": "Returns the string representation of the ReflectionClass object"
    },
    {
        "href": "reflectionclassconstant.export.php",
        "name": "ReflectionClassConstant::export",
        "description": "Export"
    },
    {
        "href": "reflectionclassconstant.getattributes.php",
        "name": "ReflectionClassConstant::getAttributes",
        "description": "Gets Attributes"
    },
    {
        "href": "reflectionclassconstant.getdeclaringclass.php",
        "name": "ReflectionClassConstant::getDeclaringClass",
        "description": "Gets declaring class"
    },
    {
        "href": "reflectionclassconstant.getdoccomment.php",
        "name": "ReflectionClassConstant::getDocComment",
        "description": "Gets doc comments"
    },
    {
        "href": "reflectionclassconstant.getmodifiers.php",
        "name": "ReflectionClassConstant::getModifiers",
        "description": "Gets the class constant modifiers"
    },
    {
        "href": "reflectionclassconstant.getname.php",
        "name": "ReflectionClassConstant::getName",
        "description": "Get name of the constant"
    },
    {
        "href": "reflectionclassconstant.getvalue.php",
        "name": "ReflectionClassConstant::getValue",
        "description": "Gets value"
    },
    {
        "href": "reflectionclassconstant.isfinal.php",
        "name": "ReflectionClassConstant::isFinal",
        "description": "Checks if class constant is final"
    },
    {
        "href": "reflectionclassconstant.isprivate.php",
        "name": "ReflectionClassConstant::isPrivate",
        "description": "Checks if class constant is private"
    },
    {
        "href": "reflectionclassconstant.isprotected.php",
        "name": "ReflectionClassConstant::isProtected",
        "description": "Checks if class constant is protected"
    },
    {
        "href": "reflectionclassconstant.ispublic.php",
        "name": "ReflectionClassConstant::isPublic",
        "description": "Checks if class constant is public"
    },
    {
        "href": "reflectionclassconstant.construct.php",
        "name": "ReflectionClassConstant::__construct",
        "description": "Constructs a ReflectionClassConstant"
    },
    {
        "href": "reflectionclassconstant.tostring.php",
        "name": "ReflectionClassConstant::__toString",
        "description": "Returns the string representation of the ReflectionClassConstant object"
    },
    {
        "href": "reflectionenum.getbackingtype.php",
        "name": "ReflectionEnum::getBackingType",
        "description": "Gets the backing type of an Enum, if any"
    },
    {
        "href": "reflectionenum.getcase.php",
        "name": "ReflectionEnum::getCase",
        "description": "Returns a specific case of an Enum"
    },
    {
        "href": "reflectionenum.getcases.php",
        "name": "ReflectionEnum::getCases",
        "description": "Returns a list of all cases on an Enum"
    },
    {
        "href": "reflectionenum.hascase.php",
        "name": "ReflectionEnum::hasCase",
        "description": "Checks for a case on an Enum"
    },
    {
        "href": "reflectionenum.isbacked.php",
        "name": "ReflectionEnum::isBacked",
        "description": "Determines if an Enum is a Backed Enum"
    },
    {
        "href": "reflectionenum.construct.php",
        "name": "ReflectionEnum::__construct",
        "description": "Instantiates a ReflectionEnum object"
    },
    {
        "href": "reflectionenumbackedcase.getbackingvalue.php",
        "name": "ReflectionEnumBackedCase::getBackingValue",
        "description": "Gets the scalar value backing this Enum case"
    },
    {
        "href": "reflectionenumbackedcase.construct.php",
        "name": "ReflectionEnumBackedCase::__construct",
        "description": "Instantiates a ReflectionEnumBackedCase object"
    },
    {
        "href": "reflectionenumunitcase.getenum.php",
        "name": "ReflectionEnumUnitCase::getEnum",
        "description": "Gets the reflection of the enum of this case"
    },
    {
        "href": "reflectionenumunitcase.getvalue.php",
        "name": "ReflectionEnumUnitCase::getValue",
        "description": "Gets the enum case object described by this reflection object"
    },
    {
        "href": "reflectionenumunitcase.construct.php",
        "name": "ReflectionEnumUnitCase::__construct",
        "description": "Instantiates a ReflectionEnumUnitCase object"
    },
    {
        "href": "reflectionextension.export.php",
        "name": "ReflectionExtension::export",
        "description": "Export"
    },
    {
        "href": "reflectionextension.getclasses.php",
        "name": "ReflectionExtension::getClasses",
        "description": "Gets classes"
    },
    {
        "href": "reflectionextension.getclassnames.php",
        "name": "ReflectionExtension::getClassNames",
        "description": "Gets class names"
    },
    {
        "href": "reflectionextension.getconstants.php",
        "name": "ReflectionExtension::getConstants",
        "description": "Gets constants"
    },
    {
        "href": "reflectionextension.getdependencies.php",
        "name": "ReflectionExtension::getDependencies",
        "description": "Gets dependencies"
    },
    {
        "href": "reflectionextension.getfunctions.php",
        "name": "ReflectionExtension::getFunctions",
        "description": "Gets extension functions"
    },
    {
        "href": "reflectionextension.getinientries.php",
        "name": "ReflectionExtension::getINIEntries",
        "description": "Gets extension ini entries"
    },
    {
        "href": "reflectionextension.getname.php",
        "name": "ReflectionExtension::getName",
        "description": "Gets extension name"
    },
    {
        "href": "reflectionextension.getversion.php",
        "name": "ReflectionExtension::getVersion",
        "description": "Gets extension version"
    },
    {
        "href": "reflectionextension.info.php",
        "name": "ReflectionExtension::info",
        "description": "Print extension info"
    },
    {
        "href": "reflectionextension.ispersistent.php",
        "name": "ReflectionExtension::isPersistent",
        "description": "Returns whether this extension is persistent"
    },
    {
        "href": "reflectionextension.istemporary.php",
        "name": "ReflectionExtension::isTemporary",
        "description": "Returns whether this extension is temporary"
    },
    {
        "href": "reflectionextension.clone.php",
        "name": "ReflectionExtension::__clone",
        "description": "Clones"
    },
    {
        "href": "reflectionextension.construct.php",
        "name": "ReflectionExtension::__construct",
        "description": "Constructs a ReflectionExtension"
    },
    {
        "href": "reflectionextension.tostring.php",
        "name": "ReflectionExtension::__toString",
        "description": "To string"
    },
    {
        "href": "reflectionfiber.getcallable.php",
        "name": "ReflectionFiber::getCallable",
        "description": "Gets the callable used to create the Fiber"
    },
    {
        "href": "reflectionfiber.getexecutingfile.php",
        "name": "ReflectionFiber::getExecutingFile",
        "description": "Get the file name of the current execution point"
    },
    {
        "href": "reflectionfiber.getexecutingline.php",
        "name": "ReflectionFiber::getExecutingLine",
        "description": "Get the line number of the current execution point"
    },
    {
        "href": "reflectionfiber.getfiber.php",
        "name": "ReflectionFiber::getFiber",
        "description": "Get the reflected Fiber instance"
    },
    {
        "href": "reflectionfiber.gettrace.php",
        "name": "ReflectionFiber::getTrace",
        "description": "Get the backtrace of the current execution point"
    },
    {
        "href": "reflectionfiber.construct.php",
        "name": "ReflectionFiber::__construct",
        "description": "Constructs a ReflectionFiber object"
    },
    {
        "href": "reflectionfunction.export.php",
        "name": "ReflectionFunction::export",
        "description": "Exports function"
    },
    {
        "href": "reflectionfunction.getclosure.php",
        "name": "ReflectionFunction::getClosure",
        "description": "Returns a dynamically created closure for the function"
    },
    {
        "href": "reflectionfunction.invoke.php",
        "name": "ReflectionFunction::invoke",
        "description": "Invokes function"
    },
    {
        "href": "reflectionfunction.invokeargs.php",
        "name": "ReflectionFunction::invokeArgs",
        "description": "Invokes function args"
    },
    {
        "href": "reflectionfunction.isdisabled.php",
        "name": "ReflectionFunction::isDisabled",
        "description": "Checks if function is disabled"
    },
    {
        "href": "reflectionfunction.construct.php",
        "name": "ReflectionFunction::__construct",
        "description": "Constructs a ReflectionFunction object"
    },
    {
        "href": "reflectionfunction.tostring.php",
        "name": "ReflectionFunction::__toString",
        "description": "To string"
    },
    {
        "href": "reflectionfunctionabstract.getattributes.php",
        "name": "ReflectionFunctionAbstract::getAttributes",
        "description": "Gets Attributes"
    },
    {
        "href": "reflectionfunctionabstract.getclosurescopeclass.php",
        "name": "ReflectionFunctionAbstract::getClosureScopeClass",
        "description": "Returns the scope associated to the closure"
    },
    {
        "href": "reflectionfunctionabstract.getclosurethis.php",
        "name": "ReflectionFunctionAbstract::getClosureThis",
        "description": "Returns this pointer bound to closure"
    },
    {
        "href": "reflectionfunctionabstract.getdoccomment.php",
        "name": "ReflectionFunctionAbstract::getDocComment",
        "description": "Gets doc comment"
    },
    {
        "href": "reflectionfunctionabstract.getendline.php",
        "name": "ReflectionFunctionAbstract::getEndLine",
        "description": "Gets end line number"
    },
    {
        "href": "reflectionfunctionabstract.getextension.php",
        "name": "ReflectionFunctionAbstract::getExtension",
        "description": "Gets extension info"
    },
    {
        "href": "reflectionfunctionabstract.getextensionname.php",
        "name": "ReflectionFunctionAbstract::getExtensionName",
        "description": "Gets extension name"
    },
    {
        "href": "reflectionfunctionabstract.getfilename.php",
        "name": "ReflectionFunctionAbstract::getFileName",
        "description": "Gets file name"
    },
    {
        "href": "reflectionfunctionabstract.getname.php",
        "name": "ReflectionFunctionAbstract::getName",
        "description": "Gets function name"
    },
    {
        "href": "reflectionfunctionabstract.getnamespacename.php",
        "name": "ReflectionFunctionAbstract::getNamespaceName",
        "description": "Gets namespace name"
    },
    {
        "href": "reflectionfunctionabstract.getnumberofparameters.php",
        "name": "ReflectionFunctionAbstract::getNumberOfParameters",
        "description": "Gets number of parameters"
    },
    {
        "href": "reflectionfunctionabstract.getnumberofrequiredparameters.php",
        "name": "ReflectionFunctionAbstract::getNumberOfRequiredParameters",
        "description": "Gets number of required parameters"
    },
    {
        "href": "reflectionfunctionabstract.getparameters.php",
        "name": "ReflectionFunctionAbstract::getParameters",
        "description": "Gets parameters"
    },
    {
        "href": "reflectionfunctionabstract.getreturntype.php",
        "name": "ReflectionFunctionAbstract::getReturnType",
        "description": "Gets the specified return type of a function"
    },
    {
        "href": "reflectionfunctionabstract.getshortname.php",
        "name": "ReflectionFunctionAbstract::getShortName",
        "description": "Gets function short name"
    },
    {
        "href": "reflectionfunctionabstract.getstartline.php",
        "name": "ReflectionFunctionAbstract::getStartLine",
        "description": "Gets starting line number"
    },
    {
        "href": "reflectionfunctionabstract.getstaticvariables.php",
        "name": "ReflectionFunctionAbstract::getStaticVariables",
        "description": "Gets static variables"
    },
    {
        "href": "reflectionfunctionabstract.hasreturntype.php",
        "name": "ReflectionFunctionAbstract::hasReturnType",
        "description": "Checks if the function has a specified return type"
    },
    {
        "href": "reflectionfunctionabstract.innamespace.php",
        "name": "ReflectionFunctionAbstract::inNamespace",
        "description": "Checks if function in namespace"
    },
    {
        "href": "reflectionfunctionabstract.isclosure.php",
        "name": "ReflectionFunctionAbstract::isClosure",
        "description": "Checks if closure"
    },
    {
        "href": "reflectionfunctionabstract.isdeprecated.php",
        "name": "ReflectionFunctionAbstract::isDeprecated",
        "description": "Checks if deprecated"
    },
    {
        "href": "reflectionfunctionabstract.isgenerator.php",
        "name": "ReflectionFunctionAbstract::isGenerator",
        "description": "Returns whether this function is a generator"
    },
    {
        "href": "reflectionfunctionabstract.isinternal.php",
        "name": "ReflectionFunctionAbstract::isInternal",
        "description": "Checks if is internal"
    },
    {
        "href": "reflectionfunctionabstract.isuserdefined.php",
        "name": "ReflectionFunctionAbstract::isUserDefined",
        "description": "Checks if user defined"
    },
    {
        "href": "reflectionfunctionabstract.isvariadic.php",
        "name": "ReflectionFunctionAbstract::isVariadic",
        "description": "Checks if the function is variadic"
    },
    {
        "href": "reflectionfunctionabstract.returnsreference.php",
        "name": "ReflectionFunctionAbstract::returnsReference",
        "description": "Checks if returns reference"
    },
    {
        "href": "reflectionfunctionabstract.clone.php",
        "name": "ReflectionFunctionAbstract::__clone",
        "description": "Clones function"
    },
    {
        "href": "reflectionfunctionabstract.tostring.php",
        "name": "ReflectionFunctionAbstract::__toString",
        "description": "To string"
    },
    {
        "href": "reflectiongenerator.getexecutingfile.php",
        "name": "ReflectionGenerator::getExecutingFile",
        "description": "Gets the file name of the currently executing generator"
    },
    {
        "href": "reflectiongenerator.getexecutinggenerator.php",
        "name": "ReflectionGenerator::getExecutingGenerator",
        "description": "Gets the executing Generator object"
    },
    {
        "href": "reflectiongenerator.getexecutingline.php",
        "name": "ReflectionGenerator::getExecutingLine",
        "description": "Gets the currently executing line of the generator"
    },
    {
        "href": "reflectiongenerator.getfunction.php",
        "name": "ReflectionGenerator::getFunction",
        "description": "Gets the function name of the generator"
    },
    {
        "href": "reflectiongenerator.getthis.php",
        "name": "ReflectionGenerator::getThis",
        "description": "Gets the $this value of the generator"
    },
    {
        "href": "reflectiongenerator.gettrace.php",
        "name": "ReflectionGenerator::getTrace",
        "description": "Gets the trace of the executing generator"
    },
    {
        "href": "reflectiongenerator.construct.php",
        "name": "ReflectionGenerator::__construct",
        "description": "Constructs a ReflectionGenerator object"
    },
    {
        "href": "reflectionintersectiontype.gettypes.php",
        "name": "ReflectionIntersectionType::getTypes",
        "description": "Returns the types included in the intersection type"
    },
    {
        "href": "reflectionmethod.export.php",
        "name": "ReflectionMethod::export",
        "description": "Export a reflection method"
    },
    {
        "href": "reflectionmethod.getclosure.php",
        "name": "ReflectionMethod::getClosure",
        "description": "Returns a dynamically created closure for the method"
    },
    {
        "href": "reflectionmethod.getdeclaringclass.php",
        "name": "ReflectionMethod::getDeclaringClass",
        "description": "Gets declaring class for the reflected method"
    },
    {
        "href": "reflectionmethod.getmodifiers.php",
        "name": "ReflectionMethod::getModifiers",
        "description": "Gets the method modifiers"
    },
    {
        "href": "reflectionmethod.getprototype.php",
        "name": "ReflectionMethod::getPrototype",
        "description": "Gets the method prototype (if there is one)"
    },
    {
        "href": "reflectionmethod.invoke.php",
        "name": "ReflectionMethod::invoke",
        "description": "Invoke"
    },
    {
        "href": "reflectionmethod.invokeargs.php",
        "name": "ReflectionMethod::invokeArgs",
        "description": "Invoke args"
    },
    {
        "href": "reflectionmethod.isabstract.php",
        "name": "ReflectionMethod::isAbstract",
        "description": "Checks if method is abstract"
    },
    {
        "href": "reflectionmethod.isconstructor.php",
        "name": "ReflectionMethod::isConstructor",
        "description": "Checks if method is a constructor"
    },
    {
        "href": "reflectionmethod.isdestructor.php",
        "name": "ReflectionMethod::isDestructor",
        "description": "Checks if method is a destructor"
    },
    {
        "href": "reflectionmethod.isfinal.php",
        "name": "ReflectionMethod::isFinal",
        "description": "Checks if method is final"
    },
    {
        "href": "reflectionmethod.isprivate.php",
        "name": "ReflectionMethod::isPrivate",
        "description": "Checks if method is private"
    },
    {
        "href": "reflectionmethod.isprotected.php",
        "name": "ReflectionMethod::isProtected",
        "description": "Checks if method is protected"
    },
    {
        "href": "reflectionmethod.ispublic.php",
        "name": "ReflectionMethod::isPublic",
        "description": "Checks if method is public"
    },
    {
        "href": "reflectionmethod.isstatic.php",
        "name": "ReflectionMethod::isStatic",
        "description": "Checks if method is static"
    },
    {
        "href": "reflectionmethod.setaccessible.php",
        "name": "ReflectionMethod::setAccessible",
        "description": "Set method accessibility"
    },
    {
        "href": "reflectionmethod.construct.php",
        "name": "ReflectionMethod::__construct",
        "description": "Constructs a ReflectionMethod"
    },
    {
        "href": "reflectionmethod.tostring.php",
        "name": "ReflectionMethod::__toString",
        "description": "Returns the string representation of the Reflection method object"
    },
    {
        "href": "reflectionnamedtype.getname.php",
        "name": "ReflectionNamedType::getName",
        "description": "Get the name of the type as a string"
    },
    {
        "href": "reflectionnamedtype.isbuiltin.php",
        "name": "ReflectionNamedType::isBuiltin",
        "description": "Checks if it is a built-in type"
    },
    {
        "href": "reflectionobject.export.php",
        "name": "ReflectionObject::export",
        "description": "Export"
    },
    {
        "href": "reflectionobject.construct.php",
        "name": "ReflectionObject::__construct",
        "description": "Constructs a ReflectionObject"
    },
    {
        "href": "reflectionparameter.allowsnull.php",
        "name": "ReflectionParameter::allowsNull",
        "description": "Checks if null is allowed"
    },
    {
        "href": "reflectionparameter.canbepassedbyvalue.php",
        "name": "ReflectionParameter::canBePassedByValue",
        "description": "Returns whether this parameter can be passed by value"
    },
    {
        "href": "reflectionparameter.export.php",
        "name": "ReflectionParameter::export",
        "description": "Exports"
    },
    {
        "href": "reflectionparameter.getattributes.php",
        "name": "ReflectionParameter::getAttributes",
        "description": "Gets Attributes"
    },
    {
        "href": "reflectionparameter.getclass.php",
        "name": "ReflectionParameter::getClass",
        "description": "Get a ReflectionClass object for the parameter being reflected or null"
    },
    {
        "href": "reflectionparameter.getdeclaringclass.php",
        "name": "ReflectionParameter::getDeclaringClass",
        "description": "Gets declaring class"
    },
    {
        "href": "reflectionparameter.getdeclaringfunction.php",
        "name": "ReflectionParameter::getDeclaringFunction",
        "description": "Gets declaring function"
    },
    {
        "href": "reflectionparameter.getdefaultvalue.php",
        "name": "ReflectionParameter::getDefaultValue",
        "description": "Gets default parameter value"
    },
    {
        "href": "reflectionparameter.getdefaultvalueconstantname.php",
        "name": "ReflectionParameter::getDefaultValueConstantName",
        "description": "Returns the default value's constant name if default value is constant or null"
    },
    {
        "href": "reflectionparameter.getname.php",
        "name": "ReflectionParameter::getName",
        "description": "Gets parameter name"
    },
    {
        "href": "reflectionparameter.getposition.php",
        "name": "ReflectionParameter::getPosition",
        "description": "Gets parameter position"
    },
    {
        "href": "reflectionparameter.gettype.php",
        "name": "ReflectionParameter::getType",
        "description": "Gets a parameter's type"
    },
    {
        "href": "reflectionparameter.hastype.php",
        "name": "ReflectionParameter::hasType",
        "description": "Checks if parameter has a type"
    },
    {
        "href": "reflectionparameter.isarray.php",
        "name": "ReflectionParameter::isArray",
        "description": "Checks if parameter expects an array"
    },
    {
        "href": "reflectionparameter.iscallable.php",
        "name": "ReflectionParameter::isCallable",
        "description": "Returns whether parameter MUST be callable"
    },
    {
        "href": "reflectionparameter.isdefaultvalueavailable.php",
        "name": "ReflectionParameter::isDefaultValueAvailable",
        "description": "Checks if a default value is available"
    },
    {
        "href": "reflectionparameter.isdefaultvalueconstant.php",
        "name": "ReflectionParameter::isDefaultValueConstant",
        "description": "Returns whether the default value of this parameter is a constant"
    },
    {
        "href": "reflectionparameter.isoptional.php",
        "name": "ReflectionParameter::isOptional",
        "description": "Checks if optional"
    },
    {
        "href": "reflectionparameter.ispassedbyreference.php",
        "name": "ReflectionParameter::isPassedByReference",
        "description": "Checks if passed by reference"
    },
    {
        "href": "reflectionparameter.isvariadic.php",
        "name": "ReflectionParameter::isVariadic",
        "description": "Checks if the parameter is variadic"
    },
    {
        "href": "reflectionparameter.clone.php",
        "name": "ReflectionParameter::__clone",
        "description": "Clone"
    },
    {
        "href": "reflectionparameter.construct.php",
        "name": "ReflectionParameter::__construct",
        "description": "Construct"
    },
    {
        "href": "reflectionparameter.tostring.php",
        "name": "ReflectionParameter::__toString",
        "description": "To string"
    },
    {
        "href": "reflectionproperty.export.php",
        "name": "ReflectionProperty::export",
        "description": "Export"
    },
    {
        "href": "reflectionproperty.getattributes.php",
        "name": "ReflectionProperty::getAttributes",
        "description": "Gets Attributes"
    },
    {
        "href": "reflectionproperty.getdeclaringclass.php",
        "name": "ReflectionProperty::getDeclaringClass",
        "description": "Gets declaring class"
    },
    {
        "href": "reflectionproperty.getdefaultvalue.php",
        "name": "ReflectionProperty::getDefaultValue",
        "description": "Returns the default value declared for a property"
    },
    {
        "href": "reflectionproperty.getdoccomment.php",
        "name": "ReflectionProperty::getDocComment",
        "description": "Gets the property doc comment"
    },
    {
        "href": "reflectionproperty.getmodifiers.php",
        "name": "ReflectionProperty::getModifiers",
        "description": "Gets the property modifiers"
    },
    {
        "href": "reflectionproperty.getname.php",
        "name": "ReflectionProperty::getName",
        "description": "Gets property name"
    },
    {
        "href": "reflectionproperty.gettype.php",
        "name": "ReflectionProperty::getType",
        "description": "Gets a property's type"
    },
    {
        "href": "reflectionproperty.getvalue.php",
        "name": "ReflectionProperty::getValue",
        "description": "Gets value"
    },
    {
        "href": "reflectionproperty.hasdefaultvalue.php",
        "name": "ReflectionProperty::hasDefaultValue",
        "description": "Checks if property has a default value declared"
    },
    {
        "href": "reflectionproperty.hastype.php",
        "name": "ReflectionProperty::hasType",
        "description": "Checks if property has a type"
    },
    {
        "href": "reflectionproperty.isdefault.php",
        "name": "ReflectionProperty::isDefault",
        "description": "Checks if property is a default property"
    },
    {
        "href": "reflectionproperty.isinitialized.php",
        "name": "ReflectionProperty::isInitialized",
        "description": "Checks whether a property is initialized"
    },
    {
        "href": "reflectionproperty.isprivate.php",
        "name": "ReflectionProperty::isPrivate",
        "description": "Checks if property is private"
    },
    {
        "href": "reflectionproperty.ispromoted.php",
        "name": "ReflectionProperty::isPromoted",
        "description": "Checks if property is promoted"
    },
    {
        "href": "reflectionproperty.isprotected.php",
        "name": "ReflectionProperty::isProtected",
        "description": "Checks if property is protected"
    },
    {
        "href": "reflectionproperty.ispublic.php",
        "name": "ReflectionProperty::isPublic",
        "description": "Checks if property is public"
    },
    {
        "href": "reflectionproperty.isreadonly.php",
        "name": "ReflectionProperty::isReadOnly",
        "description": "Checks if property is readonly"
    },
    {
        "href": "reflectionproperty.isstatic.php",
        "name": "ReflectionProperty::isStatic",
        "description": "Checks if property is static"
    },
    {
        "href": "reflectionproperty.setaccessible.php",
        "name": "ReflectionProperty::setAccessible",
        "description": "Set property accessibility"
    },
    {
        "href": "reflectionproperty.setvalue.php",
        "name": "ReflectionProperty::setValue",
        "description": "Set property value"
    },
    {
        "href": "reflectionproperty.clone.php",
        "name": "ReflectionProperty::__clone",
        "description": "Clone"
    },
    {
        "href": "reflectionproperty.construct.php",
        "name": "ReflectionProperty::__construct",
        "description": "Construct a ReflectionProperty object"
    },
    {
        "href": "reflectionproperty.tostring.php",
        "name": "ReflectionProperty::__toString",
        "description": "To string"
    },
    {
        "href": "reflectionreference.fromarrayelement.php",
        "name": "ReflectionReference::fromArrayElement",
        "description": "Create a ReflectionReference from an array element"
    },
    {
        "href": "reflectionreference.getid.php",
        "name": "ReflectionReference::getId",
        "description": "Get unique ID of a reference"
    },
    {
        "href": "reflectionreference.construct.php",
        "name": "ReflectionReference::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "reflectiontype.allowsnull.php",
        "name": "ReflectionType::allowsNull",
        "description": "Checks if null is allowed"
    },
    {
        "href": "reflectiontype.tostring.php",
        "name": "ReflectionType::__toString",
        "description": "To string"
    },
    {
        "href": "reflectionuniontype.gettypes.php",
        "name": "ReflectionUnionType::getTypes",
        "description": "Returns the types included in the union type"
    },
    {
        "href": "reflectionzendextension.export.php",
        "name": "ReflectionZendExtension::export",
        "description": "Export"
    },
    {
        "href": "reflectionzendextension.getauthor.php",
        "name": "ReflectionZendExtension::getAuthor",
        "description": "Gets author"
    },
    {
        "href": "reflectionzendextension.getcopyright.php",
        "name": "ReflectionZendExtension::getCopyright",
        "description": "Gets copyright"
    },
    {
        "href": "reflectionzendextension.getname.php",
        "name": "ReflectionZendExtension::getName",
        "description": "Gets name"
    },
    {
        "href": "reflectionzendextension.geturl.php",
        "name": "ReflectionZendExtension::getURL",
        "description": "Gets URL"
    },
    {
        "href": "reflectionzendextension.getversion.php",
        "name": "ReflectionZendExtension::getVersion",
        "description": "Gets version"
    },
    {
        "href": "reflectionzendextension.clone.php",
        "name": "ReflectionZendExtension::__clone",
        "description": "Clone handler"
    },
    {
        "href": "reflectionzendextension.construct.php",
        "name": "ReflectionZendExtension::__construct",
        "description": "Constructor"
    },
    {
        "href": "reflectionzendextension.tostring.php",
        "name": "ReflectionZendExtension::__toString",
        "description": "To string handler"
    },
    {
        "href": "reflector.export.php",
        "name": "Reflector::export",
        "description": "Exports"
    },
    {
        "href": "reflector.tostring.php",
        "name": "Reflector::__toString",
        "description": "To string"
    },
    {
        "href": "regexiterator.accept.php",
        "name": "RegexIterator::accept",
        "description": "Get accept status"
    },
    {
        "href": "regexiterator.getflags.php",
        "name": "RegexIterator::getFlags",
        "description": "Get flags"
    },
    {
        "href": "regexiterator.getmode.php",
        "name": "RegexIterator::getMode",
        "description": "Returns operation mode"
    },
    {
        "href": "regexiterator.getpregflags.php",
        "name": "RegexIterator::getPregFlags",
        "description": "Returns the regular expression flags"
    },
    {
        "href": "regexiterator.getregex.php",
        "name": "RegexIterator::getRegex",
        "description": "Returns current regular expression"
    },
    {
        "href": "regexiterator.setflags.php",
        "name": "RegexIterator::setFlags",
        "description": "Sets the flags"
    },
    {
        "href": "regexiterator.setmode.php",
        "name": "RegexIterator::setMode",
        "description": "Sets the operation mode"
    },
    {
        "href": "regexiterator.setpregflags.php",
        "name": "RegexIterator::setPregFlags",
        "description": "Sets the regular expression flags"
    },
    {
        "href": "regexiterator.construct.php",
        "name": "RegexIterator::__construct",
        "description": "Create a new RegexIterator"
    },
    {
        "href": "function.register-shutdown-function.php",
        "name": "register_shutdown_function",
        "description": "Register a function for execution on shutdown"
    },
    {
        "href": "function.register-tick-function.php",
        "name": "register_tick_function",
        "description": "Register a function for execution on each tick"
    },
    {
        "href": "function.rename.php",
        "name": "rename",
        "description": "Renames a file or directory"
    },
    {
        "href": "function.reset.php",
        "name": "reset",
        "description": "Set the internal pointer of an array to its first element"
    },
    {
        "href": "resourcebundle.count.php",
        "name": "ResourceBundle::count",
        "description": "Get number of elements in the bundle"
    },
    {
        "href": "resourcebundle.create.php",
        "name": "ResourceBundle::create",
        "description": "Create a resource bundle"
    },
    {
        "href": "resourcebundle.get.php",
        "name": "ResourceBundle::get",
        "description": "Get data from the bundle"
    },
    {
        "href": "resourcebundle.geterrorcode.php",
        "name": "ResourceBundle::getErrorCode",
        "description": "Get bundle's last error code"
    },
    {
        "href": "resourcebundle.geterrormessage.php",
        "name": "ResourceBundle::getErrorMessage",
        "description": "Get bundle's last error message"
    },
    {
        "href": "resourcebundle.locales.php",
        "name": "ResourceBundle::getLocales",
        "description": "Get supported locales"
    },
    {
        "href": "function.restore-error-handler.php",
        "name": "restore_error_handler",
        "description": "Restores the previous error handler function"
    },
    {
        "href": "function.restore-exception-handler.php",
        "name": "restore_exception_handler",
        "description": "Restores the previously defined exception handler function"
    },
    {
        "href": "function.restore-include-path.php",
        "name": "restore_include_path",
        "description": "Restores the value of the include_path configuration option"
    },
    {
        "href": "mysql-xdevapi-result.getaffecteditemscount.php",
        "name": "Result::getAffectedItemsCount",
        "description": "Get affected row count"
    },
    {
        "href": "mysql-xdevapi-result.getautoincrementvalue.php",
        "name": "Result::getAutoIncrementValue",
        "description": "Get autoincremented value"
    },
    {
        "href": "mysql-xdevapi-result.getgeneratedids.php",
        "name": "Result::getGeneratedIds",
        "description": "Get generated ids"
    },
    {
        "href": "mysql-xdevapi-result.getwarnings.php",
        "name": "Result::getWarnings",
        "description": "Get warnings from last operation"
    },
    {
        "href": "mysql-xdevapi-result.getwarningscount.php",
        "name": "Result::getWarningsCount",
        "description": "Get warning count from last operation"
    },
    {
        "href": "mysql-xdevapi-result.construct.php",
        "name": "Result::__construct",
        "description": "Result constructor"
    },
    {
        "href": "function.rewind.php",
        "name": "rewind",
        "description": "Rewind the position of a file pointer"
    },
    {
        "href": "function.rewinddir.php",
        "name": "rewinddir",
        "description": "Rewind directory handle"
    },
    {
        "href": "function.rmdir.php",
        "name": "rmdir",
        "description": "Removes directory"
    },
    {
        "href": "function.round.php",
        "name": "round",
        "description": "Rounds a float"
    },
    {
        "href": "mysql-xdevapi-rowresult.fetchall.php",
        "name": "RowResult::fetchAll",
        "description": "Get all rows from result"
    },
    {
        "href": "mysql-xdevapi-rowresult.fetchone.php",
        "name": "RowResult::fetchOne",
        "description": "Get row from result"
    },
    {
        "href": "mysql-xdevapi-rowresult.getcolumnnames.php",
        "name": "RowResult::getColumnNames",
        "description": "Get all column names"
    },
    {
        "href": "mysql-xdevapi-rowresult.getcolumns.php",
        "name": "RowResult::getColumns",
        "description": "Get column metadata"
    },
    {
        "href": "mysql-xdevapi-rowresult.getcolumncount.php",
        "name": "RowResult::getColumnsCount",
        "description": "Get column count"
    },
    {
        "href": "mysql-xdevapi-rowresult.getwarnings.php",
        "name": "RowResult::getWarnings",
        "description": "Get warnings from last operation"
    },
    {
        "href": "mysql-xdevapi-rowresult.getwarningscount.php",
        "name": "RowResult::getWarningsCount",
        "description": "Get warning count from last operation"
    },
    {
        "href": "mysql-xdevapi-rowresult.construct.php",
        "name": "RowResult::__construct",
        "description": "RowResult constructor"
    },
    {
        "href": "function.rpmaddtag.php",
        "name": "rpmaddtag",
        "description": "Add tag retrieved in query"
    },
    {
        "href": "function.rpmdbinfo.php",
        "name": "rpmdbinfo",
        "description": "Get information from installed RPM"
    },
    {
        "href": "function.rpmdbsearch.php",
        "name": "rpmdbsearch",
        "description": "Search RPM packages"
    },
    {
        "href": "function.rpminfo.php",
        "name": "rpminfo",
        "description": "Get information from a RPM file"
    },
    {
        "href": "function.rpmvercmp.php",
        "name": "rpmvercmp",
        "description": "RPM version comparison"
    },
    {
        "href": "rrdcreator.addarchive.php",
        "name": "RRDCreator::addArchive",
        "description": "Adds RRA archive of data values for each data source"
    },
    {
        "href": "rrdcreator.adddatasource.php",
        "name": "RRDCreator::addDataSource",
        "description": "Adds data source definition for RRD database"
    },
    {
        "href": "rrdcreator.save.php",
        "name": "RRDCreator::save",
        "description": "Saves the RRD database to a file"
    },
    {
        "href": "rrdcreator.construct.php",
        "name": "RRDCreator::__construct",
        "description": "Creates new RRDCreator instance"
    },
    {
        "href": "function.rrdc-disconnect.php",
        "name": "rrdc_disconnect",
        "description": "Close any outstanding connection to rrd caching daemon"
    },
    {
        "href": "rrdgraph.save.php",
        "name": "RRDGraph::save",
        "description": "Saves the result of query into image"
    },
    {
        "href": "rrdgraph.saveverbose.php",
        "name": "RRDGraph::saveVerbose",
        "description": "Saves the RRD database query into image and returns the verbose   information about generated graph"
    },
    {
        "href": "rrdgraph.setoptions.php",
        "name": "RRDGraph::setOptions",
        "description": "Sets the options for rrd graph export"
    },
    {
        "href": "rrdgraph.construct.php",
        "name": "RRDGraph::__construct",
        "description": "Creates new RRDGraph instance"
    },
    {
        "href": "rrdupdater.update.php",
        "name": "RRDUpdater::update",
        "description": "Update the RRD database file"
    },
    {
        "href": "rrdupdater.construct.php",
        "name": "RRDUpdater::__construct",
        "description": "Creates new RRDUpdater instance"
    },
    {
        "href": "function.rrd-create.php",
        "name": "rrd_create",
        "description": "Creates rrd database file"
    },
    {
        "href": "function.rrd-error.php",
        "name": "rrd_error",
        "description": "Gets latest error message"
    },
    {
        "href": "function.rrd-fetch.php",
        "name": "rrd_fetch",
        "description": "Fetch the data for graph as array"
    },
    {
        "href": "function.rrd-first.php",
        "name": "rrd_first",
        "description": "Gets the timestamp of the first sample from rrd file"
    },
    {
        "href": "function.rrd-graph.php",
        "name": "rrd_graph",
        "description": "Creates image from a data"
    },
    {
        "href": "function.rrd-info.php",
        "name": "rrd_info",
        "description": "Gets information about rrd file"
    },
    {
        "href": "function.rrd-last.php",
        "name": "rrd_last",
        "description": "Gets unix timestamp of the last sample"
    },
    {
        "href": "function.rrd-lastupdate.php",
        "name": "rrd_lastupdate",
        "description": "Gets information about last updated data"
    },
    {
        "href": "function.rrd-restore.php",
        "name": "rrd_restore",
        "description": "Restores the RRD file from XML dump"
    },
    {
        "href": "function.rrd-tune.php",
        "name": "rrd_tune",
        "description": "Tunes some RRD database file header options"
    },
    {
        "href": "function.rrd-update.php",
        "name": "rrd_update",
        "description": "Updates the RRD database"
    },
    {
        "href": "function.rrd-version.php",
        "name": "rrd_version",
        "description": "Gets information about underlying rrdtool library"
    },
    {
        "href": "function.rrd-xport.php",
        "name": "rrd_xport",
        "description": "Exports the information about RRD database"
    },
    {
        "href": "function.rsort.php",
        "name": "rsort",
        "description": "Sort an array in descending order"
    },
    {
        "href": "function.rtrim.php",
        "name": "rtrim",
        "description": "Strip whitespace (or other characters) from the end of a string"
    },
    {
        "href": "function.runkit7-constant-add.php",
        "name": "runkit7_constant_add",
        "description": "Similar to define(), but allows defining in class definitions as well"
    },
    {
        "href": "function.runkit7-constant-redefine.php",
        "name": "runkit7_constant_redefine",
        "description": "Redefine an already defined constant"
    },
    {
        "href": "function.runkit7-constant-remove.php",
        "name": "runkit7_constant_remove",
        "description": "Remove/Delete an already defined constant"
    },
    {
        "href": "function.runkit7-function-add.php",
        "name": "runkit7_function_add",
        "description": "Add a new function, similar to create_function"
    },
    {
        "href": "function.runkit7-function-copy.php",
        "name": "runkit7_function_copy",
        "description": "Copy a function to a new function name"
    },
    {
        "href": "function.runkit7-function-redefine.php",
        "name": "runkit7_function_redefine",
        "description": "Replace a function definition with a new implementation"
    },
    {
        "href": "function.runkit7-function-remove.php",
        "name": "runkit7_function_remove",
        "description": "Remove a function definition"
    },
    {
        "href": "function.runkit7-function-rename.php",
        "name": "runkit7_function_rename",
        "description": "Change a function's name"
    },
    {
        "href": "function.runkit7-import.php",
        "name": "runkit7_import",
        "description": "Process a PHP file importing function and class definitions, overwriting where appropriate"
    },
    {
        "href": "function.runkit7-method-add.php",
        "name": "runkit7_method_add",
        "description": "Dynamically adds a new method to a given class"
    },
    {
        "href": "function.runkit7-method-copy.php",
        "name": "runkit7_method_copy",
        "description": "Copies a method from class to another"
    },
    {
        "href": "function.runkit7-method-redefine.php",
        "name": "runkit7_method_redefine",
        "description": "Dynamically changes the code of the given method"
    },
    {
        "href": "function.runkit7-method-remove.php",
        "name": "runkit7_method_remove",
        "description": "Dynamically removes the given method"
    },
    {
        "href": "function.runkit7-method-rename.php",
        "name": "runkit7_method_rename",
        "description": "Dynamically changes the name of the given method"
    },
    {
        "href": "function.runkit7-object-id.php",
        "name": "runkit7_object_id",
        "description": "Return the integer object handle for given object"
    },
    {
        "href": "function.runkit7-superglobals.php",
        "name": "runkit7_superglobals",
        "description": "Return numerically indexed array of registered superglobals"
    },
    {
        "href": "function.runkit7-zval-inspect.php",
        "name": "runkit7_zval_inspect",
        "description": "Returns information about the passed in value with data types, reference counts, etc"
    },
    {
        "href": "function.sapi-windows-cp-conv.php",
        "name": "sapi_windows_cp_conv",
        "description": "Convert string from one codepage to another"
    },
    {
        "href": "function.sapi-windows-cp-get.php",
        "name": "sapi_windows_cp_get",
        "description": "Get current codepage"
    },
    {
        "href": "function.sapi-windows-cp-is-utf8.php",
        "name": "sapi_windows_cp_is_utf8",
        "description": "Indicates whether the codepage is UTF-8 compatible"
    },
    {
        "href": "function.sapi-windows-cp-set.php",
        "name": "sapi_windows_cp_set",
        "description": "Set process codepage"
    },
    {
        "href": "function.sapi-windows-generate-ctrl-event.php",
        "name": "sapi_windows_generate_ctrl_event",
        "description": "Send a CTRL event to another process"
    },
    {
        "href": "function.sapi-windows-set-ctrl-handler.php",
        "name": "sapi_windows_set_ctrl_handler",
        "description": "Set or remove a CTRL event handler"
    },
    {
        "href": "function.sapi-windows-vt100-support.php",
        "name": "sapi_windows_vt100_support",
        "description": "Get or set VT100 support for the specified stream associated to an output buffer of a Windows console."
    },
    {
        "href": "function.scandir.php",
        "name": "scandir",
        "description": "List files and directories inside the specified path"
    },
    {
        "href": "mysql-xdevapi-schema.createcollection.php",
        "name": "Schema::createCollection",
        "description": "Add collection to schema"
    },
    {
        "href": "mysql-xdevapi-schema.dropcollection.php",
        "name": "Schema::dropCollection",
        "description": "Drop collection from schema"
    },
    {
        "href": "mysql-xdevapi-schema.existsindatabase.php",
        "name": "Schema::existsInDatabase",
        "description": "Check if exists in database"
    },
    {
        "href": "mysql-xdevapi-schema.getcollection.php",
        "name": "Schema::getCollection",
        "description": "Get collection from schema"
    },
    {
        "href": "mysql-xdevapi-schema.getcollectionastable.php",
        "name": "Schema::getCollectionAsTable",
        "description": "Get collection table object"
    },
    {
        "href": "mysql-xdevapi-schema.getcollections.php",
        "name": "Schema::getCollections",
        "description": "Get all schema collections"
    },
    {
        "href": "mysql-xdevapi-schema.getname.php",
        "name": "Schema::getName",
        "description": "Get schema name"
    },
    {
        "href": "mysql-xdevapi-schema.getsession.php",
        "name": "Schema::getSession",
        "description": "Get schema session"
    },
    {
        "href": "mysql-xdevapi-schema.gettable.php",
        "name": "Schema::getTable",
        "description": "Get schema table"
    },
    {
        "href": "mysql-xdevapi-schema.gettables.php",
        "name": "Schema::getTables",
        "description": "Get schema tables"
    },
    {
        "href": "mysql-xdevapi-schema.construct.php",
        "name": "Schema::__construct",
        "description": "constructor"
    },
    {
        "href": "mysql-xdevapi-schemaobject.getschema.php",
        "name": "SchemaObject::getSchema",
        "description": "Get schema object"
    },
    {
        "href": "function.scoutapm-get-calls.php",
        "name": "scoutapm_get_calls",
        "description": "Returns a list of instrumented calls that have occurred"
    },
    {
        "href": "function.scoutapm-list-instrumented-functions.php",
        "name": "scoutapm_list_instrumented_functions",
        "description": "List functions scoutapm will instrument."
    },
    {
        "href": "seaslog.alert.php",
        "name": "SeasLog::alert",
        "description": "Record alert log information"
    },
    {
        "href": "seaslog.analyzercount.php",
        "name": "SeasLog::analyzerCount",
        "description": "Get log count by level, log_path and key_word"
    },
    {
        "href": "seaslog.analyzerdetail.php",
        "name": "SeasLog::analyzerDetail",
        "description": "Get log detail by level, log_path, key_word, start, limit, order"
    },
    {
        "href": "seaslog.closeloggerstream.php",
        "name": "SeasLog::closeLoggerStream",
        "description": "Manually release stream flow from logger"
    },
    {
        "href": "seaslog.critical.php",
        "name": "SeasLog::critical",
        "description": "Record critical log information"
    },
    {
        "href": "seaslog.debug.php",
        "name": "SeasLog::debug",
        "description": "Record debug log information"
    },
    {
        "href": "seaslog.emergency.php",
        "name": "SeasLog::emergency",
        "description": "Record emergency log information"
    },
    {
        "href": "seaslog.error.php",
        "name": "SeasLog::error",
        "description": "Record error log information"
    },
    {
        "href": "seaslog.flushbuffer.php",
        "name": "SeasLog::flushBuffer",
        "description": "Flush logs buffer, dump to appender file, or send to remote api with tcp/udp"
    },
    {
        "href": "seaslog.getbasepath.php",
        "name": "SeasLog::getBasePath",
        "description": "Get SeasLog base path."
    },
    {
        "href": "seaslog.getbuffer.php",
        "name": "SeasLog::getBuffer",
        "description": "Get the logs buffer in memory as array"
    },
    {
        "href": "seaslog.getbufferenabled.php",
        "name": "SeasLog::getBufferEnabled",
        "description": "Determin if buffer enabled"
    },
    {
        "href": "seaslog.getdatetimeformat.php",
        "name": "SeasLog::getDatetimeFormat",
        "description": "Get SeasLog datetime format style"
    },
    {
        "href": "seaslog.getlastlogger.php",
        "name": "SeasLog::getLastLogger",
        "description": "Get SeasLog last logger path"
    },
    {
        "href": "seaslog.getrequestid.php",
        "name": "SeasLog::getRequestID",
        "description": "Get SeasLog request_id differentiated requests"
    },
    {
        "href": "seaslog.getrequestvariable.php",
        "name": "SeasLog::getRequestVariable",
        "description": "Get SeasLog request variable"
    },
    {
        "href": "seaslog.info.php",
        "name": "SeasLog::info",
        "description": "Record info log information"
    },
    {
        "href": "seaslog.log.php",
        "name": "SeasLog::log",
        "description": "The Common Record Log Function"
    },
    {
        "href": "seaslog.notice.php",
        "name": "SeasLog::notice",
        "description": "Record notice log information"
    },
    {
        "href": "seaslog.setbasepath.php",
        "name": "SeasLog::setBasePath",
        "description": "Set SeasLog base path"
    },
    {
        "href": "seaslog.setdatetimeformat.php",
        "name": "SeasLog::setDatetimeFormat",
        "description": "Set SeasLog datetime format style"
    },
    {
        "href": "seaslog.setlogger.php",
        "name": "SeasLog::setLogger",
        "description": "Set SeasLog logger name"
    },
    {
        "href": "seaslog.setrequestid.php",
        "name": "SeasLog::setRequestID",
        "description": "Set SeasLog request_id differentiated requests"
    },
    {
        "href": "seaslog.setrequestvariable.php",
        "name": "SeasLog::setRequestVariable",
        "description": "Manually set SeasLog request variable"
    },
    {
        "href": "seaslog.warning.php",
        "name": "SeasLog::warning",
        "description": "Record warning log information"
    },
    {
        "href": "seaslog.construct.php",
        "name": "SeasLog::__construct",
        "description": "Description"
    },
    {
        "href": "seaslog.destruct.php",
        "name": "SeasLog::__destruct",
        "description": "Description"
    },
    {
        "href": "function.seaslog-get-author.php",
        "name": "seaslog_get_author",
        "description": "Get SeasLog author."
    },
    {
        "href": "function.seaslog-get-version.php",
        "name": "seaslog_get_version",
        "description": "Get SeasLog version."
    },
    {
        "href": "seekableiterator.seek.php",
        "name": "SeekableIterator::seek",
        "description": "Seeks to a position"
    },
    {
        "href": "function.sem-acquire.php",
        "name": "sem_acquire",
        "description": "Acquire a semaphore"
    },
    {
        "href": "function.sem-get.php",
        "name": "sem_get",
        "description": "Get a semaphore id"
    },
    {
        "href": "function.sem-release.php",
        "name": "sem_release",
        "description": "Release a semaphore"
    },
    {
        "href": "function.sem-remove.php",
        "name": "sem_remove",
        "description": "Remove a semaphore"
    },
    {
        "href": "serializable.serialize.php",
        "name": "Serializable::serialize",
        "description": "String representation of object"
    },
    {
        "href": "serializable.unserialize.php",
        "name": "Serializable::unserialize",
        "description": "Constructs the object"
    },
    {
        "href": "function.serialize.php",
        "name": "serialize",
        "description": "Generates a storable representation of a value"
    },
    {
        "href": "mysql-xdevapi-session.close.php",
        "name": "Session::close",
        "description": "Close session"
    },
    {
        "href": "mysql-xdevapi-session.createschema.php",
        "name": "Session::createSchema",
        "description": "Create new schema"
    },
    {
        "href": "mysql-xdevapi-session.dropschema.php",
        "name": "Session::dropSchema",
        "description": "Drop a schema"
    },
    {
        "href": "mysql-xdevapi-session.generateuuid.php",
        "name": "Session::generateUUID",
        "description": "Get new UUID"
    },
    {
        "href": "mysql-xdevapi-session.getdefaultschema.php",
        "name": "Session::getDefaultSchema",
        "description": "Get default schema name"
    },
    {
        "href": "mysql-xdevapi-session.getschema.php",
        "name": "Session::getSchema",
        "description": "Get a new schema object"
    },
    {
        "href": "mysql-xdevapi-session.getschemas.php",
        "name": "Session::getSchemas",
        "description": "Get the schemas"
    },
    {
        "href": "mysql-xdevapi-session.getserverversion.php",
        "name": "Session::getServerVersion",
        "description": "Get server version"
    },
    {
        "href": "mysql-xdevapi-session.listclients.php",
        "name": "Session::listClients",
        "description": "Get client list"
    },
    {
        "href": "mysql-xdevapi-session.quotename.php",
        "name": "Session::quoteName",
        "description": "Add quotes"
    },
    {
        "href": "mysql-xdevapi-session.releasesavepoint.php",
        "name": "Session::releaseSavepoint",
        "description": "Release set savepoint"
    },
    {
        "href": "mysql-xdevapi-session.rollback.php",
        "name": "Session::rollback",
        "description": "Rollback transaction"
    },
    {
        "href": "mysql-xdevapi-session.rollbackto.php",
        "name": "Session::rollbackTo",
        "description": "Rollback transaction to savepoint"
    },
    {
        "href": "mysql-xdevapi-session.setsavepoint.php",
        "name": "Session::setSavepoint",
        "description": "Create savepoint"
    },
    {
        "href": "mysql-xdevapi-session.sql.php",
        "name": "Session::sql",
        "description": "Execute SQL query"
    },
    {
        "href": "mysql-xdevapi-session.starttransaction.php",
        "name": "Session::startTransaction",
        "description": "Start transaction"
    },
    {
        "href": "mysql-xdevapi-session.construct.php",
        "name": "Session::__construct",
        "description": "Description constructor"
    },
    {
        "href": "sessionhandler.close.php",
        "name": "SessionHandler::close",
        "description": "Close the session"
    },
    {
        "href": "sessionhandler.create-sid.php",
        "name": "SessionHandler::create_sid",
        "description": "Return a new session ID"
    },
    {
        "href": "sessionhandler.destroy.php",
        "name": "SessionHandler::destroy",
        "description": "Destroy a session"
    },
    {
        "href": "sessionhandler.gc.php",
        "name": "SessionHandler::gc",
        "description": "Cleanup old sessions"
    },
    {
        "href": "sessionhandler.open.php",
        "name": "SessionHandler::open",
        "description": "Initialize session"
    },
    {
        "href": "sessionhandler.read.php",
        "name": "SessionHandler::read",
        "description": "Read session data"
    },
    {
        "href": "sessionhandler.write.php",
        "name": "SessionHandler::write",
        "description": "Write session data"
    },
    {
        "href": "sessionhandlerinterface.close.php",
        "name": "SessionHandlerInterface::close",
        "description": "Close the session"
    },
    {
        "href": "sessionhandlerinterface.destroy.php",
        "name": "SessionHandlerInterface::destroy",
        "description": "Destroy a session"
    },
    {
        "href": "sessionhandlerinterface.gc.php",
        "name": "SessionHandlerInterface::gc",
        "description": "Cleanup old sessions"
    },
    {
        "href": "sessionhandlerinterface.open.php",
        "name": "SessionHandlerInterface::open",
        "description": "Initialize session"
    },
    {
        "href": "sessionhandlerinterface.read.php",
        "name": "SessionHandlerInterface::read",
        "description": "Read session data"
    },
    {
        "href": "sessionhandlerinterface.write.php",
        "name": "SessionHandlerInterface::write",
        "description": "Write session data"
    },
    {
        "href": "sessionidinterface.create-sid.php",
        "name": "SessionIdInterface::create_sid",
        "description": "Create session ID"
    },
    {
        "href": "sessionupdatetimestamphandlerinterface.updatetimestamp.php",
        "name": "SessionUpdateTimestampHandlerInterface::updateTimestamp",
        "description": "Update timestamp"
    },
    {
        "href": "sessionupdatetimestamphandlerinterface.validateid.php",
        "name": "SessionUpdateTimestampHandlerInterface::validateId",
        "description": "Validate ID"
    },
    {
        "href": "function.session-abort.php",
        "name": "session_abort",
        "description": "Discard session array changes and finish session"
    },
    {
        "href": "function.session-cache-expire.php",
        "name": "session_cache_expire",
        "description": "Get and/or set current cache expire"
    },
    {
        "href": "function.session-cache-limiter.php",
        "name": "session_cache_limiter",
        "description": "Get and/or set the current cache limiter"
    },
    {
        "href": "function.session-commit.php",
        "name": "session_commit",
        "description": "Alias of session_write_close"
    },
    {
        "href": "function.session-create-id.php",
        "name": "session_create_id",
        "description": "Create new session id"
    },
    {
        "href": "function.session-decode.php",
        "name": "session_decode",
        "description": "Decodes session data from a session encoded string"
    },
    {
        "href": "function.session-destroy.php",
        "name": "session_destroy",
        "description": "Destroys all data registered to a session"
    },
    {
        "href": "function.session-encode.php",
        "name": "session_encode",
        "description": "Encodes the current session data as a session encoded string"
    },
    {
        "href": "function.session-gc.php",
        "name": "session_gc",
        "description": "Perform session data garbage collection"
    },
    {
        "href": "function.session-get-cookie-params.php",
        "name": "session_get_cookie_params",
        "description": "Get the session cookie parameters"
    },
    {
        "href": "function.session-id.php",
        "name": "session_id",
        "description": "Get and/or set the current session id"
    },
    {
        "href": "function.session-module-name.php",
        "name": "session_module_name",
        "description": "Get and/or set the current session module"
    },
    {
        "href": "function.session-name.php",
        "name": "session_name",
        "description": "Get and/or set the current session name"
    },
    {
        "href": "function.session-regenerate-id.php",
        "name": "session_regenerate_id",
        "description": "Update the current session id with a newly generated one"
    },
    {
        "href": "function.session-register-shutdown.php",
        "name": "session_register_shutdown",
        "description": "Session shutdown function"
    },
    {
        "href": "function.session-reset.php",
        "name": "session_reset",
        "description": "Re-initialize session array with original values"
    },
    {
        "href": "function.session-save-path.php",
        "name": "session_save_path",
        "description": "Get and/or set the current session save path"
    },
    {
        "href": "function.session-set-cookie-params.php",
        "name": "session_set_cookie_params",
        "description": "Set the session cookie parameters"
    },
    {
        "href": "function.session-set-save-handler.php",
        "name": "session_set_save_handler",
        "description": "Sets user-level session storage functions"
    },
    {
        "href": "function.session-start.php",
        "name": "session_start",
        "description": "Start new or resume existing session"
    },
    {
        "href": "function.session-status.php",
        "name": "session_status",
        "description": "Returns the current session status"
    },
    {
        "href": "function.session-unset.php",
        "name": "session_unset",
        "description": "Free all session variables"
    },
    {
        "href": "function.session-write-close.php",
        "name": "session_write_close",
        "description": "Write session data and end session"
    },
    {
        "href": "function.setcookie.php",
        "name": "setcookie",
        "description": "Send a cookie"
    },
    {
        "href": "function.setlocale.php",
        "name": "setlocale",
        "description": "Set locale information"
    },
    {
        "href": "function.setrawcookie.php",
        "name": "setrawcookie",
        "description": "Send a cookie without urlencoding the cookie value"
    },
    {
        "href": "function.settype.php",
        "name": "settype",
        "description": "Set the type of a variable"
    },
    {
        "href": "function.set-error-handler.php",
        "name": "set_error_handler",
        "description": "Sets a user-defined error handler function"
    },
    {
        "href": "function.set-exception-handler.php",
        "name": "set_exception_handler",
        "description": "Sets a user-defined exception handler function"
    },
    {
        "href": "function.set-file-buffer.php",
        "name": "set_file_buffer",
        "description": "Alias of stream_set_write_buffer"
    },
    {
        "href": "function.set-include-path.php",
        "name": "set_include_path",
        "description": "Sets the include_path configuration option"
    },
    {
        "href": "function.set-time-limit.php",
        "name": "set_time_limit",
        "description": "Limits the maximum execution time"
    },
    {
        "href": "function.sha1.php",
        "name": "sha1",
        "description": "Calculate the sha1 hash of a string"
    },
    {
        "href": "function.sha1-file.php",
        "name": "sha1_file",
        "description": "Calculate the sha1 hash of a file"
    },
    {
        "href": "function.shell-exec.php",
        "name": "shell_exec",
        "description": "Execute command via shell and return the complete output as a string"
    },
    {
        "href": "function.shmop-close.php",
        "name": "shmop_close",
        "description": "Close shared memory block"
    },
    {
        "href": "function.shmop-delete.php",
        "name": "shmop_delete",
        "description": "Delete shared memory block"
    },
    {
        "href": "function.shmop-open.php",
        "name": "shmop_open",
        "description": "Create or open shared memory block"
    },
    {
        "href": "function.shmop-read.php",
        "name": "shmop_read",
        "description": "Read data from shared memory block"
    },
    {
        "href": "function.shmop-size.php",
        "name": "shmop_size",
        "description": "Get size of shared memory block"
    },
    {
        "href": "function.shmop-write.php",
        "name": "shmop_write",
        "description": "Write data into shared memory block"
    },
    {
        "href": "function.shm-attach.php",
        "name": "shm_attach",
        "description": "Creates or open a shared memory segment"
    },
    {
        "href": "function.shm-detach.php",
        "name": "shm_detach",
        "description": "Disconnects from shared memory segment"
    },
    {
        "href": "function.shm-get-var.php",
        "name": "shm_get_var",
        "description": "Returns a variable from shared memory"
    },
    {
        "href": "function.shm-has-var.php",
        "name": "shm_has_var",
        "description": "Check whether a specific entry exists"
    },
    {
        "href": "function.shm-put-var.php",
        "name": "shm_put_var",
        "description": "Inserts or updates a variable in shared memory"
    },
    {
        "href": "function.shm-remove.php",
        "name": "shm_remove",
        "description": "Removes shared memory from Unix systems"
    },
    {
        "href": "function.shm-remove-var.php",
        "name": "shm_remove_var",
        "description": "Removes a variable from shared memory"
    },
    {
        "href": "function.show-source.php",
        "name": "show_source",
        "description": "Alias of highlight_file"
    },
    {
        "href": "function.shuffle.php",
        "name": "shuffle",
        "description": "Shuffle an array"
    },
    {
        "href": "function.similar-text.php",
        "name": "similar_text",
        "description": "Calculate the similarity between two strings"
    },
    {
        "href": "simplexmlelement.addattribute.php",
        "name": "SimpleXMLElement::addAttribute",
        "description": "Adds an attribute to the SimpleXML element"
    },
    {
        "href": "simplexmlelement.addchild.php",
        "name": "SimpleXMLElement::addChild",
        "description": "Adds a child element to the XML node"
    },
    {
        "href": "simplexmlelement.asxml.php",
        "name": "SimpleXMLElement::asXML",
        "description": "Return a well-formed XML string based on SimpleXML element"
    },
    {
        "href": "simplexmlelement.attributes.php",
        "name": "SimpleXMLElement::attributes",
        "description": "Identifies an element's attributes"
    },
    {
        "href": "simplexmlelement.children.php",
        "name": "SimpleXMLElement::children",
        "description": "Finds children of given node"
    },
    {
        "href": "simplexmlelement.count.php",
        "name": "SimpleXMLElement::count",
        "description": "Counts the children of an element"
    },
    {
        "href": "simplexmlelement.getdocnamespaces.php",
        "name": "SimpleXMLElement::getDocNamespaces",
        "description": "Returns namespaces declared in document"
    },
    {
        "href": "simplexmlelement.getname.php",
        "name": "SimpleXMLElement::getName",
        "description": "Gets the name of the XML element"
    },
    {
        "href": "simplexmlelement.getnamespaces.php",
        "name": "SimpleXMLElement::getNamespaces",
        "description": "Returns namespaces used in document"
    },
    {
        "href": "simplexmlelement.registerxpathnamespace.php",
        "name": "SimpleXMLElement::registerXPathNamespace",
        "description": "Creates a prefix/ns context for the next XPath query"
    },
    {
        "href": "simplexmlelement.savexml.php",
        "name": "SimpleXMLElement::saveXML",
        "description": "Alias of SimpleXMLElement::asXML"
    },
    {
        "href": "simplexmlelement.xpath.php",
        "name": "SimpleXMLElement::xpath",
        "description": "Runs XPath query on XML data"
    },
    {
        "href": "simplexmlelement.construct.php",
        "name": "SimpleXMLElement::__construct",
        "description": "Creates a new SimpleXMLElement object"
    },
    {
        "href": "simplexmlelement.tostring.php",
        "name": "SimpleXMLElement::__toString",
        "description": "Returns the string content"
    },
    {
        "href": "simplexmliterator.current.php",
        "name": "SimpleXMLIterator::current",
        "description": "Returns the current element"
    },
    {
        "href": "simplexmliterator.getchildren.php",
        "name": "SimpleXMLIterator::getChildren",
        "description": "Returns the sub-elements of the current element"
    },
    {
        "href": "simplexmliterator.haschildren.php",
        "name": "SimpleXMLIterator::hasChildren",
        "description": "Checks whether the current element has sub elements"
    },
    {
        "href": "simplexmliterator.key.php",
        "name": "SimpleXMLIterator::key",
        "description": "Return current key"
    },
    {
        "href": "simplexmliterator.next.php",
        "name": "SimpleXMLIterator::next",
        "description": "Move to next element"
    },
    {
        "href": "simplexmliterator.rewind.php",
        "name": "SimpleXMLIterator::rewind",
        "description": "Rewind to the first element"
    },
    {
        "href": "simplexmliterator.valid.php",
        "name": "SimpleXMLIterator::valid",
        "description": "Check whether the current element is valid"
    },
    {
        "href": "function.simplexml-import-dom.php",
        "name": "simplexml_import_dom",
        "description": "Get a SimpleXMLElement object from a DOM node"
    },
    {
        "href": "function.simplexml-load-file.php",
        "name": "simplexml_load_file",
        "description": "Interprets an XML file into an object"
    },
    {
        "href": "function.simplexml-load-string.php",
        "name": "simplexml_load_string",
        "description": "Interprets a string of XML into an object"
    },
    {
        "href": "function.sin.php",
        "name": "sin",
        "description": "Sine"
    },
    {
        "href": "function.sinh.php",
        "name": "sinh",
        "description": "Hyperbolic sine"
    },
    {
        "href": "function.sizeof.php",
        "name": "sizeof",
        "description": "Alias of count"
    },
    {
        "href": "function.sleep.php",
        "name": "sleep",
        "description": "Delay execution"
    },
    {
        "href": "function.snmp2-get.php",
        "name": "snmp2_get",
        "description": "Fetch an SNMP object"
    },
    {
        "href": "function.snmp2-getnext.php",
        "name": "snmp2_getnext",
        "description": "Fetch the SNMP object which follows the given object id"
    },
    {
        "href": "function.snmp2-real-walk.php",
        "name": "snmp2_real_walk",
        "description": "Return all objects including their respective object ID within the specified one"
    },
    {
        "href": "function.snmp2-set.php",
        "name": "snmp2_set",
        "description": "Set the value of an SNMP object"
    },
    {
        "href": "function.snmp2-walk.php",
        "name": "snmp2_walk",
        "description": "Fetch all the SNMP objects from an agent"
    },
    {
        "href": "function.snmp3-get.php",
        "name": "snmp3_get",
        "description": "Fetch an SNMP object"
    },
    {
        "href": "function.snmp3-getnext.php",
        "name": "snmp3_getnext",
        "description": "Fetch the SNMP object which follows the given object id"
    },
    {
        "href": "function.snmp3-real-walk.php",
        "name": "snmp3_real_walk",
        "description": "Return all objects including their respective object ID within the specified one"
    },
    {
        "href": "function.snmp3-set.php",
        "name": "snmp3_set",
        "description": "Set the value of an SNMP object"
    },
    {
        "href": "function.snmp3-walk.php",
        "name": "snmp3_walk",
        "description": "Fetch all the SNMP objects from an agent"
    },
    {
        "href": "snmp.close.php",
        "name": "SNMP::close",
        "description": "Close SNMP session"
    },
    {
        "href": "snmp.get.php",
        "name": "SNMP::get",
        "description": "Fetch an SNMP object"
    },
    {
        "href": "snmp.geterrno.php",
        "name": "SNMP::getErrno",
        "description": "Get last error code"
    },
    {
        "href": "snmp.geterror.php",
        "name": "SNMP::getError",
        "description": "Get last error message"
    },
    {
        "href": "snmp.getnext.php",
        "name": "SNMP::getnext",
        "description": "Fetch an SNMP object which  follows the given object id"
    },
    {
        "href": "snmp.set.php",
        "name": "SNMP::set",
        "description": "Set the value of an SNMP object"
    },
    {
        "href": "snmp.setsecurity.php",
        "name": "SNMP::setSecurity",
        "description": "Configures security-related SNMPv3 session parameters"
    },
    {
        "href": "snmp.walk.php",
        "name": "SNMP::walk",
        "description": "Fetch SNMP object subtree"
    },
    {
        "href": "snmp.construct.php",
        "name": "SNMP::__construct",
        "description": "Creates SNMP instance representing session to remote SNMP agent"
    },
    {
        "href": "function.snmpget.php",
        "name": "snmpget",
        "description": "Fetch an SNMP object"
    },
    {
        "href": "function.snmpgetnext.php",
        "name": "snmpgetnext",
        "description": "Fetch the SNMP object which follows the given object id"
    },
    {
        "href": "function.snmprealwalk.php",
        "name": "snmprealwalk",
        "description": "Return all objects including their respective object ID within the specified one"
    },
    {
        "href": "function.snmpset.php",
        "name": "snmpset",
        "description": "Set the value of an SNMP object"
    },
    {
        "href": "function.snmpwalk.php",
        "name": "snmpwalk",
        "description": "Fetch all the SNMP objects from an agent"
    },
    {
        "href": "function.snmpwalkoid.php",
        "name": "snmpwalkoid",
        "description": "Query for a tree of information about a network entity"
    },
    {
        "href": "function.snmp-get-quick-print.php",
        "name": "snmp_get_quick_print",
        "description": "Fetches the current value of the NET-SNMP library's quick_print setting"
    },
    {
        "href": "function.snmp-get-valueretrieval.php",
        "name": "snmp_get_valueretrieval",
        "description": "Return the method how the SNMP values will be returned"
    },
    {
        "href": "function.snmp-read-mib.php",
        "name": "snmp_read_mib",
        "description": "Reads and parses a MIB file into the active MIB tree"
    },
    {
        "href": "function.snmp-set-enum-print.php",
        "name": "snmp_set_enum_print",
        "description": "Return all values that are enums with their enum value instead of the raw integer"
    },
    {
        "href": "function.snmp-set-oid-numeric-print.php",
        "name": "snmp_set_oid_numeric_print",
        "description": "Set the OID output format"
    },
    {
        "href": "function.snmp-set-oid-output-format.php",
        "name": "snmp_set_oid_output_format",
        "description": "Set the OID output format"
    },
    {
        "href": "function.snmp-set-quick-print.php",
        "name": "snmp_set_quick_print",
        "description": "Set the value of enable within the NET-SNMP library"
    },
    {
        "href": "function.snmp-set-valueretrieval.php",
        "name": "snmp_set_valueretrieval",
        "description": "Specify the method how the SNMP values will be returned"
    },
    {
        "href": "soapclient.call.php",
        "name": "SoapClient::__call",
        "description": "Calls a SOAP function (deprecated)"
    },
    {
        "href": "soapclient.construct.php",
        "name": "SoapClient::__construct",
        "description": "SoapClient constructor"
    },
    {
        "href": "soapclient.dorequest.php",
        "name": "SoapClient::__doRequest",
        "description": "Performs a SOAP request"
    },
    {
        "href": "soapclient.getcookies.php",
        "name": "SoapClient::__getCookies",
        "description": "Get list of cookies"
    },
    {
        "href": "soapclient.getfunctions.php",
        "name": "SoapClient::__getFunctions",
        "description": "Returns list of available SOAP functions"
    },
    {
        "href": "soapclient.getlastrequest.php",
        "name": "SoapClient::__getLastRequest",
        "description": "Returns last SOAP request"
    },
    {
        "href": "soapclient.getlastrequestheaders.php",
        "name": "SoapClient::__getLastRequestHeaders",
        "description": "Returns the SOAP headers from the last request"
    },
    {
        "href": "soapclient.getlastresponse.php",
        "name": "SoapClient::__getLastResponse",
        "description": "Returns last SOAP response"
    },
    {
        "href": "soapclient.getlastresponseheaders.php",
        "name": "SoapClient::__getLastResponseHeaders",
        "description": "Returns the SOAP headers from the last response"
    },
    {
        "href": "soapclient.gettypes.php",
        "name": "SoapClient::__getTypes",
        "description": "Returns a list of SOAP types"
    },
    {
        "href": "soapclient.setcookie.php",
        "name": "SoapClient::__setCookie",
        "description": "Defines a cookie for SOAP requests"
    },
    {
        "href": "soapclient.setlocation.php",
        "name": "SoapClient::__setLocation",
        "description": "Sets the location of the Web service to use"
    },
    {
        "href": "soapclient.setsoapheaders.php",
        "name": "SoapClient::__setSoapHeaders",
        "description": "Sets SOAP headers for subsequent calls"
    },
    {
        "href": "soapclient.soapcall.php",
        "name": "SoapClient::__soapCall",
        "description": "Calls a SOAP function"
    },
    {
        "href": "soapfault.construct.php",
        "name": "SoapFault::__construct",
        "description": "SoapFault constructor"
    },
    {
        "href": "soapfault.tostring.php",
        "name": "SoapFault::__toString",
        "description": "Obtain a string representation of a SoapFault"
    },
    {
        "href": "soapheader.construct.php",
        "name": "SoapHeader::__construct",
        "description": "SoapHeader constructor"
    },
    {
        "href": "soapparam.construct.php",
        "name": "SoapParam::__construct",
        "description": "SoapParam constructor"
    },
    {
        "href": "soapserver.addfunction.php",
        "name": "SoapServer::addFunction",
        "description": "Adds one or more functions to handle SOAP requests"
    },
    {
        "href": "soapserver.addsoapheader.php",
        "name": "SoapServer::addSoapHeader",
        "description": "Add a SOAP header to the response"
    },
    {
        "href": "soapserver.fault.php",
        "name": "SoapServer::fault",
        "description": "Issue SoapServer fault indicating an error"
    },
    {
        "href": "soapserver.getfunctions.php",
        "name": "SoapServer::getFunctions",
        "description": "Returns list of defined functions"
    },
    {
        "href": "soapserver.handle.php",
        "name": "SoapServer::handle",
        "description": "Handles a SOAP request"
    },
    {
        "href": "soapserver.setclass.php",
        "name": "SoapServer::setClass",
        "description": "Sets the class which handles SOAP requests"
    },
    {
        "href": "soapserver.setobject.php",
        "name": "SoapServer::setObject",
        "description": "Sets the object which will be used to handle SOAP requests"
    },
    {
        "href": "soapserver.setpersistence.php",
        "name": "SoapServer::setPersistence",
        "description": "Sets SoapServer persistence mode"
    },
    {
        "href": "soapserver.construct.php",
        "name": "SoapServer::__construct",
        "description": "SoapServer constructor"
    },
    {
        "href": "soapvar.construct.php",
        "name": "SoapVar::__construct",
        "description": "SoapVar constructor"
    },
    {
        "href": "context.socket.php",
        "name": "Socket context options",
        "description": "Socket context option listing"
    },
    {
        "href": "function.socket-accept.php",
        "name": "socket_accept",
        "description": "Accepts a connection on a socket"
    },
    {
        "href": "function.socket-addrinfo-bind.php",
        "name": "socket_addrinfo_bind",
        "description": "Create and bind to a socket from a given addrinfo"
    },
    {
        "href": "function.socket-addrinfo-connect.php",
        "name": "socket_addrinfo_connect",
        "description": "Create and connect to a socket from a given addrinfo"
    },
    {
        "href": "function.socket-addrinfo-explain.php",
        "name": "socket_addrinfo_explain",
        "description": "Get information about addrinfo"
    },
    {
        "href": "function.socket-addrinfo-lookup.php",
        "name": "socket_addrinfo_lookup",
        "description": "Get array with contents of getaddrinfo about the given hostname"
    },
    {
        "href": "function.socket-bind.php",
        "name": "socket_bind",
        "description": "Binds a name to a socket"
    },
    {
        "href": "function.socket-clear-error.php",
        "name": "socket_clear_error",
        "description": "Clears the error on the socket or the last error code"
    },
    {
        "href": "function.socket-close.php",
        "name": "socket_close",
        "description": "Closes a Socket instance"
    },
    {
        "href": "function.socket-cmsg-space.php",
        "name": "socket_cmsg_space",
        "description": "Calculate message buffer size"
    },
    {
        "href": "function.socket-connect.php",
        "name": "socket_connect",
        "description": "Initiates a connection on a socket"
    },
    {
        "href": "function.socket-create.php",
        "name": "socket_create",
        "description": "Create a socket (endpoint for communication)"
    },
    {
        "href": "function.socket-create-listen.php",
        "name": "socket_create_listen",
        "description": "Opens a socket on port to accept connections"
    },
    {
        "href": "function.socket-create-pair.php",
        "name": "socket_create_pair",
        "description": "Creates a pair of indistinguishable sockets and stores them in an array"
    },
    {
        "href": "function.socket-export-stream.php",
        "name": "socket_export_stream",
        "description": "Export a socket into a stream that encapsulates a socket"
    },
    {
        "href": "function.socket-getopt.php",
        "name": "socket_getopt",
        "description": "Alias of socket_get_option"
    },
    {
        "href": "function.socket-getpeername.php",
        "name": "socket_getpeername",
        "description": "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
    },
    {
        "href": "function.socket-getsockname.php",
        "name": "socket_getsockname",
        "description": "Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
    },
    {
        "href": "function.socket-get-option.php",
        "name": "socket_get_option",
        "description": "Gets socket options for the socket"
    },
    {
        "href": "function.socket-get-status.php",
        "name": "socket_get_status",
        "description": "Alias of stream_get_meta_data"
    },
    {
        "href": "function.socket-import-stream.php",
        "name": "socket_import_stream",
        "description": "Import a stream"
    },
    {
        "href": "function.socket-last-error.php",
        "name": "socket_last_error",
        "description": "Returns the last error on the socket"
    },
    {
        "href": "function.socket-listen.php",
        "name": "socket_listen",
        "description": "Listens for a connection on a socket"
    },
    {
        "href": "function.socket-read.php",
        "name": "socket_read",
        "description": "Reads a maximum of length bytes from a socket"
    },
    {
        "href": "function.socket-recv.php",
        "name": "socket_recv",
        "description": "Receives data from a connected socket"
    },
    {
        "href": "function.socket-recvfrom.php",
        "name": "socket_recvfrom",
        "description": "Receives data from a socket whether or not it is connection-oriented"
    },
    {
        "href": "function.socket-recvmsg.php",
        "name": "socket_recvmsg",
        "description": "Read a message"
    },
    {
        "href": "function.socket-select.php",
        "name": "socket_select",
        "description": "Runs the select() system call on the given arrays of sockets with a specified timeout"
    },
    {
        "href": "function.socket-send.php",
        "name": "socket_send",
        "description": "Sends data to a connected socket"
    },
    {
        "href": "function.socket-sendmsg.php",
        "name": "socket_sendmsg",
        "description": "Send a message"
    },
    {
        "href": "function.socket-sendto.php",
        "name": "socket_sendto",
        "description": "Sends a message to a socket, whether it is connected or not"
    },
    {
        "href": "function.socket-setopt.php",
        "name": "socket_setopt",
        "description": "Alias of socket_set_option"
    },
    {
        "href": "function.socket-set-block.php",
        "name": "socket_set_block",
        "description": "Sets blocking mode on a socket"
    },
    {
        "href": "function.socket-set-blocking.php",
        "name": "socket_set_blocking",
        "description": "Alias of stream_set_blocking"
    },
    {
        "href": "function.socket-set-nonblock.php",
        "name": "socket_set_nonblock",
        "description": "Sets nonblocking mode for file descriptor fd"
    },
    {
        "href": "function.socket-set-option.php",
        "name": "socket_set_option",
        "description": "Sets socket options for the socket"
    },
    {
        "href": "function.socket-set-timeout.php",
        "name": "socket_set_timeout",
        "description": "Alias of stream_set_timeout"
    },
    {
        "href": "function.socket-shutdown.php",
        "name": "socket_shutdown",
        "description": "Shuts down a socket for receiving, sending, or both"
    },
    {
        "href": "function.socket-strerror.php",
        "name": "socket_strerror",
        "description": "Return a string describing a socket error"
    },
    {
        "href": "function.socket-write.php",
        "name": "socket_write",
        "description": "Write to a socket"
    },
    {
        "href": "function.socket-wsaprotocol-info-export.php",
        "name": "socket_wsaprotocol_info_export",
        "description": "Exports the WSAPROTOCOL_INFO Structure"
    },
    {
        "href": "function.socket-wsaprotocol-info-import.php",
        "name": "socket_wsaprotocol_info_import",
        "description": "Imports a Socket from another Process"
    },
    {
        "href": "function.socket-wsaprotocol-info-release.php",
        "name": "socket_wsaprotocol_info_release",
        "description": "Releases an exported WSAPROTOCOL_INFO Structure"
    },
    {
        "href": "function.sodium-add.php",
        "name": "sodium_add",
        "description": "Add large numbers"
    },
    {
        "href": "function.sodium-base642bin.php",
        "name": "sodium_base642bin",
        "description": "Decodes a base64-encoded string into raw binary."
    },
    {
        "href": "function.sodium-bin2base64.php",
        "name": "sodium_bin2base64",
        "description": "Encodes a raw binary string with base64."
    },
    {
        "href": "function.sodium-bin2hex.php",
        "name": "sodium_bin2hex",
        "description": "Encode to hexadecimal"
    },
    {
        "href": "function.sodium-compare.php",
        "name": "sodium_compare",
        "description": "Compare large numbers"
    },
    {
        "href": "function.sodium-crypto-aead-aes256gcm-decrypt.php",
        "name": "sodium_crypto_aead_aes256gcm_decrypt",
        "description": "Verify then decrypt a message with AES-256-GCM"
    },
    {
        "href": "function.sodium-crypto-aead-aes256gcm-encrypt.php",
        "name": "sodium_crypto_aead_aes256gcm_encrypt",
        "description": "Encrypt then authenticate with AES-256-GCM"
    },
    {
        "href": "function.sodium-crypto-aead-aes256gcm-is-available.php",
        "name": "sodium_crypto_aead_aes256gcm_is_available",
        "description": "Check if hardware supports AES256-GCM"
    },
    {
        "href": "function.sodium-crypto-aead-aes256gcm-keygen.php",
        "name": "sodium_crypto_aead_aes256gcm_keygen",
        "description": "Generate a random AES-256-GCM key"
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-decrypt.php",
        "name": "sodium_crypto_aead_chacha20poly1305_decrypt",
        "description": "Verify then decrypt with ChaCha20-Poly1305"
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-encrypt.php",
        "name": "sodium_crypto_aead_chacha20poly1305_encrypt",
        "description": "Encrypt then authenticate with ChaCha20-Poly1305"
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-ietf-decrypt.php",
        "name": "sodium_crypto_aead_chacha20poly1305_ietf_decrypt",
        "description": "Verify that the ciphertext includes a valid tag"
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-ietf-encrypt.php",
        "name": "sodium_crypto_aead_chacha20poly1305_ietf_encrypt",
        "description": "Encrypt a message"
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-ietf-keygen.php",
        "name": "sodium_crypto_aead_chacha20poly1305_ietf_keygen",
        "description": "Generate a random ChaCha20-Poly1305 (IETF) key."
    },
    {
        "href": "function.sodium-crypto-aead-chacha20poly1305-keygen.php",
        "name": "sodium_crypto_aead_chacha20poly1305_keygen",
        "description": "Generate a random ChaCha20-Poly1305 key."
    },
    {
        "href": "function.sodium-crypto-aead-xchacha20poly1305-ietf-decrypt.php",
        "name": "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt",
        "description": "(Preferred) Verify then decrypt with XChaCha20-Poly1305"
    },
    {
        "href": "function.sodium-crypto-aead-xchacha20poly1305-ietf-encrypt.php",
        "name": "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt",
        "description": "(Preferred) Encrypt then authenticate with XChaCha20-Poly1305"
    },
    {
        "href": "function.sodium-crypto-aead-xchacha20poly1305-ietf-keygen.php",
        "name": "sodium_crypto_aead_xchacha20poly1305_ietf_keygen",
        "description": "Generate a random XChaCha20-Poly1305 key."
    },
    {
        "href": "function.sodium-crypto-auth.php",
        "name": "sodium_crypto_auth",
        "description": "Compute a tag for the message"
    },
    {
        "href": "function.sodium-crypto-auth-keygen.php",
        "name": "sodium_crypto_auth_keygen",
        "description": "Generate a random key for sodium_crypto_auth"
    },
    {
        "href": "function.sodium-crypto-auth-verify.php",
        "name": "sodium_crypto_auth_verify",
        "description": "Verifies that the tag is valid for the message"
    },
    {
        "href": "function.sodium-crypto-box.php",
        "name": "sodium_crypto_box",
        "description": "Authenticated public-key encryption"
    },
    {
        "href": "function.sodium-crypto-box-keypair.php",
        "name": "sodium_crypto_box_keypair",
        "description": "Randomly generate a secret key and a corresponding public key"
    },
    {
        "href": "function.sodium-crypto-box-keypair-from-secretkey-and-publickey.php",
        "name": "sodium_crypto_box_keypair_from_secretkey_and_publickey",
        "description": "Create a unified keypair string from a secret key and public key"
    },
    {
        "href": "function.sodium-crypto-box-open.php",
        "name": "sodium_crypto_box_open",
        "description": "Authenticated public-key decryption"
    },
    {
        "href": "function.sodium-crypto-box-publickey.php",
        "name": "sodium_crypto_box_publickey",
        "description": "Extract the public key from a crypto_box keypair"
    },
    {
        "href": "function.sodium-crypto-box-publickey-from-secretkey.php",
        "name": "sodium_crypto_box_publickey_from_secretkey",
        "description": "Calculate the public key from a secret key"
    },
    {
        "href": "function.sodium-crypto-box-seal.php",
        "name": "sodium_crypto_box_seal",
        "description": "Anonymous public-key encryption"
    },
    {
        "href": "function.sodium-crypto-box-seal-open.php",
        "name": "sodium_crypto_box_seal_open",
        "description": "Anonymous public-key decryption"
    },
    {
        "href": "function.sodium-crypto-box-secretkey.php",
        "name": "sodium_crypto_box_secretkey",
        "description": "Extracts the secret key from a crypto_box keypair"
    },
    {
        "href": "function.sodium-crypto-box-seed-keypair.php",
        "name": "sodium_crypto_box_seed_keypair",
        "description": "Deterministically derive the key pair from a single key"
    },
    {
        "href": "function.sodium-crypto-generichash.php",
        "name": "sodium_crypto_generichash",
        "description": "Get a hash of the message"
    },
    {
        "href": "function.sodium-crypto-generichash-final.php",
        "name": "sodium_crypto_generichash_final",
        "description": "Complete the hash"
    },
    {
        "href": "function.sodium-crypto-generichash-init.php",
        "name": "sodium_crypto_generichash_init",
        "description": "Initialize a hash for streaming"
    },
    {
        "href": "function.sodium-crypto-generichash-keygen.php",
        "name": "sodium_crypto_generichash_keygen",
        "description": "Generate a random generichash key"
    },
    {
        "href": "function.sodium-crypto-generichash-update.php",
        "name": "sodium_crypto_generichash_update",
        "description": "Add message to a hash"
    },
    {
        "href": "function.sodium-crypto-kdf-derive-from-key.php",
        "name": "sodium_crypto_kdf_derive_from_key",
        "description": "Derive a subkey"
    },
    {
        "href": "function.sodium-crypto-kdf-keygen.php",
        "name": "sodium_crypto_kdf_keygen",
        "description": "Generate a random root key for the KDF interface"
    },
    {
        "href": "function.sodium-crypto-kx-client-session-keys.php",
        "name": "sodium_crypto_kx_client_session_keys",
        "description": "Calculate the client-side session keys."
    },
    {
        "href": "function.sodium-crypto-kx-keypair.php",
        "name": "sodium_crypto_kx_keypair",
        "description": "Creates a new sodium keypair"
    },
    {
        "href": "function.sodium-crypto-kx-publickey.php",
        "name": "sodium_crypto_kx_publickey",
        "description": "Extract the public key from a crypto_kx keypair"
    },
    {
        "href": "function.sodium-crypto-kx-secretkey.php",
        "name": "sodium_crypto_kx_secretkey",
        "description": "Extract the secret key from a crypto_kx keypair."
    },
    {
        "href": "function.sodium-crypto-kx-seed-keypair.php",
        "name": "sodium_crypto_kx_seed_keypair",
        "description": "Description"
    },
    {
        "href": "function.sodium-crypto-kx-server-session-keys.php",
        "name": "sodium_crypto_kx_server_session_keys",
        "description": "Calculate the server-side session keys."
    },
    {
        "href": "function.sodium-crypto-pwhash.php",
        "name": "sodium_crypto_pwhash",
        "description": "Derive a key from a password, using Argon2"
    },
    {
        "href": "function.sodium-crypto-pwhash-scryptsalsa208sha256.php",
        "name": "sodium_crypto_pwhash_scryptsalsa208sha256",
        "description": "Derives a key from a password, using scrypt"
    },
    {
        "href": "function.sodium-crypto-pwhash-scryptsalsa208sha256-str.php",
        "name": "sodium_crypto_pwhash_scryptsalsa208sha256_str",
        "description": "Get an ASCII encoded hash"
    },
    {
        "href": "function.sodium-crypto-pwhash-scryptsalsa208sha256-str-verify.php",
        "name": "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify",
        "description": "Verify that the password is a valid password verification string"
    },
    {
        "href": "function.sodium-crypto-pwhash-str.php",
        "name": "sodium_crypto_pwhash_str",
        "description": "Get an ASCII-encoded hash"
    },
    {
        "href": "function.sodium-crypto-pwhash-str-needs-rehash.php",
        "name": "sodium_crypto_pwhash_str_needs_rehash",
        "description": "Determine whether or not to rehash a password"
    },
    {
        "href": "function.sodium-crypto-pwhash-str-verify.php",
        "name": "sodium_crypto_pwhash_str_verify",
        "description": "Verifies that a password matches a hash"
    },
    {
        "href": "function.sodium-crypto-scalarmult.php",
        "name": "sodium_crypto_scalarmult",
        "description": "Compute a shared secret given a user's secret key and another user's public key"
    },
    {
        "href": "function.sodium-crypto-scalarmult-base.php",
        "name": "sodium_crypto_scalarmult_base",
        "description": "Alias of sodium_crypto_box_publickey_from_secretkey"
    },
    {
        "href": "function.sodium-crypto-secretbox.php",
        "name": "sodium_crypto_secretbox",
        "description": "Authenticated shared-key encryption"
    },
    {
        "href": "function.sodium-crypto-secretbox-keygen.php",
        "name": "sodium_crypto_secretbox_keygen",
        "description": "Generate random key for sodium_crypto_secretbox"
    },
    {
        "href": "function.sodium-crypto-secretbox-open.php",
        "name": "sodium_crypto_secretbox_open",
        "description": "Authenticated shared-key decryption"
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-init-pull.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_init_pull",
        "description": "Initialize a secretstream context for decryption"
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-init-push.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_init_push",
        "description": "Initialize a secretstream context for encryption"
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-keygen.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_keygen",
        "description": "Generate a random secretstream key."
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-pull.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_pull",
        "description": "Decrypt a chunk of data from an encrypted stream"
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-push.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_push",
        "description": "Encrypt a chunk of data so that it can safely be decrypted in a streaming API"
    },
    {
        "href": "function.sodium-crypto-secretstream-xchacha20poly1305-rekey.php",
        "name": "sodium_crypto_secretstream_xchacha20poly1305_rekey",
        "description": "Explicitly rotate the key in the secretstream state"
    },
    {
        "href": "function.sodium-crypto-shorthash.php",
        "name": "sodium_crypto_shorthash",
        "description": "Compute a short hash of a message and key"
    },
    {
        "href": "function.sodium-crypto-shorthash-keygen.php",
        "name": "sodium_crypto_shorthash_keygen",
        "description": "Get random bytes for key"
    },
    {
        "href": "function.sodium-crypto-sign.php",
        "name": "sodium_crypto_sign",
        "description": "Sign a message"
    },
    {
        "href": "function.sodium-crypto-sign-detached.php",
        "name": "sodium_crypto_sign_detached",
        "description": "Sign the message"
    },
    {
        "href": "function.sodium-crypto-sign-ed25519-pk-to-curve25519.php",
        "name": "sodium_crypto_sign_ed25519_pk_to_curve25519",
        "description": "Convert an Ed25519 public key to a Curve25519 public key"
    },
    {
        "href": "function.sodium-crypto-sign-ed25519-sk-to-curve25519.php",
        "name": "sodium_crypto_sign_ed25519_sk_to_curve25519",
        "description": "Convert an Ed25519 secret key to a Curve25519 secret key"
    },
    {
        "href": "function.sodium-crypto-sign-keypair.php",
        "name": "sodium_crypto_sign_keypair",
        "description": "Randomly generate a secret key and a corresponding public key"
    },
    {
        "href": "function.sodium-crypto-sign-keypair-from-secretkey-and-publickey.php",
        "name": "sodium_crypto_sign_keypair_from_secretkey_and_publickey",
        "description": "Join a secret key and public key together"
    },
    {
        "href": "function.sodium-crypto-sign-open.php",
        "name": "sodium_crypto_sign_open",
        "description": "Check that the signed message has a valid signature"
    },
    {
        "href": "function.sodium-crypto-sign-publickey.php",
        "name": "sodium_crypto_sign_publickey",
        "description": "Extract the Ed25519 public key from a keypair"
    },
    {
        "href": "function.sodium-crypto-sign-publickey-from-secretkey.php",
        "name": "sodium_crypto_sign_publickey_from_secretkey",
        "description": "Extract the Ed25519 public key from the secret key"
    },
    {
        "href": "function.sodium-crypto-sign-secretkey.php",
        "name": "sodium_crypto_sign_secretkey",
        "description": "Extract the Ed25519 secret key from a keypair"
    },
    {
        "href": "function.sodium-crypto-sign-seed-keypair.php",
        "name": "sodium_crypto_sign_seed_keypair",
        "description": "Deterministically derive the key pair from a single key"
    },
    {
        "href": "function.sodium-crypto-sign-verify-detached.php",
        "name": "sodium_crypto_sign_verify_detached",
        "description": "Verify signature for the message"
    },
    {
        "href": "function.sodium-crypto-stream.php",
        "name": "sodium_crypto_stream",
        "description": "Generate a deterministic sequence of bytes from a seed"
    },
    {
        "href": "function.sodium-crypto-stream-keygen.php",
        "name": "sodium_crypto_stream_keygen",
        "description": "Generate a random sodium_crypto_stream key."
    },
    {
        "href": "function.sodium-crypto-stream-xor.php",
        "name": "sodium_crypto_stream_xor",
        "description": "Encrypt a message without authentication"
    },
    {
        "href": "function.sodium-hex2bin.php",
        "name": "sodium_hex2bin",
        "description": "Decodes a hexadecimally encoded binary string"
    },
    {
        "href": "function.sodium-increment.php",
        "name": "sodium_increment",
        "description": "Increment large number"
    },
    {
        "href": "function.sodium-memcmp.php",
        "name": "sodium_memcmp",
        "description": "Test for equality in constant-time"
    },
    {
        "href": "function.sodium-memzero.php",
        "name": "sodium_memzero",
        "description": "Overwrite a string with NUL characters"
    },
    {
        "href": "function.sodium-pad.php",
        "name": "sodium_pad",
        "description": "Add padding data"
    },
    {
        "href": "function.sodium-unpad.php",
        "name": "sodium_unpad",
        "description": "Remove padding data"
    },
    {
        "href": "solrclient.adddocument.php",
        "name": "SolrClient::addDocument",
        "description": "Adds a document to the index"
    },
    {
        "href": "solrclient.adddocuments.php",
        "name": "SolrClient::addDocuments",
        "description": "Adds a collection of SolrInputDocument instances to the index"
    },
    {
        "href": "solrclient.commit.php",
        "name": "SolrClient::commit",
        "description": "Finalizes all add/deletes made to the index"
    },
    {
        "href": "solrclient.deletebyid.php",
        "name": "SolrClient::deleteById",
        "description": "Delete by Id"
    },
    {
        "href": "solrclient.deletebyids.php",
        "name": "SolrClient::deleteByIds",
        "description": "Deletes by Ids"
    },
    {
        "href": "solrclient.deletebyqueries.php",
        "name": "SolrClient::deleteByQueries",
        "description": "Removes all documents matching any of the queries"
    },
    {
        "href": "solrclient.deletebyquery.php",
        "name": "SolrClient::deleteByQuery",
        "description": "Deletes all documents matching the given query"
    },
    {
        "href": "solrclient.getbyid.php",
        "name": "SolrClient::getById",
        "description": "Get Document By Id. Utilizes Solr Realtime Get (RTG)"
    },
    {
        "href": "solrclient.getbyids.php",
        "name": "SolrClient::getByIds",
        "description": "Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)"
    },
    {
        "href": "solrclient.getdebug.php",
        "name": "SolrClient::getDebug",
        "description": "Returns the debug data for the last connection attempt"
    },
    {
        "href": "solrclient.getoptions.php",
        "name": "SolrClient::getOptions",
        "description": "Returns the client options set internally"
    },
    {
        "href": "solrclient.optimize.php",
        "name": "SolrClient::optimize",
        "description": "Defragments the index"
    },
    {
        "href": "solrclient.ping.php",
        "name": "SolrClient::ping",
        "description": "Checks if Solr server is still up"
    },
    {
        "href": "solrclient.query.php",
        "name": "SolrClient::query",
        "description": "Sends a query to the server"
    },
    {
        "href": "solrclient.request.php",
        "name": "SolrClient::request",
        "description": "Sends a raw update request"
    },
    {
        "href": "solrclient.rollback.php",
        "name": "SolrClient::rollback",
        "description": "Rollbacks all add/deletes made to the index since the last commit"
    },
    {
        "href": "solrclient.setresponsewriter.php",
        "name": "SolrClient::setResponseWriter",
        "description": "Sets the response writer used to prepare the response from Solr"
    },
    {
        "href": "solrclient.setservlet.php",
        "name": "SolrClient::setServlet",
        "description": "Changes the specified servlet type to a new value"
    },
    {
        "href": "solrclient.system.php",
        "name": "SolrClient::system",
        "description": "Retrieve Solr Server information"
    },
    {
        "href": "solrclient.threads.php",
        "name": "SolrClient::threads",
        "description": "Checks the threads status"
    },
    {
        "href": "solrclient.construct.php",
        "name": "SolrClient::__construct",
        "description": "Constructor for the SolrClient object"
    },
    {
        "href": "solrclient.destruct.php",
        "name": "SolrClient::__destruct",
        "description": "Destructor for SolrClient"
    },
    {
        "href": "solrclientexception.getinternalinfo.php",
        "name": "SolrClientException::getInternalInfo",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "href": "solrcollapsefunction.getfield.php",
        "name": "SolrCollapseFunction::getField",
        "description": "Returns the field that is being collapsed on"
    },
    {
        "href": "solrcollapsefunction.gethint.php",
        "name": "SolrCollapseFunction::getHint",
        "description": "Returns collapse hint"
    },
    {
        "href": "solrcollapsefunction.getmax.php",
        "name": "SolrCollapseFunction::getMax",
        "description": "Returns max parameter"
    },
    {
        "href": "solrcollapsefunction.getmin.php",
        "name": "SolrCollapseFunction::getMin",
        "description": "Returns min parameter"
    },
    {
        "href": "solrcollapsefunction.getnullpolicy.php",
        "name": "SolrCollapseFunction::getNullPolicy",
        "description": "Returns null policy"
    },
    {
        "href": "solrcollapsefunction.getsize.php",
        "name": "SolrCollapseFunction::getSize",
        "description": "Returns size parameter"
    },
    {
        "href": "solrcollapsefunction.setfield.php",
        "name": "SolrCollapseFunction::setField",
        "description": "Sets the field to collapse on"
    },
    {
        "href": "solrcollapsefunction.sethint.php",
        "name": "SolrCollapseFunction::setHint",
        "description": "Sets collapse hint"
    },
    {
        "href": "solrcollapsefunction.setmax.php",
        "name": "SolrCollapseFunction::setMax",
        "description": "Selects the group heads by the max value of a numeric field or function query"
    },
    {
        "href": "solrcollapsefunction.setmin.php",
        "name": "SolrCollapseFunction::setMin",
        "description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only"
    },
    {
        "href": "solrcollapsefunction.setnullpolicy.php",
        "name": "SolrCollapseFunction::setNullPolicy",
        "description": "Sets the NULL Policy"
    },
    {
        "href": "solrcollapsefunction.setsize.php",
        "name": "SolrCollapseFunction::setSize",
        "description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only"
    },
    {
        "href": "solrcollapsefunction.construct.php",
        "name": "SolrCollapseFunction::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrcollapsefunction.tostring.php",
        "name": "SolrCollapseFunction::__toString",
        "description": "Returns a string representing the constructed collapse function"
    },
    {
        "href": "solrdismaxquery.addbigramphrasefield.php",
        "name": "SolrDisMaxQuery::addBigramPhraseField",
        "description": "Adds a Phrase Bigram Field (pf2 parameter)"
    },
    {
        "href": "solrdismaxquery.addboostquery.php",
        "name": "SolrDisMaxQuery::addBoostQuery",
        "description": "Adds a boost query field with value and optional boost (bq parameter)"
    },
    {
        "href": "solrdismaxquery.addphrasefield.php",
        "name": "SolrDisMaxQuery::addPhraseField",
        "description": "Adds a Phrase Field (pf parameter)"
    },
    {
        "href": "solrdismaxquery.addqueryfield.php",
        "name": "SolrDisMaxQuery::addQueryField",
        "description": "Add a query field with optional boost (qf parameter)"
    },
    {
        "href": "solrdismaxquery.addtrigramphrasefield.php",
        "name": "SolrDisMaxQuery::addTrigramPhraseField",
        "description": "Adds a Trigram Phrase Field (pf3 parameter)"
    },
    {
        "href": "solrdismaxquery.adduserfield.php",
        "name": "SolrDisMaxQuery::addUserField",
        "description": "Adds a field to User Fields Parameter (uf)"
    },
    {
        "href": "solrdismaxquery.removebigramphrasefield.php",
        "name": "SolrDisMaxQuery::removeBigramPhraseField",
        "description": "Removes phrase bigram field (pf2 parameter)"
    },
    {
        "href": "solrdismaxquery.removeboostquery.php",
        "name": "SolrDisMaxQuery::removeBoostQuery",
        "description": "Removes a boost query partial by field name (bq)"
    },
    {
        "href": "solrdismaxquery.removephrasefield.php",
        "name": "SolrDisMaxQuery::removePhraseField",
        "description": "Removes a Phrase Field (pf parameter)"
    },
    {
        "href": "solrdismaxquery.removequeryfield.php",
        "name": "SolrDisMaxQuery::removeQueryField",
        "description": "Removes a Query Field (qf parameter)"
    },
    {
        "href": "solrdismaxquery.removetrigramphrasefield.php",
        "name": "SolrDisMaxQuery::removeTrigramPhraseField",
        "description": "Removes a Trigram Phrase Field (pf3 parameter)"
    },
    {
        "href": "solrdismaxquery.removeuserfield.php",
        "name": "SolrDisMaxQuery::removeUserField",
        "description": "Removes a field from The User Fields Parameter (uf)"
    },
    {
        "href": "solrdismaxquery.setbigramphrasefields.php",
        "name": "SolrDisMaxQuery::setBigramPhraseFields",
        "description": "Sets Bigram Phrase Fields and their boosts (and slops) using pf2 parameter"
    },
    {
        "href": "solrdismaxquery.setbigramphraseslop.php",
        "name": "SolrDisMaxQuery::setBigramPhraseSlop",
        "description": "Sets Bigram Phrase Slop (ps2 parameter)"
    },
    {
        "href": "solrdismaxquery.setboostfunction.php",
        "name": "SolrDisMaxQuery::setBoostFunction",
        "description": "Sets a Boost Function (bf parameter)"
    },
    {
        "href": "solrdismaxquery.setboostquery.php",
        "name": "SolrDisMaxQuery::setBoostQuery",
        "description": "Directly Sets Boost Query Parameter (bq)"
    },
    {
        "href": "solrdismaxquery.setminimummatch.php",
        "name": "SolrDisMaxQuery::setMinimumMatch",
        "description": "Set Minimum \"Should\" Match (mm)"
    },
    {
        "href": "solrdismaxquery.setphrasefields.php",
        "name": "SolrDisMaxQuery::setPhraseFields",
        "description": "Sets  Phrase Fields and their boosts (and slops) using pf2 parameter"
    },
    {
        "href": "solrdismaxquery.setphraseslop.php",
        "name": "SolrDisMaxQuery::setPhraseSlop",
        "description": "Sets the default slop on phrase queries (ps parameter)"
    },
    {
        "href": "solrdismaxquery.setqueryalt.php",
        "name": "SolrDisMaxQuery::setQueryAlt",
        "description": "Set Query Alternate (q.alt parameter)"
    },
    {
        "href": "solrdismaxquery.setqueryphraseslop.php",
        "name": "SolrDisMaxQuery::setQueryPhraseSlop",
        "description": "Specifies the amount of slop permitted on phrase queries explicitly included in the user's query string (qf parameter)"
    },
    {
        "href": "solrdismaxquery.settiebreaker.php",
        "name": "SolrDisMaxQuery::setTieBreaker",
        "description": "Sets Tie Breaker parameter (tie parameter)"
    },
    {
        "href": "solrdismaxquery.settrigramphrasefields.php",
        "name": "SolrDisMaxQuery::setTrigramPhraseFields",
        "description": "Directly Sets Trigram Phrase Fields (pf3 parameter)"
    },
    {
        "href": "solrdismaxquery.settrigramphraseslop.php",
        "name": "SolrDisMaxQuery::setTrigramPhraseSlop",
        "description": "Sets Trigram Phrase Slop (ps3 parameter)"
    },
    {
        "href": "solrdismaxquery.setuserfields.php",
        "name": "SolrDisMaxQuery::setUserFields",
        "description": "Sets User Fields parameter (uf)"
    },
    {
        "href": "solrdismaxquery.usedismaxqueryparser.php",
        "name": "SolrDisMaxQuery::useDisMaxQueryParser",
        "description": "Switch QueryParser to be DisMax Query Parser"
    },
    {
        "href": "solrdismaxquery.useedismaxqueryparser.php",
        "name": "SolrDisMaxQuery::useEDisMaxQueryParser",
        "description": "Switch QueryParser to be EDisMax"
    },
    {
        "href": "solrdismaxquery.construct.php",
        "name": "SolrDisMaxQuery::__construct",
        "description": "Class Constructor"
    },
    {
        "href": "solrdocument.addfield.php",
        "name": "SolrDocument::addField",
        "description": "Adds a field to the document"
    },
    {
        "href": "solrdocument.clear.php",
        "name": "SolrDocument::clear",
        "description": "Drops all the fields in the document"
    },
    {
        "href": "solrdocument.current.php",
        "name": "SolrDocument::current",
        "description": "Retrieves the current field"
    },
    {
        "href": "solrdocument.deletefield.php",
        "name": "SolrDocument::deleteField",
        "description": "Removes a field from the document"
    },
    {
        "href": "solrdocument.fieldexists.php",
        "name": "SolrDocument::fieldExists",
        "description": "Checks if a field exists in the document"
    },
    {
        "href": "solrdocument.getchilddocuments.php",
        "name": "SolrDocument::getChildDocuments",
        "description": "Returns an array of child documents (SolrDocument)"
    },
    {
        "href": "solrdocument.getchilddocumentscount.php",
        "name": "SolrDocument::getChildDocumentsCount",
        "description": "Returns the number of child documents"
    },
    {
        "href": "solrdocument.getfield.php",
        "name": "SolrDocument::getField",
        "description": "Retrieves a field by name"
    },
    {
        "href": "solrdocument.getfieldcount.php",
        "name": "SolrDocument::getFieldCount",
        "description": "Returns the number of fields in this document"
    },
    {
        "href": "solrdocument.getfieldnames.php",
        "name": "SolrDocument::getFieldNames",
        "description": "Returns an array of fields names in the document"
    },
    {
        "href": "solrdocument.getinputdocument.php",
        "name": "SolrDocument::getInputDocument",
        "description": "Returns a SolrInputDocument equivalent of the object"
    },
    {
        "href": "solrdocument.haschilddocuments.php",
        "name": "SolrDocument::hasChildDocuments",
        "description": "Checks whether the document has any child documents"
    },
    {
        "href": "solrdocument.key.php",
        "name": "SolrDocument::key",
        "description": "Retrieves the current key"
    },
    {
        "href": "solrdocument.merge.php",
        "name": "SolrDocument::merge",
        "description": "Merges source to the current SolrDocument"
    },
    {
        "href": "solrdocument.next.php",
        "name": "SolrDocument::next",
        "description": "Moves the internal pointer to the next field"
    },
    {
        "href": "solrdocument.offsetexists.php",
        "name": "SolrDocument::offsetExists",
        "description": "Checks if a particular field exists"
    },
    {
        "href": "solrdocument.offsetget.php",
        "name": "SolrDocument::offsetGet",
        "description": "Retrieves a field"
    },
    {
        "href": "solrdocument.offsetset.php",
        "name": "SolrDocument::offsetSet",
        "description": "Adds a field to the document"
    },
    {
        "href": "solrdocument.offsetunset.php",
        "name": "SolrDocument::offsetUnset",
        "description": "Removes a field"
    },
    {
        "href": "solrdocument.reset.php",
        "name": "SolrDocument::reset",
        "description": "This is an alias to SolrDocument::clear()"
    },
    {
        "href": "solrdocument.rewind.php",
        "name": "SolrDocument::rewind",
        "description": "Resets the internal pointer to the beginning"
    },
    {
        "href": "solrdocument.serialize.php",
        "name": "SolrDocument::serialize",
        "description": "Used for custom serialization"
    },
    {
        "href": "solrdocument.sort.php",
        "name": "SolrDocument::sort",
        "description": "Sorts the fields in the document"
    },
    {
        "href": "solrdocument.toarray.php",
        "name": "SolrDocument::toArray",
        "description": "Returns an array representation of the document"
    },
    {
        "href": "solrdocument.unserialize.php",
        "name": "SolrDocument::unserialize",
        "description": "Custom serialization of SolrDocument objects"
    },
    {
        "href": "solrdocument.valid.php",
        "name": "SolrDocument::valid",
        "description": "Checks if the current position internally is still valid"
    },
    {
        "href": "solrdocument.clone.php",
        "name": "SolrDocument::__clone",
        "description": "Creates a copy of a SolrDocument object"
    },
    {
        "href": "solrdocument.construct.php",
        "name": "SolrDocument::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrdocument.destruct.php",
        "name": "SolrDocument::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrdocument.get.php",
        "name": "SolrDocument::__get",
        "description": "Access the field as a property"
    },
    {
        "href": "solrdocument.isset.php",
        "name": "SolrDocument::__isset",
        "description": "Checks if a field exists"
    },
    {
        "href": "solrdocument.set.php",
        "name": "SolrDocument::__set",
        "description": "Adds another field to the document"
    },
    {
        "href": "solrdocument.unset.php",
        "name": "SolrDocument::__unset",
        "description": "Removes a field from the document"
    },
    {
        "href": "solrdocumentfield.construct.php",
        "name": "SolrDocumentField::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrdocumentfield.destruct.php",
        "name": "SolrDocumentField::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrexception.getinternalinfo.php",
        "name": "SolrException::getInternalInfo",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "href": "solrgenericresponse.construct.php",
        "name": "SolrGenericResponse::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrgenericresponse.destruct.php",
        "name": "SolrGenericResponse::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrillegalargumentexception.getinternalinfo.php",
        "name": "SolrIllegalArgumentException::getInternalInfo",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "href": "solrillegaloperationexception.getinternalinfo.php",
        "name": "SolrIllegalOperationException::getInternalInfo",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "href": "solrinputdocument.addchilddocument.php",
        "name": "SolrInputDocument::addChildDocument",
        "description": "Adds a child document for block indexing"
    },
    {
        "href": "solrinputdocument.addchilddocuments.php",
        "name": "SolrInputDocument::addChildDocuments",
        "description": "Adds an array of child documents"
    },
    {
        "href": "solrinputdocument.addfield.php",
        "name": "SolrInputDocument::addField",
        "description": "Adds a field to the document"
    },
    {
        "href": "solrinputdocument.clear.php",
        "name": "SolrInputDocument::clear",
        "description": "Resets the input document"
    },
    {
        "href": "solrinputdocument.deletefield.php",
        "name": "SolrInputDocument::deleteField",
        "description": "Removes a field from the document"
    },
    {
        "href": "solrinputdocument.fieldexists.php",
        "name": "SolrInputDocument::fieldExists",
        "description": "Checks if a field exists"
    },
    {
        "href": "solrinputdocument.getboost.php",
        "name": "SolrInputDocument::getBoost",
        "description": "Retrieves the current boost value for the document"
    },
    {
        "href": "solrinputdocument.getchilddocuments.php",
        "name": "SolrInputDocument::getChildDocuments",
        "description": "Returns an array of child documents (SolrInputDocument)"
    },
    {
        "href": "solrinputdocument.getchilddocumentscount.php",
        "name": "SolrInputDocument::getChildDocumentsCount",
        "description": "Returns the number of child documents"
    },
    {
        "href": "solrinputdocument.getfield.php",
        "name": "SolrInputDocument::getField",
        "description": "Retrieves a field by name"
    },
    {
        "href": "solrinputdocument.getfieldboost.php",
        "name": "SolrInputDocument::getFieldBoost",
        "description": "Retrieves the boost value for a particular field"
    },
    {
        "href": "solrinputdocument.getfieldcount.php",
        "name": "SolrInputDocument::getFieldCount",
        "description": "Returns the number of fields in the document"
    },
    {
        "href": "solrinputdocument.getfieldnames.php",
        "name": "SolrInputDocument::getFieldNames",
        "description": "Returns an array containing all the fields in the document"
    },
    {
        "href": "solrinputdocument.haschilddocuments.php",
        "name": "SolrInputDocument::hasChildDocuments",
        "description": "Returns true if the document has any child documents"
    },
    {
        "href": "solrinputdocument.merge.php",
        "name": "SolrInputDocument::merge",
        "description": "Merges one input document into another"
    },
    {
        "href": "solrinputdocument.reset.php",
        "name": "SolrInputDocument::reset",
        "description": "This is an alias of SolrInputDocument::clear"
    },
    {
        "href": "solrinputdocument.setboost.php",
        "name": "SolrInputDocument::setBoost",
        "description": "Sets the boost value for this document"
    },
    {
        "href": "solrinputdocument.setfieldboost.php",
        "name": "SolrInputDocument::setFieldBoost",
        "description": "Sets the index-time boost value for a field"
    },
    {
        "href": "solrinputdocument.sort.php",
        "name": "SolrInputDocument::sort",
        "description": "Sorts the fields within the document"
    },
    {
        "href": "solrinputdocument.toarray.php",
        "name": "SolrInputDocument::toArray",
        "description": "Returns an array representation of the input document"
    },
    {
        "href": "solrinputdocument.clone.php",
        "name": "SolrInputDocument::__clone",
        "description": "Creates a copy of a SolrDocument"
    },
    {
        "href": "solrinputdocument.construct.php",
        "name": "SolrInputDocument::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrinputdocument.destruct.php",
        "name": "SolrInputDocument::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrmodifiableparams.construct.php",
        "name": "SolrModifiableParams::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrmodifiableparams.destruct.php",
        "name": "SolrModifiableParams::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrobject.getpropertynames.php",
        "name": "SolrObject::getPropertyNames",
        "description": "Returns an array of all the names of the properties"
    },
    {
        "href": "solrobject.offsetexists.php",
        "name": "SolrObject::offsetExists",
        "description": "Checks if the property exists"
    },
    {
        "href": "solrobject.offsetget.php",
        "name": "SolrObject::offsetGet",
        "description": "Used to retrieve a property"
    },
    {
        "href": "solrobject.offsetset.php",
        "name": "SolrObject::offsetSet",
        "description": "Sets the value for a property"
    },
    {
        "href": "solrobject.offsetunset.php",
        "name": "SolrObject::offsetUnset",
        "description": "Unsets the value for the property"
    },
    {
        "href": "solrobject.construct.php",
        "name": "SolrObject::__construct",
        "description": "Creates Solr object"
    },
    {
        "href": "solrobject.destruct.php",
        "name": "SolrObject::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrparams.add.php",
        "name": "SolrParams::add",
        "description": "This is an alias for SolrParams::addParam"
    },
    {
        "href": "solrparams.addparam.php",
        "name": "SolrParams::addParam",
        "description": "Adds a parameter to the object"
    },
    {
        "href": "solrparams.get.php",
        "name": "SolrParams::get",
        "description": "This is an alias for SolrParams::getParam"
    },
    {
        "href": "solrparams.getparam.php",
        "name": "SolrParams::getParam",
        "description": "Returns a parameter value"
    },
    {
        "href": "solrparams.getparams.php",
        "name": "SolrParams::getParams",
        "description": "Returns an array of non URL-encoded parameters"
    },
    {
        "href": "solrparams.getpreparedparams.php",
        "name": "SolrParams::getPreparedParams",
        "description": "Returns an array of URL-encoded parameters"
    },
    {
        "href": "solrparams.serialize.php",
        "name": "SolrParams::serialize",
        "description": "Used for custom serialization"
    },
    {
        "href": "solrparams.set.php",
        "name": "SolrParams::set",
        "description": "An alias of SolrParams::setParam"
    },
    {
        "href": "solrparams.setparam.php",
        "name": "SolrParams::setParam",
        "description": "Sets the parameter to the specified value"
    },
    {
        "href": "solrparams.tostring.php",
        "name": "SolrParams::toString",
        "description": "Returns all the name-value pair parameters in the object"
    },
    {
        "href": "solrparams.unserialize.php",
        "name": "SolrParams::unserialize",
        "description": "Used for custom serialization"
    },
    {
        "href": "solrpingresponse.getresponse.php",
        "name": "SolrPingResponse::getResponse",
        "description": "Returns the response from the server"
    },
    {
        "href": "solrpingresponse.construct.php",
        "name": "SolrPingResponse::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrpingresponse.destruct.php",
        "name": "SolrPingResponse::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrquery.addexpandfilterquery.php",
        "name": "SolrQuery::addExpandFilterQuery",
        "description": "Overrides main filter query, determines which documents to include in the main group"
    },
    {
        "href": "solrquery.addexpandsortfield.php",
        "name": "SolrQuery::addExpandSortField",
        "description": "Orders the documents within the expanded groups (expand.sort parameter)"
    },
    {
        "href": "solrquery.addfacetdatefield.php",
        "name": "SolrQuery::addFacetDateField",
        "description": "Maps to facet.date"
    },
    {
        "href": "solrquery.addfacetdateother.php",
        "name": "SolrQuery::addFacetDateOther",
        "description": "Adds another facet.date.other parameter"
    },
    {
        "href": "solrquery.addfacetfield.php",
        "name": "SolrQuery::addFacetField",
        "description": "Adds another field to the facet"
    },
    {
        "href": "solrquery.addfacetquery.php",
        "name": "SolrQuery::addFacetQuery",
        "description": "Adds a facet query"
    },
    {
        "href": "solrquery.addfield.php",
        "name": "SolrQuery::addField",
        "description": "Specifies which fields to return in the result"
    },
    {
        "href": "solrquery.addfilterquery.php",
        "name": "SolrQuery::addFilterQuery",
        "description": "Specifies a filter query"
    },
    {
        "href": "solrquery.addgroupfield.php",
        "name": "SolrQuery::addGroupField",
        "description": "Add a field to be used to group results"
    },
    {
        "href": "solrquery.addgroupfunction.php",
        "name": "SolrQuery::addGroupFunction",
        "description": "Allows grouping results based on the unique values of a function query (group.func parameter)"
    },
    {
        "href": "solrquery.addgroupquery.php",
        "name": "SolrQuery::addGroupQuery",
        "description": "Allows grouping of documents that match the given query"
    },
    {
        "href": "solrquery.addgroupsortfield.php",
        "name": "SolrQuery::addGroupSortField",
        "description": "Add a group sort field (group.sort parameter)"
    },
    {
        "href": "solrquery.addhighlightfield.php",
        "name": "SolrQuery::addHighlightField",
        "description": "Maps to hl.fl"
    },
    {
        "href": "solrquery.addmltfield.php",
        "name": "SolrQuery::addMltField",
        "description": "Sets a field to use for similarity"
    },
    {
        "href": "solrquery.addmltqueryfield.php",
        "name": "SolrQuery::addMltQueryField",
        "description": "Maps to mlt.qf"
    },
    {
        "href": "solrquery.addsortfield.php",
        "name": "SolrQuery::addSortField",
        "description": "Used to control how the results should be sorted"
    },
    {
        "href": "solrquery.addstatsfacet.php",
        "name": "SolrQuery::addStatsFacet",
        "description": "Requests a return of sub results for values within the given facet"
    },
    {
        "href": "solrquery.addstatsfield.php",
        "name": "SolrQuery::addStatsField",
        "description": "Maps to stats.field parameter"
    },
    {
        "href": "solrquery.collapse.php",
        "name": "SolrQuery::collapse",
        "description": "Collapses the result set to a single document per group"
    },
    {
        "href": "solrquery.getexpand.php",
        "name": "SolrQuery::getExpand",
        "description": "Returns true if group expanding is enabled"
    },
    {
        "href": "solrquery.getexpandfilterqueries.php",
        "name": "SolrQuery::getExpandFilterQueries",
        "description": "Returns the expand filter queries"
    },
    {
        "href": "solrquery.getexpandquery.php",
        "name": "SolrQuery::getExpandQuery",
        "description": "Returns the expand query expand.q parameter"
    },
    {
        "href": "solrquery.getexpandrows.php",
        "name": "SolrQuery::getExpandRows",
        "description": "Returns The number of rows to display in each group (expand.rows)"
    },
    {
        "href": "solrquery.getexpandsortfields.php",
        "name": "SolrQuery::getExpandSortFields",
        "description": "Returns an array of fields"
    },
    {
        "href": "solrquery.getfacet.php",
        "name": "SolrQuery::getFacet",
        "description": "Returns the value of the facet parameter"
    },
    {
        "href": "solrquery.getfacetdateend.php",
        "name": "SolrQuery::getFacetDateEnd",
        "description": "Returns the value for the facet.date.end parameter"
    },
    {
        "href": "solrquery.getfacetdatefields.php",
        "name": "SolrQuery::getFacetDateFields",
        "description": "Returns all the facet.date fields"
    },
    {
        "href": "solrquery.getfacetdategap.php",
        "name": "SolrQuery::getFacetDateGap",
        "description": "Returns the value of the facet.date.gap parameter"
    },
    {
        "href": "solrquery.getfacetdatehardend.php",
        "name": "SolrQuery::getFacetDateHardEnd",
        "description": "Returns the value of the facet.date.hardend parameter"
    },
    {
        "href": "solrquery.getfacetdateother.php",
        "name": "SolrQuery::getFacetDateOther",
        "description": "Returns the value for the facet.date.other parameter"
    },
    {
        "href": "solrquery.getfacetdatestart.php",
        "name": "SolrQuery::getFacetDateStart",
        "description": "Returns the  lower bound for the first date range for all date faceting on this field"
    },
    {
        "href": "solrquery.getfacetfields.php",
        "name": "SolrQuery::getFacetFields",
        "description": "Returns all the facet fields"
    },
    {
        "href": "solrquery.getfacetlimit.php",
        "name": "SolrQuery::getFacetLimit",
        "description": "Returns the maximum number of constraint counts that should be returned for the facet fields"
    },
    {
        "href": "solrquery.getfacetmethod.php",
        "name": "SolrQuery::getFacetMethod",
        "description": "Returns the value of the facet.method parameter"
    },
    {
        "href": "solrquery.getfacetmincount.php",
        "name": "SolrQuery::getFacetMinCount",
        "description": "Returns the minimum counts for facet fields should be included in the response"
    },
    {
        "href": "solrquery.getfacetmissing.php",
        "name": "SolrQuery::getFacetMissing",
        "description": "Returns the current state of the facet.missing parameter"
    },
    {
        "href": "solrquery.getfacetoffset.php",
        "name": "SolrQuery::getFacetOffset",
        "description": "Returns an offset into the list of constraints to be used for pagination"
    },
    {
        "href": "solrquery.getfacetprefix.php",
        "name": "SolrQuery::getFacetPrefix",
        "description": "Returns the facet prefix"
    },
    {
        "href": "solrquery.getfacetqueries.php",
        "name": "SolrQuery::getFacetQueries",
        "description": "Returns all the facet queries"
    },
    {
        "href": "solrquery.getfacetsort.php",
        "name": "SolrQuery::getFacetSort",
        "description": "Returns the facet sort type"
    },
    {
        "href": "solrquery.getfields.php",
        "name": "SolrQuery::getFields",
        "description": "Returns the list of fields that will be returned in the response"
    },
    {
        "href": "solrquery.getfilterqueries.php",
        "name": "SolrQuery::getFilterQueries",
        "description": "Returns an array of filter queries"
    },
    {
        "href": "solrquery.getgroup.php",
        "name": "SolrQuery::getGroup",
        "description": "Returns true if grouping is enabled"
    },
    {
        "href": "solrquery.getgroupcachepercent.php",
        "name": "SolrQuery::getGroupCachePercent",
        "description": "Returns group cache percent value"
    },
    {
        "href": "solrquery.getgroupfacet.php",
        "name": "SolrQuery::getGroupFacet",
        "description": "Returns the group.facet parameter value"
    },
    {
        "href": "solrquery.getgroupfields.php",
        "name": "SolrQuery::getGroupFields",
        "description": "Returns group fields (group.field parameter values)"
    },
    {
        "href": "solrquery.getgroupformat.php",
        "name": "SolrQuery::getGroupFormat",
        "description": "Returns the group.format value"
    },
    {
        "href": "solrquery.getgroupfunctions.php",
        "name": "SolrQuery::getGroupFunctions",
        "description": "Returns group functions (group.func parameter values)"
    },
    {
        "href": "solrquery.getgrouplimit.php",
        "name": "SolrQuery::getGroupLimit",
        "description": "Returns the group.limit value"
    },
    {
        "href": "solrquery.getgroupmain.php",
        "name": "SolrQuery::getGroupMain",
        "description": "Returns the group.main value"
    },
    {
        "href": "solrquery.getgroupngroups.php",
        "name": "SolrQuery::getGroupNGroups",
        "description": "Returns the group.ngroups value"
    },
    {
        "href": "solrquery.getgroupoffset.php",
        "name": "SolrQuery::getGroupOffset",
        "description": "Returns the group.offset value"
    },
    {
        "href": "solrquery.getgroupqueries.php",
        "name": "SolrQuery::getGroupQueries",
        "description": "Returns all the group.query parameter values"
    },
    {
        "href": "solrquery.getgroupsortfields.php",
        "name": "SolrQuery::getGroupSortFields",
        "description": "Returns the group.sort value"
    },
    {
        "href": "solrquery.getgrouptruncate.php",
        "name": "SolrQuery::getGroupTruncate",
        "description": "Returns the group.truncate value"
    },
    {
        "href": "solrquery.gethighlight.php",
        "name": "SolrQuery::getHighlight",
        "description": "Returns the state of the hl parameter"
    },
    {
        "href": "solrquery.gethighlightalternatefield.php",
        "name": "SolrQuery::getHighlightAlternateField",
        "description": "Returns the highlight field to use as backup or default"
    },
    {
        "href": "solrquery.gethighlightfields.php",
        "name": "SolrQuery::getHighlightFields",
        "description": "Returns all the fields that Solr should generate highlighted snippets for"
    },
    {
        "href": "solrquery.gethighlightformatter.php",
        "name": "SolrQuery::getHighlightFormatter",
        "description": "Returns the formatter for the highlighted output"
    },
    {
        "href": "solrquery.gethighlightfragmenter.php",
        "name": "SolrQuery::getHighlightFragmenter",
        "description": "Returns the text snippet generator for highlighted text"
    },
    {
        "href": "solrquery.gethighlightfragsize.php",
        "name": "SolrQuery::getHighlightFragsize",
        "description": "Returns the number of characters of fragments to consider for highlighting"
    },
    {
        "href": "solrquery.gethighlighthighlightmultiterm.php",
        "name": "SolrQuery::getHighlightHighlightMultiTerm",
        "description": "Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries"
    },
    {
        "href": "solrquery.gethighlightmaxalternatefieldlength.php",
        "name": "SolrQuery::getHighlightMaxAlternateFieldLength",
        "description": "Returns the maximum number of characters of the field to return"
    },
    {
        "href": "solrquery.gethighlightmaxanalyzedchars.php",
        "name": "SolrQuery::getHighlightMaxAnalyzedChars",
        "description": "Returns the maximum number of characters into a document to look for suitable snippets"
    },
    {
        "href": "solrquery.gethighlightmergecontiguous.php",
        "name": "SolrQuery::getHighlightMergeContiguous",
        "description": "Returns whether or not the collapse contiguous fragments into a single fragment"
    },
    {
        "href": "solrquery.gethighlightregexmaxanalyzedchars.php",
        "name": "SolrQuery::getHighlightRegexMaxAnalyzedChars",
        "description": "Returns the maximum number of characters from a field when using the regex fragmenter"
    },
    {
        "href": "solrquery.gethighlightregexpattern.php",
        "name": "SolrQuery::getHighlightRegexPattern",
        "description": "Returns the regular expression for fragmenting"
    },
    {
        "href": "solrquery.gethighlightregexslop.php",
        "name": "SolrQuery::getHighlightRegexSlop",
        "description": "Returns the deviation factor from the ideal fragment size"
    },
    {
        "href": "solrquery.gethighlightrequirefieldmatch.php",
        "name": "SolrQuery::getHighlightRequireFieldMatch",
        "description": "Returns if a field will only be highlighted if the query matched in this particular field"
    },
    {
        "href": "solrquery.gethighlightsimplepost.php",
        "name": "SolrQuery::getHighlightSimplePost",
        "description": "Returns the text which appears after a highlighted term"
    },
    {
        "href": "solrquery.gethighlightsimplepre.php",
        "name": "SolrQuery::getHighlightSimplePre",
        "description": "Returns the text which appears before a highlighted term"
    },
    {
        "href": "solrquery.gethighlightsnippets.php",
        "name": "SolrQuery::getHighlightSnippets",
        "description": "Returns the maximum number of highlighted snippets to generate per field"
    },
    {
        "href": "solrquery.gethighlightusephrasehighlighter.php",
        "name": "SolrQuery::getHighlightUsePhraseHighlighter",
        "description": "Returns the state of the hl.usePhraseHighlighter parameter"
    },
    {
        "href": "solrquery.getmlt.php",
        "name": "SolrQuery::getMlt",
        "description": "Returns whether or not MoreLikeThis results should be enabled"
    },
    {
        "href": "solrquery.getmltboost.php",
        "name": "SolrQuery::getMltBoost",
        "description": "Returns whether or not the query will be boosted by the interesting term relevance"
    },
    {
        "href": "solrquery.getmltcount.php",
        "name": "SolrQuery::getMltCount",
        "description": "Returns the number of similar documents to return for each result"
    },
    {
        "href": "solrquery.getmltfields.php",
        "name": "SolrQuery::getMltFields",
        "description": "Returns all the fields to use for similarity"
    },
    {
        "href": "solrquery.getmltmaxnumqueryterms.php",
        "name": "SolrQuery::getMltMaxNumQueryTerms",
        "description": "Returns the maximum number of query terms that will be included in any generated query"
    },
    {
        "href": "solrquery.getmltmaxnumtokens.php",
        "name": "SolrQuery::getMltMaxNumTokens",
        "description": "Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support"
    },
    {
        "href": "solrquery.getmltmaxwordlength.php",
        "name": "SolrQuery::getMltMaxWordLength",
        "description": "Returns the maximum word length above which words will be ignored"
    },
    {
        "href": "solrquery.getmltmindocfrequency.php",
        "name": "SolrQuery::getMltMinDocFrequency",
        "description": "Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs"
    },
    {
        "href": "solrquery.getmltmintermfrequency.php",
        "name": "SolrQuery::getMltMinTermFrequency",
        "description": "Returns the frequency below which terms will be ignored in the source document"
    },
    {
        "href": "solrquery.getmltminwordlength.php",
        "name": "SolrQuery::getMltMinWordLength",
        "description": "Returns the minimum word length below which words will be ignored"
    },
    {
        "href": "solrquery.getmltqueryfields.php",
        "name": "SolrQuery::getMltQueryFields",
        "description": "Returns the query fields and their boosts"
    },
    {
        "href": "solrquery.getquery.php",
        "name": "SolrQuery::getQuery",
        "description": "Returns the main query"
    },
    {
        "href": "solrquery.getrows.php",
        "name": "SolrQuery::getRows",
        "description": "Returns the maximum number of documents"
    },
    {
        "href": "solrquery.getsortfields.php",
        "name": "SolrQuery::getSortFields",
        "description": "Returns all the sort fields"
    },
    {
        "href": "solrquery.getstart.php",
        "name": "SolrQuery::getStart",
        "description": "Returns the offset in the complete result set"
    },
    {
        "href": "solrquery.getstats.php",
        "name": "SolrQuery::getStats",
        "description": "Returns whether or not stats is enabled"
    },
    {
        "href": "solrquery.getstatsfacets.php",
        "name": "SolrQuery::getStatsFacets",
        "description": "Returns all the stats facets that were set"
    },
    {
        "href": "solrquery.getstatsfields.php",
        "name": "SolrQuery::getStatsFields",
        "description": "Returns all the statistics fields"
    },
    {
        "href": "solrquery.getterms.php",
        "name": "SolrQuery::getTerms",
        "description": "Returns whether or not the TermsComponent is enabled"
    },
    {
        "href": "solrquery.gettermsfield.php",
        "name": "SolrQuery::getTermsField",
        "description": "Returns the field from which the terms are retrieved"
    },
    {
        "href": "solrquery.gettermsincludelowerbound.php",
        "name": "SolrQuery::getTermsIncludeLowerBound",
        "description": "Returns whether or not to include the lower bound in the result set"
    },
    {
        "href": "solrquery.gettermsincludeupperbound.php",
        "name": "SolrQuery::getTermsIncludeUpperBound",
        "description": "Returns whether or not to include the upper bound term in the result set"
    },
    {
        "href": "solrquery.gettermslimit.php",
        "name": "SolrQuery::getTermsLimit",
        "description": "Returns the maximum number of terms Solr should return"
    },
    {
        "href": "solrquery.gettermslowerbound.php",
        "name": "SolrQuery::getTermsLowerBound",
        "description": "Returns the term to start at"
    },
    {
        "href": "solrquery.gettermsmaxcount.php",
        "name": "SolrQuery::getTermsMaxCount",
        "description": "Returns the maximum document frequency"
    },
    {
        "href": "solrquery.gettermsmincount.php",
        "name": "SolrQuery::getTermsMinCount",
        "description": "Returns the minimum document frequency to return in order to be included"
    },
    {
        "href": "solrquery.gettermsprefix.php",
        "name": "SolrQuery::getTermsPrefix",
        "description": "Returns the term prefix"
    },
    {
        "href": "solrquery.gettermsreturnraw.php",
        "name": "SolrQuery::getTermsReturnRaw",
        "description": "Whether or not to return raw characters"
    },
    {
        "href": "solrquery.gettermssort.php",
        "name": "SolrQuery::getTermsSort",
        "description": "Returns an integer indicating how terms are sorted"
    },
    {
        "href": "solrquery.gettermsupperbound.php",
        "name": "SolrQuery::getTermsUpperBound",
        "description": "Returns the term to stop at"
    },
    {
        "href": "solrquery.gettimeallowed.php",
        "name": "SolrQuery::getTimeAllowed",
        "description": "Returns the time in milliseconds allowed for the query to finish"
    },
    {
        "href": "solrquery.removeexpandfilterquery.php",
        "name": "SolrQuery::removeExpandFilterQuery",
        "description": "Removes an expand filter query"
    },
    {
        "href": "solrquery.removeexpandsortfield.php",
        "name": "SolrQuery::removeExpandSortField",
        "description": "Removes an expand sort field from the expand.sort parameter"
    },
    {
        "href": "solrquery.removefacetdatefield.php",
        "name": "SolrQuery::removeFacetDateField",
        "description": "Removes one of the facet date fields"
    },
    {
        "href": "solrquery.removefacetdateother.php",
        "name": "SolrQuery::removeFacetDateOther",
        "description": "Removes one of the facet.date.other parameters"
    },
    {
        "href": "solrquery.removefacetfield.php",
        "name": "SolrQuery::removeFacetField",
        "description": "Removes one of the facet.date parameters"
    },
    {
        "href": "solrquery.removefacetquery.php",
        "name": "SolrQuery::removeFacetQuery",
        "description": "Removes one of the facet.query parameters"
    },
    {
        "href": "solrquery.removefield.php",
        "name": "SolrQuery::removeField",
        "description": "Removes a field from the list of fields"
    },
    {
        "href": "solrquery.removefilterquery.php",
        "name": "SolrQuery::removeFilterQuery",
        "description": "Removes a filter query"
    },
    {
        "href": "solrquery.removehighlightfield.php",
        "name": "SolrQuery::removeHighlightField",
        "description": "Removes one of the fields used for highlighting"
    },
    {
        "href": "solrquery.removemltfield.php",
        "name": "SolrQuery::removeMltField",
        "description": "Removes one of the moreLikeThis fields"
    },
    {
        "href": "solrquery.removemltqueryfield.php",
        "name": "SolrQuery::removeMltQueryField",
        "description": "Removes one of the moreLikeThis query fields"
    },
    {
        "href": "solrquery.removesortfield.php",
        "name": "SolrQuery::removeSortField",
        "description": "Removes one of the sort fields"
    },
    {
        "href": "solrquery.removestatsfacet.php",
        "name": "SolrQuery::removeStatsFacet",
        "description": "Removes one of the stats.facet parameters"
    },
    {
        "href": "solrquery.removestatsfield.php",
        "name": "SolrQuery::removeStatsField",
        "description": "Removes one of the stats.field parameters"
    },
    {
        "href": "solrquery.setechohandler.php",
        "name": "SolrQuery::setEchoHandler",
        "description": "Toggles the echoHandler parameter"
    },
    {
        "href": "solrquery.setechoparams.php",
        "name": "SolrQuery::setEchoParams",
        "description": "Determines what kind of parameters to include in the response"
    },
    {
        "href": "solrquery.setexpand.php",
        "name": "SolrQuery::setExpand",
        "description": "Enables/Disables the Expand Component"
    },
    {
        "href": "solrquery.setexpandquery.php",
        "name": "SolrQuery::setExpandQuery",
        "description": "Sets the expand.q parameter"
    },
    {
        "href": "solrquery.setexpandrows.php",
        "name": "SolrQuery::setExpandRows",
        "description": "Sets the number of rows to display in each group (expand.rows). Server Default 5"
    },
    {
        "href": "solrquery.setexplainother.php",
        "name": "SolrQuery::setExplainOther",
        "description": "Sets the explainOther common query parameter"
    },
    {
        "href": "solrquery.setfacet.php",
        "name": "SolrQuery::setFacet",
        "description": "Maps to the facet parameter. Enables or disables facetting"
    },
    {
        "href": "solrquery.setfacetdateend.php",
        "name": "SolrQuery::setFacetDateEnd",
        "description": "Maps to facet.date.end"
    },
    {
        "href": "solrquery.setfacetdategap.php",
        "name": "SolrQuery::setFacetDateGap",
        "description": "Maps to facet.date.gap"
    },
    {
        "href": "solrquery.setfacetdatehardend.php",
        "name": "SolrQuery::setFacetDateHardEnd",
        "description": "Maps to facet.date.hardend"
    },
    {
        "href": "solrquery.setfacetdatestart.php",
        "name": "SolrQuery::setFacetDateStart",
        "description": "Maps to facet.date.start"
    },
    {
        "href": "solrquery.setfacetenumcachemindefaultfrequency.php",
        "name": "SolrQuery::setFacetEnumCacheMinDefaultFrequency",
        "description": "Sets the minimum document frequency used for determining term count"
    },
    {
        "href": "solrquery.setfacetlimit.php",
        "name": "SolrQuery::setFacetLimit",
        "description": "Maps to facet.limit"
    },
    {
        "href": "solrquery.setfacetmethod.php",
        "name": "SolrQuery::setFacetMethod",
        "description": "Specifies the type of algorithm to use when faceting a field"
    },
    {
        "href": "solrquery.setfacetmincount.php",
        "name": "SolrQuery::setFacetMinCount",
        "description": "Maps to facet.mincount"
    },
    {
        "href": "solrquery.setfacetmissing.php",
        "name": "SolrQuery::setFacetMissing",
        "description": "Maps to facet.missing"
    },
    {
        "href": "solrquery.setfacetoffset.php",
        "name": "SolrQuery::setFacetOffset",
        "description": "Sets the offset into the list of constraints to allow for pagination"
    },
    {
        "href": "solrquery.setfacetprefix.php",
        "name": "SolrQuery::setFacetPrefix",
        "description": "Specifies a string prefix with which to limits the terms on which to facet"
    },
    {
        "href": "solrquery.setfacetsort.php",
        "name": "SolrQuery::setFacetSort",
        "description": "Determines the ordering of the facet field constraints"
    },
    {
        "href": "solrquery.setgroup.php",
        "name": "SolrQuery::setGroup",
        "description": "Enable/Disable result grouping (group parameter)"
    },
    {
        "href": "solrquery.setgroupcachepercent.php",
        "name": "SolrQuery::setGroupCachePercent",
        "description": "Enables caching for result grouping"
    },
    {
        "href": "solrquery.setgroupfacet.php",
        "name": "SolrQuery::setGroupFacet",
        "description": "Sets group.facet parameter"
    },
    {
        "href": "solrquery.setgroupformat.php",
        "name": "SolrQuery::setGroupFormat",
        "description": "Sets the group format, result structure (group.format parameter)"
    },
    {
        "href": "solrquery.setgrouplimit.php",
        "name": "SolrQuery::setGroupLimit",
        "description": "Specifies the number of results to return for each group. The server default value is 1"
    },
    {
        "href": "solrquery.setgroupmain.php",
        "name": "SolrQuery::setGroupMain",
        "description": "If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple"
    },
    {
        "href": "solrquery.setgroupngroups.php",
        "name": "SolrQuery::setGroupNGroups",
        "description": "If true, Solr includes the number of groups that have matched the query in the results"
    },
    {
        "href": "solrquery.setgroupoffset.php",
        "name": "SolrQuery::setGroupOffset",
        "description": "Sets the group.offset parameter"
    },
    {
        "href": "solrquery.setgrouptruncate.php",
        "name": "SolrQuery::setGroupTruncate",
        "description": "If true, facet counts are based on the most relevant document of each group matching the query"
    },
    {
        "href": "solrquery.sethighlight.php",
        "name": "SolrQuery::setHighlight",
        "description": "Enables or disables highlighting"
    },
    {
        "href": "solrquery.sethighlightalternatefield.php",
        "name": "SolrQuery::setHighlightAlternateField",
        "description": "Specifies the backup field to use"
    },
    {
        "href": "solrquery.sethighlightformatter.php",
        "name": "SolrQuery::setHighlightFormatter",
        "description": "Specify a formatter for the highlight output"
    },
    {
        "href": "solrquery.sethighlightfragmenter.php",
        "name": "SolrQuery::setHighlightFragmenter",
        "description": "Sets a text snippet generator for highlighted text"
    },
    {
        "href": "solrquery.sethighlightfragsize.php",
        "name": "SolrQuery::setHighlightFragsize",
        "description": "The size of fragments to consider for highlighting"
    },
    {
        "href": "solrquery.sethighlighthighlightmultiterm.php",
        "name": "SolrQuery::setHighlightHighlightMultiTerm",
        "description": "Use SpanScorer to highlight phrase terms"
    },
    {
        "href": "solrquery.sethighlightmaxalternatefieldlength.php",
        "name": "SolrQuery::setHighlightMaxAlternateFieldLength",
        "description": "Sets the maximum number of characters of the field to return"
    },
    {
        "href": "solrquery.sethighlightmaxanalyzedchars.php",
        "name": "SolrQuery::setHighlightMaxAnalyzedChars",
        "description": "Specifies the number of characters into a document to look for suitable snippets"
    },
    {
        "href": "solrquery.sethighlightmergecontiguous.php",
        "name": "SolrQuery::setHighlightMergeContiguous",
        "description": "Whether or not to collapse contiguous fragments into a single fragment"
    },
    {
        "href": "solrquery.sethighlightregexmaxanalyzedchars.php",
        "name": "SolrQuery::setHighlightRegexMaxAnalyzedChars",
        "description": "Specify the maximum number of characters to analyze"
    },
    {
        "href": "solrquery.sethighlightregexpattern.php",
        "name": "SolrQuery::setHighlightRegexPattern",
        "description": "Specify the regular expression for fragmenting"
    },
    {
        "href": "solrquery.sethighlightregexslop.php",
        "name": "SolrQuery::setHighlightRegexSlop",
        "description": "Sets the factor by which the regex fragmenter can stray from the ideal fragment size"
    },
    {
        "href": "solrquery.sethighlightrequirefieldmatch.php",
        "name": "SolrQuery::setHighlightRequireFieldMatch",
        "description": "Require field matching during highlighting"
    },
    {
        "href": "solrquery.sethighlightsimplepost.php",
        "name": "SolrQuery::setHighlightSimplePost",
        "description": "Sets the text which appears after a highlighted term"
    },
    {
        "href": "solrquery.sethighlightsimplepre.php",
        "name": "SolrQuery::setHighlightSimplePre",
        "description": "Sets the text which appears before a highlighted term"
    },
    {
        "href": "solrquery.sethighlightsnippets.php",
        "name": "SolrQuery::setHighlightSnippets",
        "description": "Sets the maximum number of highlighted snippets to generate per field"
    },
    {
        "href": "solrquery.sethighlightusephrasehighlighter.php",
        "name": "SolrQuery::setHighlightUsePhraseHighlighter",
        "description": "Whether to highlight phrase terms only when they appear within the query phrase"
    },
    {
        "href": "solrquery.setmlt.php",
        "name": "SolrQuery::setMlt",
        "description": "Enables or disables moreLikeThis"
    },
    {
        "href": "solrquery.setmltboost.php",
        "name": "SolrQuery::setMltBoost",
        "description": "Set if the query will be boosted by the interesting term relevance"
    },
    {
        "href": "solrquery.setmltcount.php",
        "name": "SolrQuery::setMltCount",
        "description": "Set the number of similar documents to return for each result"
    },
    {
        "href": "solrquery.setmltmaxnumqueryterms.php",
        "name": "SolrQuery::setMltMaxNumQueryTerms",
        "description": "Sets the maximum number of query terms included"
    },
    {
        "href": "solrquery.setmltmaxnumtokens.php",
        "name": "SolrQuery::setMltMaxNumTokens",
        "description": "Specifies the maximum number of tokens to parse"
    },
    {
        "href": "solrquery.setmltmaxwordlength.php",
        "name": "SolrQuery::setMltMaxWordLength",
        "description": "Sets the maximum word length"
    },
    {
        "href": "solrquery.setmltmindocfrequency.php",
        "name": "SolrQuery::setMltMinDocFrequency",
        "description": "Sets the mltMinDoc frequency"
    },
    {
        "href": "solrquery.setmltmintermfrequency.php",
        "name": "SolrQuery::setMltMinTermFrequency",
        "description": "Sets the frequency below which terms will be ignored in the source docs"
    },
    {
        "href": "solrquery.setmltminwordlength.php",
        "name": "SolrQuery::setMltMinWordLength",
        "description": "Sets the minimum word length"
    },
    {
        "href": "solrquery.setomitheader.php",
        "name": "SolrQuery::setOmitHeader",
        "description": "Exclude the header from the returned results"
    },
    {
        "href": "solrquery.setquery.php",
        "name": "SolrQuery::setQuery",
        "description": "Sets the search query"
    },
    {
        "href": "solrquery.setrows.php",
        "name": "SolrQuery::setRows",
        "description": "Specifies the maximum number of rows to return in the result"
    },
    {
        "href": "solrquery.setshowdebuginfo.php",
        "name": "SolrQuery::setShowDebugInfo",
        "description": "Flag to show debug information"
    },
    {
        "href": "solrquery.setstart.php",
        "name": "SolrQuery::setStart",
        "description": "Specifies the number of rows to skip"
    },
    {
        "href": "solrquery.setstats.php",
        "name": "SolrQuery::setStats",
        "description": "Enables or disables the Stats component"
    },
    {
        "href": "solrquery.setterms.php",
        "name": "SolrQuery::setTerms",
        "description": "Enables or disables the TermsComponent"
    },
    {
        "href": "solrquery.settermsfield.php",
        "name": "SolrQuery::setTermsField",
        "description": "Sets the name of the field to get the Terms from"
    },
    {
        "href": "solrquery.settermsincludelowerbound.php",
        "name": "SolrQuery::setTermsIncludeLowerBound",
        "description": "Include the lower bound term in the result set"
    },
    {
        "href": "solrquery.settermsincludeupperbound.php",
        "name": "SolrQuery::setTermsIncludeUpperBound",
        "description": "Include the upper bound term in the result set"
    },
    {
        "href": "solrquery.settermslimit.php",
        "name": "SolrQuery::setTermsLimit",
        "description": "Sets the maximum number of terms to return"
    },
    {
        "href": "solrquery.settermslowerbound.php",
        "name": "SolrQuery::setTermsLowerBound",
        "description": "Specifies the Term to start from"
    },
    {
        "href": "solrquery.settermsmaxcount.php",
        "name": "SolrQuery::setTermsMaxCount",
        "description": "Sets the maximum document frequency"
    },
    {
        "href": "solrquery.settermsmincount.php",
        "name": "SolrQuery::setTermsMinCount",
        "description": "Sets the minimum document frequency"
    },
    {
        "href": "solrquery.settermsprefix.php",
        "name": "SolrQuery::setTermsPrefix",
        "description": "Restrict matches to terms that start with the prefix"
    },
    {
        "href": "solrquery.settermsreturnraw.php",
        "name": "SolrQuery::setTermsReturnRaw",
        "description": "Return the raw characters of the indexed term"
    },
    {
        "href": "solrquery.settermssort.php",
        "name": "SolrQuery::setTermsSort",
        "description": "Specifies how to sort the returned terms"
    },
    {
        "href": "solrquery.settermsupperbound.php",
        "name": "SolrQuery::setTermsUpperBound",
        "description": "Sets the term to stop at"
    },
    {
        "href": "solrquery.settimeallowed.php",
        "name": "SolrQuery::setTimeAllowed",
        "description": "The time allowed for search to finish"
    },
    {
        "href": "solrquery.construct.php",
        "name": "SolrQuery::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrquery.destruct.php",
        "name": "SolrQuery::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrqueryresponse.construct.php",
        "name": "SolrQueryResponse::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrqueryresponse.destruct.php",
        "name": "SolrQueryResponse::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrresponse.getdigestedresponse.php",
        "name": "SolrResponse::getDigestedResponse",
        "description": "Returns the XML response as serialized PHP data"
    },
    {
        "href": "solrresponse.gethttpstatus.php",
        "name": "SolrResponse::getHttpStatus",
        "description": "Returns the HTTP status of the response"
    },
    {
        "href": "solrresponse.gethttpstatusmessage.php",
        "name": "SolrResponse::getHttpStatusMessage",
        "description": "Returns more details on the HTTP status"
    },
    {
        "href": "solrresponse.getrawrequest.php",
        "name": "SolrResponse::getRawRequest",
        "description": "Returns the raw request sent to the Solr server"
    },
    {
        "href": "solrresponse.getrawrequestheaders.php",
        "name": "SolrResponse::getRawRequestHeaders",
        "description": "Returns the raw request headers sent to the Solr server"
    },
    {
        "href": "solrresponse.getrawresponse.php",
        "name": "SolrResponse::getRawResponse",
        "description": "Returns the raw response from the server"
    },
    {
        "href": "solrresponse.getrawresponseheaders.php",
        "name": "SolrResponse::getRawResponseHeaders",
        "description": "Returns the raw response headers from the server"
    },
    {
        "href": "solrresponse.getrequesturl.php",
        "name": "SolrResponse::getRequestUrl",
        "description": "Returns the full URL the request was sent to"
    },
    {
        "href": "solrresponse.getresponse.php",
        "name": "SolrResponse::getResponse",
        "description": "Returns a SolrObject representing the XML response from the server"
    },
    {
        "href": "solrresponse.setparsemode.php",
        "name": "SolrResponse::setParseMode",
        "description": "Sets the parse mode"
    },
    {
        "href": "solrresponse.success.php",
        "name": "SolrResponse::success",
        "description": "Was the request a success"
    },
    {
        "href": "solrserverexception.getinternalinfo.php",
        "name": "SolrServerException::getInternalInfo",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "href": "solrupdateresponse.construct.php",
        "name": "SolrUpdateResponse::__construct",
        "description": "Constructor"
    },
    {
        "href": "solrupdateresponse.destruct.php",
        "name": "SolrUpdateResponse::__destruct",
        "description": "Destructor"
    },
    {
        "href": "solrutils.digestxmlresponse.php",
        "name": "SolrUtils::digestXmlResponse",
        "description": "Parses an response XML string into a SolrObject"
    },
    {
        "href": "solrutils.escapequerychars.php",
        "name": "SolrUtils::escapeQueryChars",
        "description": "Escapes a lucene query string"
    },
    {
        "href": "solrutils.getsolrversion.php",
        "name": "SolrUtils::getSolrVersion",
        "description": "Returns the current version of the Solr extension"
    },
    {
        "href": "solrutils.queryphrase.php",
        "name": "SolrUtils::queryPhrase",
        "description": "Prepares a phrase from an unescaped lucene string"
    },
    {
        "href": "function.solr-get-version.php",
        "name": "solr_get_version",
        "description": "Returns the current version of the Apache Solr extension"
    },
    {
        "href": "function.sort.php",
        "name": "sort",
        "description": "Sort an array in ascending order"
    },
    {
        "href": "function.soundex.php",
        "name": "soundex",
        "description": "Calculate the soundex key of a string"
    },
    {
        "href": "spldoublylinkedlist.add.php",
        "name": "SplDoublyLinkedList::add",
        "description": "Add/insert a new value at the specified index"
    },
    {
        "href": "spldoublylinkedlist.bottom.php",
        "name": "SplDoublyLinkedList::bottom",
        "description": "Peeks at the node from the beginning of the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.count.php",
        "name": "SplDoublyLinkedList::count",
        "description": "Counts the number of elements in the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.current.php",
        "name": "SplDoublyLinkedList::current",
        "description": "Return current array entry"
    },
    {
        "href": "spldoublylinkedlist.getiteratormode.php",
        "name": "SplDoublyLinkedList::getIteratorMode",
        "description": "Returns the mode of iteration"
    },
    {
        "href": "spldoublylinkedlist.isempty.php",
        "name": "SplDoublyLinkedList::isEmpty",
        "description": "Checks whether the doubly linked list is empty"
    },
    {
        "href": "spldoublylinkedlist.key.php",
        "name": "SplDoublyLinkedList::key",
        "description": "Return current node index"
    },
    {
        "href": "spldoublylinkedlist.next.php",
        "name": "SplDoublyLinkedList::next",
        "description": "Move to next entry"
    },
    {
        "href": "spldoublylinkedlist.offsetexists.php",
        "name": "SplDoublyLinkedList::offsetExists",
        "description": "Returns whether the requested $index exists"
    },
    {
        "href": "spldoublylinkedlist.offsetget.php",
        "name": "SplDoublyLinkedList::offsetGet",
        "description": "Returns the value at the specified $index"
    },
    {
        "href": "spldoublylinkedlist.offsetset.php",
        "name": "SplDoublyLinkedList::offsetSet",
        "description": "Sets the value at the specified $index to $value"
    },
    {
        "href": "spldoublylinkedlist.offsetunset.php",
        "name": "SplDoublyLinkedList::offsetUnset",
        "description": "Unsets the value at the specified $index"
    },
    {
        "href": "spldoublylinkedlist.pop.php",
        "name": "SplDoublyLinkedList::pop",
        "description": "Pops a node from the end of the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.prev.php",
        "name": "SplDoublyLinkedList::prev",
        "description": "Move to previous entry"
    },
    {
        "href": "spldoublylinkedlist.push.php",
        "name": "SplDoublyLinkedList::push",
        "description": "Pushes an element at the end of the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.rewind.php",
        "name": "SplDoublyLinkedList::rewind",
        "description": "Rewind iterator back to the start"
    },
    {
        "href": "spldoublylinkedlist.serialize.php",
        "name": "SplDoublyLinkedList::serialize",
        "description": "Serializes the storage"
    },
    {
        "href": "spldoublylinkedlist.setiteratormode.php",
        "name": "SplDoublyLinkedList::setIteratorMode",
        "description": "Sets the mode of iteration"
    },
    {
        "href": "spldoublylinkedlist.shift.php",
        "name": "SplDoublyLinkedList::shift",
        "description": "Shifts a node from the beginning of the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.top.php",
        "name": "SplDoublyLinkedList::top",
        "description": "Peeks at the node from the end of the doubly linked list"
    },
    {
        "href": "spldoublylinkedlist.unserialize.php",
        "name": "SplDoublyLinkedList::unserialize",
        "description": "Unserializes the storage"
    },
    {
        "href": "spldoublylinkedlist.unshift.php",
        "name": "SplDoublyLinkedList::unshift",
        "description": "Prepends the doubly linked list with an element"
    },
    {
        "href": "spldoublylinkedlist.valid.php",
        "name": "SplDoublyLinkedList::valid",
        "description": "Check whether the doubly linked list contains more nodes"
    },
    {
        "href": "splfileinfo.getatime.php",
        "name": "SplFileInfo::getATime",
        "description": "Gets last access time of the file"
    },
    {
        "href": "splfileinfo.getbasename.php",
        "name": "SplFileInfo::getBasename",
        "description": "Gets the base name of the file"
    },
    {
        "href": "splfileinfo.getctime.php",
        "name": "SplFileInfo::getCTime",
        "description": "Gets the inode change time"
    },
    {
        "href": "splfileinfo.getextension.php",
        "name": "SplFileInfo::getExtension",
        "description": "Gets the file extension"
    },
    {
        "href": "splfileinfo.getfileinfo.php",
        "name": "SplFileInfo::getFileInfo",
        "description": "Gets an SplFileInfo object for the file"
    },
    {
        "href": "splfileinfo.getfilename.php",
        "name": "SplFileInfo::getFilename",
        "description": "Gets the filename"
    },
    {
        "href": "splfileinfo.getgroup.php",
        "name": "SplFileInfo::getGroup",
        "description": "Gets the file group"
    },
    {
        "href": "splfileinfo.getinode.php",
        "name": "SplFileInfo::getInode",
        "description": "Gets the inode for the file"
    },
    {
        "href": "splfileinfo.getlinktarget.php",
        "name": "SplFileInfo::getLinkTarget",
        "description": "Gets the target of a link"
    },
    {
        "href": "splfileinfo.getmtime.php",
        "name": "SplFileInfo::getMTime",
        "description": "Gets the last modified time"
    },
    {
        "href": "splfileinfo.getowner.php",
        "name": "SplFileInfo::getOwner",
        "description": "Gets the owner of the file"
    },
    {
        "href": "splfileinfo.getpath.php",
        "name": "SplFileInfo::getPath",
        "description": "Gets the path without filename"
    },
    {
        "href": "splfileinfo.getpathinfo.php",
        "name": "SplFileInfo::getPathInfo",
        "description": "Gets an SplFileInfo object for the path"
    },
    {
        "href": "splfileinfo.getpathname.php",
        "name": "SplFileInfo::getPathname",
        "description": "Gets the path to the file"
    },
    {
        "href": "splfileinfo.getperms.php",
        "name": "SplFileInfo::getPerms",
        "description": "Gets file permissions"
    },
    {
        "href": "splfileinfo.getrealpath.php",
        "name": "SplFileInfo::getRealPath",
        "description": "Gets absolute path to file"
    },
    {
        "href": "splfileinfo.getsize.php",
        "name": "SplFileInfo::getSize",
        "description": "Gets file size"
    },
    {
        "href": "splfileinfo.gettype.php",
        "name": "SplFileInfo::getType",
        "description": "Gets file type"
    },
    {
        "href": "splfileinfo.isdir.php",
        "name": "SplFileInfo::isDir",
        "description": "Tells if the file is a directory"
    },
    {
        "href": "splfileinfo.isexecutable.php",
        "name": "SplFileInfo::isExecutable",
        "description": "Tells if the file is executable"
    },
    {
        "href": "splfileinfo.isfile.php",
        "name": "SplFileInfo::isFile",
        "description": "Tells if the object references a regular file"
    },
    {
        "href": "splfileinfo.islink.php",
        "name": "SplFileInfo::isLink",
        "description": "Tells if the file is a link"
    },
    {
        "href": "splfileinfo.isreadable.php",
        "name": "SplFileInfo::isReadable",
        "description": "Tells if file is readable"
    },
    {
        "href": "splfileinfo.iswritable.php",
        "name": "SplFileInfo::isWritable",
        "description": "Tells if the entry is writable"
    },
    {
        "href": "splfileinfo.openfile.php",
        "name": "SplFileInfo::openFile",
        "description": "Gets an SplFileObject object for the file"
    },
    {
        "href": "splfileinfo.setfileclass.php",
        "name": "SplFileInfo::setFileClass",
        "description": "Sets the class used with SplFileInfo::openFile"
    },
    {
        "href": "splfileinfo.setinfoclass.php",
        "name": "SplFileInfo::setInfoClass",
        "description": "Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo"
    },
    {
        "href": "splfileinfo.construct.php",
        "name": "SplFileInfo::__construct",
        "description": "Construct a new SplFileInfo object"
    },
    {
        "href": "splfileinfo.tostring.php",
        "name": "SplFileInfo::__toString",
        "description": "Returns the path to the file as a string"
    },
    {
        "href": "splfileobject.current.php",
        "name": "SplFileObject::current",
        "description": "Retrieve current line of file"
    },
    {
        "href": "splfileobject.eof.php",
        "name": "SplFileObject::eof",
        "description": "Reached end of file"
    },
    {
        "href": "splfileobject.fflush.php",
        "name": "SplFileObject::fflush",
        "description": "Flushes the output to the file"
    },
    {
        "href": "splfileobject.fgetc.php",
        "name": "SplFileObject::fgetc",
        "description": "Gets character from file"
    },
    {
        "href": "splfileobject.fgetcsv.php",
        "name": "SplFileObject::fgetcsv",
        "description": "Gets line from file and parse as CSV fields"
    },
    {
        "href": "splfileobject.fgets.php",
        "name": "SplFileObject::fgets",
        "description": "Gets line from file"
    },
    {
        "href": "splfileobject.fgetss.php",
        "name": "SplFileObject::fgetss",
        "description": "Gets line from file and strip HTML tags"
    },
    {
        "href": "splfileobject.flock.php",
        "name": "SplFileObject::flock",
        "description": "Portable file locking"
    },
    {
        "href": "splfileobject.fpassthru.php",
        "name": "SplFileObject::fpassthru",
        "description": "Output all remaining data on a file pointer"
    },
    {
        "href": "splfileobject.fputcsv.php",
        "name": "SplFileObject::fputcsv",
        "description": "Write a field array as a CSV line"
    },
    {
        "href": "splfileobject.fread.php",
        "name": "SplFileObject::fread",
        "description": "Read from file"
    },
    {
        "href": "splfileobject.fscanf.php",
        "name": "SplFileObject::fscanf",
        "description": "Parses input from file according to a format"
    },
    {
        "href": "splfileobject.fseek.php",
        "name": "SplFileObject::fseek",
        "description": "Seek to a position"
    },
    {
        "href": "splfileobject.fstat.php",
        "name": "SplFileObject::fstat",
        "description": "Gets information about the file"
    },
    {
        "href": "splfileobject.ftell.php",
        "name": "SplFileObject::ftell",
        "description": "Return current file position"
    },
    {
        "href": "splfileobject.ftruncate.php",
        "name": "SplFileObject::ftruncate",
        "description": "Truncates the file to a given length"
    },
    {
        "href": "splfileobject.fwrite.php",
        "name": "SplFileObject::fwrite",
        "description": "Write to file"
    },
    {
        "href": "splfileobject.getchildren.php",
        "name": "SplFileObject::getChildren",
        "description": "No purpose"
    },
    {
        "href": "splfileobject.getcsvcontrol.php",
        "name": "SplFileObject::getCsvControl",
        "description": "Get the delimiter, enclosure and escape character for CSV"
    },
    {
        "href": "splfileobject.getcurrentline.php",
        "name": "SplFileObject::getCurrentLine",
        "description": "Alias of SplFileObject::fgets"
    },
    {
        "href": "splfileobject.getflags.php",
        "name": "SplFileObject::getFlags",
        "description": "Gets flags for the SplFileObject"
    },
    {
        "href": "splfileobject.getmaxlinelen.php",
        "name": "SplFileObject::getMaxLineLen",
        "description": "Get maximum line length"
    },
    {
        "href": "splfileobject.haschildren.php",
        "name": "SplFileObject::hasChildren",
        "description": "SplFileObject does not have children"
    },
    {
        "href": "splfileobject.key.php",
        "name": "SplFileObject::key",
        "description": "Get line number"
    },
    {
        "href": "splfileobject.next.php",
        "name": "SplFileObject::next",
        "description": "Read next line"
    },
    {
        "href": "splfileobject.rewind.php",
        "name": "SplFileObject::rewind",
        "description": "Rewind the file to the first line"
    },
    {
        "href": "splfileobject.seek.php",
        "name": "SplFileObject::seek",
        "description": "Seek to specified line"
    },
    {
        "href": "splfileobject.setcsvcontrol.php",
        "name": "SplFileObject::setCsvControl",
        "description": "Set the delimiter, enclosure and escape character for CSV"
    },
    {
        "href": "splfileobject.setflags.php",
        "name": "SplFileObject::setFlags",
        "description": "Sets flags for the SplFileObject"
    },
    {
        "href": "splfileobject.setmaxlinelen.php",
        "name": "SplFileObject::setMaxLineLen",
        "description": "Set maximum line length"
    },
    {
        "href": "splfileobject.valid.php",
        "name": "SplFileObject::valid",
        "description": "Not at EOF"
    },
    {
        "href": "splfileobject.construct.php",
        "name": "SplFileObject::__construct",
        "description": "Construct a new file object"
    },
    {
        "href": "splfileobject.tostring.php",
        "name": "SplFileObject::__toString",
        "description": "Alias of SplFileObject::fgets"
    },
    {
        "href": "splfixedarray.count.php",
        "name": "SplFixedArray::count",
        "description": "Returns the size of the array"
    },
    {
        "href": "splfixedarray.current.php",
        "name": "SplFixedArray::current",
        "description": "Return current array entry"
    },
    {
        "href": "splfixedarray.fromarray.php",
        "name": "SplFixedArray::fromArray",
        "description": "Import a PHP array in a SplFixedArray instance"
    },
    {
        "href": "splfixedarray.getsize.php",
        "name": "SplFixedArray::getSize",
        "description": "Gets the size of the array"
    },
    {
        "href": "splfixedarray.key.php",
        "name": "SplFixedArray::key",
        "description": "Return current array index"
    },
    {
        "href": "splfixedarray.next.php",
        "name": "SplFixedArray::next",
        "description": "Move to next entry"
    },
    {
        "href": "splfixedarray.offsetexists.php",
        "name": "SplFixedArray::offsetExists",
        "description": "Returns whether the requested index exists"
    },
    {
        "href": "splfixedarray.offsetget.php",
        "name": "SplFixedArray::offsetGet",
        "description": "Returns the value at the specified index"
    },
    {
        "href": "splfixedarray.offsetset.php",
        "name": "SplFixedArray::offsetSet",
        "description": "Sets a new value at a specified index"
    },
    {
        "href": "splfixedarray.offsetunset.php",
        "name": "SplFixedArray::offsetUnset",
        "description": "Unsets the value at the specified $index"
    },
    {
        "href": "splfixedarray.rewind.php",
        "name": "SplFixedArray::rewind",
        "description": "Rewind iterator back to the start"
    },
    {
        "href": "splfixedarray.setsize.php",
        "name": "SplFixedArray::setSize",
        "description": "Change the size of an array"
    },
    {
        "href": "splfixedarray.toarray.php",
        "name": "SplFixedArray::toArray",
        "description": "Returns a PHP array from the fixed array"
    },
    {
        "href": "splfixedarray.valid.php",
        "name": "SplFixedArray::valid",
        "description": "Check whether the array contains more elements"
    },
    {
        "href": "splfixedarray.construct.php",
        "name": "SplFixedArray::__construct",
        "description": "Constructs a new fixed array"
    },
    {
        "href": "splfixedarray.wakeup.php",
        "name": "SplFixedArray::__wakeup",
        "description": "Reinitialises the array after being unserialised"
    },
    {
        "href": "splheap.compare.php",
        "name": "SplHeap::compare",
        "description": "Compare elements in order to place them correctly in the heap while sifting up"
    },
    {
        "href": "splheap.count.php",
        "name": "SplHeap::count",
        "description": "Counts the number of elements in the heap"
    },
    {
        "href": "splheap.current.php",
        "name": "SplHeap::current",
        "description": "Return current node pointed by the iterator"
    },
    {
        "href": "splheap.extract.php",
        "name": "SplHeap::extract",
        "description": "Extracts a node from top of the heap and sift up"
    },
    {
        "href": "splheap.insert.php",
        "name": "SplHeap::insert",
        "description": "Inserts an element in the heap by sifting it up"
    },
    {
        "href": "splheap.iscorrupted.php",
        "name": "SplHeap::isCorrupted",
        "description": "Tells if the heap is in a corrupted state"
    },
    {
        "href": "splheap.isempty.php",
        "name": "SplHeap::isEmpty",
        "description": "Checks whether the heap is empty"
    },
    {
        "href": "splheap.key.php",
        "name": "SplHeap::key",
        "description": "Return current node index"
    },
    {
        "href": "splheap.next.php",
        "name": "SplHeap::next",
        "description": "Move to the next node"
    },
    {
        "href": "splheap.recoverfromcorruption.php",
        "name": "SplHeap::recoverFromCorruption",
        "description": "Recover from the corrupted state and allow further actions on the heap"
    },
    {
        "href": "splheap.rewind.php",
        "name": "SplHeap::rewind",
        "description": "Rewind iterator back to the start (no-op)"
    },
    {
        "href": "splheap.top.php",
        "name": "SplHeap::top",
        "description": "Peeks at the node from the top of the heap"
    },
    {
        "href": "splheap.valid.php",
        "name": "SplHeap::valid",
        "description": "Check whether the heap contains more nodes"
    },
    {
        "href": "splheap.construct.php",
        "name": "SplHeap::__construct",
        "description": "Constructs a new empty heap"
    },
    {
        "href": "splmaxheap.compare.php",
        "name": "SplMaxHeap::compare",
        "description": "Compare elements in order to place them correctly in the heap while sifting up"
    },
    {
        "href": "splminheap.compare.php",
        "name": "SplMinHeap::compare",
        "description": "Compare elements in order to place them correctly in the heap while sifting up"
    },
    {
        "href": "splobjectstorage.addall.php",
        "name": "SplObjectStorage::addAll",
        "description": "Adds all objects from another storage"
    },
    {
        "href": "splobjectstorage.attach.php",
        "name": "SplObjectStorage::attach",
        "description": "Adds an object in the storage"
    },
    {
        "href": "splobjectstorage.contains.php",
        "name": "SplObjectStorage::contains",
        "description": "Checks if the storage contains a specific object"
    },
    {
        "href": "splobjectstorage.count.php",
        "name": "SplObjectStorage::count",
        "description": "Returns the number of objects in the storage"
    },
    {
        "href": "splobjectstorage.current.php",
        "name": "SplObjectStorage::current",
        "description": "Returns the current storage entry"
    },
    {
        "href": "splobjectstorage.detach.php",
        "name": "SplObjectStorage::detach",
        "description": "Removes an object from the storage"
    },
    {
        "href": "splobjectstorage.gethash.php",
        "name": "SplObjectStorage::getHash",
        "description": "Calculate a unique identifier for the contained objects"
    },
    {
        "href": "splobjectstorage.getinfo.php",
        "name": "SplObjectStorage::getInfo",
        "description": "Returns the data associated with the current iterator entry"
    },
    {
        "href": "splobjectstorage.key.php",
        "name": "SplObjectStorage::key",
        "description": "Returns the index at which the iterator currently is"
    },
    {
        "href": "splobjectstorage.next.php",
        "name": "SplObjectStorage::next",
        "description": "Move to the next entry"
    },
    {
        "href": "splobjectstorage.offsetexists.php",
        "name": "SplObjectStorage::offsetExists",
        "description": "Checks whether an object exists in the storage"
    },
    {
        "href": "splobjectstorage.offsetget.php",
        "name": "SplObjectStorage::offsetGet",
        "description": "Returns the data associated with an object"
    },
    {
        "href": "splobjectstorage.offsetset.php",
        "name": "SplObjectStorage::offsetSet",
        "description": "Associates data to an object in the storage"
    },
    {
        "href": "splobjectstorage.offsetunset.php",
        "name": "SplObjectStorage::offsetUnset",
        "description": "Removes an object from the storage"
    },
    {
        "href": "splobjectstorage.removeall.php",
        "name": "SplObjectStorage::removeAll",
        "description": "Removes objects contained in another storage from the current storage"
    },
    {
        "href": "splobjectstorage.removeallexcept.php",
        "name": "SplObjectStorage::removeAllExcept",
        "description": "Removes all objects except for those contained in another storage from the current storage"
    },
    {
        "href": "splobjectstorage.rewind.php",
        "name": "SplObjectStorage::rewind",
        "description": "Rewind the iterator to the first storage element"
    },
    {
        "href": "splobjectstorage.serialize.php",
        "name": "SplObjectStorage::serialize",
        "description": "Serializes the storage"
    },
    {
        "href": "splobjectstorage.setinfo.php",
        "name": "SplObjectStorage::setInfo",
        "description": "Sets the data associated with the current iterator entry"
    },
    {
        "href": "splobjectstorage.unserialize.php",
        "name": "SplObjectStorage::unserialize",
        "description": "Unserializes a storage from its string representation"
    },
    {
        "href": "splobjectstorage.valid.php",
        "name": "SplObjectStorage::valid",
        "description": "Returns if the current iterator entry is valid"
    },
    {
        "href": "splobserver.update.php",
        "name": "SplObserver::update",
        "description": "Receive update from subject"
    },
    {
        "href": "splpriorityqueue.compare.php",
        "name": "SplPriorityQueue::compare",
        "description": "Compare priorities in order to place elements correctly in the heap while sifting up"
    },
    {
        "href": "splpriorityqueue.count.php",
        "name": "SplPriorityQueue::count",
        "description": "Counts the number of elements in the queue"
    },
    {
        "href": "splpriorityqueue.current.php",
        "name": "SplPriorityQueue::current",
        "description": "Return current node pointed by the iterator"
    },
    {
        "href": "splpriorityqueue.extract.php",
        "name": "SplPriorityQueue::extract",
        "description": "Extracts a node from top of the heap and sift up"
    },
    {
        "href": "splpriorityqueue.getextractflags.php",
        "name": "SplPriorityQueue::getExtractFlags",
        "description": "Get the flags of extraction"
    },
    {
        "href": "splpriorityqueue.insert.php",
        "name": "SplPriorityQueue::insert",
        "description": "Inserts an element in the queue by sifting it up"
    },
    {
        "href": "splpriorityqueue.iscorrupted.php",
        "name": "SplPriorityQueue::isCorrupted",
        "description": "Tells if the priority queue is in a corrupted state"
    },
    {
        "href": "splpriorityqueue.isempty.php",
        "name": "SplPriorityQueue::isEmpty",
        "description": "Checks whether the queue is empty"
    },
    {
        "href": "splpriorityqueue.key.php",
        "name": "SplPriorityQueue::key",
        "description": "Return current node index"
    },
    {
        "href": "splpriorityqueue.next.php",
        "name": "SplPriorityQueue::next",
        "description": "Move to the next node"
    },
    {
        "href": "splpriorityqueue.recoverfromcorruption.php",
        "name": "SplPriorityQueue::recoverFromCorruption",
        "description": "Recover from the corrupted state and allow further actions on the queue"
    },
    {
        "href": "splpriorityqueue.rewind.php",
        "name": "SplPriorityQueue::rewind",
        "description": "Rewind iterator back to the start (no-op)"
    },
    {
        "href": "splpriorityqueue.setextractflags.php",
        "name": "SplPriorityQueue::setExtractFlags",
        "description": "Sets the mode of extraction"
    },
    {
        "href": "splpriorityqueue.top.php",
        "name": "SplPriorityQueue::top",
        "description": "Peeks at the node from the top of the queue"
    },
    {
        "href": "splpriorityqueue.valid.php",
        "name": "SplPriorityQueue::valid",
        "description": "Check whether the queue contains more nodes"
    },
    {
        "href": "splpriorityqueue.construct.php",
        "name": "SplPriorityQueue::__construct",
        "description": "Constructs a new empty queue"
    },
    {
        "href": "splqueue.dequeue.php",
        "name": "SplQueue::dequeue",
        "description": "Dequeues a node from the queue"
    },
    {
        "href": "splqueue.enqueue.php",
        "name": "SplQueue::enqueue",
        "description": "Adds an element to the queue"
    },
    {
        "href": "splqueue.setiteratormode.php",
        "name": "SplQueue::setIteratorMode",
        "description": "Sets the mode of iteration"
    },
    {
        "href": "splqueue.construct.php",
        "name": "SplQueue::__construct",
        "description": "Constructs a new queue implemented using a doubly linked list"
    },
    {
        "href": "splstack.setiteratormode.php",
        "name": "SplStack::setIteratorMode",
        "description": "Sets the mode of iteration"
    },
    {
        "href": "splstack.construct.php",
        "name": "SplStack::__construct",
        "description": "Constructs a new stack implemented using a doubly linked list"
    },
    {
        "href": "splsubject.attach.php",
        "name": "SplSubject::attach",
        "description": "Attach an SplObserver"
    },
    {
        "href": "splsubject.detach.php",
        "name": "SplSubject::detach",
        "description": "Detach an observer"
    },
    {
        "href": "splsubject.notify.php",
        "name": "SplSubject::notify",
        "description": "Notify an observer"
    },
    {
        "href": "spltempfileobject.construct.php",
        "name": "SplTempFileObject::__construct",
        "description": "Construct a new temporary file object"
    },
    {
        "href": "function.spl-autoload.php",
        "name": "spl_autoload",
        "description": "Default implementation for __autoload()"
    },
    {
        "href": "function.spl-autoload-call.php",
        "name": "spl_autoload_call",
        "description": "Try all registered __autoload() functions to load the requested class"
    },
    {
        "href": "function.spl-autoload-extensions.php",
        "name": "spl_autoload_extensions",
        "description": "Register and return default file extensions for spl_autoload"
    },
    {
        "href": "function.spl-autoload-functions.php",
        "name": "spl_autoload_functions",
        "description": "Return all registered __autoload() functions"
    },
    {
        "href": "function.spl-autoload-register.php",
        "name": "spl_autoload_register",
        "description": "Register given function as __autoload() implementation"
    },
    {
        "href": "function.spl-autoload-unregister.php",
        "name": "spl_autoload_unregister",
        "description": "Unregister given function as __autoload() implementation"
    },
    {
        "href": "function.spl-classes.php",
        "name": "spl_classes",
        "description": "Return available SPL classes"
    },
    {
        "href": "function.spl-object-hash.php",
        "name": "spl_object_hash",
        "description": "Return hash id for given object"
    },
    {
        "href": "function.spl-object-id.php",
        "name": "spl_object_id",
        "description": "Return the integer object handle for given object"
    },
    {
        "href": "spoofchecker.areconfusable.php",
        "name": "Spoofchecker::areConfusable",
        "description": "Checks if given strings can be confused"
    },
    {
        "href": "spoofchecker.issuspicious.php",
        "name": "Spoofchecker::isSuspicious",
        "description": "Checks if a given text contains any suspicious characters"
    },
    {
        "href": "spoofchecker.setallowedlocales.php",
        "name": "Spoofchecker::setAllowedLocales",
        "description": "Locales to use when running checks"
    },
    {
        "href": "spoofchecker.setchecks.php",
        "name": "Spoofchecker::setChecks",
        "description": "Set the checks to run"
    },
    {
        "href": "spoofchecker.construct.php",
        "name": "Spoofchecker::__construct",
        "description": "Constructor"
    },
    {
        "href": "function.sprintf.php",
        "name": "sprintf",
        "description": "Return a formatted string"
    },
    {
        "href": "sqlite3.backup.php",
        "name": "SQLite3::backup",
        "description": "Backup one database to another database"
    },
    {
        "href": "sqlite3.busytimeout.php",
        "name": "SQLite3::busyTimeout",
        "description": "Sets the busy connection handler"
    },
    {
        "href": "sqlite3.changes.php",
        "name": "SQLite3::changes",
        "description": "Returns the number of database rows that were changed (or inserted or   deleted) by the most recent SQL statement"
    },
    {
        "href": "sqlite3.close.php",
        "name": "SQLite3::close",
        "description": "Closes the database connection"
    },
    {
        "href": "sqlite3.createaggregate.php",
        "name": "SQLite3::createAggregate",
        "description": "Registers a PHP function for use as an SQL aggregate function"
    },
    {
        "href": "sqlite3.createcollation.php",
        "name": "SQLite3::createCollation",
        "description": "Registers a PHP function for use as an SQL collating function"
    },
    {
        "href": "sqlite3.createfunction.php",
        "name": "SQLite3::createFunction",
        "description": "Registers a PHP function for use as an SQL scalar function"
    },
    {
        "href": "sqlite3.enableexceptions.php",
        "name": "SQLite3::enableExceptions",
        "description": "Enable throwing exceptions"
    },
    {
        "href": "sqlite3.escapestring.php",
        "name": "SQLite3::escapeString",
        "description": "Returns a string that has been properly escaped"
    },
    {
        "href": "sqlite3.exec.php",
        "name": "SQLite3::exec",
        "description": "Executes a result-less query against a given database"
    },
    {
        "href": "sqlite3.lasterrorcode.php",
        "name": "SQLite3::lastErrorCode",
        "description": "Returns the numeric result code of the most recent failed SQLite request"
    },
    {
        "href": "sqlite3.lasterrormsg.php",
        "name": "SQLite3::lastErrorMsg",
        "description": "Returns English text describing the most recent failed SQLite request"
    },
    {
        "href": "sqlite3.lastinsertrowid.php",
        "name": "SQLite3::lastInsertRowID",
        "description": "Returns the row ID of the most recent INSERT into the database"
    },
    {
        "href": "sqlite3.loadextension.php",
        "name": "SQLite3::loadExtension",
        "description": "Attempts to load an SQLite extension library"
    },
    {
        "href": "sqlite3.open.php",
        "name": "SQLite3::open",
        "description": "Opens an SQLite database"
    },
    {
        "href": "sqlite3.openblob.php",
        "name": "SQLite3::openBlob",
        "description": "Opens a stream resource to read a BLOB"
    },
    {
        "href": "sqlite3.prepare.php",
        "name": "SQLite3::prepare",
        "description": "Prepares an SQL statement for execution"
    },
    {
        "href": "sqlite3.query.php",
        "name": "SQLite3::query",
        "description": "Executes an SQL query"
    },
    {
        "href": "sqlite3.querysingle.php",
        "name": "SQLite3::querySingle",
        "description": "Executes a query and returns a single result"
    },
    {
        "href": "sqlite3.setauthorizer.php",
        "name": "SQLite3::setAuthorizer",
        "description": "Configures a callback to be used as an authorizer to limit what a statement can do"
    },
    {
        "href": "sqlite3.version.php",
        "name": "SQLite3::version",
        "description": "Returns the SQLite3 library version as a string constant and as a number"
    },
    {
        "href": "sqlite3.construct.php",
        "name": "SQLite3::__construct",
        "description": "Instantiates an SQLite3 object and opens an SQLite 3 database"
    },
    {
        "href": "sqlite3result.columnname.php",
        "name": "SQLite3Result::columnName",
        "description": "Returns the name of the nth column"
    },
    {
        "href": "sqlite3result.columntype.php",
        "name": "SQLite3Result::columnType",
        "description": "Returns the type of the nth column"
    },
    {
        "href": "sqlite3result.fetcharray.php",
        "name": "SQLite3Result::fetchArray",
        "description": "Fetches a result row as an associative or numerically indexed array or both"
    },
    {
        "href": "sqlite3result.finalize.php",
        "name": "SQLite3Result::finalize",
        "description": "Closes the result set"
    },
    {
        "href": "sqlite3result.numcolumns.php",
        "name": "SQLite3Result::numColumns",
        "description": "Returns the number of columns in the result set"
    },
    {
        "href": "sqlite3result.reset.php",
        "name": "SQLite3Result::reset",
        "description": "Resets the result set back to the first row"
    },
    {
        "href": "sqlite3result.construct.php",
        "name": "SQLite3Result::__construct",
        "description": "Constructs an SQLite3Result"
    },
    {
        "href": "sqlite3stmt.bindparam.php",
        "name": "SQLite3Stmt::bindParam",
        "description": "Binds a parameter to a statement variable"
    },
    {
        "href": "sqlite3stmt.bindvalue.php",
        "name": "SQLite3Stmt::bindValue",
        "description": "Binds the value of a parameter to a statement variable"
    },
    {
        "href": "sqlite3stmt.clear.php",
        "name": "SQLite3Stmt::clear",
        "description": "Clears all current bound parameters"
    },
    {
        "href": "sqlite3stmt.close.php",
        "name": "SQLite3Stmt::close",
        "description": "Closes the prepared statement"
    },
    {
        "href": "sqlite3stmt.execute.php",
        "name": "SQLite3Stmt::execute",
        "description": "Executes a prepared statement and returns a result set object"
    },
    {
        "href": "sqlite3stmt.getsql.php",
        "name": "SQLite3Stmt::getSQL",
        "description": "Get the SQL of the statement"
    },
    {
        "href": "sqlite3stmt.paramcount.php",
        "name": "SQLite3Stmt::paramCount",
        "description": "Returns the number of parameters within the prepared statement"
    },
    {
        "href": "sqlite3stmt.readonly.php",
        "name": "SQLite3Stmt::readOnly",
        "description": "Returns whether a statement is definitely read only"
    },
    {
        "href": "sqlite3stmt.reset.php",
        "name": "SQLite3Stmt::reset",
        "description": "Resets the prepared statement"
    },
    {
        "href": "sqlite3stmt.construct.php",
        "name": "SQLite3Stmt::__construct",
        "description": "Constructs an SQLite3Stmt object"
    },
    {
        "href": "function.sqlsrv-begin-transaction.php",
        "name": "sqlsrv_begin_transaction",
        "description": "Begins a database transaction"
    },
    {
        "href": "function.sqlsrv-cancel.php",
        "name": "sqlsrv_cancel",
        "description": "Cancels a statement"
    },
    {
        "href": "function.sqlsrv-client-info.php",
        "name": "sqlsrv_client_info",
        "description": "Returns information about the client and specified connection"
    },
    {
        "href": "function.sqlsrv-close.php",
        "name": "sqlsrv_close",
        "description": "Closes an open connection and releases resourses associated with the connection"
    },
    {
        "href": "function.sqlsrv-commit.php",
        "name": "sqlsrv_commit",
        "description": "Commits a transaction that was begun with sqlsrv_begin_transaction"
    },
    {
        "href": "function.sqlsrv-configure.php",
        "name": "sqlsrv_configure",
        "description": "Changes the driver error handling and logging configurations"
    },
    {
        "href": "function.sqlsrv-connect.php",
        "name": "sqlsrv_connect",
        "description": "Opens a connection to a Microsoft SQL Server database"
    },
    {
        "href": "function.sqlsrv-errors.php",
        "name": "sqlsrv_errors",
        "description": "Returns error and warning information about the last SQLSRV operation performed"
    },
    {
        "href": "function.sqlsrv-execute.php",
        "name": "sqlsrv_execute",
        "description": "Executes a statement prepared with sqlsrv_prepare"
    },
    {
        "href": "function.sqlsrv-fetch.php",
        "name": "sqlsrv_fetch",
        "description": "Makes the next row in a result set available for reading"
    },
    {
        "href": "function.sqlsrv-fetch-array.php",
        "name": "sqlsrv_fetch_array",
        "description": "Returns a row as an array"
    },
    {
        "href": "function.sqlsrv-fetch-object.php",
        "name": "sqlsrv_fetch_object",
        "description": "Retrieves the next row of data in a result set as an object"
    },
    {
        "href": "function.sqlsrv-field-metadata.php",
        "name": "sqlsrv_field_metadata",
        "description": "Retrieves metadata for the fields of a statement prepared by   sqlsrv_prepare or sqlsrv_query"
    },
    {
        "href": "function.sqlsrv-free-stmt.php",
        "name": "sqlsrv_free_stmt",
        "description": "Frees all resources for the specified statement"
    },
    {
        "href": "function.sqlsrv-get-config.php",
        "name": "sqlsrv_get_config",
        "description": "Returns the value of the specified configuration setting"
    },
    {
        "href": "function.sqlsrv-get-field.php",
        "name": "sqlsrv_get_field",
        "description": "Gets field data from the currently selected row"
    },
    {
        "href": "function.sqlsrv-has-rows.php",
        "name": "sqlsrv_has_rows",
        "description": "Indicates whether the specified statement has rows"
    },
    {
        "href": "function.sqlsrv-next-result.php",
        "name": "sqlsrv_next_result",
        "description": "Makes the next result of the specified statement active"
    },
    {
        "href": "function.sqlsrv-num-fields.php",
        "name": "sqlsrv_num_fields",
        "description": "Retrieves the number of fields (columns) on a statement"
    },
    {
        "href": "function.sqlsrv-num-rows.php",
        "name": "sqlsrv_num_rows",
        "description": "Retrieves the number of rows in a result set"
    },
    {
        "href": "function.sqlsrv-prepare.php",
        "name": "sqlsrv_prepare",
        "description": "Prepares a query for execution"
    },
    {
        "href": "function.sqlsrv-query.php",
        "name": "sqlsrv_query",
        "description": "Prepares and executes a query"
    },
    {
        "href": "function.sqlsrv-rollback.php",
        "name": "sqlsrv_rollback",
        "description": "Rolls back a transaction that was begun with   sqlsrv_begin_transaction"
    },
    {
        "href": "function.sqlsrv-rows-affected.php",
        "name": "sqlsrv_rows_affected",
        "description": "Returns the number of rows modified by the last INSERT, UPDATE, or   DELETE query executed"
    },
    {
        "href": "function.sqlsrv-send-stream-data.php",
        "name": "sqlsrv_send_stream_data",
        "description": "Sends data from parameter streams to the server"
    },
    {
        "href": "function.sqlsrv-server-info.php",
        "name": "sqlsrv_server_info",
        "description": "Returns information about the server"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.bind.php",
        "name": "SqlStatement::bind",
        "description": "Bind statement parameters"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.execute.php",
        "name": "SqlStatement::execute",
        "description": "Execute the operation"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.getnextresult.php",
        "name": "SqlStatement::getNextResult",
        "description": "Get next result"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.getresult.php",
        "name": "SqlStatement::getResult",
        "description": "Get result"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.hasmoreresults.php",
        "name": "SqlStatement::hasMoreResults",
        "description": "Check for more results"
    },
    {
        "href": "mysql-xdevapi-sqlstatement.construct.php",
        "name": "SqlStatement::__construct",
        "description": "Description constructor"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.fetchall.php",
        "name": "SqlStatementResult::fetchAll",
        "description": "Get all rows from result"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.fetchone.php",
        "name": "SqlStatementResult::fetchOne",
        "description": "Get single row"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getaffecteditemscount.php",
        "name": "SqlStatementResult::getAffectedItemsCount",
        "description": "Get affected row count"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getcolumnnames.php",
        "name": "SqlStatementResult::getColumnNames",
        "description": "Get column names"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getcolumns.php",
        "name": "SqlStatementResult::getColumns",
        "description": "Get columns"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getcolumncount.php",
        "name": "SqlStatementResult::getColumnsCount",
        "description": "Get column count"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getgeneratedids.php",
        "name": "SqlStatementResult::getGeneratedIds",
        "description": "Get generated ids"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getlastinsertid.php",
        "name": "SqlStatementResult::getLastInsertId",
        "description": "Get last insert id"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getwarnings.php",
        "name": "SqlStatementResult::getWarnings",
        "description": "Get warnings from last operation"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.getwarningcount.php",
        "name": "SqlStatementResult::getWarningsCount",
        "description": "Get warning count from last operation"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.hasdata.php",
        "name": "SqlStatementResult::hasData",
        "description": "Check if result has data"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.nextresult.php",
        "name": "SqlStatementResult::nextResult",
        "description": "Get next result"
    },
    {
        "href": "mysql-xdevapi-sqlstatementresult.construct.php",
        "name": "SqlStatementResult::__construct",
        "description": "Description constructor"
    },
    {
        "href": "function.sqrt.php",
        "name": "sqrt",
        "description": "Square root"
    },
    {
        "href": "function.srand.php",
        "name": "srand",
        "description": "Seed the random number generator"
    },
    {
        "href": "function.sscanf.php",
        "name": "sscanf",
        "description": "Parses input from a string according to a format"
    },
    {
        "href": "function.ssdeep-fuzzy-compare.php",
        "name": "ssdeep_fuzzy_compare",
        "description": "Calculates the match score between two fuzzy hash signatures"
    },
    {
        "href": "function.ssdeep-fuzzy-hash.php",
        "name": "ssdeep_fuzzy_hash",
        "description": "Create a fuzzy hash from a string"
    },
    {
        "href": "function.ssdeep-fuzzy-hash-filename.php",
        "name": "ssdeep_fuzzy_hash_filename",
        "description": "Create a fuzzy hash from a file"
    },
    {
        "href": "wrappers.ssh2.php",
        "name": "ssh2://",
        "description": "Secure Shell 2"
    },
    {
        "href": "function.ssh2-auth-agent.php",
        "name": "ssh2_auth_agent",
        "description": "Authenticate over SSH using the ssh agent"
    },
    {
        "href": "function.ssh2-auth-hostbased-file.php",
        "name": "ssh2_auth_hostbased_file",
        "description": "Authenticate using a public hostkey"
    },
    {
        "href": "function.ssh2-auth-none.php",
        "name": "ssh2_auth_none",
        "description": "Authenticate as \"none\""
    },
    {
        "href": "function.ssh2-auth-password.php",
        "name": "ssh2_auth_password",
        "description": "Authenticate over SSH using a plain password"
    },
    {
        "href": "function.ssh2-auth-pubkey-file.php",
        "name": "ssh2_auth_pubkey_file",
        "description": "Authenticate using a public key"
    },
    {
        "href": "function.ssh2-connect.php",
        "name": "ssh2_connect",
        "description": "Connect to an SSH server"
    },
    {
        "href": "function.ssh2-disconnect.php",
        "name": "ssh2_disconnect",
        "description": "Close a connection to a remote SSH server"
    },
    {
        "href": "function.ssh2-exec.php",
        "name": "ssh2_exec",
        "description": "Execute a command on a remote server"
    },
    {
        "href": "function.ssh2-fetch-stream.php",
        "name": "ssh2_fetch_stream",
        "description": "Fetch an extended data stream"
    },
    {
        "href": "function.ssh2-fingerprint.php",
        "name": "ssh2_fingerprint",
        "description": "Retrieve fingerprint of remote server"
    },
    {
        "href": "function.ssh2-forward-accept.php",
        "name": "ssh2_forward_accept",
        "description": "Accept a connection created by a listener"
    },
    {
        "href": "function.ssh2-forward-listen.php",
        "name": "ssh2_forward_listen",
        "description": "Bind a port on the remote server and listen for connections"
    },
    {
        "href": "function.ssh2-methods-negotiated.php",
        "name": "ssh2_methods_negotiated",
        "description": "Return list of negotiated methods"
    },
    {
        "href": "function.ssh2-poll.php",
        "name": "ssh2_poll",
        "description": "Poll the channels/listeners/streams for events"
    },
    {
        "href": "function.ssh2-publickey-add.php",
        "name": "ssh2_publickey_add",
        "description": "Add an authorized publickey"
    },
    {
        "href": "function.ssh2-publickey-init.php",
        "name": "ssh2_publickey_init",
        "description": "Initialize Publickey subsystem"
    },
    {
        "href": "function.ssh2-publickey-list.php",
        "name": "ssh2_publickey_list",
        "description": "List currently authorized publickeys"
    },
    {
        "href": "function.ssh2-publickey-remove.php",
        "name": "ssh2_publickey_remove",
        "description": "Remove an authorized publickey"
    },
    {
        "href": "function.ssh2-scp-recv.php",
        "name": "ssh2_scp_recv",
        "description": "Request a file via SCP"
    },
    {
        "href": "function.ssh2-scp-send.php",
        "name": "ssh2_scp_send",
        "description": "Send a file via SCP"
    },
    {
        "href": "function.ssh2-send-eof.php",
        "name": "ssh2_send_eof",
        "description": "Send EOF to stream"
    },
    {
        "href": "function.ssh2-sftp.php",
        "name": "ssh2_sftp",
        "description": "Initialize SFTP subsystem"
    },
    {
        "href": "function.ssh2-sftp-chmod.php",
        "name": "ssh2_sftp_chmod",
        "description": "Changes file mode"
    },
    {
        "href": "function.ssh2-sftp-lstat.php",
        "name": "ssh2_sftp_lstat",
        "description": "Stat a symbolic link"
    },
    {
        "href": "function.ssh2-sftp-mkdir.php",
        "name": "ssh2_sftp_mkdir",
        "description": "Create a directory"
    },
    {
        "href": "function.ssh2-sftp-readlink.php",
        "name": "ssh2_sftp_readlink",
        "description": "Return the target of a symbolic link"
    },
    {
        "href": "function.ssh2-sftp-realpath.php",
        "name": "ssh2_sftp_realpath",
        "description": "Resolve the realpath of a provided path string"
    },
    {
        "href": "function.ssh2-sftp-rename.php",
        "name": "ssh2_sftp_rename",
        "description": "Rename a remote file"
    },
    {
        "href": "function.ssh2-sftp-rmdir.php",
        "name": "ssh2_sftp_rmdir",
        "description": "Remove a directory"
    },
    {
        "href": "function.ssh2-sftp-stat.php",
        "name": "ssh2_sftp_stat",
        "description": "Stat a file on a remote filesystem"
    },
    {
        "href": "function.ssh2-sftp-symlink.php",
        "name": "ssh2_sftp_symlink",
        "description": "Create a symlink"
    },
    {
        "href": "function.ssh2-sftp-unlink.php",
        "name": "ssh2_sftp_unlink",
        "description": "Delete a file"
    },
    {
        "href": "function.ssh2-shell.php",
        "name": "ssh2_shell",
        "description": "Request an interactive shell"
    },
    {
        "href": "function.ssh2-tunnel.php",
        "name": "ssh2_tunnel",
        "description": "Open a tunnel through a remote server"
    },
    {
        "href": "context.ssl.php",
        "name": "SSL context options",
        "description": "SSL context option listing"
    },
    {
        "href": "function.stat.php",
        "name": "stat",
        "description": "Gives information about a file"
    },
    {
        "href": "mysql-xdevapi-statement.getnextresult.php",
        "name": "Statement::getNextResult",
        "description": "Get next result"
    },
    {
        "href": "mysql-xdevapi-statement.getresult.php",
        "name": "Statement::getResult",
        "description": "Get result"
    },
    {
        "href": "mysql-xdevapi-statement.hasmoreresults.php",
        "name": "Statement::hasMoreResults",
        "description": "Check if more results"
    },
    {
        "href": "mysql-xdevapi-statement.construct.php",
        "name": "Statement::__construct",
        "description": "Description constructor"
    },
    {
        "href": "stomp.abort.php",
        "name": "Stomp::abort",
        "description": "Rolls back a transaction in progress"
    },
    {
        "href": "stomp.ack.php",
        "name": "Stomp::ack",
        "description": "Acknowledges consumption of a message"
    },
    {
        "href": "stomp.begin.php",
        "name": "Stomp::begin",
        "description": "Starts a transaction"
    },
    {
        "href": "stomp.commit.php",
        "name": "Stomp::commit",
        "description": "Commits a transaction in progress"
    },
    {
        "href": "stomp.error.php",
        "name": "Stomp::error",
        "description": "Gets the last stomp error"
    },
    {
        "href": "stomp.getreadtimeout.php",
        "name": "Stomp::getReadTimeout",
        "description": "Gets read timeout"
    },
    {
        "href": "stomp.getsessionid.php",
        "name": "Stomp::getSessionId",
        "description": "Gets the current stomp session ID"
    },
    {
        "href": "stomp.hasframe.php",
        "name": "Stomp::hasFrame",
        "description": "Indicates whether or not there is a frame ready to read"
    },
    {
        "href": "stomp.readframe.php",
        "name": "Stomp::readFrame",
        "description": "Reads the next frame"
    },
    {
        "href": "stomp.send.php",
        "name": "Stomp::send",
        "description": "Sends a message"
    },
    {
        "href": "stomp.setreadtimeout.php",
        "name": "Stomp::setReadTimeout",
        "description": "Sets read timeout"
    },
    {
        "href": "stomp.subscribe.php",
        "name": "Stomp::subscribe",
        "description": "Registers to listen to a given destination"
    },
    {
        "href": "stomp.unsubscribe.php",
        "name": "Stomp::unsubscribe",
        "description": "Removes an existing subscription"
    },
    {
        "href": "stomp.construct.php",
        "name": "Stomp::__construct",
        "description": "Opens a connection"
    },
    {
        "href": "stomp.destruct.php",
        "name": "Stomp::__destruct",
        "description": "Closes stomp connection"
    },
    {
        "href": "stomp.getdetails.php",
        "name": "StompException::getDetails",
        "description": "Get exception details"
    },
    {
        "href": "stompframe.construct.php",
        "name": "StompFrame::__construct",
        "description": "Constructor"
    },
    {
        "href": "function.stomp-connect-error.php",
        "name": "stomp_connect_error",
        "description": "Returns a string description of the last connect error"
    },
    {
        "href": "function.stomp-version.php",
        "name": "stomp_version",
        "description": "Gets the current stomp extension version"
    },
    {
        "href": "function.strcasecmp.php",
        "name": "strcasecmp",
        "description": "Binary safe case-insensitive string comparison"
    },
    {
        "href": "function.strchr.php",
        "name": "strchr",
        "description": "Alias of strstr"
    },
    {
        "href": "function.strcmp.php",
        "name": "strcmp",
        "description": "Binary safe string comparison"
    },
    {
        "href": "function.strcoll.php",
        "name": "strcoll",
        "description": "Locale based string comparison"
    },
    {
        "href": "function.strcspn.php",
        "name": "strcspn",
        "description": "Find length of initial segment not matching mask"
    },
    {
        "href": "streamwrapper.dir-closedir.php",
        "name": "streamWrapper::dir_closedir",
        "description": "Close directory handle"
    },
    {
        "href": "streamwrapper.dir-opendir.php",
        "name": "streamWrapper::dir_opendir",
        "description": "Open directory handle"
    },
    {
        "href": "streamwrapper.dir-readdir.php",
        "name": "streamWrapper::dir_readdir",
        "description": "Read entry from directory handle"
    },
    {
        "href": "streamwrapper.dir-rewinddir.php",
        "name": "streamWrapper::dir_rewinddir",
        "description": "Rewind directory handle"
    },
    {
        "href": "streamwrapper.mkdir.php",
        "name": "streamWrapper::mkdir",
        "description": "Create a directory"
    },
    {
        "href": "streamwrapper.rename.php",
        "name": "streamWrapper::rename",
        "description": "Renames a file or directory"
    },
    {
        "href": "streamwrapper.rmdir.php",
        "name": "streamWrapper::rmdir",
        "description": "Removes a directory"
    },
    {
        "href": "streamwrapper.stream-cast.php",
        "name": "streamWrapper::stream_cast",
        "description": "Retrieve the underlaying resource"
    },
    {
        "href": "streamwrapper.stream-close.php",
        "name": "streamWrapper::stream_close",
        "description": "Close a resource"
    },
    {
        "href": "streamwrapper.stream-eof.php",
        "name": "streamWrapper::stream_eof",
        "description": "Tests for end-of-file on a file pointer"
    },
    {
        "href": "streamwrapper.stream-flush.php",
        "name": "streamWrapper::stream_flush",
        "description": "Flushes the output"
    },
    {
        "href": "streamwrapper.stream-lock.php",
        "name": "streamWrapper::stream_lock",
        "description": "Advisory file locking"
    },
    {
        "href": "streamwrapper.stream-metadata.php",
        "name": "streamWrapper::stream_metadata",
        "description": "Change stream metadata"
    },
    {
        "href": "streamwrapper.stream-open.php",
        "name": "streamWrapper::stream_open",
        "description": "Opens file or URL"
    },
    {
        "href": "streamwrapper.stream-read.php",
        "name": "streamWrapper::stream_read",
        "description": "Read from stream"
    },
    {
        "href": "streamwrapper.stream-seek.php",
        "name": "streamWrapper::stream_seek",
        "description": "Seeks to specific location in a stream"
    },
    {
        "href": "streamwrapper.stream-set-option.php",
        "name": "streamWrapper::stream_set_option",
        "description": "Change stream options"
    },
    {
        "href": "streamwrapper.stream-stat.php",
        "name": "streamWrapper::stream_stat",
        "description": "Retrieve information about a file resource"
    },
    {
        "href": "streamwrapper.stream-tell.php",
        "name": "streamWrapper::stream_tell",
        "description": "Retrieve the current position of a stream"
    },
    {
        "href": "streamwrapper.stream-truncate.php",
        "name": "streamWrapper::stream_truncate",
        "description": "Truncate stream"
    },
    {
        "href": "streamwrapper.stream-write.php",
        "name": "streamWrapper::stream_write",
        "description": "Write to stream"
    },
    {
        "href": "streamwrapper.unlink.php",
        "name": "streamWrapper::unlink",
        "description": "Delete a file"
    },
    {
        "href": "streamwrapper.url-stat.php",
        "name": "streamWrapper::url_stat",
        "description": "Retrieve information about a file"
    },
    {
        "href": "streamwrapper.construct.php",
        "name": "streamWrapper::__construct",
        "description": "Constructs a new stream wrapper"
    },
    {
        "href": "streamwrapper.destruct.php",
        "name": "streamWrapper::__destruct",
        "description": "Destructs an existing stream wrapper"
    },
    {
        "href": "function.stream-bucket-append.php",
        "name": "stream_bucket_append",
        "description": "Append bucket to brigade"
    },
    {
        "href": "function.stream-bucket-make-writeable.php",
        "name": "stream_bucket_make_writeable",
        "description": "Returns a bucket object from the brigade to operate on"
    },
    {
        "href": "function.stream-bucket-new.php",
        "name": "stream_bucket_new",
        "description": "Create a new bucket for use on the current stream"
    },
    {
        "href": "function.stream-bucket-prepend.php",
        "name": "stream_bucket_prepend",
        "description": "Prepend bucket to brigade"
    },
    {
        "href": "function.stream-context-create.php",
        "name": "stream_context_create",
        "description": "Creates a stream context"
    },
    {
        "href": "function.stream-context-get-default.php",
        "name": "stream_context_get_default",
        "description": "Retrieve the default stream context"
    },
    {
        "href": "function.stream-context-get-options.php",
        "name": "stream_context_get_options",
        "description": "Retrieve options for a stream/wrapper/context"
    },
    {
        "href": "function.stream-context-get-params.php",
        "name": "stream_context_get_params",
        "description": "Retrieves parameters from a context"
    },
    {
        "href": "function.stream-context-set-default.php",
        "name": "stream_context_set_default",
        "description": "Set the default stream context"
    },
    {
        "href": "function.stream-context-set-option.php",
        "name": "stream_context_set_option",
        "description": "Sets an option for a stream/wrapper/context"
    },
    {
        "href": "function.stream-context-set-params.php",
        "name": "stream_context_set_params",
        "description": "Set parameters for a stream/wrapper/context"
    },
    {
        "href": "function.stream-copy-to-stream.php",
        "name": "stream_copy_to_stream",
        "description": "Copies data from one stream to another"
    },
    {
        "href": "function.stream-filter-append.php",
        "name": "stream_filter_append",
        "description": "Attach a filter to a stream"
    },
    {
        "href": "function.stream-filter-prepend.php",
        "name": "stream_filter_prepend",
        "description": "Attach a filter to a stream"
    },
    {
        "href": "function.stream-filter-register.php",
        "name": "stream_filter_register",
        "description": "Register a user defined stream filter"
    },
    {
        "href": "function.stream-filter-remove.php",
        "name": "stream_filter_remove",
        "description": "Remove a filter from a stream"
    },
    {
        "href": "function.stream-get-contents.php",
        "name": "stream_get_contents",
        "description": "Reads remainder of a stream into a string"
    },
    {
        "href": "function.stream-get-filters.php",
        "name": "stream_get_filters",
        "description": "Retrieve list of registered filters"
    },
    {
        "href": "function.stream-get-line.php",
        "name": "stream_get_line",
        "description": "Gets line from stream resource up to a given delimiter"
    },
    {
        "href": "function.stream-get-meta-data.php",
        "name": "stream_get_meta_data",
        "description": "Retrieves header/meta data from streams/file pointers"
    },
    {
        "href": "function.stream-get-transports.php",
        "name": "stream_get_transports",
        "description": "Retrieve list of registered socket transports"
    },
    {
        "href": "function.stream-get-wrappers.php",
        "name": "stream_get_wrappers",
        "description": "Retrieve list of registered streams"
    },
    {
        "href": "function.stream-isatty.php",
        "name": "stream_isatty",
        "description": "Check if a stream is a TTY"
    },
    {
        "href": "function.stream-is-local.php",
        "name": "stream_is_local",
        "description": "Checks if a stream is a local stream"
    },
    {
        "href": "function.stream-notification-callback.php",
        "name": "stream_notification_callback",
        "description": "A callback function for the notification context parameter"
    },
    {
        "href": "function.stream-register-wrapper.php",
        "name": "stream_register_wrapper",
        "description": "Alias of stream_wrapper_register"
    },
    {
        "href": "function.stream-resolve-include-path.php",
        "name": "stream_resolve_include_path",
        "description": "Resolve filename against the include path"
    },
    {
        "href": "function.stream-select.php",
        "name": "stream_select",
        "description": "Runs the equivalent of the select() system call on the given   arrays of streams with a timeout specified by seconds and microseconds"
    },
    {
        "href": "function.stream-set-blocking.php",
        "name": "stream_set_blocking",
        "description": "Set blocking/non-blocking mode on a stream"
    },
    {
        "href": "function.stream-set-chunk-size.php",
        "name": "stream_set_chunk_size",
        "description": "Set the stream chunk size"
    },
    {
        "href": "function.stream-set-read-buffer.php",
        "name": "stream_set_read_buffer",
        "description": "Set read file buffering on the given stream"
    },
    {
        "href": "function.stream-set-timeout.php",
        "name": "stream_set_timeout",
        "description": "Set timeout period on a stream"
    },
    {
        "href": "function.stream-set-write-buffer.php",
        "name": "stream_set_write_buffer",
        "description": "Sets write file buffering on the given stream"
    },
    {
        "href": "function.stream-socket-accept.php",
        "name": "stream_socket_accept",
        "description": "Accept a connection on a socket created by stream_socket_server"
    },
    {
        "href": "function.stream-socket-client.php",
        "name": "stream_socket_client",
        "description": "Open Internet or Unix domain socket connection"
    },
    {
        "href": "function.stream-socket-enable-crypto.php",
        "name": "stream_socket_enable_crypto",
        "description": "Turns encryption on/off on an already connected socket"
    },
    {
        "href": "function.stream-socket-get-name.php",
        "name": "stream_socket_get_name",
        "description": "Retrieve the name of the local or remote sockets"
    },
    {
        "href": "function.stream-socket-pair.php",
        "name": "stream_socket_pair",
        "description": "Creates a pair of connected, indistinguishable socket streams"
    },
    {
        "href": "function.stream-socket-recvfrom.php",
        "name": "stream_socket_recvfrom",
        "description": "Receives data from a socket, connected or not"
    },
    {
        "href": "function.stream-socket-sendto.php",
        "name": "stream_socket_sendto",
        "description": "Sends a message to a socket, whether it is connected or not"
    },
    {
        "href": "function.stream-socket-server.php",
        "name": "stream_socket_server",
        "description": "Create an Internet or Unix domain server socket"
    },
    {
        "href": "function.stream-socket-shutdown.php",
        "name": "stream_socket_shutdown",
        "description": "Shutdown a full-duplex connection"
    },
    {
        "href": "function.stream-supports-lock.php",
        "name": "stream_supports_lock",
        "description": "Tells whether the stream supports locking"
    },
    {
        "href": "function.stream-wrapper-register.php",
        "name": "stream_wrapper_register",
        "description": "Register a URL wrapper implemented as a PHP class"
    },
    {
        "href": "function.stream-wrapper-restore.php",
        "name": "stream_wrapper_restore",
        "description": "Restores a previously unregistered built-in wrapper"
    },
    {
        "href": "function.stream-wrapper-unregister.php",
        "name": "stream_wrapper_unregister",
        "description": "Unregister a URL wrapper"
    },
    {
        "href": "function.strftime.php",
        "name": "strftime",
        "description": "Format a local time/date according to locale settings"
    },
    {
        "href": "stringable.tostring.php",
        "name": "Stringable::__toString",
        "description": "Gets a string representation of the object"
    },
    {
        "href": "function.stripcslashes.php",
        "name": "stripcslashes",
        "description": "Un-quote string quoted with addcslashes"
    },
    {
        "href": "function.stripos.php",
        "name": "stripos",
        "description": "Find the position of the first occurrence of a case-insensitive substring in a string"
    },
    {
        "href": "function.stripslashes.php",
        "name": "stripslashes",
        "description": "Un-quotes a quoted string"
    },
    {
        "href": "function.strip-tags.php",
        "name": "strip_tags",
        "description": "Strip HTML and PHP tags from a string"
    },
    {
        "href": "function.stristr.php",
        "name": "stristr",
        "description": "Case-insensitive strstr"
    },
    {
        "href": "function.strlen.php",
        "name": "strlen",
        "description": "Get string length"
    },
    {
        "href": "function.strnatcasecmp.php",
        "name": "strnatcasecmp",
        "description": "Case insensitive string comparisons using a \"natural order\" algorithm"
    },
    {
        "href": "function.strnatcmp.php",
        "name": "strnatcmp",
        "description": "String comparisons using a \"natural order\" algorithm"
    },
    {
        "href": "function.strncasecmp.php",
        "name": "strncasecmp",
        "description": "Binary safe case-insensitive string comparison of the first n characters"
    },
    {
        "href": "function.strncmp.php",
        "name": "strncmp",
        "description": "Binary safe string comparison of the first n characters"
    },
    {
        "href": "function.strpbrk.php",
        "name": "strpbrk",
        "description": "Search a string for any of a set of characters"
    },
    {
        "href": "function.strpos.php",
        "name": "strpos",
        "description": "Find the position of the first occurrence of a substring in a string"
    },
    {
        "href": "function.strptime.php",
        "name": "strptime",
        "description": "Parse a time/date generated with strftime"
    },
    {
        "href": "function.strrchr.php",
        "name": "strrchr",
        "description": "Find the last occurrence of a character in a string"
    },
    {
        "href": "function.strrev.php",
        "name": "strrev",
        "description": "Reverse a string"
    },
    {
        "href": "function.strripos.php",
        "name": "strripos",
        "description": "Find the position of the last occurrence of a case-insensitive substring in a string"
    },
    {
        "href": "function.strrpos.php",
        "name": "strrpos",
        "description": "Find the position of the last occurrence of a substring in a string"
    },
    {
        "href": "function.strspn.php",
        "name": "strspn",
        "description": "Finds the length of the initial segment of a string consisting   entirely of characters contained within a given mask"
    },
    {
        "href": "function.strstr.php",
        "name": "strstr",
        "description": "Find the first occurrence of a string"
    },
    {
        "href": "function.strtok.php",
        "name": "strtok",
        "description": "Tokenize string"
    },
    {
        "href": "function.strtolower.php",
        "name": "strtolower",
        "description": "Make a string lowercase"
    },
    {
        "href": "function.strtotime.php",
        "name": "strtotime",
        "description": "Parse about any English textual datetime description into a Unix timestamp"
    },
    {
        "href": "function.strtoupper.php",
        "name": "strtoupper",
        "description": "Make a string uppercase"
    },
    {
        "href": "function.strtr.php",
        "name": "strtr",
        "description": "Translate characters or replace substrings"
    },
    {
        "href": "function.strval.php",
        "name": "strval",
        "description": "Get string value of a variable"
    },
    {
        "href": "function.str-contains.php",
        "name": "str_contains",
        "description": "Determine if a string contains a given substring"
    },
    {
        "href": "function.str-ends-with.php",
        "name": "str_ends_with",
        "description": "Checks if a string ends with a given substring"
    },
    {
        "href": "function.str-getcsv.php",
        "name": "str_getcsv",
        "description": "Parse a CSV string into an array"
    },
    {
        "href": "function.str-ireplace.php",
        "name": "str_ireplace",
        "description": "Case-insensitive version of str_replace"
    },
    {
        "href": "function.str-pad.php",
        "name": "str_pad",
        "description": "Pad a string to a certain length with another string"
    },
    {
        "href": "function.str-repeat.php",
        "name": "str_repeat",
        "description": "Repeat a string"
    },
    {
        "href": "function.str-replace.php",
        "name": "str_replace",
        "description": "Replace all occurrences of the search string with the replacement string"
    },
    {
        "href": "function.str-rot13.php",
        "name": "str_rot13",
        "description": "Perform the rot13 transform on a string"
    },
    {
        "href": "function.str-shuffle.php",
        "name": "str_shuffle",
        "description": "Randomly shuffles a string"
    },
    {
        "href": "function.str-split.php",
        "name": "str_split",
        "description": "Convert a string to an array"
    },
    {
        "href": "function.str-starts-with.php",
        "name": "str_starts_with",
        "description": "Checks if a string starts with a given substring"
    },
    {
        "href": "function.str-word-count.php",
        "name": "str_word_count",
        "description": "Return information about words used in a string"
    },
    {
        "href": "function.substr.php",
        "name": "substr",
        "description": "Return part of a string"
    },
    {
        "href": "function.substr-compare.php",
        "name": "substr_compare",
        "description": "Binary safe comparison of two strings from an offset, up to length characters"
    },
    {
        "href": "function.substr-count.php",
        "name": "substr_count",
        "description": "Count the number of substring occurrences"
    },
    {
        "href": "function.substr-replace.php",
        "name": "substr_replace",
        "description": "Replace text within a portion of a string"
    },
    {
        "href": "svm.crossvalidate.php",
        "name": "SVM::crossvalidate",
        "description": "Test training params on subsets of the training data"
    },
    {
        "href": "svm.getoptions.php",
        "name": "SVM::getOptions",
        "description": "Return the current training parameters"
    },
    {
        "href": "svm.setoptions.php",
        "name": "SVM::setOptions",
        "description": "Set training parameters"
    },
    {
        "href": "svm.train.php",
        "name": "SVM::train",
        "description": "Create a SVMModel based on training data"
    },
    {
        "href": "svm.construct.php",
        "name": "SVM::__construct",
        "description": "Construct a new SVM object"
    },
    {
        "href": "svmmodel.checkprobabilitymodel.php",
        "name": "SVMModel::checkProbabilityModel",
        "description": "Returns true if the model has probability information"
    },
    {
        "href": "svmmodel.getlabels.php",
        "name": "SVMModel::getLabels",
        "description": "Get the labels the model was trained on"
    },
    {
        "href": "svmmodel.getnrclass.php",
        "name": "SVMModel::getNrClass",
        "description": "Returns the number of classes the model was trained with"
    },
    {
        "href": "svmmodel.getsvmtype.php",
        "name": "SVMModel::getSvmType",
        "description": "Get the SVM type the model was trained with"
    },
    {
        "href": "svmmodel.getsvrprobability.php",
        "name": "SVMModel::getSvrProbability",
        "description": "Get the sigma value for regression types"
    },
    {
        "href": "svmmodel.load.php",
        "name": "SVMModel::load",
        "description": "Load a saved SVM Model"
    },
    {
        "href": "svmmodel.predict.php",
        "name": "SVMModel::predict",
        "description": "Predict a value for previously unseen data"
    },
    {
        "href": "svmmodel.predict-probability.php",
        "name": "SVMModel::predict_probability",
        "description": "Return class probabilities for previous unseen data"
    },
    {
        "href": "svmmodel.save.php",
        "name": "SVMModel::save",
        "description": "Save a model to a file"
    },
    {
        "href": "svmmodel.construct.php",
        "name": "SVMModel::__construct",
        "description": "Construct a new SVMModel"
    },
    {
        "href": "function.svn-add.php",
        "name": "svn_add",
        "description": "Schedules the addition of an item in a working directory"
    },
    {
        "href": "function.svn-auth-get-parameter.php",
        "name": "svn_auth_get_parameter",
        "description": "Retrieves authentication parameter"
    },
    {
        "href": "function.svn-auth-set-parameter.php",
        "name": "svn_auth_set_parameter",
        "description": "Sets an authentication parameter"
    },
    {
        "href": "function.svn-blame.php",
        "name": "svn_blame",
        "description": "Get the SVN blame for a file"
    },
    {
        "href": "function.svn-cat.php",
        "name": "svn_cat",
        "description": "Returns the contents of a file in a repository"
    },
    {
        "href": "function.svn-checkout.php",
        "name": "svn_checkout",
        "description": "Checks out a working copy from the repository"
    },
    {
        "href": "function.svn-cleanup.php",
        "name": "svn_cleanup",
        "description": "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks"
    },
    {
        "href": "function.svn-client-version.php",
        "name": "svn_client_version",
        "description": "Returns the version of the SVN client libraries"
    },
    {
        "href": "function.svn-commit.php",
        "name": "svn_commit",
        "description": "Sends changes from the local working copy to the repository"
    },
    {
        "href": "function.svn-delete.php",
        "name": "svn_delete",
        "description": "Delete items from a working copy or repository"
    },
    {
        "href": "function.svn-diff.php",
        "name": "svn_diff",
        "description": "Recursively diffs two paths"
    },
    {
        "href": "function.svn-export.php",
        "name": "svn_export",
        "description": "Export the contents of a SVN directory"
    },
    {
        "href": "function.svn-fs-abort-txn.php",
        "name": "svn_fs_abort_txn",
        "description": "Aborts a transaction"
    },
    {
        "href": "function.svn-fs-apply-text.php",
        "name": "svn_fs_apply_text",
        "description": "Creates and returns a stream that will be used to replace"
    },
    {
        "href": "function.svn-fs-begin-txn2.php",
        "name": "svn_fs_begin_txn2",
        "description": "Create a new transaction"
    },
    {
        "href": "function.svn-fs-change-node-prop.php",
        "name": "svn_fs_change_node_prop",
        "description": "Return true if everything is ok, false otherwise"
    },
    {
        "href": "function.svn-fs-check-path.php",
        "name": "svn_fs_check_path",
        "description": "Determines what kind of item lives at path in a given repository fsroot"
    },
    {
        "href": "function.svn-fs-contents-changed.php",
        "name": "svn_fs_contents_changed",
        "description": "Return true if content is different, false otherwise"
    },
    {
        "href": "function.svn-fs-copy.php",
        "name": "svn_fs_copy",
        "description": "Copies a file or a directory"
    },
    {
        "href": "function.svn-fs-delete.php",
        "name": "svn_fs_delete",
        "description": "Deletes a file or a directory"
    },
    {
        "href": "function.svn-fs-dir-entries.php",
        "name": "svn_fs_dir_entries",
        "description": "Enumerates the directory entries under path; returns a hash of dir names to file type"
    },
    {
        "href": "function.svn-fs-file-contents.php",
        "name": "svn_fs_file_contents",
        "description": "Returns a stream to access the contents of a file from a given version of the fs"
    },
    {
        "href": "function.svn-fs-file-length.php",
        "name": "svn_fs_file_length",
        "description": "Returns the length of a file from a given version of the fs"
    },
    {
        "href": "function.svn-fs-is-dir.php",
        "name": "svn_fs_is_dir",
        "description": "Determines if a path points to a directory"
    },
    {
        "href": "function.svn-fs-is-file.php",
        "name": "svn_fs_is_file",
        "description": "Determines if a path points to a file"
    },
    {
        "href": "function.svn-fs-make-dir.php",
        "name": "svn_fs_make_dir",
        "description": "Creates a new empty directory"
    },
    {
        "href": "function.svn-fs-make-file.php",
        "name": "svn_fs_make_file",
        "description": "Creates a new empty file"
    },
    {
        "href": "function.svn-fs-node-created-rev.php",
        "name": "svn_fs_node_created_rev",
        "description": "Returns the revision in which path under fsroot was created"
    },
    {
        "href": "function.svn-fs-node-prop.php",
        "name": "svn_fs_node_prop",
        "description": "Returns the value of a property for a node"
    },
    {
        "href": "function.svn-fs-props-changed.php",
        "name": "svn_fs_props_changed",
        "description": "Return true if props are different, false otherwise"
    },
    {
        "href": "function.svn-fs-revision-prop.php",
        "name": "svn_fs_revision_prop",
        "description": "Fetches the value of a named property"
    },
    {
        "href": "function.svn-fs-revision-root.php",
        "name": "svn_fs_revision_root",
        "description": "Get a handle on a specific version of the repository root"
    },
    {
        "href": "function.svn-fs-txn-root.php",
        "name": "svn_fs_txn_root",
        "description": "Creates and returns a transaction root"
    },
    {
        "href": "function.svn-fs-youngest-rev.php",
        "name": "svn_fs_youngest_rev",
        "description": "Returns the number of the youngest revision in the filesystem"
    },
    {
        "href": "function.svn-import.php",
        "name": "svn_import",
        "description": "Imports an unversioned path into a repository"
    },
    {
        "href": "function.svn-log.php",
        "name": "svn_log",
        "description": "Returns the commit log messages of a repository URL"
    },
    {
        "href": "function.svn-ls.php",
        "name": "svn_ls",
        "description": "Returns list of directory contents in repository URL, optionally at revision number"
    },
    {
        "href": "function.svn-mkdir.php",
        "name": "svn_mkdir",
        "description": "Creates a directory in a working copy or repository"
    },
    {
        "href": "function.svn-repos-create.php",
        "name": "svn_repos_create",
        "description": "Create a new subversion repository at path"
    },
    {
        "href": "function.svn-repos-fs.php",
        "name": "svn_repos_fs",
        "description": "Gets a handle on the filesystem for a repository"
    },
    {
        "href": "function.svn-repos-fs-begin-txn-for-commit.php",
        "name": "svn_repos_fs_begin_txn_for_commit",
        "description": "Create a new transaction"
    },
    {
        "href": "function.svn-repos-fs-commit-txn.php",
        "name": "svn_repos_fs_commit_txn",
        "description": "Commits a transaction and returns the new revision"
    },
    {
        "href": "function.svn-repos-hotcopy.php",
        "name": "svn_repos_hotcopy",
        "description": "Make a hot-copy of the repos at repospath; copy it to destpath"
    },
    {
        "href": "function.svn-repos-open.php",
        "name": "svn_repos_open",
        "description": "Open a shared lock on a repository"
    },
    {
        "href": "function.svn-repos-recover.php",
        "name": "svn_repos_recover",
        "description": "Run recovery procedures on the repository located at path"
    },
    {
        "href": "function.svn-revert.php",
        "name": "svn_revert",
        "description": "Revert changes to the working copy"
    },
    {
        "href": "function.svn-status.php",
        "name": "svn_status",
        "description": "Returns the status of working copy files and directories"
    },
    {
        "href": "function.svn-update.php",
        "name": "svn_update",
        "description": "Update working copy"
    },
    {
        "href": "swoole-async.dnslookup.php",
        "name": "Swoole\\Async::dnsLookup",
        "description": "Async and non-blocking hostname to IP lookup."
    },
    {
        "href": "swoole-async.read.php",
        "name": "Swoole\\Async::read",
        "description": "Read file stream asynchronously."
    },
    {
        "href": "swoole-async.readfile.php",
        "name": "Swoole\\Async::readFile",
        "description": "Read a file asynchronously."
    },
    {
        "href": "swoole-async.set.php",
        "name": "Swoole\\Async::set",
        "description": "Update the async I/O options."
    },
    {
        "href": "swoole-async.write.php",
        "name": "Swoole\\Async::write",
        "description": "Write data to a file stream asynchronously."
    },
    {
        "href": "swoole-async.writefile.php",
        "name": "Swoole\\Async::writeFile",
        "description": "Description"
    },
    {
        "href": "swoole-atomic.add.php",
        "name": "Swoole\\Atomic::add",
        "description": "Add a number to the value to the atomic object."
    },
    {
        "href": "swoole-atomic.cmpset.php",
        "name": "Swoole\\Atomic::cmpset",
        "description": "Compare and set the value of the atomic object."
    },
    {
        "href": "swoole-atomic.get.php",
        "name": "Swoole\\Atomic::get",
        "description": "Get the current value of the atomic object."
    },
    {
        "href": "swoole-atomic.set.php",
        "name": "Swoole\\Atomic::set",
        "description": "Set a new value to the atomic object."
    },
    {
        "href": "swoole-atomic.sub.php",
        "name": "Swoole\\Atomic::sub",
        "description": "Subtract a number to the value of the atomic object."
    },
    {
        "href": "swoole-atomic.construct.php",
        "name": "Swoole\\Atomic::__construct",
        "description": "Construct a swoole atomic object."
    },
    {
        "href": "swoole-buffer.append.php",
        "name": "Swoole\\Buffer::append",
        "description": "Append the string or binary data at the end of the memory buffer and return the new size of memory allocated."
    },
    {
        "href": "swoole-buffer.clear.php",
        "name": "Swoole\\Buffer::clear",
        "description": "Reset the memory buffer."
    },
    {
        "href": "swoole-buffer.expand.php",
        "name": "Swoole\\Buffer::expand",
        "description": "Expand the size of memory buffer."
    },
    {
        "href": "swoole-buffer.read.php",
        "name": "Swoole\\Buffer::read",
        "description": "Read data from the memory buffer based on offset and length."
    },
    {
        "href": "swoole-buffer.recycle.php",
        "name": "Swoole\\Buffer::recycle",
        "description": "Release the memory to OS which is not used by the memory buffer."
    },
    {
        "href": "swoole-buffer.substr.php",
        "name": "Swoole\\Buffer::substr",
        "description": "Read data from the memory buffer based on offset and length. Or remove data from the memory buffer."
    },
    {
        "href": "swoole-buffer.write.php",
        "name": "Swoole\\Buffer::write",
        "description": "Write data to the memory buffer. The memory allocated for the buffer will not be changed."
    },
    {
        "href": "swoole-buffer.construct.php",
        "name": "Swoole\\Buffer::__construct",
        "description": "Fixed size memory blocks allocation."
    },
    {
        "href": "swoole-buffer.destruct.php",
        "name": "Swoole\\Buffer::__destruct",
        "description": "Destruct the Swoole memory buffer."
    },
    {
        "href": "swoole-buffer.tostring.php",
        "name": "Swoole\\Buffer::__toString",
        "description": "Get the string value of the memory buffer."
    },
    {
        "href": "swoole-channel.pop.php",
        "name": "Swoole\\Channel::pop",
        "description": "Read and pop data from swoole channel."
    },
    {
        "href": "swoole-channel.push.php",
        "name": "Swoole\\Channel::push",
        "description": "Write and push data into Swoole channel."
    },
    {
        "href": "swoole-channel.stats.php",
        "name": "Swoole\\Channel::stats",
        "description": "Get stats of swoole channel."
    },
    {
        "href": "swoole-channel.construct.php",
        "name": "Swoole\\Channel::__construct",
        "description": "Construct a Swoole Channel"
    },
    {
        "href": "swoole-channel.destruct.php",
        "name": "Swoole\\Channel::__destruct",
        "description": "Destruct a Swoole channel."
    },
    {
        "href": "swoole-client.close.php",
        "name": "Swoole\\Client::close",
        "description": "Close the connection established."
    },
    {
        "href": "swoole-client.connect.php",
        "name": "Swoole\\Client::connect",
        "description": "Connect to the remote TCP or UDP port."
    },
    {
        "href": "swoole-client.getpeername.php",
        "name": "Swoole\\Client::getpeername",
        "description": "Get the remote socket name of the connection."
    },
    {
        "href": "swoole-client.getsockname.php",
        "name": "Swoole\\Client::getsockname",
        "description": "Get the local socket name of the connection."
    },
    {
        "href": "swoole-client.isconnected.php",
        "name": "Swoole\\Client::isConnected",
        "description": "Check if the connection is established."
    },
    {
        "href": "swoole-client.on.php",
        "name": "Swoole\\Client::on",
        "description": "Add callback functions triggered by events."
    },
    {
        "href": "swoole-client.pause.php",
        "name": "Swoole\\Client::pause",
        "description": "Pause receiving data."
    },
    {
        "href": "swoole-client.pipe.php",
        "name": "Swoole\\Client::pipe",
        "description": "Redirect the data to another file descriptor."
    },
    {
        "href": "swoole-client.recv.php",
        "name": "Swoole\\Client::recv",
        "description": "Receive data from the remote socket."
    },
    {
        "href": "swoole-client.resume.php",
        "name": "Swoole\\Client::resume",
        "description": "Resume receiving data."
    },
    {
        "href": "swoole-client.send.php",
        "name": "Swoole\\Client::send",
        "description": "Send data to the remote TCP socket."
    },
    {
        "href": "swoole-client.sendfile.php",
        "name": "Swoole\\Client::sendfile",
        "description": "Send file to the remote TCP socket."
    },
    {
        "href": "swoole-client.sendto.php",
        "name": "Swoole\\Client::sendto",
        "description": "Send data to the remote UDP address."
    },
    {
        "href": "swoole-client.set.php",
        "name": "Swoole\\Client::set",
        "description": "Set the Swoole client parameters before the connection is established."
    },
    {
        "href": "swoole-client.sleep.php",
        "name": "Swoole\\Client::sleep",
        "description": "Remove the TCP client from system event loop."
    },
    {
        "href": "swoole-client.wakeup.php",
        "name": "Swoole\\Client::wakeup",
        "description": "Add the TCP client back into the system event loop."
    },
    {
        "href": "swoole-client.construct.php",
        "name": "Swoole\\Client::__construct",
        "description": "Create Swoole sync or async TCP/UDP client, with or without SSL."
    },
    {
        "href": "swoole-client.destruct.php",
        "name": "Swoole\\Client::__destruct",
        "description": "Destruct the Swoole client."
    },
    {
        "href": "swoole-connection-iterator.count.php",
        "name": "Swoole\\Connection\\Iterator::count",
        "description": "Count connections."
    },
    {
        "href": "swoole-connection-iterator.current.php",
        "name": "Swoole\\Connection\\Iterator::current",
        "description": "Return current connection entry."
    },
    {
        "href": "swoole-connection-iterator.key.php",
        "name": "Swoole\\Connection\\Iterator::key",
        "description": "Return key of the current connection."
    },
    {
        "href": "swoole-connection-iterator.next.php",
        "name": "Swoole\\Connection\\Iterator::next",
        "description": "Move to the next connection."
    },
    {
        "href": "swoole-connection-iterator.offsetexists.php",
        "name": "Swoole\\Connection\\Iterator::offsetExists",
        "description": "Check if offet exists."
    },
    {
        "href": "swoole-connection-iterator.offsetget.php",
        "name": "Swoole\\Connection\\Iterator::offsetGet",
        "description": "Offset to retrieve."
    },
    {
        "href": "swoole-connection-iterator.offsetset.php",
        "name": "Swoole\\Connection\\Iterator::offsetSet",
        "description": "Assign a Connection to the specified offset."
    },
    {
        "href": "swoole-connection-iterator.offsetunset.php",
        "name": "Swoole\\Connection\\Iterator::offsetUnset",
        "description": "Unset an offset."
    },
    {
        "href": "swoole-connection-iterator.rewind.php",
        "name": "Swoole\\Connection\\Iterator::rewind",
        "description": "Rewinds iterator"
    },
    {
        "href": "swoole-connection-iterator.valid.php",
        "name": "Swoole\\Connection\\Iterator::valid",
        "description": "Check if current position is valid."
    },
    {
        "href": "swoole-coroutine.call-user-func.php",
        "name": "Swoole\\Coroutine::call_user_func",
        "description": "Call a callback given by the first parameter"
    },
    {
        "href": "swoole-coroutine.call-user-func-array.php",
        "name": "Swoole\\Coroutine::call_user_func_array",
        "description": "Call a callback with an array of parameters"
    },
    {
        "href": "swoole-coroutine.cli-wait.php",
        "name": "Swoole\\Coroutine::cli_wait",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine.create.php",
        "name": "Swoole\\Coroutine::create",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine.getuid.php",
        "name": "Swoole\\Coroutine::getuid",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine.resume.php",
        "name": "Swoole\\Coroutine::resume",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine.suspend.php",
        "name": "Swoole\\Coroutine::suspend",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.close.php",
        "name": "Swoole\\Coroutine\\Client::close",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.connect.php",
        "name": "Swoole\\Coroutine\\Client::connect",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.getpeername.php",
        "name": "Swoole\\Coroutine\\Client::getpeername",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.getsockname.php",
        "name": "Swoole\\Coroutine\\Client::getsockname",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.isconnected.php",
        "name": "Swoole\\Coroutine\\Client::isConnected",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.recv.php",
        "name": "Swoole\\Coroutine\\Client::recv",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.send.php",
        "name": "Swoole\\Coroutine\\Client::send",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.sendfile.php",
        "name": "Swoole\\Coroutine\\Client::sendfile",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.sendto.php",
        "name": "Swoole\\Coroutine\\Client::sendto",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.set.php",
        "name": "Swoole\\Coroutine\\Client::set",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.construct.php",
        "name": "Swoole\\Coroutine\\Client::__construct",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-client.destruct.php",
        "name": "Swoole\\Coroutine\\Client::__destruct",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.addfile.php",
        "name": "Swoole\\Coroutine\\Http\\Client::addFile",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.close.php",
        "name": "Swoole\\Coroutine\\Http\\Client::close",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.execute.php",
        "name": "Swoole\\Coroutine\\Http\\Client::execute",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.get.php",
        "name": "Swoole\\Coroutine\\Http\\Client::get",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.getdefer.php",
        "name": "Swoole\\Coroutine\\Http\\Client::getDefer",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.isconnected.php",
        "name": "Swoole\\Coroutine\\Http\\Client::isConnected",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.post.php",
        "name": "Swoole\\Coroutine\\Http\\Client::post",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.recv.php",
        "name": "Swoole\\Coroutine\\Http\\Client::recv",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.set.php",
        "name": "Swoole\\Coroutine\\Http\\Client::set",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.setcookies.php",
        "name": "Swoole\\Coroutine\\Http\\Client::setCookies",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.setdata.php",
        "name": "Swoole\\Coroutine\\Http\\Client::setData",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.setdefer.php",
        "name": "Swoole\\Coroutine\\Http\\Client::setDefer",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.setheaders.php",
        "name": "Swoole\\Coroutine\\Http\\Client::setHeaders",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.setmethod.php",
        "name": "Swoole\\Coroutine\\Http\\Client::setMethod",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.construct.php",
        "name": "Swoole\\Coroutine\\Http\\Client::__construct",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-http-client.destruct.php",
        "name": "Swoole\\Coroutine\\Http\\Client::__destruct",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.close.php",
        "name": "Swoole\\Coroutine\\MySQL::close",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.connect.php",
        "name": "Swoole\\Coroutine\\MySQL::connect",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.getdefer.php",
        "name": "Swoole\\Coroutine\\MySQL::getDefer",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.query.php",
        "name": "Swoole\\Coroutine\\MySQL::query",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.recv.php",
        "name": "Swoole\\Coroutine\\MySQL::recv",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.setdefer.php",
        "name": "Swoole\\Coroutine\\MySQL::setDefer",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.construct.php",
        "name": "Swoole\\Coroutine\\MySQL::__construct",
        "description": "Description"
    },
    {
        "href": "swoole-coroutine-mysql.destruct.php",
        "name": "Swoole\\Coroutine\\MySQL::__destruct",
        "description": "Description"
    },
    {
        "href": "swoole-event.add.php",
        "name": "Swoole\\Event::add",
        "description": "Add new callback functions of a socket into the EventLoop."
    },
    {
        "href": "swoole-event.defer.php",
        "name": "Swoole\\Event::defer",
        "description": "Add a callback function to the next event loop."
    },
    {
        "href": "swoole-event.del.php",
        "name": "Swoole\\Event::del",
        "description": "Remove all event callback functions of a socket."
    },
    {
        "href": "swoole-event.exit.php",
        "name": "Swoole\\Event::exit",
        "description": "Exit the eventloop, only available at client side."
    },
    {
        "href": "swoole-event.set.php",
        "name": "Swoole\\Event::set",
        "description": "Update the event callback functions of a socket."
    },
    {
        "href": "swoole-event.wait.php",
        "name": "Swoole\\Event::wait",
        "description": "Description"
    },
    {
        "href": "swoole-event.write.php",
        "name": "Swoole\\Event::write",
        "description": "Write data to the socket."
    },
    {
        "href": "swoole-http-client.addfile.php",
        "name": "Swoole\\Http\\Client::addFile",
        "description": "Add a file to the post form."
    },
    {
        "href": "swoole-http-client.close.php",
        "name": "Swoole\\Http\\Client::close",
        "description": "Close the http connection."
    },
    {
        "href": "swoole-http-client.download.php",
        "name": "Swoole\\Http\\Client::download",
        "description": "Download a file from the remote server."
    },
    {
        "href": "swoole-http-client.execute.php",
        "name": "Swoole\\Http\\Client::execute",
        "description": "Send the HTTP request after setting the parameters."
    },
    {
        "href": "swoole-http-client.get.php",
        "name": "Swoole\\Http\\Client::get",
        "description": "Send GET http request to the remote server."
    },
    {
        "href": "swoole-http-client.isconnected.php",
        "name": "Swoole\\Http\\Client::isConnected",
        "description": "Check if the HTTP connection is connected."
    },
    {
        "href": "swoole-http-client.on.php",
        "name": "Swoole\\Http\\Client::on",
        "description": "Register callback function by event name."
    },
    {
        "href": "swoole-http-client.post.php",
        "name": "Swoole\\Http\\Client::post",
        "description": "Send POST http request to the remote server."
    },
    {
        "href": "swoole-http-client.push.php",
        "name": "Swoole\\Http\\Client::push",
        "description": "Push data to websocket client."
    },
    {
        "href": "swoole-http-client.set.php",
        "name": "Swoole\\Http\\Client::set",
        "description": "Update the HTTP client paramters."
    },
    {
        "href": "swoole-http-client.setcookies.php",
        "name": "Swoole\\Http\\Client::setCookies",
        "description": "Set the http request cookies."
    },
    {
        "href": "swoole-http-client.setdata.php",
        "name": "Swoole\\Http\\Client::setData",
        "description": "Set the HTTP request body data."
    },
    {
        "href": "swoole-http-client.setheaders.php",
        "name": "Swoole\\Http\\Client::setHeaders",
        "description": "Set the HTTP request headers."
    },
    {
        "href": "swoole-http-client.setmethod.php",
        "name": "Swoole\\Http\\Client::setMethod",
        "description": "Set the HTTP request method."
    },
    {
        "href": "swoole-http-client.upgrade.php",
        "name": "Swoole\\Http\\Client::upgrade",
        "description": "Upgrade to websocket protocol."
    },
    {
        "href": "swoole-http-client.construct.php",
        "name": "Swoole\\Http\\Client::__construct",
        "description": "Construct the async HTTP client."
    },
    {
        "href": "swoole-http-client.destruct.php",
        "name": "Swoole\\Http\\Client::__destruct",
        "description": "Destruct the HTTP client."
    },
    {
        "href": "swoole-http-request.rawcontent.php",
        "name": "Swoole\\Http\\Request::rawcontent",
        "description": "Get the raw HTTP POST body."
    },
    {
        "href": "swoole-http-request.destruct.php",
        "name": "Swoole\\Http\\Request::__destruct",
        "description": "Destruct the HTTP request."
    },
    {
        "href": "swoole-http-response.cookie.php",
        "name": "Swoole\\Http\\Response::cookie",
        "description": "Set the cookies of the HTTP response."
    },
    {
        "href": "swoole-http-response.end.php",
        "name": "Swoole\\Http\\Response::end",
        "description": "Send data for the HTTP request and finish the response."
    },
    {
        "href": "swoole-http-response.gzip.php",
        "name": "Swoole\\Http\\Response::gzip",
        "description": "Enable the gzip of response content."
    },
    {
        "href": "swoole-http-response.header.php",
        "name": "Swoole\\Http\\Response::header",
        "description": "Set the HTTP response headers."
    },
    {
        "href": "swoole-http-response.initheader.php",
        "name": "Swoole\\Http\\Response::initHeader",
        "description": "Init the HTTP response header."
    },
    {
        "href": "swoole-http-response.rawcookie.php",
        "name": "Swoole\\Http\\Response::rawcookie",
        "description": "Set the raw cookies to the HTTP response."
    },
    {
        "href": "swoole-http-response.sendfile.php",
        "name": "Swoole\\Http\\Response::sendfile",
        "description": "Send file through the HTTP response."
    },
    {
        "href": "swoole-http-response.status.php",
        "name": "Swoole\\Http\\Response::status",
        "description": "Set the status code of the HTTP response."
    },
    {
        "href": "swoole-http-response.write.php",
        "name": "Swoole\\Http\\Response::write",
        "description": "Append HTTP body content to the HTTP response."
    },
    {
        "href": "swoole-http-response.destruct.php",
        "name": "Swoole\\Http\\Response::__destruct",
        "description": "Destruct the HTTP response."
    },
    {
        "href": "swoole-http-server.on.php",
        "name": "Swoole\\Http\\Server::on",
        "description": "Bind callback function to HTTP server by event name."
    },
    {
        "href": "swoole-http-server.start.php",
        "name": "Swoole\\Http\\Server::start",
        "description": "Start the swoole http server."
    },
    {
        "href": "swoole-lock.lock.php",
        "name": "Swoole\\Lock::lock",
        "description": "Try to acquire the lock. It will block if the lock is not available."
    },
    {
        "href": "swoole-lock.lock-read.php",
        "name": "Swoole\\Lock::lock_read",
        "description": "Lock a read-write lock for reading."
    },
    {
        "href": "swoole-lock.trylock.php",
        "name": "Swoole\\Lock::trylock",
        "description": "Try to acquire the lock and return straight away even the lock is not available."
    },
    {
        "href": "swoole-lock.trylock-read.php",
        "name": "Swoole\\Lock::trylock_read",
        "description": "Try to lock a read-write lock for reading and return straight away even the lock is not available."
    },
    {
        "href": "swoole-lock.unlock.php",
        "name": "Swoole\\Lock::unlock",
        "description": "Release the lock."
    },
    {
        "href": "swoole-lock.construct.php",
        "name": "Swoole\\Lock::__construct",
        "description": "Construct a memory lock."
    },
    {
        "href": "swoole-lock.destruct.php",
        "name": "Swoole\\Lock::__destruct",
        "description": "Destory a Swoole memory lock."
    },
    {
        "href": "swoole-mmap.open.php",
        "name": "Swoole\\Mmap::open",
        "description": "Map a file into memory and return the stream resource which can be used by PHP stream operations."
    },
    {
        "href": "swoole-mysql.close.php",
        "name": "Swoole\\MySQL::close",
        "description": "Close the async MySQL connection."
    },
    {
        "href": "swoole-mysql.connect.php",
        "name": "Swoole\\MySQL::connect",
        "description": "Connect to the remote MySQL server."
    },
    {
        "href": "swoole-mysql.getbuffer.php",
        "name": "Swoole\\MySQL::getBuffer",
        "description": "Description"
    },
    {
        "href": "swoole-mysql.on.php",
        "name": "Swoole\\MySQL::on",
        "description": "Register callback function based on event name."
    },
    {
        "href": "swoole-mysql.query.php",
        "name": "Swoole\\MySQL::query",
        "description": "Run the SQL query."
    },
    {
        "href": "swoole-mysql.construct.php",
        "name": "Swoole\\MySQL::__construct",
        "description": "Construct an async MySQL client."
    },
    {
        "href": "swoole-mysql.destruct.php",
        "name": "Swoole\\MySQL::__destruct",
        "description": "Destory the async MySQL client."
    },
    {
        "href": "swoole-process.alarm.php",
        "name": "Swoole\\Process::alarm",
        "description": "High precision timer which triggers signal with fixed interval."
    },
    {
        "href": "swoole-process.close.php",
        "name": "Swoole\\Process::close",
        "description": "Close the pipe to the child process."
    },
    {
        "href": "swoole-process.daemon.php",
        "name": "Swoole\\Process::daemon",
        "description": "Change the process to be a daemon process."
    },
    {
        "href": "swoole-process.exec.php",
        "name": "Swoole\\Process::exec",
        "description": "Execute system commands."
    },
    {
        "href": "swoole-process.exit.php",
        "name": "Swoole\\Process::exit",
        "description": "Stop the child processes."
    },
    {
        "href": "swoole-process.freequeue.php",
        "name": "Swoole\\Process::freeQueue",
        "description": "Destroy the message queue created by swoole_process::useQueue."
    },
    {
        "href": "swoole-process.kill.php",
        "name": "Swoole\\Process::kill",
        "description": "Send signal to the child process."
    },
    {
        "href": "swoole-process.name.php",
        "name": "Swoole\\Process::name",
        "description": "Set name of the process."
    },
    {
        "href": "swoole-process.pop.php",
        "name": "Swoole\\Process::pop",
        "description": "Read and pop data from the message queue."
    },
    {
        "href": "swoole-process.push.php",
        "name": "Swoole\\Process::push",
        "description": "Write and push data into the message queue."
    },
    {
        "href": "swoole-process.read.php",
        "name": "Swoole\\Process::read",
        "description": "Read data sending to the process."
    },
    {
        "href": "swoole-process.signal.php",
        "name": "Swoole\\Process::signal",
        "description": "Send signal to the child processes."
    },
    {
        "href": "swoole-process.start.php",
        "name": "Swoole\\Process::start",
        "description": "Start the process."
    },
    {
        "href": "swoole-process.statqueue.php",
        "name": "Swoole\\Process::statQueue",
        "description": "Get the stats of the message queue used as the communication method between processes."
    },
    {
        "href": "swoole-process.usequeue.php",
        "name": "Swoole\\Process::useQueue",
        "description": "Create a message queue as the communication method between the parent process and child processes."
    },
    {
        "href": "swoole-process.wait.php",
        "name": "Swoole\\Process::wait",
        "description": "Wait for the events of child processes."
    },
    {
        "href": "swoole-process.write.php",
        "name": "Swoole\\Process::write",
        "description": "Write data into the pipe and communicate with the parent process or child processes."
    },
    {
        "href": "swoole-process.construct.php",
        "name": "Swoole\\Process::__construct",
        "description": "Construct a process."
    },
    {
        "href": "swoole-process.destruct.php",
        "name": "Swoole\\Process::__destruct",
        "description": "Destory the process."
    },
    {
        "href": "swoole-redis-server.format.php",
        "name": "Swoole\\Redis\\Server::format",
        "description": "Description"
    },
    {
        "href": "swoole-redis-server.sethandler.php",
        "name": "Swoole\\Redis\\Server::setHandler",
        "description": "Description"
    },
    {
        "href": "swoole-redis-server.start.php",
        "name": "Swoole\\Redis\\Server::start",
        "description": "Description"
    },
    {
        "href": "swoole-serialize.pack.php",
        "name": "Swoole\\Serialize::pack",
        "description": "Serialize the data."
    },
    {
        "href": "swoole-serialize.unpack.php",
        "name": "Swoole\\Serialize::unpack",
        "description": "Unserialize the data."
    },
    {
        "href": "swoole-server.addlistener.php",
        "name": "Swoole\\Server::addlistener",
        "description": "Add a new listener to the server."
    },
    {
        "href": "swoole-server.addprocess.php",
        "name": "Swoole\\Server::addProcess",
        "description": "Add a user defined swoole_process to the server."
    },
    {
        "href": "swoole-server.after.php",
        "name": "Swoole\\Server::after",
        "description": "Trigger a callback function after a period of time."
    },
    {
        "href": "swoole-server.bind.php",
        "name": "Swoole\\Server::bind",
        "description": "Bind the connection to a user defined user ID."
    },
    {
        "href": "swoole-server.cleartimer.php",
        "name": "Swoole\\Server::clearTimer",
        "description": "Stop and destory a timer."
    },
    {
        "href": "swoole-server.close.php",
        "name": "Swoole\\Server::close",
        "description": "Close a connection to the client."
    },
    {
        "href": "swoole-server.confirm.php",
        "name": "Swoole\\Server::confirm",
        "description": "Check status of the connection."
    },
    {
        "href": "swoole-server.connection-info.php",
        "name": "Swoole\\Server::connection_info",
        "description": "Get the connection info by file description."
    },
    {
        "href": "swoole-server.connection-list.php",
        "name": "Swoole\\Server::connection_list",
        "description": "Get all of the established connections."
    },
    {
        "href": "swoole-server.defer.php",
        "name": "Swoole\\Server::defer",
        "description": "Delay execution of the callback function at the end of current EventLoop."
    },
    {
        "href": "swoole-server.exist.php",
        "name": "Swoole\\Server::exist",
        "description": "Check if the connection is existed."
    },
    {
        "href": "swoole-server.finish.php",
        "name": "Swoole\\Server::finish",
        "description": "Used in task process for sending result to the worker process when the task is finished."
    },
    {
        "href": "swoole-server.getclientinfo.php",
        "name": "Swoole\\Server::getClientInfo",
        "description": "Get the connection info by file description."
    },
    {
        "href": "swoole-server.getclientlist.php",
        "name": "Swoole\\Server::getClientList",
        "description": "Get all of the established connections."
    },
    {
        "href": "swoole-server.getlasterror.php",
        "name": "Swoole\\Server::getLastError",
        "description": "Get the error code of the most recent error."
    },
    {
        "href": "swoole-server.heartbeat.php",
        "name": "Swoole\\Server::heartbeat",
        "description": "Check all the connections on the server."
    },
    {
        "href": "swoole-server.listen.php",
        "name": "Swoole\\Server::listen",
        "description": "Listen on the given IP and port, socket type."
    },
    {
        "href": "swoole-server.on.php",
        "name": "Swoole\\Server::on",
        "description": "Register a callback function by event name."
    },
    {
        "href": "swoole-server.pause.php",
        "name": "Swoole\\Server::pause",
        "description": "Stop receiving data from the connection."
    },
    {
        "href": "swoole-server.protect.php",
        "name": "Swoole\\Server::protect",
        "description": "Set the connection to be protected mode."
    },
    {
        "href": "swoole-server.reload.php",
        "name": "Swoole\\Server::reload",
        "description": "Restart all the worker process."
    },
    {
        "href": "swoole-server.resume.php",
        "name": "Swoole\\Server::resume",
        "description": "Start receving data from the connection."
    },
    {
        "href": "swoole-server.send.php",
        "name": "Swoole\\Server::send",
        "description": "Send data to the client."
    },
    {
        "href": "swoole-server.sendfile.php",
        "name": "Swoole\\Server::sendfile",
        "description": "Send file to the connection."
    },
    {
        "href": "swoole-server.sendmessage.php",
        "name": "Swoole\\Server::sendMessage",
        "description": "Send message to worker processes by ID."
    },
    {
        "href": "swoole-server.sendto.php",
        "name": "Swoole\\Server::sendto",
        "description": "Send data to the remote UDP address."
    },
    {
        "href": "swoole-server.sendwait.php",
        "name": "Swoole\\Server::sendwait",
        "description": "Send data to the remote socket in the blocking way."
    },
    {
        "href": "swoole-server.set.php",
        "name": "Swoole\\Server::set",
        "description": "Set the runtime settings of the swoole server."
    },
    {
        "href": "swoole-server.shutdown.php",
        "name": "Swoole\\Server::shutdown",
        "description": "Shutdown the master server process, this function can be called in worker processes."
    },
    {
        "href": "swoole-server.start.php",
        "name": "Swoole\\Server::start",
        "description": "Start the Swoole server."
    },
    {
        "href": "swoole-server.stats.php",
        "name": "Swoole\\Server::stats",
        "description": "Get the stats of the Swoole server."
    },
    {
        "href": "swoole-server.stop.php",
        "name": "Swoole\\Server::stop",
        "description": "Stop the Swoole server."
    },
    {
        "href": "swoole-server.task.php",
        "name": "Swoole\\Server::task",
        "description": "Send data to the task worker processes."
    },
    {
        "href": "swoole-server.taskwait.php",
        "name": "Swoole\\Server::taskwait",
        "description": "Send data to the task worker processes in blocking way."
    },
    {
        "href": "swoole-server.taskwaitmulti.php",
        "name": "Swoole\\Server::taskWaitMulti",
        "description": "Execute multiple tasks concurrently."
    },
    {
        "href": "swoole-server.tick.php",
        "name": "Swoole\\Server::tick",
        "description": "Repeats a given function at every given time-interval."
    },
    {
        "href": "swoole-server.construct.php",
        "name": "Swoole\\Server::__construct",
        "description": "Construct a Swoole server."
    },
    {
        "href": "swoole-server-port.on.php",
        "name": "Swoole\\Server\\Port::on",
        "description": "Register callback functions by event."
    },
    {
        "href": "swoole-server-port.set.php",
        "name": "Swoole\\Server\\Port::set",
        "description": "Set protocol of the server port."
    },
    {
        "href": "swoole-server-port.construct.php",
        "name": "Swoole\\Server\\Port::__construct",
        "description": "Construct a server port"
    },
    {
        "href": "swoole-server-port.destruct.php",
        "name": "Swoole\\Server\\Port::__destruct",
        "description": "Destory server port"
    },
    {
        "href": "swoole-table.column.php",
        "name": "Swoole\\Table::column",
        "description": "Set the data type and size of the columns."
    },
    {
        "href": "swoole-table.count.php",
        "name": "Swoole\\Table::count",
        "description": "Count the rows in the table, or count all the elements in the table if $mode = 1."
    },
    {
        "href": "swoole-table.create.php",
        "name": "Swoole\\Table::create",
        "description": "Create the swoole memory table."
    },
    {
        "href": "swoole-table.current.php",
        "name": "Swoole\\Table::current",
        "description": "Get the current row."
    },
    {
        "href": "swoole-table.decr.php",
        "name": "Swoole\\Table::decr",
        "description": "Decrement the value in the Swoole table by $row_key and $column_key."
    },
    {
        "href": "swoole-table.del.php",
        "name": "Swoole\\Table::del",
        "description": "Delete a row in the Swoole table by $row_key."
    },
    {
        "href": "swoole-table.destroy.php",
        "name": "Swoole\\Table::destroy",
        "description": "Destroy the Swoole table."
    },
    {
        "href": "swoole-table.exist.php",
        "name": "Swoole\\Table::exist",
        "description": "Check if a row is existed by $row_key."
    },
    {
        "href": "swoole-table.get.php",
        "name": "Swoole\\Table::get",
        "description": "Get the value in the Swoole table by $row_key and $column_key."
    },
    {
        "href": "swoole-table.incr.php",
        "name": "Swoole\\Table::incr",
        "description": "Increment the value by $row_key and $column_key."
    },
    {
        "href": "swoole-table.key.php",
        "name": "Swoole\\Table::key",
        "description": "Get the key of current row."
    },
    {
        "href": "swoole-table.next.php",
        "name": "Swoole\\Table::next",
        "description": "Iterator the next row."
    },
    {
        "href": "swoole-table.rewind.php",
        "name": "Swoole\\Table::rewind",
        "description": "Rewind the iterator."
    },
    {
        "href": "swoole-table.set.php",
        "name": "Swoole\\Table::set",
        "description": "Update a row of the table by $row_key."
    },
    {
        "href": "swoole-table.valid.php",
        "name": "Swoole\\Table::valid",
        "description": "Check current if the current row is valid."
    },
    {
        "href": "swoole-table.construct.php",
        "name": "Swoole\\Table::__construct",
        "description": "Construct a Swoole memory table with fixed size."
    },
    {
        "href": "swoole-timer.after.php",
        "name": "Swoole\\Timer::after",
        "description": "Trigger a callback function after a period of time."
    },
    {
        "href": "swoole-timer.clear.php",
        "name": "Swoole\\Timer::clear",
        "description": "Delete a timer by timer ID."
    },
    {
        "href": "swoole-timer.exists.php",
        "name": "Swoole\\Timer::exists",
        "description": "Check if a timer is existed."
    },
    {
        "href": "swoole-timer.tick.php",
        "name": "Swoole\\Timer::tick",
        "description": "Repeats a given function at every given time-interval."
    },
    {
        "href": "swoole-websocket-server.exist.php",
        "name": "Swoole\\WebSocket\\Server::exist",
        "description": "Check if the file descriptor exists."
    },
    {
        "href": "swoole-websocket-server.on.php",
        "name": "Swoole\\WebSocket\\Server::on",
        "description": "Register event callback function"
    },
    {
        "href": "swoole-websocket-server.pack.php",
        "name": "Swoole\\WebSocket\\Server::pack",
        "description": "Get a pack of binary data to send in a single frame."
    },
    {
        "href": "swoole-websocket-server.push.php",
        "name": "Swoole\\WebSocket\\Server::push",
        "description": "Push data to the remote client."
    },
    {
        "href": "swoole-websocket-server.unpack.php",
        "name": "Swoole\\WebSocket\\Server::unpack",
        "description": "Unpack the binary data received from the client."
    },
    {
        "href": "function.swoole-async-dns-lookup.php",
        "name": "swoole_async_dns_lookup",
        "description": "Async and non-blocking hostname to IP lookup"
    },
    {
        "href": "function.swoole-async-read.php",
        "name": "swoole_async_read",
        "description": "Read file stream asynchronously"
    },
    {
        "href": "function.swoole-async-readfile.php",
        "name": "swoole_async_readfile",
        "description": "Read a file asynchronously"
    },
    {
        "href": "function.swoole-async-set.php",
        "name": "swoole_async_set",
        "description": "Update the async I/O options"
    },
    {
        "href": "function.swoole-async-write.php",
        "name": "swoole_async_write",
        "description": "Write data to a file stream asynchronously"
    },
    {
        "href": "function.swoole-async-writefile.php",
        "name": "swoole_async_writefile",
        "description": "Write data to a file asynchronously"
    },
    {
        "href": "function.swoole-clear-error.php",
        "name": "swoole_clear_error",
        "description": "Clear errors in the socket or on the last error code"
    },
    {
        "href": "function.swoole-client-select.php",
        "name": "swoole_client_select",
        "description": "Get the file description which are ready to read/write or error"
    },
    {
        "href": "function.swoole-cpu-num.php",
        "name": "swoole_cpu_num",
        "description": "Get the number of CPU"
    },
    {
        "href": "function.swoole-errno.php",
        "name": "swoole_errno",
        "description": "Get the error code of the latest system call"
    },
    {
        "href": "function.swoole-error-log.php",
        "name": "swoole_error_log",
        "description": "Output error messages to the log"
    },
    {
        "href": "function.swoole-event-add.php",
        "name": "swoole_event_add",
        "description": "Add new callback functions of a socket into the EventLoop"
    },
    {
        "href": "function.swoole-event-defer.php",
        "name": "swoole_event_defer",
        "description": "Add callback function to the next event loop"
    },
    {
        "href": "function.swoole-event-del.php",
        "name": "swoole_event_del",
        "description": "Remove all event callback functions of a socket"
    },
    {
        "href": "function.swoole-event-exit.php",
        "name": "swoole_event_exit",
        "description": "Exit the eventloop, only available at the client side"
    },
    {
        "href": "function.swoole-event-set.php",
        "name": "swoole_event_set",
        "description": "Update the event callback functions of a socket"
    },
    {
        "href": "function.swoole-event-wait.php",
        "name": "swoole_event_wait",
        "description": "Start the event loop"
    },
    {
        "href": "function.swoole-event-write.php",
        "name": "swoole_event_write",
        "description": "Write data to a socket"
    },
    {
        "href": "function.swoole-get-local-ip.php",
        "name": "swoole_get_local_ip",
        "description": "Get the IPv4 IP addresses of each NIC on the machine"
    },
    {
        "href": "function.swoole-last-error.php",
        "name": "swoole_last_error",
        "description": "Get the lastest error message"
    },
    {
        "href": "function.swoole-load-module.php",
        "name": "swoole_load_module",
        "description": "Load a swoole extension"
    },
    {
        "href": "function.swoole-select.php",
        "name": "swoole_select",
        "description": "Select the file descriptions which are ready to read/write or error in the eventloop"
    },
    {
        "href": "function.swoole-set-process-name.php",
        "name": "swoole_set_process_name",
        "description": "Set the process name"
    },
    {
        "href": "function.swoole-strerror.php",
        "name": "swoole_strerror",
        "description": "Convert the Errno into error messages"
    },
    {
        "href": "function.swoole-timer-after.php",
        "name": "swoole_timer_after",
        "description": "Trigger a one time callback function in the future"
    },
    {
        "href": "function.swoole-timer-exists.php",
        "name": "swoole_timer_exists",
        "description": "Check if a timer callback function is existed"
    },
    {
        "href": "function.swoole-timer-tick.php",
        "name": "swoole_timer_tick",
        "description": "Trigger a timer tick callback function by time interval"
    },
    {
        "href": "function.swoole-version.php",
        "name": "swoole_version",
        "description": "Get the version of Swoole"
    },
    {
        "href": "function.symlink.php",
        "name": "symlink",
        "description": "Creates a symbolic link"
    },
    {
        "href": "syncevent.fire.php",
        "name": "SyncEvent::fire",
        "description": "Fires/sets the event"
    },
    {
        "href": "syncevent.reset.php",
        "name": "SyncEvent::reset",
        "description": "Resets a manual event"
    },
    {
        "href": "syncevent.wait.php",
        "name": "SyncEvent::wait",
        "description": "Waits for the event to be fired/set"
    },
    {
        "href": "syncevent.construct.php",
        "name": "SyncEvent::__construct",
        "description": "Constructs a new SyncEvent object"
    },
    {
        "href": "syncmutex.lock.php",
        "name": "SyncMutex::lock",
        "description": "Waits for an exclusive lock"
    },
    {
        "href": "syncmutex.unlock.php",
        "name": "SyncMutex::unlock",
        "description": "Unlocks the mutex"
    },
    {
        "href": "syncmutex.construct.php",
        "name": "SyncMutex::__construct",
        "description": "Constructs a new SyncMutex object"
    },
    {
        "href": "syncreaderwriter.readlock.php",
        "name": "SyncReaderWriter::readlock",
        "description": "Waits for a read lock"
    },
    {
        "href": "syncreaderwriter.readunlock.php",
        "name": "SyncReaderWriter::readunlock",
        "description": "Releases a read lock"
    },
    {
        "href": "syncreaderwriter.writelock.php",
        "name": "SyncReaderWriter::writelock",
        "description": "Waits for an exclusive write lock"
    },
    {
        "href": "syncreaderwriter.writeunlock.php",
        "name": "SyncReaderWriter::writeunlock",
        "description": "Releases a write lock"
    },
    {
        "href": "syncreaderwriter.construct.php",
        "name": "SyncReaderWriter::__construct",
        "description": "Constructs a new SyncReaderWriter object"
    },
    {
        "href": "syncsemaphore.lock.php",
        "name": "SyncSemaphore::lock",
        "description": "Decreases the count of the semaphore or waits"
    },
    {
        "href": "syncsemaphore.unlock.php",
        "name": "SyncSemaphore::unlock",
        "description": "Increases the count of the semaphore"
    },
    {
        "href": "syncsemaphore.construct.php",
        "name": "SyncSemaphore::__construct",
        "description": "Constructs a new SyncSemaphore object"
    },
    {
        "href": "syncsharedmemory.first.php",
        "name": "SyncSharedMemory::first",
        "description": "Check to see if the object is the first instance system-wide of named shared memory"
    },
    {
        "href": "syncsharedmemory.read.php",
        "name": "SyncSharedMemory::read",
        "description": "Copy data from named shared memory"
    },
    {
        "href": "syncsharedmemory.size.php",
        "name": "SyncSharedMemory::size",
        "description": "Returns the size of the named shared memory"
    },
    {
        "href": "syncsharedmemory.write.php",
        "name": "SyncSharedMemory::write",
        "description": "Copy data to named shared memory"
    },
    {
        "href": "syncsharedmemory.construct.php",
        "name": "SyncSharedMemory::__construct",
        "description": "Constructs a new SyncSharedMemory object"
    },
    {
        "href": "function.syslog.php",
        "name": "syslog",
        "description": "Generate a system log message"
    },
    {
        "href": "function.system.php",
        "name": "system",
        "description": "Execute an external program and display the output"
    },
    {
        "href": "function.sys-getloadavg.php",
        "name": "sys_getloadavg",
        "description": "Gets system load average"
    },
    {
        "href": "function.sys-get-temp-dir.php",
        "name": "sys_get_temp_dir",
        "description": "Returns directory path used for temporary files"
    },
    {
        "href": "mysql-xdevapi-table.count.php",
        "name": "Table::count",
        "description": "Get row count"
    },
    {
        "href": "mysql-xdevapi-table.delete.php",
        "name": "Table::delete",
        "description": "Delete rows from table"
    },
    {
        "href": "mysql-xdevapi-table.existsindatabase.php",
        "name": "Table::existsInDatabase",
        "description": "Check if table exists in database"
    },
    {
        "href": "mysql-xdevapi-table.getname.php",
        "name": "Table::getName",
        "description": "Get table name"
    },
    {
        "href": "mysql-xdevapi-table.getschema.php",
        "name": "Table::getSchema",
        "description": "Get table schema"
    },
    {
        "href": "mysql-xdevapi-table.getsession.php",
        "name": "Table::getSession",
        "description": "Get table session"
    },
    {
        "href": "mysql-xdevapi-table.insert.php",
        "name": "Table::insert",
        "description": "Insert table rows"
    },
    {
        "href": "mysql-xdevapi-table.isview.php",
        "name": "Table::isView",
        "description": "Check if table is view"
    },
    {
        "href": "mysql-xdevapi-table.select.php",
        "name": "Table::select",
        "description": "Select rows from table"
    },
    {
        "href": "mysql-xdevapi-table.update.php",
        "name": "Table::update",
        "description": "Update rows in table"
    },
    {
        "href": "mysql-xdevapi-table.construct.php",
        "name": "Table::__construct",
        "description": "Table constructor"
    },
    {
        "href": "mysql-xdevapi-tabledelete.bind.php",
        "name": "TableDelete::bind",
        "description": "Bind delete query parameters"
    },
    {
        "href": "mysql-xdevapi-tabledelete.execute.php",
        "name": "TableDelete::execute",
        "description": "Execute delete query"
    },
    {
        "href": "mysql-xdevapi-tabledelete.limit.php",
        "name": "TableDelete::limit",
        "description": "Limit deleted rows"
    },
    {
        "href": "mysql-xdevapi-tabledelete.orderby.php",
        "name": "TableDelete::orderby",
        "description": "Set delete sort criteria"
    },
    {
        "href": "mysql-xdevapi-tabledelete.where.php",
        "name": "TableDelete::where",
        "description": "Set delete search condition"
    },
    {
        "href": "mysql-xdevapi-tabledelete.construct.php",
        "name": "TableDelete::__construct",
        "description": "TableDelete constructor"
    },
    {
        "href": "mysql-xdevapi-tableinsert.execute.php",
        "name": "TableInsert::execute",
        "description": "Execute insert query"
    },
    {
        "href": "mysql-xdevapi-tableinsert.values.php",
        "name": "TableInsert::values",
        "description": "Add insert row values"
    },
    {
        "href": "mysql-xdevapi-tableinsert.construct.php",
        "name": "TableInsert::__construct",
        "description": "TableInsert constructor"
    },
    {
        "href": "mysql-xdevapi-tableselect.bind.php",
        "name": "TableSelect::bind",
        "description": "Bind select query parameters"
    },
    {
        "href": "mysql-xdevapi-tableselect.execute.php",
        "name": "TableSelect::execute",
        "description": "Execute select statement"
    },
    {
        "href": "mysql-xdevapi-tableselect.groupby.php",
        "name": "TableSelect::groupBy",
        "description": "Set select grouping criteria"
    },
    {
        "href": "mysql-xdevapi-tableselect.having.php",
        "name": "TableSelect::having",
        "description": "Set select having condition"
    },
    {
        "href": "mysql-xdevapi-tableselect.limit.php",
        "name": "TableSelect::limit",
        "description": "Limit selected rows"
    },
    {
        "href": "mysql-xdevapi-tableselect.lockexclusive.php",
        "name": "TableSelect::lockExclusive",
        "description": "Execute EXCLUSIVE LOCK"
    },
    {
        "href": "mysql-xdevapi-tableselect.lockshared.php",
        "name": "TableSelect::lockShared",
        "description": "Execute SHARED LOCK"
    },
    {
        "href": "mysql-xdevapi-tableselect.offset.php",
        "name": "TableSelect::offset",
        "description": "Set limit offset"
    },
    {
        "href": "mysql-xdevapi-tableselect.orderby.php",
        "name": "TableSelect::orderby",
        "description": "Set select sort criteria"
    },
    {
        "href": "mysql-xdevapi-tableselect.where.php",
        "name": "TableSelect::where",
        "description": "Set select search condition"
    },
    {
        "href": "mysql-xdevapi-tableselect.construct.php",
        "name": "TableSelect::__construct",
        "description": "TableSelect constructor"
    },
    {
        "href": "mysql-xdevapi-tableupdate.bind.php",
        "name": "TableUpdate::bind",
        "description": "Bind update query parameters"
    },
    {
        "href": "mysql-xdevapi-tableupdate.execute.php",
        "name": "TableUpdate::execute",
        "description": "Execute update query"
    },
    {
        "href": "mysql-xdevapi-tableupdate.limit.php",
        "name": "TableUpdate::limit",
        "description": "Limit update row count"
    },
    {
        "href": "mysql-xdevapi-tableupdate.orderby.php",
        "name": "TableUpdate::orderby",
        "description": "Set sorting criteria"
    },
    {
        "href": "mysql-xdevapi-tableupdate.set.php",
        "name": "TableUpdate::set",
        "description": "Add field to be updated"
    },
    {
        "href": "mysql-xdevapi-tableupdate.where.php",
        "name": "TableUpdate::where",
        "description": "Set search filter"
    },
    {
        "href": "mysql-xdevapi-tableupdate.construct.php",
        "name": "TableUpdate::__construct",
        "description": "TableUpdate constructor"
    },
    {
        "href": "function.taint.php",
        "name": "taint",
        "description": "Taint a string"
    },
    {
        "href": "function.tan.php",
        "name": "tan",
        "description": "Tangent"
    },
    {
        "href": "function.tanh.php",
        "name": "tanh",
        "description": "Hyperbolic tangent"
    },
    {
        "href": "function.tcpwrap-check.php",
        "name": "tcpwrap_check",
        "description": "Performs a tcpwrap check"
    },
    {
        "href": "function.tempnam.php",
        "name": "tempnam",
        "description": "Create file with unique file name"
    },
    {
        "href": "function.textdomain.php",
        "name": "textdomain",
        "description": "Sets the default domain"
    },
    {
        "href": "thread.getcreatorid.php",
        "name": "Thread::getCreatorId",
        "description": "Identification"
    },
    {
        "href": "thread.getcurrentthread.php",
        "name": "Thread::getCurrentThread",
        "description": "Identification"
    },
    {
        "href": "thread.getcurrentthreadid.php",
        "name": "Thread::getCurrentThreadId",
        "description": "Identification"
    },
    {
        "href": "thread.getthreadid.php",
        "name": "Thread::getThreadId",
        "description": "Identification"
    },
    {
        "href": "thread.isjoined.php",
        "name": "Thread::isJoined",
        "description": "State Detection"
    },
    {
        "href": "thread.isstarted.php",
        "name": "Thread::isStarted",
        "description": "State Detection"
    },
    {
        "href": "thread.join.php",
        "name": "Thread::join",
        "description": "Synchronization"
    },
    {
        "href": "thread.start.php",
        "name": "Thread::start",
        "description": "Execution"
    },
    {
        "href": "threaded.chunk.php",
        "name": "Threaded::chunk",
        "description": "Manipulation"
    },
    {
        "href": "threaded.count.php",
        "name": "Threaded::count",
        "description": "Manipulation"
    },
    {
        "href": "threaded.extend.php",
        "name": "Threaded::extend",
        "description": "Runtime Manipulation"
    },
    {
        "href": "thread.isrunning.php",
        "name": "Threaded::isRunning",
        "description": "State Detection"
    },
    {
        "href": "threaded.isterminated.php",
        "name": "Threaded::isTerminated",
        "description": "State Detection"
    },
    {
        "href": "threaded.merge.php",
        "name": "Threaded::merge",
        "description": "Manipulation"
    },
    {
        "href": "threaded.notify.php",
        "name": "Threaded::notify",
        "description": "Synchronization"
    },
    {
        "href": "threaded.notifyone.php",
        "name": "Threaded::notifyOne",
        "description": "Synchronization"
    },
    {
        "href": "threaded.pop.php",
        "name": "Threaded::pop",
        "description": "Manipulation"
    },
    {
        "href": "threaded.run.php",
        "name": "Threaded::run",
        "description": "Execution"
    },
    {
        "href": "threaded.shift.php",
        "name": "Threaded::shift",
        "description": "Manipulation"
    },
    {
        "href": "threaded.synchronized.php",
        "name": "Threaded::synchronized",
        "description": "Synchronization"
    },
    {
        "href": "threaded.wait.php",
        "name": "Threaded::wait",
        "description": "Synchronization"
    },
    {
        "href": "throwable.getcode.php",
        "name": "Throwable::getCode",
        "description": "Gets the exception code"
    },
    {
        "href": "throwable.getfile.php",
        "name": "Throwable::getFile",
        "description": "Gets the file in which the object was created"
    },
    {
        "href": "throwable.getline.php",
        "name": "Throwable::getLine",
        "description": "Gets the line on which the object was instantiated"
    },
    {
        "href": "throwable.getmessage.php",
        "name": "Throwable::getMessage",
        "description": "Gets the message"
    },
    {
        "href": "throwable.getprevious.php",
        "name": "Throwable::getPrevious",
        "description": "Returns the previous Throwable"
    },
    {
        "href": "throwable.gettrace.php",
        "name": "Throwable::getTrace",
        "description": "Gets the stack trace"
    },
    {
        "href": "throwable.gettraceasstring.php",
        "name": "Throwable::getTraceAsString",
        "description": "Gets the stack trace as a string"
    },
    {
        "href": "throwable.tostring.php",
        "name": "Throwable::__toString",
        "description": "Gets a string representation of the thrown object"
    },
    {
        "href": "tidy.props.errorbuffer.php",
        "name": "tidy::$errorBuffer",
        "description": "Return warnings and errors which occurred parsing the specified document"
    },
    {
        "href": "tidy.body.php",
        "name": "tidy::body",
        "description": "Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree"
    },
    {
        "href": "tidy.cleanrepair.php",
        "name": "tidy::cleanRepair",
        "description": "Execute configured cleanup and repair operations on parsed markup"
    },
    {
        "href": "tidy.diagnose.php",
        "name": "tidy::diagnose",
        "description": "Run configured diagnostics on parsed and repaired markup"
    },
    {
        "href": "tidy.getconfig.php",
        "name": "tidy::getConfig",
        "description": "Get current Tidy configuration"
    },
    {
        "href": "tidy.gethtmlver.php",
        "name": "tidy::getHtmlVer",
        "description": "Get the Detected HTML version for the specified document"
    },
    {
        "href": "tidy.getopt.php",
        "name": "tidy::getOpt",
        "description": "Returns the value of the specified configuration option for the tidy document"
    },
    {
        "href": "tidy.getoptdoc.php",
        "name": "tidy::getOptDoc",
        "description": "Returns the documentation for the given option name"
    },
    {
        "href": "tidy.getrelease.php",
        "name": "tidy::getRelease",
        "description": "Get release date (version) for Tidy library"
    },
    {
        "href": "tidy.getstatus.php",
        "name": "tidy::getStatus",
        "description": "Get status of specified document"
    },
    {
        "href": "tidy.head.php",
        "name": "tidy::head",
        "description": "Returns a tidyNode object starting from the &lt;head&gt; tag of the tidy parse tree"
    },
    {
        "href": "tidy.html.php",
        "name": "tidy::html",
        "description": "Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree"
    },
    {
        "href": "tidy.isxhtml.php",
        "name": "tidy::isXhtml",
        "description": "Indicates if the document is a XHTML document"
    },
    {
        "href": "tidy.isxml.php",
        "name": "tidy::isXml",
        "description": "Indicates if the document is a generic (non HTML/XHTML) XML document"
    },
    {
        "href": "tidy.parsefile.php",
        "name": "tidy::parseFile",
        "description": "Parse markup in file or URI"
    },
    {
        "href": "tidy.parsestring.php",
        "name": "tidy::parseString",
        "description": "Parse a document stored in a string"
    },
    {
        "href": "tidy.repairfile.php",
        "name": "tidy::repairFile",
        "description": "Repair a file and return it as a string"
    },
    {
        "href": "tidy.repairstring.php",
        "name": "tidy::repairString",
        "description": "Repair a string using an optionally provided configuration file"
    },
    {
        "href": "tidy.root.php",
        "name": "tidy::root",
        "description": "Returns a tidyNode object representing the root of the tidy parse tree"
    },
    {
        "href": "tidy.construct.php",
        "name": "tidy::__construct",
        "description": "Constructs a new tidy object"
    },
    {
        "href": "tidynode.getparent.php",
        "name": "tidyNode::getParent",
        "description": "Returns the parent node of the current node"
    },
    {
        "href": "tidynode.haschildren.php",
        "name": "tidyNode::hasChildren",
        "description": "Checks if a node has children"
    },
    {
        "href": "tidynode.hassiblings.php",
        "name": "tidyNode::hasSiblings",
        "description": "Checks if a node has siblings"
    },
    {
        "href": "tidynode.isasp.php",
        "name": "tidyNode::isAsp",
        "description": "Checks if this node is ASP"
    },
    {
        "href": "tidynode.iscomment.php",
        "name": "tidyNode::isComment",
        "description": "Checks if a node represents a comment"
    },
    {
        "href": "tidynode.ishtml.php",
        "name": "tidyNode::isHtml",
        "description": "Checks if a node is an element node"
    },
    {
        "href": "tidynode.isjste.php",
        "name": "tidyNode::isJste",
        "description": "Checks if this node is JSTE"
    },
    {
        "href": "tidynode.isphp.php",
        "name": "tidyNode::isPhp",
        "description": "Checks if a node is PHP"
    },
    {
        "href": "tidynode.istext.php",
        "name": "tidyNode::isText",
        "description": "Checks if a node represents text (no markup)"
    },
    {
        "href": "tidynode.construct.php",
        "name": "tidyNode::__construct",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "href": "function.tidy-access-count.php",
        "name": "tidy_access_count",
        "description": "Returns the Number of Tidy accessibility warnings encountered for specified document"
    },
    {
        "href": "function.tidy-config-count.php",
        "name": "tidy_config_count",
        "description": "Returns the Number of Tidy configuration errors encountered for specified document"
    },
    {
        "href": "function.tidy-error-count.php",
        "name": "tidy_error_count",
        "description": "Returns the Number of Tidy errors encountered for specified document"
    },
    {
        "href": "function.tidy-get-output.php",
        "name": "tidy_get_output",
        "description": "Return a string representing the parsed tidy markup"
    },
    {
        "href": "function.tidy-warning-count.php",
        "name": "tidy_warning_count",
        "description": "Returns the Number of Tidy warnings encountered for specified document"
    },
    {
        "href": "function.time.php",
        "name": "time",
        "description": "Return current Unix timestamp"
    },
    {
        "href": "function.timezone-abbreviations-list.php",
        "name": "timezone_abbreviations_list",
        "description": "Alias of DateTimeZone::listAbbreviations"
    },
    {
        "href": "function.timezone-identifiers-list.php",
        "name": "timezone_identifiers_list",
        "description": "Alias of DateTimeZone::listIdentifiers"
    },
    {
        "href": "function.timezone-location-get.php",
        "name": "timezone_location_get",
        "description": "Alias of DateTimeZone::getLocation"
    },
    {
        "href": "function.timezone-name-from-abbr.php",
        "name": "timezone_name_from_abbr",
        "description": "Returns the timezone name from abbreviation"
    },
    {
        "href": "function.timezone-name-get.php",
        "name": "timezone_name_get",
        "description": "Alias of DateTimeZone::getName"
    },
    {
        "href": "function.timezone-offset-get.php",
        "name": "timezone_offset_get",
        "description": "Alias of DateTimeZone::getOffset"
    },
    {
        "href": "function.timezone-open.php",
        "name": "timezone_open",
        "description": "Alias of DateTimeZone::__construct"
    },
    {
        "href": "function.timezone-transitions-get.php",
        "name": "timezone_transitions_get",
        "description": "Alias of DateTimeZone::getTransitions"
    },
    {
        "href": "function.timezone-version-get.php",
        "name": "timezone_version_get",
        "description": "Gets the version of the timezonedb"
    },
    {
        "href": "function.time-nanosleep.php",
        "name": "time_nanosleep",
        "description": "Delay for a number of seconds and nanoseconds"
    },
    {
        "href": "function.time-sleep-until.php",
        "name": "time_sleep_until",
        "description": "Make the script sleep until the specified time"
    },
    {
        "href": "function.tmpfile.php",
        "name": "tmpfile",
        "description": "Creates a temporary file"
    },
    {
        "href": "function.token-get-all.php",
        "name": "token_get_all",
        "description": "Split given source into PHP tokens"
    },
    {
        "href": "function.token-name.php",
        "name": "token_name",
        "description": "Get the symbolic name of a given PHP token"
    },
    {
        "href": "function.touch.php",
        "name": "touch",
        "description": "Sets access and modification time of file"
    },
    {
        "href": "function.trader-acos.php",
        "name": "trader_acos",
        "description": "Vector Trigonometric ACos"
    },
    {
        "href": "function.trader-ad.php",
        "name": "trader_ad",
        "description": "Chaikin A/D Line"
    },
    {
        "href": "function.trader-add.php",
        "name": "trader_add",
        "description": "Vector Arithmetic Add"
    },
    {
        "href": "function.trader-adosc.php",
        "name": "trader_adosc",
        "description": "Chaikin A/D Oscillator"
    },
    {
        "href": "function.trader-adx.php",
        "name": "trader_adx",
        "description": "Average Directional Movement Index"
    },
    {
        "href": "function.trader-adxr.php",
        "name": "trader_adxr",
        "description": "Average Directional Movement Index Rating"
    },
    {
        "href": "function.trader-apo.php",
        "name": "trader_apo",
        "description": "Absolute Price Oscillator"
    },
    {
        "href": "function.trader-aroon.php",
        "name": "trader_aroon",
        "description": "Aroon"
    },
    {
        "href": "function.trader-aroonosc.php",
        "name": "trader_aroonosc",
        "description": "Aroon Oscillator"
    },
    {
        "href": "function.trader-asin.php",
        "name": "trader_asin",
        "description": "Vector Trigonometric ASin"
    },
    {
        "href": "function.trader-atan.php",
        "name": "trader_atan",
        "description": "Vector Trigonometric ATan"
    },
    {
        "href": "function.trader-atr.php",
        "name": "trader_atr",
        "description": "Average True Range"
    },
    {
        "href": "function.trader-avgprice.php",
        "name": "trader_avgprice",
        "description": "Average Price"
    },
    {
        "href": "function.trader-bbands.php",
        "name": "trader_bbands",
        "description": "Bollinger Bands"
    },
    {
        "href": "function.trader-beta.php",
        "name": "trader_beta",
        "description": "Beta"
    },
    {
        "href": "function.trader-bop.php",
        "name": "trader_bop",
        "description": "Balance Of Power"
    },
    {
        "href": "function.trader-cci.php",
        "name": "trader_cci",
        "description": "Commodity Channel Index"
    },
    {
        "href": "function.trader-cdl2crows.php",
        "name": "trader_cdl2crows",
        "description": "Two Crows"
    },
    {
        "href": "function.trader-cdl3blackcrows.php",
        "name": "trader_cdl3blackcrows",
        "description": "Three Black Crows"
    },
    {
        "href": "function.trader-cdl3inside.php",
        "name": "trader_cdl3inside",
        "description": "Three Inside Up/Down"
    },
    {
        "href": "function.trader-cdl3linestrike.php",
        "name": "trader_cdl3linestrike",
        "description": "Three-Line Strike"
    },
    {
        "href": "function.trader-cdl3outside.php",
        "name": "trader_cdl3outside",
        "description": "Three Outside Up/Down"
    },
    {
        "href": "function.trader-cdl3starsinsouth.php",
        "name": "trader_cdl3starsinsouth",
        "description": "Three Stars In The South"
    },
    {
        "href": "function.trader-cdl3whitesoldiers.php",
        "name": "trader_cdl3whitesoldiers",
        "description": "Three Advancing White Soldiers"
    },
    {
        "href": "function.trader-cdlabandonedbaby.php",
        "name": "trader_cdlabandonedbaby",
        "description": "Abandoned Baby"
    },
    {
        "href": "function.trader-cdladvanceblock.php",
        "name": "trader_cdladvanceblock",
        "description": "Advance Block"
    },
    {
        "href": "function.trader-cdlbelthold.php",
        "name": "trader_cdlbelthold",
        "description": "Belt-hold"
    },
    {
        "href": "function.trader-cdlbreakaway.php",
        "name": "trader_cdlbreakaway",
        "description": "Breakaway"
    },
    {
        "href": "function.trader-cdlclosingmarubozu.php",
        "name": "trader_cdlclosingmarubozu",
        "description": "Closing Marubozu"
    },
    {
        "href": "function.trader-cdlconcealbabyswall.php",
        "name": "trader_cdlconcealbabyswall",
        "description": "Concealing Baby Swallow"
    },
    {
        "href": "function.trader-cdlcounterattack.php",
        "name": "trader_cdlcounterattack",
        "description": "Counterattack"
    },
    {
        "href": "function.trader-cdldarkcloudcover.php",
        "name": "trader_cdldarkcloudcover",
        "description": "Dark Cloud Cover"
    },
    {
        "href": "function.trader-cdldoji.php",
        "name": "trader_cdldoji",
        "description": "Doji"
    },
    {
        "href": "function.trader-cdldojistar.php",
        "name": "trader_cdldojistar",
        "description": "Doji Star"
    },
    {
        "href": "function.trader-cdldragonflydoji.php",
        "name": "trader_cdldragonflydoji",
        "description": "Dragonfly Doji"
    },
    {
        "href": "function.trader-cdlengulfing.php",
        "name": "trader_cdlengulfing",
        "description": "Engulfing Pattern"
    },
    {
        "href": "function.trader-cdleveningdojistar.php",
        "name": "trader_cdleveningdojistar",
        "description": "Evening Doji Star"
    },
    {
        "href": "function.trader-cdleveningstar.php",
        "name": "trader_cdleveningstar",
        "description": "Evening Star"
    },
    {
        "href": "function.trader-cdlgapsidesidewhite.php",
        "name": "trader_cdlgapsidesidewhite",
        "description": "Up/Down-gap side-by-side white lines"
    },
    {
        "href": "function.trader-cdlgravestonedoji.php",
        "name": "trader_cdlgravestonedoji",
        "description": "Gravestone Doji"
    },
    {
        "href": "function.trader-cdlhammer.php",
        "name": "trader_cdlhammer",
        "description": "Hammer"
    },
    {
        "href": "function.trader-cdlhangingman.php",
        "name": "trader_cdlhangingman",
        "description": "Hanging Man"
    },
    {
        "href": "function.trader-cdlharami.php",
        "name": "trader_cdlharami",
        "description": "Harami Pattern"
    },
    {
        "href": "function.trader-cdlharamicross.php",
        "name": "trader_cdlharamicross",
        "description": "Harami Cross Pattern"
    },
    {
        "href": "function.trader-cdlhighwave.php",
        "name": "trader_cdlhighwave",
        "description": "High-Wave Candle"
    },
    {
        "href": "function.trader-cdlhikkake.php",
        "name": "trader_cdlhikkake",
        "description": "Hikkake Pattern"
    },
    {
        "href": "function.trader-cdlhikkakemod.php",
        "name": "trader_cdlhikkakemod",
        "description": "Modified Hikkake Pattern"
    },
    {
        "href": "function.trader-cdlhomingpigeon.php",
        "name": "trader_cdlhomingpigeon",
        "description": "Homing Pigeon"
    },
    {
        "href": "function.trader-cdlidentical3crows.php",
        "name": "trader_cdlidentical3crows",
        "description": "Identical Three Crows"
    },
    {
        "href": "function.trader-cdlinneck.php",
        "name": "trader_cdlinneck",
        "description": "In-Neck Pattern"
    },
    {
        "href": "function.trader-cdlinvertedhammer.php",
        "name": "trader_cdlinvertedhammer",
        "description": "Inverted Hammer"
    },
    {
        "href": "function.trader-cdlkicking.php",
        "name": "trader_cdlkicking",
        "description": "Kicking"
    },
    {
        "href": "function.trader-cdlkickingbylength.php",
        "name": "trader_cdlkickingbylength",
        "description": "Kicking bull/bear determined by the longer marubozu"
    },
    {
        "href": "function.trader-cdlladderbottom.php",
        "name": "trader_cdlladderbottom",
        "description": "Ladder Bottom"
    },
    {
        "href": "function.trader-cdllongleggeddoji.php",
        "name": "trader_cdllongleggeddoji",
        "description": "Long Legged Doji"
    },
    {
        "href": "function.trader-cdllongline.php",
        "name": "trader_cdllongline",
        "description": "Long Line Candle"
    },
    {
        "href": "function.trader-cdlmarubozu.php",
        "name": "trader_cdlmarubozu",
        "description": "Marubozu"
    },
    {
        "href": "function.trader-cdlmatchinglow.php",
        "name": "trader_cdlmatchinglow",
        "description": "Matching Low"
    },
    {
        "href": "function.trader-cdlmathold.php",
        "name": "trader_cdlmathold",
        "description": "Mat Hold"
    },
    {
        "href": "function.trader-cdlmorningdojistar.php",
        "name": "trader_cdlmorningdojistar",
        "description": "Morning Doji Star"
    },
    {
        "href": "function.trader-cdlmorningstar.php",
        "name": "trader_cdlmorningstar",
        "description": "Morning Star"
    },
    {
        "href": "function.trader-cdlonneck.php",
        "name": "trader_cdlonneck",
        "description": "On-Neck Pattern"
    },
    {
        "href": "function.trader-cdlpiercing.php",
        "name": "trader_cdlpiercing",
        "description": "Piercing Pattern"
    },
    {
        "href": "function.trader-cdlrickshawman.php",
        "name": "trader_cdlrickshawman",
        "description": "Rickshaw Man"
    },
    {
        "href": "function.trader-cdlrisefall3methods.php",
        "name": "trader_cdlrisefall3methods",
        "description": "Rising/Falling Three Methods"
    },
    {
        "href": "function.trader-cdlseparatinglines.php",
        "name": "trader_cdlseparatinglines",
        "description": "Separating Lines"
    },
    {
        "href": "function.trader-cdlshootingstar.php",
        "name": "trader_cdlshootingstar",
        "description": "Shooting Star"
    },
    {
        "href": "function.trader-cdlshortline.php",
        "name": "trader_cdlshortline",
        "description": "Short Line Candle"
    },
    {
        "href": "function.trader-cdlspinningtop.php",
        "name": "trader_cdlspinningtop",
        "description": "Spinning Top"
    },
    {
        "href": "function.trader-cdlstalledpattern.php",
        "name": "trader_cdlstalledpattern",
        "description": "Stalled Pattern"
    },
    {
        "href": "function.trader-cdlsticksandwich.php",
        "name": "trader_cdlsticksandwich",
        "description": "Stick Sandwich"
    },
    {
        "href": "function.trader-cdltakuri.php",
        "name": "trader_cdltakuri",
        "description": "Takuri (Dragonfly Doji with very long lower shadow)"
    },
    {
        "href": "function.trader-cdltasukigap.php",
        "name": "trader_cdltasukigap",
        "description": "Tasuki Gap"
    },
    {
        "href": "function.trader-cdlthrusting.php",
        "name": "trader_cdlthrusting",
        "description": "Thrusting Pattern"
    },
    {
        "href": "function.trader-cdltristar.php",
        "name": "trader_cdltristar",
        "description": "Tristar Pattern"
    },
    {
        "href": "function.trader-cdlunique3river.php",
        "name": "trader_cdlunique3river",
        "description": "Unique 3 River"
    },
    {
        "href": "function.trader-cdlupsidegap2crows.php",
        "name": "trader_cdlupsidegap2crows",
        "description": "Upside Gap Two Crows"
    },
    {
        "href": "function.trader-cdlxsidegap3methods.php",
        "name": "trader_cdlxsidegap3methods",
        "description": "Upside/Downside Gap Three Methods"
    },
    {
        "href": "function.trader-ceil.php",
        "name": "trader_ceil",
        "description": "Vector Ceil"
    },
    {
        "href": "function.trader-cmo.php",
        "name": "trader_cmo",
        "description": "Chande Momentum Oscillator"
    },
    {
        "href": "function.trader-correl.php",
        "name": "trader_correl",
        "description": "Pearson's Correlation Coefficient (r)"
    },
    {
        "href": "function.trader-cos.php",
        "name": "trader_cos",
        "description": "Vector Trigonometric Cos"
    },
    {
        "href": "function.trader-cosh.php",
        "name": "trader_cosh",
        "description": "Vector Trigonometric Cosh"
    },
    {
        "href": "function.trader-dema.php",
        "name": "trader_dema",
        "description": "Double Exponential Moving Average"
    },
    {
        "href": "function.trader-div.php",
        "name": "trader_div",
        "description": "Vector Arithmetic Div"
    },
    {
        "href": "function.trader-dx.php",
        "name": "trader_dx",
        "description": "Directional Movement Index"
    },
    {
        "href": "function.trader-ema.php",
        "name": "trader_ema",
        "description": "Exponential Moving Average"
    },
    {
        "href": "function.trader-errno.php",
        "name": "trader_errno",
        "description": "Get error code"
    },
    {
        "href": "function.trader-exp.php",
        "name": "trader_exp",
        "description": "Vector Arithmetic Exp"
    },
    {
        "href": "function.trader-floor.php",
        "name": "trader_floor",
        "description": "Vector Floor"
    },
    {
        "href": "function.trader-get-compat.php",
        "name": "trader_get_compat",
        "description": "Get compatibility mode"
    },
    {
        "href": "function.trader-get-unstable-period.php",
        "name": "trader_get_unstable_period",
        "description": "Get unstable period"
    },
    {
        "href": "function.trader-ht-dcperiod.php",
        "name": "trader_ht_dcperiod",
        "description": "Hilbert Transform Dominant Cycle Period"
    },
    {
        "href": "function.trader-ht-dcphase.php",
        "name": "trader_ht_dcphase",
        "description": "Hilbert Transform Dominant Cycle Phase"
    },
    {
        "href": "function.trader-ht-phasor.php",
        "name": "trader_ht_phasor",
        "description": "Hilbert Transform Phasor Components"
    },
    {
        "href": "function.trader-ht-sine.php",
        "name": "trader_ht_sine",
        "description": "Hilbert Transform SineWave"
    },
    {
        "href": "function.trader-ht-trendline.php",
        "name": "trader_ht_trendline",
        "description": "Hilbert Transform Instantaneous Trendline"
    },
    {
        "href": "function.trader-ht-trendmode.php",
        "name": "trader_ht_trendmode",
        "description": "Hilbert Transform Trend vs Cycle Mode"
    },
    {
        "href": "function.trader-kama.php",
        "name": "trader_kama",
        "description": "Kaufman Adaptive Moving Average"
    },
    {
        "href": "function.trader-linearreg.php",
        "name": "trader_linearreg",
        "description": "Linear Regression"
    },
    {
        "href": "function.trader-linearreg-angle.php",
        "name": "trader_linearreg_angle",
        "description": "Linear Regression Angle"
    },
    {
        "href": "function.trader-linearreg-intercept.php",
        "name": "trader_linearreg_intercept",
        "description": "Linear Regression Intercept"
    },
    {
        "href": "function.trader-linearreg-slope.php",
        "name": "trader_linearreg_slope",
        "description": "Linear Regression Slope"
    },
    {
        "href": "function.trader-ln.php",
        "name": "trader_ln",
        "description": "Vector Log Natural"
    },
    {
        "href": "function.trader-log10.php",
        "name": "trader_log10",
        "description": "Vector Log10"
    },
    {
        "href": "function.trader-ma.php",
        "name": "trader_ma",
        "description": "Moving average"
    },
    {
        "href": "function.trader-macd.php",
        "name": "trader_macd",
        "description": "Moving Average Convergence/Divergence"
    },
    {
        "href": "function.trader-macdext.php",
        "name": "trader_macdext",
        "description": "MACD with controllable MA type"
    },
    {
        "href": "function.trader-macdfix.php",
        "name": "trader_macdfix",
        "description": "Moving Average Convergence/Divergence Fix 12/26"
    },
    {
        "href": "function.trader-mama.php",
        "name": "trader_mama",
        "description": "MESA Adaptive Moving Average"
    },
    {
        "href": "function.trader-mavp.php",
        "name": "trader_mavp",
        "description": "Moving average with variable period"
    },
    {
        "href": "function.trader-max.php",
        "name": "trader_max",
        "description": "Highest value over a specified period"
    },
    {
        "href": "function.trader-maxindex.php",
        "name": "trader_maxindex",
        "description": "Index of highest value over a specified period"
    },
    {
        "href": "function.trader-medprice.php",
        "name": "trader_medprice",
        "description": "Median Price"
    },
    {
        "href": "function.trader-mfi.php",
        "name": "trader_mfi",
        "description": "Money Flow Index"
    },
    {
        "href": "function.trader-midpoint.php",
        "name": "trader_midpoint",
        "description": "MidPoint over period"
    },
    {
        "href": "function.trader-midprice.php",
        "name": "trader_midprice",
        "description": "Midpoint Price over period"
    },
    {
        "href": "function.trader-min.php",
        "name": "trader_min",
        "description": "Lowest value over a specified period"
    },
    {
        "href": "function.trader-minindex.php",
        "name": "trader_minindex",
        "description": "Index of lowest value over a specified period"
    },
    {
        "href": "function.trader-minmax.php",
        "name": "trader_minmax",
        "description": "Lowest and highest values over a specified period"
    },
    {
        "href": "function.trader-minmaxindex.php",
        "name": "trader_minmaxindex",
        "description": "Indexes of lowest and highest values over a specified period"
    },
    {
        "href": "function.trader-minus-di.php",
        "name": "trader_minus_di",
        "description": "Minus Directional Indicator"
    },
    {
        "href": "function.trader-minus-dm.php",
        "name": "trader_minus_dm",
        "description": "Minus Directional Movement"
    },
    {
        "href": "function.trader-mom.php",
        "name": "trader_mom",
        "description": "Momentum"
    },
    {
        "href": "function.trader-mult.php",
        "name": "trader_mult",
        "description": "Vector Arithmetic Mult"
    },
    {
        "href": "function.trader-natr.php",
        "name": "trader_natr",
        "description": "Normalized Average True Range"
    },
    {
        "href": "function.trader-obv.php",
        "name": "trader_obv",
        "description": "On Balance Volume"
    },
    {
        "href": "function.trader-plus-di.php",
        "name": "trader_plus_di",
        "description": "Plus Directional Indicator"
    },
    {
        "href": "function.trader-plus-dm.php",
        "name": "trader_plus_dm",
        "description": "Plus Directional Movement"
    },
    {
        "href": "function.trader-ppo.php",
        "name": "trader_ppo",
        "description": "Percentage Price Oscillator"
    },
    {
        "href": "function.trader-roc.php",
        "name": "trader_roc",
        "description": "Rate of change : ((price/prevPrice)-1)*100"
    },
    {
        "href": "function.trader-rocp.php",
        "name": "trader_rocp",
        "description": "Rate of change Percentage: (price-prevPrice)/prevPrice"
    },
    {
        "href": "function.trader-rocr.php",
        "name": "trader_rocr",
        "description": "Rate of change ratio: (price/prevPrice)"
    },
    {
        "href": "function.trader-rocr100.php",
        "name": "trader_rocr100",
        "description": "Rate of change ratio 100 scale: (price/prevPrice)*100"
    },
    {
        "href": "function.trader-rsi.php",
        "name": "trader_rsi",
        "description": "Relative Strength Index"
    },
    {
        "href": "function.trader-sar.php",
        "name": "trader_sar",
        "description": "Parabolic SAR"
    },
    {
        "href": "function.trader-sarext.php",
        "name": "trader_sarext",
        "description": "Parabolic SAR Extended"
    },
    {
        "href": "function.trader-set-compat.php",
        "name": "trader_set_compat",
        "description": "Set compatibility mode"
    },
    {
        "href": "function.trader-set-unstable-period.php",
        "name": "trader_set_unstable_period",
        "description": "Set unstable period"
    },
    {
        "href": "function.trader-sin.php",
        "name": "trader_sin",
        "description": "Vector Trigonometric Sin"
    },
    {
        "href": "function.trader-sinh.php",
        "name": "trader_sinh",
        "description": "Vector Trigonometric Sinh"
    },
    {
        "href": "function.trader-sma.php",
        "name": "trader_sma",
        "description": "Simple Moving Average"
    },
    {
        "href": "function.trader-sqrt.php",
        "name": "trader_sqrt",
        "description": "Vector Square Root"
    },
    {
        "href": "function.trader-stddev.php",
        "name": "trader_stddev",
        "description": "Standard Deviation"
    },
    {
        "href": "function.trader-stoch.php",
        "name": "trader_stoch",
        "description": "Stochastic"
    },
    {
        "href": "function.trader-stochf.php",
        "name": "trader_stochf",
        "description": "Stochastic Fast"
    },
    {
        "href": "function.trader-stochrsi.php",
        "name": "trader_stochrsi",
        "description": "Stochastic Relative Strength Index"
    },
    {
        "href": "function.trader-sub.php",
        "name": "trader_sub",
        "description": "Vector Arithmetic Subtraction"
    },
    {
        "href": "function.trader-sum.php",
        "name": "trader_sum",
        "description": "Summation"
    },
    {
        "href": "function.trader-t3.php",
        "name": "trader_t3",
        "description": "Triple Exponential Moving Average (T3)"
    },
    {
        "href": "function.trader-tan.php",
        "name": "trader_tan",
        "description": "Vector Trigonometric Tan"
    },
    {
        "href": "function.trader-tanh.php",
        "name": "trader_tanh",
        "description": "Vector Trigonometric Tanh"
    },
    {
        "href": "function.trader-tema.php",
        "name": "trader_tema",
        "description": "Triple Exponential Moving Average"
    },
    {
        "href": "function.trader-trange.php",
        "name": "trader_trange",
        "description": "True Range"
    },
    {
        "href": "function.trader-trima.php",
        "name": "trader_trima",
        "description": "Triangular Moving Average"
    },
    {
        "href": "function.trader-trix.php",
        "name": "trader_trix",
        "description": "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA"
    },
    {
        "href": "function.trader-tsf.php",
        "name": "trader_tsf",
        "description": "Time Series Forecast"
    },
    {
        "href": "function.trader-typprice.php",
        "name": "trader_typprice",
        "description": "Typical Price"
    },
    {
        "href": "function.trader-ultosc.php",
        "name": "trader_ultosc",
        "description": "Ultimate Oscillator"
    },
    {
        "href": "function.trader-var.php",
        "name": "trader_var",
        "description": "Variance"
    },
    {
        "href": "function.trader-wclprice.php",
        "name": "trader_wclprice",
        "description": "Weighted Close Price"
    },
    {
        "href": "function.trader-willr.php",
        "name": "trader_willr",
        "description": "Williams' %R"
    },
    {
        "href": "function.trader-wma.php",
        "name": "trader_wma",
        "description": "Weighted Moving Average"
    },
    {
        "href": "function.trait-exists.php",
        "name": "trait_exists",
        "description": "Checks if the trait exists"
    },
    {
        "href": "transliterator.create.php",
        "name": "Transliterator::create",
        "description": "Create a transliterator"
    },
    {
        "href": "transliterator.createfromrules.php",
        "name": "Transliterator::createFromRules",
        "description": "Create transliterator from rules"
    },
    {
        "href": "transliterator.createinverse.php",
        "name": "Transliterator::createInverse",
        "description": "Create an inverse transliterator"
    },
    {
        "href": "transliterator.geterrorcode.php",
        "name": "Transliterator::getErrorCode",
        "description": "Get last error code"
    },
    {
        "href": "transliterator.geterrormessage.php",
        "name": "Transliterator::getErrorMessage",
        "description": "Get last error message"
    },
    {
        "href": "transliterator.listids.php",
        "name": "Transliterator::listIDs",
        "description": "Get transliterator IDs"
    },
    {
        "href": "transliterator.transliterate.php",
        "name": "Transliterator::transliterate",
        "description": "Transliterate a string"
    },
    {
        "href": "transliterator.construct.php",
        "name": "Transliterator::__construct",
        "description": "Private constructor to deny instantiation"
    },
    {
        "href": "function.trigger-error.php",
        "name": "trigger_error",
        "description": "Generates a user-level error/warning/notice message"
    },
    {
        "href": "function.trim.php",
        "name": "trim",
        "description": "Strip whitespace (or other characters) from the beginning and end of a string"
    },
    {
        "href": "function.uasort.php",
        "name": "uasort",
        "description": "Sort an array with a user-defined comparison function and maintain index association"
    },
    {
        "href": "function.ucfirst.php",
        "name": "ucfirst",
        "description": "Make a string's first character uppercase"
    },
    {
        "href": "uconverter.convert.php",
        "name": "UConverter::convert",
        "description": "Convert string from one charset to another"
    },
    {
        "href": "uconverter.fromucallback.php",
        "name": "UConverter::fromUCallback",
        "description": "Default \"from\" callback function"
    },
    {
        "href": "uconverter.getaliases.php",
        "name": "UConverter::getAliases",
        "description": "Get the aliases of the given name"
    },
    {
        "href": "uconverter.getavailable.php",
        "name": "UConverter::getAvailable",
        "description": "Get the available canonical converter names"
    },
    {
        "href": "uconverter.getdestinationencoding.php",
        "name": "UConverter::getDestinationEncoding",
        "description": "Get the destination encoding"
    },
    {
        "href": "uconverter.getdestinationtype.php",
        "name": "UConverter::getDestinationType",
        "description": "Get the destination converter type"
    },
    {
        "href": "uconverter.geterrorcode.php",
        "name": "UConverter::getErrorCode",
        "description": "Get last error code on the object"
    },
    {
        "href": "uconverter.geterrormessage.php",
        "name": "UConverter::getErrorMessage",
        "description": "Get last error message on the object"
    },
    {
        "href": "uconverter.getsourceencoding.php",
        "name": "UConverter::getSourceEncoding",
        "description": "Get the source encoding"
    },
    {
        "href": "uconverter.getsourcetype.php",
        "name": "UConverter::getSourceType",
        "description": "Get the source converter type"
    },
    {
        "href": "uconverter.getstandards.php",
        "name": "UConverter::getStandards",
        "description": "Get standards associated to converter names"
    },
    {
        "href": "uconverter.getsubstchars.php",
        "name": "UConverter::getSubstChars",
        "description": "Get substitution chars"
    },
    {
        "href": "uconverter.reasontext.php",
        "name": "UConverter::reasonText",
        "description": "Get string representation of the callback reason"
    },
    {
        "href": "uconverter.setdestinationencoding.php",
        "name": "UConverter::setDestinationEncoding",
        "description": "Set the destination encoding"
    },
    {
        "href": "uconverter.setsourceencoding.php",
        "name": "UConverter::setSourceEncoding",
        "description": "Set the source encoding"
    },
    {
        "href": "uconverter.setsubstchars.php",
        "name": "UConverter::setSubstChars",
        "description": "Set the substitution chars"
    },
    {
        "href": "uconverter.toucallback.php",
        "name": "UConverter::toUCallback",
        "description": "Default \"to\" callback function"
    },
    {
        "href": "uconverter.transcode.php",
        "name": "UConverter::transcode",
        "description": "Convert string from one charset to another"
    },
    {
        "href": "uconverter.construct.php",
        "name": "UConverter::__construct",
        "description": "Create UConverter object"
    },
    {
        "href": "function.ucwords.php",
        "name": "ucwords",
        "description": "Uppercase the first character of each word in a string"
    },
    {
        "href": "ui-area.ondraw.php",
        "name": "UI\\Area::onDraw",
        "description": "Draw Callback"
    },
    {
        "href": "ui-area.onkey.php",
        "name": "UI\\Area::onKey",
        "description": "Key Callback"
    },
    {
        "href": "ui-area.onmouse.php",
        "name": "UI\\Area::onMouse",
        "description": "Mouse Callback"
    },
    {
        "href": "ui-area.redraw.php",
        "name": "UI\\Area::redraw",
        "description": "Redraw Area"
    },
    {
        "href": "ui-area.scrollto.php",
        "name": "UI\\Area::scrollTo",
        "description": "Area Scroll"
    },
    {
        "href": "ui-area.setsize.php",
        "name": "UI\\Area::setSize",
        "description": "Set Size"
    },
    {
        "href": "ui-control.destroy.php",
        "name": "UI\\Control::destroy",
        "description": "Destroy Control"
    },
    {
        "href": "ui-control.disable.php",
        "name": "UI\\Control::disable",
        "description": "Disable Control"
    },
    {
        "href": "ui-control.enable.php",
        "name": "UI\\Control::enable",
        "description": "Enable Control"
    },
    {
        "href": "ui-control.getparent.php",
        "name": "UI\\Control::getParent",
        "description": "Get Parent Control"
    },
    {
        "href": "ui-control.gettoplevel.php",
        "name": "UI\\Control::getTopLevel",
        "description": "Get Top Level"
    },
    {
        "href": "ui-control.hide.php",
        "name": "UI\\Control::hide",
        "description": "Hide Control"
    },
    {
        "href": "ui-control.isenabled.php",
        "name": "UI\\Control::isEnabled",
        "description": "Determine if Control is enabled"
    },
    {
        "href": "ui-control.isvisible.php",
        "name": "UI\\Control::isVisible",
        "description": "Determine if Control is visible"
    },
    {
        "href": "ui-control.setparent.php",
        "name": "UI\\Control::setParent",
        "description": "Set Parent Control"
    },
    {
        "href": "ui-control.show.php",
        "name": "UI\\Control::show",
        "description": "Control Show"
    },
    {
        "href": "ui-controls-box.append.php",
        "name": "UI\\Controls\\Box::append",
        "description": "Append Control"
    },
    {
        "href": "ui-controls-box.delete.php",
        "name": "UI\\Controls\\Box::delete",
        "description": "Delete Control"
    },
    {
        "href": "ui-controls-box.getorientation.php",
        "name": "UI\\Controls\\Box::getOrientation",
        "description": "Get Orientation"
    },
    {
        "href": "ui-controls-box.ispadded.php",
        "name": "UI\\Controls\\Box::isPadded",
        "description": "Padding Detection"
    },
    {
        "href": "ui-controls-box.setpadded.php",
        "name": "UI\\Controls\\Box::setPadded",
        "description": "Set Padding"
    },
    {
        "href": "ui-controls-box.construct.php",
        "name": "UI\\Controls\\Box::__construct",
        "description": "Construct a new Box"
    },
    {
        "href": "ui-controls-button.gettext.php",
        "name": "UI\\Controls\\Button::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-button.onclick.php",
        "name": "UI\\Controls\\Button::onClick",
        "description": "Click Handler"
    },
    {
        "href": "ui-controls-button.settext.php",
        "name": "UI\\Controls\\Button::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-button.construct.php",
        "name": "UI\\Controls\\Button::__construct",
        "description": "Construct a new Button"
    },
    {
        "href": "ui-controls-check.gettext.php",
        "name": "UI\\Controls\\Check::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-check.ischecked.php",
        "name": "UI\\Controls\\Check::isChecked",
        "description": "Checked Detection"
    },
    {
        "href": "ui-controls-check.ontoggle.php",
        "name": "UI\\Controls\\Check::onToggle",
        "description": "Toggle Callback"
    },
    {
        "href": "ui-controls-check.setchecked.php",
        "name": "UI\\Controls\\Check::setChecked",
        "description": "Set Checked"
    },
    {
        "href": "ui-controls-check.settext.php",
        "name": "UI\\Controls\\Check::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-check.construct.php",
        "name": "UI\\Controls\\Check::__construct",
        "description": "Construct a new Check"
    },
    {
        "href": "ui-controls-colorbutton.getcolor.php",
        "name": "UI\\Controls\\ColorButton::getColor",
        "description": "Get Color"
    },
    {
        "href": "ui-controls-colorbutton.onchange.php",
        "name": "UI\\Controls\\ColorButton::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-colorbutton.setcolor.php",
        "name": "UI\\Controls\\ColorButton::setColor",
        "description": "Set Color"
    },
    {
        "href": "ui-controls-combo.append.php",
        "name": "UI\\Controls\\Combo::append",
        "description": "Append Option"
    },
    {
        "href": "ui-controls-combo.getselected.php",
        "name": "UI\\Controls\\Combo::getSelected",
        "description": "Get Selected Option"
    },
    {
        "href": "ui-controls-combo.onselected.php",
        "name": "UI\\Controls\\Combo::onSelected",
        "description": "Selected Handler"
    },
    {
        "href": "ui-controls-combo.setselected.php",
        "name": "UI\\Controls\\Combo::setSelected",
        "description": "Set Selected Option"
    },
    {
        "href": "ui-controls-editablecombo.append.php",
        "name": "UI\\Controls\\EditableCombo::append",
        "description": "Append Option"
    },
    {
        "href": "ui-controls-editablecombo.gettext.php",
        "name": "UI\\Controls\\EditableCombo::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-editablecombo.onchange.php",
        "name": "UI\\Controls\\EditableCombo::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-editablecombo.settext.php",
        "name": "UI\\Controls\\EditableCombo::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-entry.gettext.php",
        "name": "UI\\Controls\\Entry::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-entry.isreadonly.php",
        "name": "UI\\Controls\\Entry::isReadOnly",
        "description": "Detect Read Only"
    },
    {
        "href": "ui-controls-entry.onchange.php",
        "name": "UI\\Controls\\Entry::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-entry.setreadonly.php",
        "name": "UI\\Controls\\Entry::setReadOnly",
        "description": "Set Read Only"
    },
    {
        "href": "ui-controls-entry.settext.php",
        "name": "UI\\Controls\\Entry::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-entry.construct.php",
        "name": "UI\\Controls\\Entry::__construct",
        "description": "Construct a new Entry"
    },
    {
        "href": "ui-controls-form.append.php",
        "name": "UI\\Controls\\Form::append",
        "description": "Append Control"
    },
    {
        "href": "ui-controls-form.delete.php",
        "name": "UI\\Controls\\Form::delete",
        "description": "Delete Control"
    },
    {
        "href": "ui-controls-form.ispadded.php",
        "name": "UI\\Controls\\Form::isPadded",
        "description": "Padding Detection"
    },
    {
        "href": "ui-controls-form.setpadded.php",
        "name": "UI\\Controls\\Form::setPadded",
        "description": "Set Padding"
    },
    {
        "href": "ui-controls-grid.append.php",
        "name": "UI\\Controls\\Grid::append",
        "description": "Append Control"
    },
    {
        "href": "ui-controls-grid.ispadded.php",
        "name": "UI\\Controls\\Grid::isPadded",
        "description": "Padding Detection"
    },
    {
        "href": "ui-controls-grid.setpadded.php",
        "name": "UI\\Controls\\Grid::setPadded",
        "description": "Set Padding"
    },
    {
        "href": "ui-controls-group.append.php",
        "name": "UI\\Controls\\Group::append",
        "description": "Append Control"
    },
    {
        "href": "ui-controls-group.gettitle.php",
        "name": "UI\\Controls\\Group::getTitle",
        "description": "Get Title"
    },
    {
        "href": "ui-controls-group.hasmargin.php",
        "name": "UI\\Controls\\Group::hasMargin",
        "description": "Margin Detection"
    },
    {
        "href": "ui-controls-group.setmargin.php",
        "name": "UI\\Controls\\Group::setMargin",
        "description": "Set Margin"
    },
    {
        "href": "ui-controls-group.settitle.php",
        "name": "UI\\Controls\\Group::setTitle",
        "description": "Set Title"
    },
    {
        "href": "ui-controls-group.construct.php",
        "name": "UI\\Controls\\Group::__construct",
        "description": "Construct a new Group"
    },
    {
        "href": "ui-controls-label.gettext.php",
        "name": "UI\\Controls\\Label::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-label.settext.php",
        "name": "UI\\Controls\\Label::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-label.construct.php",
        "name": "UI\\Controls\\Label::__construct",
        "description": "Construct a new Label"
    },
    {
        "href": "ui-controls-multilineentry.append.php",
        "name": "UI\\Controls\\MultilineEntry::append",
        "description": "Append Text"
    },
    {
        "href": "ui-controls-multilineentry.gettext.php",
        "name": "UI\\Controls\\MultilineEntry::getText",
        "description": "Get Text"
    },
    {
        "href": "ui-controls-multilineentry.isreadonly.php",
        "name": "UI\\Controls\\MultilineEntry::isReadOnly",
        "description": "Read Only Detection"
    },
    {
        "href": "ui-controls-multilineentry.onchange.php",
        "name": "UI\\Controls\\MultilineEntry::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-multilineentry.setreadonly.php",
        "name": "UI\\Controls\\MultilineEntry::setReadOnly",
        "description": "Set Read Only"
    },
    {
        "href": "ui-controls-multilineentry.settext.php",
        "name": "UI\\Controls\\MultilineEntry::setText",
        "description": "Set Text"
    },
    {
        "href": "ui-controls-multilineentry.construct.php",
        "name": "UI\\Controls\\MultilineEntry::__construct",
        "description": "Construct a new Multiline Entry"
    },
    {
        "href": "ui-controls-picker.construct.php",
        "name": "UI\\Controls\\Picker::__construct",
        "description": "Construct a new Picker"
    },
    {
        "href": "ui-controls-progress.getvalue.php",
        "name": "UI\\Controls\\Progress::getValue",
        "description": "Get Value"
    },
    {
        "href": "ui-controls-progress.setvalue.php",
        "name": "UI\\Controls\\Progress::setValue",
        "description": "Set Value"
    },
    {
        "href": "ui-controls-radio.append.php",
        "name": "UI\\Controls\\Radio::append",
        "description": "Append Option"
    },
    {
        "href": "ui-controls-radio.getselected.php",
        "name": "UI\\Controls\\Radio::getSelected",
        "description": "Get Selected Option"
    },
    {
        "href": "ui-controls-radio.onselected.php",
        "name": "UI\\Controls\\Radio::onSelected",
        "description": "Selected Handler"
    },
    {
        "href": "ui-controls-radio.setselected.php",
        "name": "UI\\Controls\\Radio::setSelected",
        "description": "Set Selected Option"
    },
    {
        "href": "ui-controls-separator.construct.php",
        "name": "UI\\Controls\\Separator::__construct",
        "description": "Construct a new Separator"
    },
    {
        "href": "ui-controls-slider.getvalue.php",
        "name": "UI\\Controls\\Slider::getValue",
        "description": "Get Value"
    },
    {
        "href": "ui-controls-slider.onchange.php",
        "name": "UI\\Controls\\Slider::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-slider.setvalue.php",
        "name": "UI\\Controls\\Slider::setValue",
        "description": "Set Value"
    },
    {
        "href": "ui-controls-slider.construct.php",
        "name": "UI\\Controls\\Slider::__construct",
        "description": "Construct a new Slider"
    },
    {
        "href": "ui-controls-spin.getvalue.php",
        "name": "UI\\Controls\\Spin::getValue",
        "description": "Get Value"
    },
    {
        "href": "ui-controls-spin.onchange.php",
        "name": "UI\\Controls\\Spin::onChange",
        "description": "Change Handler"
    },
    {
        "href": "ui-controls-spin.setvalue.php",
        "name": "UI\\Controls\\Spin::setValue",
        "description": "Set Value"
    },
    {
        "href": "ui-controls-spin.construct.php",
        "name": "UI\\Controls\\Spin::__construct",
        "description": "Construct a new Spin"
    },
    {
        "href": "ui-controls-tab.append.php",
        "name": "UI\\Controls\\Tab::append",
        "description": "Append Page"
    },
    {
        "href": "ui-controls-tab.delete.php",
        "name": "UI\\Controls\\Tab::delete",
        "description": "Delete Page"
    },
    {
        "href": "ui-controls-tab.hasmargin.php",
        "name": "UI\\Controls\\Tab::hasMargin",
        "description": "Margin Detection"
    },
    {
        "href": "ui-controls-tab.insertat.php",
        "name": "UI\\Controls\\Tab::insertAt",
        "description": "Insert Page"
    },
    {
        "href": "ui-controls-tab.pages.php",
        "name": "UI\\Controls\\Tab::pages",
        "description": "Page Count"
    },
    {
        "href": "ui-controls-tab.setmargin.php",
        "name": "UI\\Controls\\Tab::setMargin",
        "description": "Set Margin"
    },
    {
        "href": "ui-draw-brush.getcolor.php",
        "name": "UI\\Draw\\Brush::getColor",
        "description": "Get Color"
    },
    {
        "href": "ui-draw-brush.setcolor.php",
        "name": "UI\\Draw\\Brush::setColor",
        "description": "Set Color"
    },
    {
        "href": "ui-draw-brush.construct.php",
        "name": "UI\\Draw\\Brush::__construct",
        "description": "Construct a new Brush"
    },
    {
        "href": "ui-draw-brush-gradient.addstop.php",
        "name": "UI\\Draw\\Brush\\Gradient::addStop",
        "description": "Stop Manipulation"
    },
    {
        "href": "ui-draw-brush-gradient.delstop.php",
        "name": "UI\\Draw\\Brush\\Gradient::delStop",
        "description": "Stop Manipulation"
    },
    {
        "href": "ui-draw-brush-gradient.setstop.php",
        "name": "UI\\Draw\\Brush\\Gradient::setStop",
        "description": "Stop Manipulation"
    },
    {
        "href": "ui-draw-brush-lineargradient.construct.php",
        "name": "UI\\Draw\\Brush\\LinearGradient::__construct",
        "description": "Construct a Linear Gradient"
    },
    {
        "href": "ui-draw-brush-radialgradient.construct.php",
        "name": "UI\\Draw\\Brush\\RadialGradient::__construct",
        "description": "Construct a new Radial Gradient"
    },
    {
        "href": "ui-draw-color.getchannel.php",
        "name": "UI\\Draw\\Color::getChannel",
        "description": "Color Manipulation"
    },
    {
        "href": "ui-draw-color.setchannel.php",
        "name": "UI\\Draw\\Color::setChannel",
        "description": "Color Manipulation"
    },
    {
        "href": "ui-draw-color.construct.php",
        "name": "UI\\Draw\\Color::__construct",
        "description": "Construct new Color"
    },
    {
        "href": "ui-draw-matrix.invert.php",
        "name": "UI\\Draw\\Matrix::invert",
        "description": "Invert Matrix"
    },
    {
        "href": "ui-draw-matrix.isinvertible.php",
        "name": "UI\\Draw\\Matrix::isInvertible",
        "description": "Invertible Detection"
    },
    {
        "href": "ui-draw-matrix.multiply.php",
        "name": "UI\\Draw\\Matrix::multiply",
        "description": "Multiply Matrix"
    },
    {
        "href": "ui-draw-matrix.rotate.php",
        "name": "UI\\Draw\\Matrix::rotate",
        "description": "Rotate Matrix"
    },
    {
        "href": "ui-draw-matrix.scale.php",
        "name": "UI\\Draw\\Matrix::scale",
        "description": "Scale Matrix"
    },
    {
        "href": "ui-draw-matrix.skew.php",
        "name": "UI\\Draw\\Matrix::skew",
        "description": "Skew Matrix"
    },
    {
        "href": "ui-draw-matrix.translate.php",
        "name": "UI\\Draw\\Matrix::translate",
        "description": "Translate Matrix"
    },
    {
        "href": "ui-draw-path.addrectangle.php",
        "name": "UI\\Draw\\Path::addRectangle",
        "description": "Draw a Rectangle"
    },
    {
        "href": "ui-draw-path.arcto.php",
        "name": "UI\\Draw\\Path::arcTo",
        "description": "Draw an Arc"
    },
    {
        "href": "ui-draw-path.bezierto.php",
        "name": "UI\\Draw\\Path::bezierTo",
        "description": "Draw Bezier Curve"
    },
    {
        "href": "ui-draw-path.closefigure.php",
        "name": "UI\\Draw\\Path::closeFigure",
        "description": "Close Figure"
    },
    {
        "href": "ui-draw-path.end.php",
        "name": "UI\\Draw\\Path::end",
        "description": "Finalize Path"
    },
    {
        "href": "ui-draw-path.lineto.php",
        "name": "UI\\Draw\\Path::lineTo",
        "description": "Draw a Line"
    },
    {
        "href": "ui-draw-path.newfigure.php",
        "name": "UI\\Draw\\Path::newFigure",
        "description": "Draw Figure"
    },
    {
        "href": "ui-draw-path.newfigurewitharc.php",
        "name": "UI\\Draw\\Path::newFigureWithArc",
        "description": "Draw Figure with Arc"
    },
    {
        "href": "ui-draw-path.construct.php",
        "name": "UI\\Draw\\Path::__construct",
        "description": "Construct a new Path"
    },
    {
        "href": "ui-draw-pen.clip.php",
        "name": "UI\\Draw\\Pen::clip",
        "description": "Clip a Path"
    },
    {
        "href": "ui-draw-pen.fill.php",
        "name": "UI\\Draw\\Pen::fill",
        "description": "Fill a Path"
    },
    {
        "href": "ui-draw-pen.restore.php",
        "name": "UI\\Draw\\Pen::restore",
        "description": "Restore"
    },
    {
        "href": "ui-draw-pen.save.php",
        "name": "UI\\Draw\\Pen::save",
        "description": "Save"
    },
    {
        "href": "ui-draw-pen.stroke.php",
        "name": "UI\\Draw\\Pen::stroke",
        "description": "Stroke a Path"
    },
    {
        "href": "ui-draw-pen.transform.php",
        "name": "UI\\Draw\\Pen::transform",
        "description": "Matrix Transform"
    },
    {
        "href": "ui-draw-pen.write.php",
        "name": "UI\\Draw\\Pen::write",
        "description": "Draw Text at Point"
    },
    {
        "href": "ui-draw-stroke.getcap.php",
        "name": "UI\\Draw\\Stroke::getCap",
        "description": "Get Line Cap"
    },
    {
        "href": "ui-draw-stroke.getjoin.php",
        "name": "UI\\Draw\\Stroke::getJoin",
        "description": "Get Line Join"
    },
    {
        "href": "ui-draw-stroke.getmiterlimit.php",
        "name": "UI\\Draw\\Stroke::getMiterLimit",
        "description": "Get Miter Limit"
    },
    {
        "href": "ui-draw-stroke.getthickness.php",
        "name": "UI\\Draw\\Stroke::getThickness",
        "description": "Get Thickness"
    },
    {
        "href": "ui-draw-stroke.setcap.php",
        "name": "UI\\Draw\\Stroke::setCap",
        "description": "Set Line Cap"
    },
    {
        "href": "ui-draw-stroke.setjoin.php",
        "name": "UI\\Draw\\Stroke::setJoin",
        "description": "Set Line Join"
    },
    {
        "href": "ui-draw-stroke.setmiterlimit.php",
        "name": "UI\\Draw\\Stroke::setMiterLimit",
        "description": "Set Miter Limit"
    },
    {
        "href": "ui-draw-stroke.setthickness.php",
        "name": "UI\\Draw\\Stroke::setThickness",
        "description": "Set Thickness"
    },
    {
        "href": "ui-draw-stroke.construct.php",
        "name": "UI\\Draw\\Stroke::__construct",
        "description": "Construct a new Stroke"
    },
    {
        "href": "ui-draw-text-font.getascent.php",
        "name": "UI\\Draw\\Text\\Font::getAscent",
        "description": "Font Metrics"
    },
    {
        "href": "ui-draw-text-font.getdescent.php",
        "name": "UI\\Draw\\Text\\Font::getDescent",
        "description": "Font Metrics"
    },
    {
        "href": "ui-draw-text-font.getleading.php",
        "name": "UI\\Draw\\Text\\Font::getLeading",
        "description": "Font Metrics"
    },
    {
        "href": "ui-draw-text-font.getunderlineposition.php",
        "name": "UI\\Draw\\Text\\Font::getUnderlinePosition",
        "description": "Font Metrics"
    },
    {
        "href": "ui-draw-text-font.getunderlinethickness.php",
        "name": "UI\\Draw\\Text\\Font::getUnderlineThickness",
        "description": "Font Metrics"
    },
    {
        "href": "ui-draw-text-font.construct.php",
        "name": "UI\\Draw\\Text\\Font::__construct",
        "description": "Construct a new Font"
    },
    {
        "href": "ui-draw-text-font-descriptor.getfamily.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getFamily",
        "description": "Get Font Family"
    },
    {
        "href": "ui-draw-text-font-descriptor.getitalic.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getItalic",
        "description": "Style Detection"
    },
    {
        "href": "ui-draw-text-font-descriptor.getsize.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getSize",
        "description": "Size Detection"
    },
    {
        "href": "ui-draw-text-font-descriptor.getstretch.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getStretch",
        "description": "Style Detection"
    },
    {
        "href": "ui-draw-text-font-descriptor.getweight.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getWeight",
        "description": "Weight Detection"
    },
    {
        "href": "ui-draw-text-font-descriptor.construct.php",
        "name": "UI\\Draw\\Text\\Font\\Descriptor::__construct",
        "description": "Construct a new Font Descriptor"
    },
    {
        "href": "function.ui-draw-text-font-fontfamilies.php",
        "name": "UI\\Draw\\Text\\Font\\fontFamilies",
        "description": "Retrieve Font Families"
    },
    {
        "href": "ui-draw-text-layout.setcolor.php",
        "name": "UI\\Draw\\Text\\Layout::setColor",
        "description": "Set Color"
    },
    {
        "href": "ui-draw-text-layout.setwidth.php",
        "name": "UI\\Draw\\Text\\Layout::setWidth",
        "description": "Set Width"
    },
    {
        "href": "ui-draw-text-layout.construct.php",
        "name": "UI\\Draw\\Text\\Layout::__construct",
        "description": "Construct a new Text Layout"
    },
    {
        "href": "ui-executor.kill.php",
        "name": "UI\\Executor::kill",
        "description": "Stop Executor"
    },
    {
        "href": "ui-executor.onexecute.php",
        "name": "UI\\Executor::onExecute",
        "description": "Execution Callback"
    },
    {
        "href": "ui-executor.setinterval.php",
        "name": "UI\\Executor::setInterval",
        "description": "Interval Manipulation"
    },
    {
        "href": "ui-executor.construct.php",
        "name": "UI\\Executor::__construct",
        "description": "Construct a new Executor"
    },
    {
        "href": "ui-menu.append.php",
        "name": "UI\\Menu::append",
        "description": "Append Menu Item"
    },
    {
        "href": "ui-menu.appendabout.php",
        "name": "UI\\Menu::appendAbout",
        "description": "Append About Menu Item"
    },
    {
        "href": "ui-menu.appendcheck.php",
        "name": "UI\\Menu::appendCheck",
        "description": "Append Checkable Menu Item"
    },
    {
        "href": "ui-menu.appendpreferences.php",
        "name": "UI\\Menu::appendPreferences",
        "description": "Append Preferences Menu Item"
    },
    {
        "href": "ui-menu.appendquit.php",
        "name": "UI\\Menu::appendQuit",
        "description": "Append Quit Menu Item"
    },
    {
        "href": "ui-menu.appendseparator.php",
        "name": "UI\\Menu::appendSeparator",
        "description": "Append Menu Item Separator"
    },
    {
        "href": "ui-menu.construct.php",
        "name": "UI\\Menu::__construct",
        "description": "Construct a new Menu"
    },
    {
        "href": "ui-menuitem.disable.php",
        "name": "UI\\MenuItem::disable",
        "description": "Disable Menu Item"
    },
    {
        "href": "ui-menuitem.enable.php",
        "name": "UI\\MenuItem::enable",
        "description": "Enable Menu Item"
    },
    {
        "href": "ui-menuitem.ischecked.php",
        "name": "UI\\MenuItem::isChecked",
        "description": "Detect Checked"
    },
    {
        "href": "ui-menuitem.onclick.php",
        "name": "UI\\MenuItem::onClick",
        "description": "On Click Callback"
    },
    {
        "href": "ui-menuitem.setchecked.php",
        "name": "UI\\MenuItem::setChecked",
        "description": "Set Checked"
    },
    {
        "href": "ui-point.at.php",
        "name": "UI\\Point::at",
        "description": "Size Coercion"
    },
    {
        "href": "ui-point.getx.php",
        "name": "UI\\Point::getX",
        "description": "Retrieves X"
    },
    {
        "href": "ui-point.gety.php",
        "name": "UI\\Point::getY",
        "description": "Retrieves Y"
    },
    {
        "href": "ui-point.setx.php",
        "name": "UI\\Point::setX",
        "description": "Set X"
    },
    {
        "href": "ui-point.sety.php",
        "name": "UI\\Point::setY",
        "description": "Set Y"
    },
    {
        "href": "ui-point.construct.php",
        "name": "UI\\Point::__construct",
        "description": "Construct a new Point"
    },
    {
        "href": "function.ui-quit.php",
        "name": "UI\\quit",
        "description": "Quit UI Loop"
    },
    {
        "href": "function.ui-run.php",
        "name": "UI\\run",
        "description": "Enter UI Loop"
    },
    {
        "href": "ui-size.getheight.php",
        "name": "UI\\Size::getHeight",
        "description": "Retrieves Height"
    },
    {
        "href": "ui-size.getwidth.php",
        "name": "UI\\Size::getWidth",
        "description": "Retrives Width"
    },
    {
        "href": "ui-size.of.php",
        "name": "UI\\Size::of",
        "description": "Point Coercion"
    },
    {
        "href": "ui-size.setheight.php",
        "name": "UI\\Size::setHeight",
        "description": "Set Height"
    },
    {
        "href": "ui-size.setwidth.php",
        "name": "UI\\Size::setWidth",
        "description": "Set Width"
    },
    {
        "href": "ui-size.construct.php",
        "name": "UI\\Size::__construct",
        "description": "Construct a new Size"
    },
    {
        "href": "ui-window.add.php",
        "name": "UI\\Window::add",
        "description": "Add a Control"
    },
    {
        "href": "ui-window.error.php",
        "name": "UI\\Window::error",
        "description": "Show Error Box"
    },
    {
        "href": "ui-window.getsize.php",
        "name": "UI\\Window::getSize",
        "description": "Get Window Size"
    },
    {
        "href": "ui-window.gettitle.php",
        "name": "UI\\Window::getTitle",
        "description": "Get Title"
    },
    {
        "href": "ui-window.hasborders.php",
        "name": "UI\\Window::hasBorders",
        "description": "Border Detection"
    },
    {
        "href": "ui-window.hasmargin.php",
        "name": "UI\\Window::hasMargin",
        "description": "Margin Detection"
    },
    {
        "href": "ui-window.isfullscreen.php",
        "name": "UI\\Window::isFullScreen",
        "description": "Full Screen Detection"
    },
    {
        "href": "ui-window.msg.php",
        "name": "UI\\Window::msg",
        "description": "Show Message Box"
    },
    {
        "href": "ui-window.onclosing.php",
        "name": "UI\\Window::onClosing",
        "description": "Closing Callback"
    },
    {
        "href": "ui-window.open.php",
        "name": "UI\\Window::open",
        "description": "Open Dialog"
    },
    {
        "href": "ui-window.save.php",
        "name": "UI\\Window::save",
        "description": "Save Dialog"
    },
    {
        "href": "ui-window.setborders.php",
        "name": "UI\\Window::setBorders",
        "description": "Border Use"
    },
    {
        "href": "ui-window.setfullscreen.php",
        "name": "UI\\Window::setFullScreen",
        "description": "Full Screen Use"
    },
    {
        "href": "ui-window.setmargin.php",
        "name": "UI\\Window::setMargin",
        "description": "Margin Use"
    },
    {
        "href": "ui-window.setsize.php",
        "name": "UI\\Window::setSize",
        "description": "Set Size"
    },
    {
        "href": "ui-window.settitle.php",
        "name": "UI\\Window::setTitle",
        "description": "Window Title"
    },
    {
        "href": "ui-window.construct.php",
        "name": "UI\\Window::__construct",
        "description": "Construct a new Window"
    },
    {
        "href": "function.uksort.php",
        "name": "uksort",
        "description": "Sort an array by keys using a user-defined comparison function"
    },
    {
        "href": "function.umask.php",
        "name": "umask",
        "description": "Changes the current umask"
    },
    {
        "href": "function.uniqid.php",
        "name": "uniqid",
        "description": "Generate a unique ID"
    },
    {
        "href": "unitenum.cases.php",
        "name": "UnitEnum::cases",
        "description": "Generates a list of cases on an enum"
    },
    {
        "href": "function.unixtojd.php",
        "name": "unixtojd",
        "description": "Convert Unix timestamp to Julian Day"
    },
    {
        "href": "function.unlink.php",
        "name": "unlink",
        "description": "Deletes a file"
    },
    {
        "href": "function.unpack.php",
        "name": "unpack",
        "description": "Unpack data from binary string"
    },
    {
        "href": "function.unregister-tick-function.php",
        "name": "unregister_tick_function",
        "description": "De-register a function for execution on each tick"
    },
    {
        "href": "function.unserialize.php",
        "name": "unserialize",
        "description": "Creates a PHP value from a stored representation"
    },
    {
        "href": "function.unset.php",
        "name": "unset",
        "description": "Unset a given variable"
    },
    {
        "href": "function.untaint.php",
        "name": "untaint",
        "description": "Untaint strings"
    },
    {
        "href": "function.uopz-add-function.php",
        "name": "uopz_add_function",
        "description": "Adds non-existent function or method"
    },
    {
        "href": "function.uopz-allow-exit.php",
        "name": "uopz_allow_exit",
        "description": "Allows control over disabled exit opcode"
    },
    {
        "href": "function.uopz-backup.php",
        "name": "uopz_backup",
        "description": "Backup a function"
    },
    {
        "href": "function.uopz-compose.php",
        "name": "uopz_compose",
        "description": "Compose a class"
    },
    {
        "href": "function.uopz-copy.php",
        "name": "uopz_copy",
        "description": "Copy a function"
    },
    {
        "href": "function.uopz-delete.php",
        "name": "uopz_delete",
        "description": "Delete a function"
    },
    {
        "href": "function.uopz-del-function.php",
        "name": "uopz_del_function",
        "description": "Deletes previously added function or method"
    },
    {
        "href": "function.uopz-extend.php",
        "name": "uopz_extend",
        "description": "Extend a class at runtime"
    },
    {
        "href": "function.uopz-flags.php",
        "name": "uopz_flags",
        "description": "Get or set flags on function or class"
    },
    {
        "href": "function.uopz-function.php",
        "name": "uopz_function",
        "description": "Creates a function at runtime"
    },
    {
        "href": "function.uopz-get-exit-status.php",
        "name": "uopz_get_exit_status",
        "description": "Retrieve the last set exit status"
    },
    {
        "href": "function.uopz-get-hook.php",
        "name": "uopz_get_hook",
        "description": "Gets previously set hook on function or method"
    },
    {
        "href": "function.uopz-get-mock.php",
        "name": "uopz_get_mock",
        "description": "Get the current mock for a class"
    },
    {
        "href": "function.uopz-get-property.php",
        "name": "uopz_get_property",
        "description": "Gets value of class or instance property"
    },
    {
        "href": "function.uopz-get-return.php",
        "name": "uopz_get_return",
        "description": "Gets a previous set return value for a function"
    },
    {
        "href": "function.uopz-get-static.php",
        "name": "uopz_get_static",
        "description": "Gets the static variables from function or method scope"
    },
    {
        "href": "function.uopz-implement.php",
        "name": "uopz_implement",
        "description": "Implements an interface at runtime"
    },
    {
        "href": "function.uopz-overload.php",
        "name": "uopz_overload",
        "description": "Overload a VM opcode"
    },
    {
        "href": "function.uopz-redefine.php",
        "name": "uopz_redefine",
        "description": "Redefine a constant"
    },
    {
        "href": "function.uopz-rename.php",
        "name": "uopz_rename",
        "description": "Rename a function at runtime"
    },
    {
        "href": "function.uopz-restore.php",
        "name": "uopz_restore",
        "description": "Restore a previously backed up function"
    },
    {
        "href": "function.uopz-set-hook.php",
        "name": "uopz_set_hook",
        "description": "Sets hook to execute when entering a function or method"
    },
    {
        "href": "function.uopz-set-mock.php",
        "name": "uopz_set_mock",
        "description": "Use mock instead of class for new objects"
    },
    {
        "href": "function.uopz-set-property.php",
        "name": "uopz_set_property",
        "description": "Sets value of existing class or instance property"
    },
    {
        "href": "function.uopz-set-return.php",
        "name": "uopz_set_return",
        "description": "Provide a return value for an existing function"
    },
    {
        "href": "function.uopz-set-static.php",
        "name": "uopz_set_static",
        "description": "Sets the static variables in function or method scope"
    },
    {
        "href": "function.uopz-undefine.php",
        "name": "uopz_undefine",
        "description": "Undefine a constant"
    },
    {
        "href": "function.uopz-unset-hook.php",
        "name": "uopz_unset_hook",
        "description": "Removes previously set hook on function or method"
    },
    {
        "href": "function.uopz-unset-mock.php",
        "name": "uopz_unset_mock",
        "description": "Unset previously set mock"
    },
    {
        "href": "function.uopz-unset-return.php",
        "name": "uopz_unset_return",
        "description": "Unsets a previously set return value for a function"
    },
    {
        "href": "function.urldecode.php",
        "name": "urldecode",
        "description": "Decodes URL-encoded string"
    },
    {
        "href": "function.urlencode.php",
        "name": "urlencode",
        "description": "URL-encodes string"
    },
    {
        "href": "function.user-error.php",
        "name": "user_error",
        "description": "Alias of trigger_error"
    },
    {
        "href": "function.use-soap-error-handler.php",
        "name": "use_soap_error_handler",
        "description": "Set whether to use the SOAP error handler"
    },
    {
        "href": "function.usleep.php",
        "name": "usleep",
        "description": "Delay execution in microseconds"
    },
    {
        "href": "function.usort.php",
        "name": "usort",
        "description": "Sort an array by values using a user-defined comparison function"
    },
    {
        "href": "function.utf8-decode.php",
        "name": "utf8_decode",
        "description": "Converts a string with ISO-8859-1 characters encoded with UTF-8   to single-byte ISO-8859-1"
    },
    {
        "href": "function.utf8-encode.php",
        "name": "utf8_encode",
        "description": "Encodes an ISO-8859-1 string to UTF-8"
    },
    {
        "href": "v8js.executestring.php",
        "name": "V8Js::executeString",
        "description": "Execute a string as Javascript code"
    },
    {
        "href": "v8js.getextensions.php",
        "name": "V8Js::getExtensions",
        "description": "Return an array of registered extensions"
    },
    {
        "href": "v8js.getpendingexception.php",
        "name": "V8Js::getPendingException",
        "description": "Return pending uncaught Javascript exception"
    },
    {
        "href": "v8js.registerextension.php",
        "name": "V8Js::registerExtension",
        "description": "Register Javascript extensions for V8Js"
    },
    {
        "href": "v8js.construct.php",
        "name": "V8Js::__construct",
        "description": "Construct a new V8Js object"
    },
    {
        "href": "v8jsexception.getjsfilename.php",
        "name": "V8JsException::getJsFileName",
        "description": "The getJsFileName purpose"
    },
    {
        "href": "v8jsexception.getjslinenumber.php",
        "name": "V8JsException::getJsLineNumber",
        "description": "The getJsLineNumber purpose"
    },
    {
        "href": "v8jsexception.getjssourceline.php",
        "name": "V8JsException::getJsSourceLine",
        "description": "The getJsSourceLine purpose"
    },
    {
        "href": "v8jsexception.getjstrace.php",
        "name": "V8JsException::getJsTrace",
        "description": "The getJsTrace purpose"
    },
    {
        "href": "variant.construct.php",
        "name": "variant::__construct",
        "description": "variant class constructor"
    },
    {
        "href": "function.variant-abs.php",
        "name": "variant_abs",
        "description": "Returns the absolute value of a variant"
    },
    {
        "href": "function.variant-add.php",
        "name": "variant_add",
        "description": "\"Adds\" two variant values together and returns the result"
    },
    {
        "href": "function.variant-and.php",
        "name": "variant_and",
        "description": "Performs a bitwise AND operation between two variants"
    },
    {
        "href": "function.variant-cast.php",
        "name": "variant_cast",
        "description": "Convert a variant into a new variant object of another type"
    },
    {
        "href": "function.variant-cat.php",
        "name": "variant_cat",
        "description": "Concatenates two variant values together and returns the result"
    },
    {
        "href": "function.variant-cmp.php",
        "name": "variant_cmp",
        "description": "Compares two variants"
    },
    {
        "href": "function.variant-date-from-timestamp.php",
        "name": "variant_date_from_timestamp",
        "description": "Returns a variant date representation of a Unix timestamp"
    },
    {
        "href": "function.variant-date-to-timestamp.php",
        "name": "variant_date_to_timestamp",
        "description": "Converts a variant date/time value to Unix timestamp"
    },
    {
        "href": "function.variant-div.php",
        "name": "variant_div",
        "description": "Returns the result from dividing two variants"
    },
    {
        "href": "function.variant-eqv.php",
        "name": "variant_eqv",
        "description": "Performs a bitwise equivalence on two variants"
    },
    {
        "href": "function.variant-fix.php",
        "name": "variant_fix",
        "description": "Returns the integer portion of a variant"
    },
    {
        "href": "function.variant-get-type.php",
        "name": "variant_get_type",
        "description": "Returns the type of a variant object"
    },
    {
        "href": "function.variant-idiv.php",
        "name": "variant_idiv",
        "description": "Converts variants to integers and then returns the result from dividing them"
    },
    {
        "href": "function.variant-imp.php",
        "name": "variant_imp",
        "description": "Performs a bitwise implication on two variants"
    },
    {
        "href": "function.variant-int.php",
        "name": "variant_int",
        "description": "Returns the integer portion of a variant"
    },
    {
        "href": "function.variant-mod.php",
        "name": "variant_mod",
        "description": "Divides two variants and returns only the remainder"
    },
    {
        "href": "function.variant-mul.php",
        "name": "variant_mul",
        "description": "Multiplies the values of the two variants"
    },
    {
        "href": "function.variant-neg.php",
        "name": "variant_neg",
        "description": "Performs logical negation on a variant"
    },
    {
        "href": "function.variant-not.php",
        "name": "variant_not",
        "description": "Performs bitwise not negation on a variant"
    },
    {
        "href": "function.variant-or.php",
        "name": "variant_or",
        "description": "Performs a logical disjunction on two variants"
    },
    {
        "href": "function.variant-pow.php",
        "name": "variant_pow",
        "description": "Returns the result of performing the power function with two variants"
    },
    {
        "href": "function.variant-round.php",
        "name": "variant_round",
        "description": "Rounds a variant to the specified number of decimal places"
    },
    {
        "href": "function.variant-set.php",
        "name": "variant_set",
        "description": "Assigns a new value for a variant object"
    },
    {
        "href": "function.variant-set-type.php",
        "name": "variant_set_type",
        "description": "Convert a variant into another type \"in-place\""
    },
    {
        "href": "function.variant-sub.php",
        "name": "variant_sub",
        "description": "Subtracts the value of the right variant from the left variant value"
    },
    {
        "href": "function.variant-xor.php",
        "name": "variant_xor",
        "description": "Performs a logical exclusion on two variants"
    },
    {
        "href": "varnishadmin.auth.php",
        "name": "VarnishAdmin::auth",
        "description": "Authenticate on a varnish instance"
    },
    {
        "href": "varnishadmin.ban.php",
        "name": "VarnishAdmin::ban",
        "description": "Ban URLs using a VCL expression"
    },
    {
        "href": "varnishadmin.banurl.php",
        "name": "VarnishAdmin::banUrl",
        "description": "Ban an URL using a VCL expression"
    },
    {
        "href": "varnishadmin.clearpanic.php",
        "name": "VarnishAdmin::clearPanic",
        "description": "Clear varnish instance panic messages"
    },
    {
        "href": "varnishadmin.connect.php",
        "name": "VarnishAdmin::connect",
        "description": "Connect to a varnish instance administration interface"
    },
    {
        "href": "varnishadmin.disconnect.php",
        "name": "VarnishAdmin::disconnect",
        "description": "Disconnect from a varnish instance administration interface"
    },
    {
        "href": "varnishadmin.getpanic.php",
        "name": "VarnishAdmin::getPanic",
        "description": "Get the last panic message on a varnish instance"
    },
    {
        "href": "varnishadmin.getparams.php",
        "name": "VarnishAdmin::getParams",
        "description": "Fetch current varnish instance configuration parameters"
    },
    {
        "href": "varnishadmin.isrunning.php",
        "name": "VarnishAdmin::isRunning",
        "description": "Check if the varnish slave process is currently running"
    },
    {
        "href": "varnishadmin.setcompat.php",
        "name": "VarnishAdmin::setCompat",
        "description": "Set the class compat configuration param"
    },
    {
        "href": "varnishadmin.sethost.php",
        "name": "VarnishAdmin::setHost",
        "description": "Set the class host configuration param"
    },
    {
        "href": "varnishadmin.setident.php",
        "name": "VarnishAdmin::setIdent",
        "description": "Set the class ident configuration param"
    },
    {
        "href": "varnishadmin.setparam.php",
        "name": "VarnishAdmin::setParam",
        "description": "Set configuration param on the current varnish instance"
    },
    {
        "href": "varnishadmin.setport.php",
        "name": "VarnishAdmin::setPort",
        "description": "Set the class port configuration param"
    },
    {
        "href": "varnishadmin.setsecret.php",
        "name": "VarnishAdmin::setSecret",
        "description": "Set the class secret configuration param"
    },
    {
        "href": "varnishadmin.settimeout.php",
        "name": "VarnishAdmin::setTimeout",
        "description": "Set the class timeout configuration param"
    },
    {
        "href": "varnishadmin.start.php",
        "name": "VarnishAdmin::start",
        "description": "Start varnish worker process"
    },
    {
        "href": "varnishadmin.stop.php",
        "name": "VarnishAdmin::stop",
        "description": "Stop varnish worker process"
    },
    {
        "href": "varnishadmin.construct.php",
        "name": "VarnishAdmin::__construct",
        "description": "VarnishAdmin constructor"
    },
    {
        "href": "varnishlog.getline.php",
        "name": "VarnishLog::getLine",
        "description": "Get next log line"
    },
    {
        "href": "varnishlog.gettagname.php",
        "name": "VarnishLog::getTagName",
        "description": "Get the log tag string representation by its index"
    },
    {
        "href": "varnishlog.construct.php",
        "name": "VarnishLog::__construct",
        "description": "Varnishlog constructor"
    },
    {
        "href": "varnishstat.getsnapshot.php",
        "name": "VarnishStat::getSnapshot",
        "description": "Get the current varnish instance statistics snapshot"
    },
    {
        "href": "varnishstat.construct.php",
        "name": "VarnishStat::__construct",
        "description": "VarnishStat constructor"
    },
    {
        "href": "function.var-dump.php",
        "name": "var_dump",
        "description": "Dumps information about a variable"
    },
    {
        "href": "function.var-export.php",
        "name": "var_export",
        "description": "Outputs or returns a parsable string representation of a variable"
    },
    {
        "href": "function.var-representation.php",
        "name": "var_representation",
        "description": "Returns a short, readable, parsable string representation of a variable"
    },
    {
        "href": "function.version-compare.php",
        "name": "version_compare",
        "description": "Compares two \"PHP-standardized\" version number strings"
    },
    {
        "href": "function.vfprintf.php",
        "name": "vfprintf",
        "description": "Write a formatted string to a stream"
    },
    {
        "href": "function.virtual.php",
        "name": "virtual",
        "description": "Perform an Apache sub-request"
    },
    {
        "href": "function.vprintf.php",
        "name": "vprintf",
        "description": "Output a formatted string"
    },
    {
        "href": "function.vsprintf.php",
        "name": "vsprintf",
        "description": "Return a formatted string"
    },
    {
        "href": "vtiful-kernel-excel.addSheet.php",
        "name": "Vtiful\\Kernel\\Excel::addSheet",
        "description": "Vtiful\\Kernel\\Excel addSheet"
    },
    {
        "href": "vtiful-kernel-excel.autoFilter.php",
        "name": "Vtiful\\Kernel\\Excel::autoFilter",
        "description": "Vtiful\\Kernel\\Excel autoFilter"
    },
    {
        "href": "vtiful-kernel-excel.constMemory.php",
        "name": "Vtiful\\Kernel\\Excel::constMemory",
        "description": "Vtiful\\Kernel\\Excel constMemory"
    },
    {
        "href": "vtiful-kernel-excel.data.php",
        "name": "Vtiful\\Kernel\\Excel::data",
        "description": "Vtiful\\Kernel\\Excel data"
    },
    {
        "href": "vtiful-kernel-excel.filename.php",
        "name": "Vtiful\\Kernel\\Excel::fileName",
        "description": "Vtiful\\Kernel\\Excel fileName"
    },
    {
        "href": "vtiful-kernel-excel.getHandle.php",
        "name": "Vtiful\\Kernel\\Excel::getHandle",
        "description": "Vtiful\\Kernel\\Excel getHandle"
    },
    {
        "href": "vtiful-kernel-excel.header.php",
        "name": "Vtiful\\Kernel\\Excel::header",
        "description": "Vtiful\\Kernel\\Excel header"
    },
    {
        "href": "vtiful-kernel-excel.insertFormula.php",
        "name": "Vtiful\\Kernel\\Excel::insertFormula",
        "description": "Vtiful\\Kernel\\Excel insertFormula"
    },
    {
        "href": "vtiful-kernel-excel.insertImage.php",
        "name": "Vtiful\\Kernel\\Excel::insertImage",
        "description": "Vtiful\\Kernel\\Excel insertImage"
    },
    {
        "href": "vtiful-kernel-excel.insertText.php",
        "name": "Vtiful\\Kernel\\Excel::insertText",
        "description": "Vtiful\\Kernel\\Excel insertText"
    },
    {
        "href": "vtiful-kernel-excel.mergeCells.php",
        "name": "Vtiful\\Kernel\\Excel::mergeCells",
        "description": "Vtiful\\Kernel\\Excel mergeCells"
    },
    {
        "href": "vtiful-kernel-excel.output.php",
        "name": "Vtiful\\Kernel\\Excel::output",
        "description": "Vtiful\\Kernel\\Excel output"
    },
    {
        "href": "vtiful-kernel-excel.setColumn.php",
        "name": "Vtiful\\Kernel\\Excel::setColumn",
        "description": "Vtiful\\Kernel\\Excel setColumn"
    },
    {
        "href": "vtiful-kernel-excel.setRow.php",
        "name": "Vtiful\\Kernel\\Excel::setRow",
        "description": "Vtiful\\Kernel\\Excel setRow"
    },
    {
        "href": "vtiful-kernel-excel.construct.php",
        "name": "Vtiful\\Kernel\\Excel::__construct",
        "description": "Vtiful\\Kernel\\Excel constructor"
    },
    {
        "href": "vtiful-kernel-format.align.php",
        "name": "Vtiful\\Kernel\\Format::align",
        "description": "Vtiful\\Kernel\\Format align"
    },
    {
        "href": "vtiful-kernel-format.bold.php",
        "name": "Vtiful\\Kernel\\Format::bold",
        "description": "Vtiful\\Kernel\\Format bold"
    },
    {
        "href": "vtiful-kernel-format.italic.php",
        "name": "Vtiful\\Kernel\\Format::italic",
        "description": "Vtiful\\Kernel\\Format italic"
    },
    {
        "href": "vtiful-kernel-format.underline.php",
        "name": "Vtiful\\Kernel\\Format::underline",
        "description": "Vtiful\\Kernel\\Format underline"
    },
    {
        "href": "mysql-xdevapi-warning.construct.php",
        "name": "Warning::__construct",
        "description": "Warning constructor"
    },
    {
        "href": "function.wddx-add-vars.php",
        "name": "wddx_add_vars",
        "description": "Add variables to a WDDX packet with the specified ID"
    },
    {
        "href": "function.wddx-deserialize.php",
        "name": "wddx_deserialize",
        "description": "Unserializes a WDDX packet"
    },
    {
        "href": "function.wddx-packet-end.php",
        "name": "wddx_packet_end",
        "description": "Ends a WDDX packet with the specified ID"
    },
    {
        "href": "function.wddx-packet-start.php",
        "name": "wddx_packet_start",
        "description": "Starts a new WDDX packet with structure inside it"
    },
    {
        "href": "function.wddx-serialize-value.php",
        "name": "wddx_serialize_value",
        "description": "Serialize a single value into a WDDX packet"
    },
    {
        "href": "function.wddx-serialize-vars.php",
        "name": "wddx_serialize_vars",
        "description": "Serialize variables into a WDDX packet"
    },
    {
        "href": "weakmap.count.php",
        "name": "WeakMap::count",
        "description": "Counts the number of live entries in the map"
    },
    {
        "href": "weakmap.getiterator.php",
        "name": "WeakMap::getIterator",
        "description": "Retrieve an external iterator"
    },
    {
        "href": "weakmap.offsetexists.php",
        "name": "WeakMap::offsetExists",
        "description": "Checks whether a certain object is in the map"
    },
    {
        "href": "weakmap.offsetget.php",
        "name": "WeakMap::offsetGet",
        "description": "Returns the value pointed to by a certain object"
    },
    {
        "href": "weakmap.offsetset.php",
        "name": "WeakMap::offsetSet",
        "description": "Updates the map with a new key-value pair"
    },
    {
        "href": "weakmap.offsetunset.php",
        "name": "WeakMap::offsetUnset",
        "description": "Removes an entry from the map"
    },
    {
        "href": "ext-weakmap.construct.php",
        "name": "WeakMap::__construct",
        "description": "Constructs a new map"
    },
    {
        "href": "weakreference.create.php",
        "name": "WeakReference::create",
        "description": "Create a new weak reference"
    },
    {
        "href": "weakreference.get.php",
        "name": "WeakReference::get",
        "description": "Get a weakly referenced Object"
    },
    {
        "href": "weakreference.construct.php",
        "name": "WeakReference::__construct",
        "description": "Constructor that disallows instantiation"
    },
    {
        "href": "function.win32-continue-service.php",
        "name": "win32_continue_service",
        "description": "Resumes a paused service"
    },
    {
        "href": "function.win32-create-service.php",
        "name": "win32_create_service",
        "description": "Creates a new service entry in the SCM database"
    },
    {
        "href": "function.win32-delete-service.php",
        "name": "win32_delete_service",
        "description": "Deletes a service entry from the SCM database"
    },
    {
        "href": "function.win32-get-last-control-message.php",
        "name": "win32_get_last_control_message",
        "description": "Returns the last control message that was sent to this service"
    },
    {
        "href": "function.win32-pause-service.php",
        "name": "win32_pause_service",
        "description": "Pauses a service"
    },
    {
        "href": "function.win32-query-service-status.php",
        "name": "win32_query_service_status",
        "description": "Queries the status of a service"
    },
    {
        "href": "function.win32-send-custom-control.php",
        "name": "win32_send_custom_control",
        "description": "Send a custom control to the service"
    },
    {
        "href": "function.win32-set-service-exit-code.php",
        "name": "win32_set_service_exit_code",
        "description": "Define or return the exit code for the current running service"
    },
    {
        "href": "function.win32-set-service-exit-mode.php",
        "name": "win32_set_service_exit_mode",
        "description": "Define or return the exit mode for the current running service"
    },
    {
        "href": "function.win32-set-service-status.php",
        "name": "win32_set_service_status",
        "description": "Update the service status"
    },
    {
        "href": "function.win32-start-service.php",
        "name": "win32_start_service",
        "description": "Starts a service"
    },
    {
        "href": "function.win32-start-service-ctrl-dispatcher.php",
        "name": "win32_start_service_ctrl_dispatcher",
        "description": "Registers the script with the SCM, so that it can act as the service with the given name"
    },
    {
        "href": "function.win32-stop-service.php",
        "name": "win32_stop_service",
        "description": "Stops a service"
    },
    {
        "href": "function.wincache-fcache-fileinfo.php",
        "name": "wincache_fcache_fileinfo",
        "description": "Retrieves information about files cached in the file cache"
    },
    {
        "href": "function.wincache-fcache-meminfo.php",
        "name": "wincache_fcache_meminfo",
        "description": "Retrieves information about file cache memory usage"
    },
    {
        "href": "function.wincache-lock.php",
        "name": "wincache_lock",
        "description": "Acquires an exclusive lock on a given key"
    },
    {
        "href": "function.wincache-ocache-fileinfo.php",
        "name": "wincache_ocache_fileinfo",
        "description": "Retrieves information about files cached in the opcode cache"
    },
    {
        "href": "function.wincache-ocache-meminfo.php",
        "name": "wincache_ocache_meminfo",
        "description": "Retrieves information about opcode cache memory usage"
    },
    {
        "href": "function.wincache-refresh-if-changed.php",
        "name": "wincache_refresh_if_changed",
        "description": "Refreshes the cache entries for the cached files"
    },
    {
        "href": "function.wincache-rplist-fileinfo.php",
        "name": "wincache_rplist_fileinfo",
        "description": "Retrieves information about resolve file path cache"
    },
    {
        "href": "function.wincache-rplist-meminfo.php",
        "name": "wincache_rplist_meminfo",
        "description": "Retrieves information about memory usage by the resolve file path cache"
    },
    {
        "href": "function.wincache-scache-info.php",
        "name": "wincache_scache_info",
        "description": "Retrieves information about files cached in the session cache"
    },
    {
        "href": "function.wincache-scache-meminfo.php",
        "name": "wincache_scache_meminfo",
        "description": "Retrieves information about session cache memory usage"
    },
    {
        "href": "function.wincache-ucache-add.php",
        "name": "wincache_ucache_add",
        "description": "Adds a variable in user cache only if variable does not already exist in the cache"
    },
    {
        "href": "function.wincache-ucache-cas.php",
        "name": "wincache_ucache_cas",
        "description": "Compares the variable with old value and assigns new value to it"
    },
    {
        "href": "function.wincache-ucache-clear.php",
        "name": "wincache_ucache_clear",
        "description": "Deletes entire content of the user cache"
    },
    {
        "href": "function.wincache-ucache-dec.php",
        "name": "wincache_ucache_dec",
        "description": "Decrements the value associated with the key"
    },
    {
        "href": "function.wincache-ucache-delete.php",
        "name": "wincache_ucache_delete",
        "description": "Deletes variables from the user cache"
    },
    {
        "href": "function.wincache-ucache-exists.php",
        "name": "wincache_ucache_exists",
        "description": "Checks if a variable exists in the user cache"
    },
    {
        "href": "function.wincache-ucache-get.php",
        "name": "wincache_ucache_get",
        "description": "Gets a variable stored in the user cache"
    },
    {
        "href": "function.wincache-ucache-inc.php",
        "name": "wincache_ucache_inc",
        "description": "Increments the value associated with the key"
    },
    {
        "href": "function.wincache-ucache-info.php",
        "name": "wincache_ucache_info",
        "description": "Retrieves information about data stored in the user cache"
    },
    {
        "href": "function.wincache-ucache-meminfo.php",
        "name": "wincache_ucache_meminfo",
        "description": "Retrieves information about user cache memory usage"
    },
    {
        "href": "function.wincache-ucache-set.php",
        "name": "wincache_ucache_set",
        "description": "Adds a variable in user cache and overwrites a variable if it already exists in the cache"
    },
    {
        "href": "function.wincache-unlock.php",
        "name": "wincache_unlock",
        "description": "Releases an exclusive lock on a given key"
    },
    {
        "href": "wkhtmltox-image-converter.convert.php",
        "name": "wkhtmltox\\Image\\Converter::convert",
        "description": "Perform Image conversion"
    },
    {
        "href": "wkhtmltox-image-converter.getversion.php",
        "name": "wkhtmltox\\Image\\Converter::getVersion",
        "description": "Determine version of Converter"
    },
    {
        "href": "wkhtmltox-image-converter.construct.php",
        "name": "wkhtmltox\\Image\\Converter::__construct",
        "description": "Create a new Image converter"
    },
    {
        "href": "wkhtmltox-pdf-converter.add.php",
        "name": "wkhtmltox\\PDF\\Converter::add",
        "description": "Add an object for conversion"
    },
    {
        "href": "wkhtmltox-pdf-converter.convert.php",
        "name": "wkhtmltox\\PDF\\Converter::convert",
        "description": "Perform PDF conversion"
    },
    {
        "href": "wkhtmltox-pdf-converter.getversion.php",
        "name": "wkhtmltox\\PDF\\Converter::getVersion",
        "description": "Determine version of Converter"
    },
    {
        "href": "wkhtmltox-pdf-converter.construct.php",
        "name": "wkhtmltox\\PDF\\Converter::__construct",
        "description": "Create a new PDF converter"
    },
    {
        "href": "wkhtmltox-pdf-object.construct.php",
        "name": "wkhtmltox\\PDF\\Object::__construct",
        "description": "Create a new PDF Object"
    },
    {
        "href": "function.wordwrap.php",
        "name": "wordwrap",
        "description": "Wraps a string to a given number of characters"
    },
    {
        "href": "worker.collect.php",
        "name": "Worker::collect",
        "description": "Collect references to completed tasks"
    },
    {
        "href": "worker.getstacked.php",
        "name": "Worker::getStacked",
        "description": "Gets the remaining stack size"
    },
    {
        "href": "worker.isshutdown.php",
        "name": "Worker::isShutdown",
        "description": "State Detection"
    },
    {
        "href": "worker.shutdown.php",
        "name": "Worker::shutdown",
        "description": "Shutdown the worker"
    },
    {
        "href": "worker.stack.php",
        "name": "Worker::stack",
        "description": "Stacking work"
    },
    {
        "href": "worker.unstack.php",
        "name": "Worker::unstack",
        "description": "Unstacking work"
    },
    {
        "href": "function.xattr-get.php",
        "name": "xattr_get",
        "description": "Get an extended attribute"
    },
    {
        "href": "function.xattr-list.php",
        "name": "xattr_list",
        "description": "Get a list of extended attributes"
    },
    {
        "href": "function.xattr-remove.php",
        "name": "xattr_remove",
        "description": "Remove an extended attribute"
    },
    {
        "href": "function.xattr-set.php",
        "name": "xattr_set",
        "description": "Set an extended attribute"
    },
    {
        "href": "function.xattr-supported.php",
        "name": "xattr_supported",
        "description": "Check if filesystem supports extended attributes"
    },
    {
        "href": "function.xdiff-file-bdiff.php",
        "name": "xdiff_file_bdiff",
        "description": "Make binary diff of two files"
    },
    {
        "href": "function.xdiff-file-bdiff-size.php",
        "name": "xdiff_file_bdiff_size",
        "description": "Read a size of file created by applying a binary diff"
    },
    {
        "href": "function.xdiff-file-bpatch.php",
        "name": "xdiff_file_bpatch",
        "description": "Patch a file with a binary diff"
    },
    {
        "href": "function.xdiff-file-diff.php",
        "name": "xdiff_file_diff",
        "description": "Make unified diff of two files"
    },
    {
        "href": "function.xdiff-file-diff-binary.php",
        "name": "xdiff_file_diff_binary",
        "description": "Alias of xdiff_file_bdiff"
    },
    {
        "href": "function.xdiff-file-merge3.php",
        "name": "xdiff_file_merge3",
        "description": "Merge 3 files into one"
    },
    {
        "href": "function.xdiff-file-patch.php",
        "name": "xdiff_file_patch",
        "description": "Patch a file with an unified diff"
    },
    {
        "href": "function.xdiff-file-patch-binary.php",
        "name": "xdiff_file_patch_binary",
        "description": "Alias of xdiff_file_bpatch"
    },
    {
        "href": "function.xdiff-file-rabdiff.php",
        "name": "xdiff_file_rabdiff",
        "description": "Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm"
    },
    {
        "href": "function.xdiff-string-bdiff.php",
        "name": "xdiff_string_bdiff",
        "description": "Make binary diff of two strings"
    },
    {
        "href": "function.xdiff-string-bdiff-size.php",
        "name": "xdiff_string_bdiff_size",
        "description": "Read a size of file created by applying a binary diff"
    },
    {
        "href": "function.xdiff-string-bpatch.php",
        "name": "xdiff_string_bpatch",
        "description": "Patch a string with a binary diff"
    },
    {
        "href": "function.xdiff-string-diff.php",
        "name": "xdiff_string_diff",
        "description": "Make unified diff of two strings"
    },
    {
        "href": "function.xdiff-string-diff-binary.php",
        "name": "xdiff_string_diff_binary",
        "description": "Alias of xdiff_string_bdiff"
    },
    {
        "href": "function.xdiff-string-merge3.php",
        "name": "xdiff_string_merge3",
        "description": "Merge 3 strings into one"
    },
    {
        "href": "function.xdiff-string-patch.php",
        "name": "xdiff_string_patch",
        "description": "Patch a string with an unified diff"
    },
    {
        "href": "function.xdiff-string-patch-binary.php",
        "name": "xdiff_string_patch_binary",
        "description": "Alias of xdiff_string_bpatch"
    },
    {
        "href": "function.xdiff-string-rabdiff.php",
        "name": "xdiff_string_rabdiff",
        "description": "Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm"
    },
    {
        "href": "function.xhprof-disable.php",
        "name": "xhprof_disable",
        "description": "Stops xhprof profiler"
    },
    {
        "href": "function.xhprof-enable.php",
        "name": "xhprof_enable",
        "description": "Start xhprof profiler"
    },
    {
        "href": "function.xhprof-sample-disable.php",
        "name": "xhprof_sample_disable",
        "description": "Stops xhprof sample profiler"
    },
    {
        "href": "function.xhprof-sample-enable.php",
        "name": "xhprof_sample_enable",
        "description": "Start XHProf profiling in sampling mode"
    },
    {
        "href": "xmldiff-base.diff.php",
        "name": "XMLDiff\\Base::diff",
        "description": "Produce diff of two XML documents"
    },
    {
        "href": "xmldiff-base.merge.php",
        "name": "XMLDiff\\Base::merge",
        "description": "Produce new XML document based on diff"
    },
    {
        "href": "xmldiff-base.construct.php",
        "name": "XMLDiff\\Base::__construct",
        "description": "Constructor"
    },
    {
        "href": "xmldiff-dom.diff.php",
        "name": "XMLDiff\\DOM::diff",
        "description": "Diff two DOMDocument objects"
    },
    {
        "href": "xmldiff-dom.merge.php",
        "name": "XMLDiff\\DOM::merge",
        "description": "Produce merged DOMDocument"
    },
    {
        "href": "xmldiff-file.diff.php",
        "name": "XMLDiff\\File::diff",
        "description": "Diff two XML files"
    },
    {
        "href": "xmldiff-file.merge.php",
        "name": "XMLDiff\\File::merge",
        "description": "Produce merged XML document"
    },
    {
        "href": "xmldiff-memory.diff.php",
        "name": "XMLDiff\\Memory::diff",
        "description": "Diff two XML documents"
    },
    {
        "href": "xmldiff-memory.merge.php",
        "name": "XMLDiff\\Memory::merge",
        "description": "Produce merged XML document"
    },
    {
        "href": "xmlreader.close.php",
        "name": "XMLReader::close",
        "description": "Close the XMLReader input"
    },
    {
        "href": "xmlreader.expand.php",
        "name": "XMLReader::expand",
        "description": "Returns a copy of the current node as a DOM object"
    },
    {
        "href": "xmlreader.getattribute.php",
        "name": "XMLReader::getAttribute",
        "description": "Get the value of a named attribute"
    },
    {
        "href": "xmlreader.getattributeno.php",
        "name": "XMLReader::getAttributeNo",
        "description": "Get the value of an attribute by index"
    },
    {
        "href": "xmlreader.getattributens.php",
        "name": "XMLReader::getAttributeNs",
        "description": "Get the value of an attribute by localname and URI"
    },
    {
        "href": "xmlreader.getparserproperty.php",
        "name": "XMLReader::getParserProperty",
        "description": "Indicates if specified property has been set"
    },
    {
        "href": "xmlreader.isvalid.php",
        "name": "XMLReader::isValid",
        "description": "Indicates if the parsed document is valid"
    },
    {
        "href": "xmlreader.lookupnamespace.php",
        "name": "XMLReader::lookupNamespace",
        "description": "Lookup namespace for a prefix"
    },
    {
        "href": "xmlreader.movetoattribute.php",
        "name": "XMLReader::moveToAttribute",
        "description": "Move cursor to a named attribute"
    },
    {
        "href": "xmlreader.movetoattributeno.php",
        "name": "XMLReader::moveToAttributeNo",
        "description": "Move cursor to an attribute by index"
    },
    {
        "href": "xmlreader.movetoattributens.php",
        "name": "XMLReader::moveToAttributeNs",
        "description": "Move cursor to a named attribute"
    },
    {
        "href": "xmlreader.movetoelement.php",
        "name": "XMLReader::moveToElement",
        "description": "Position cursor on the parent Element of current Attribute"
    },
    {
        "href": "xmlreader.movetofirstattribute.php",
        "name": "XMLReader::moveToFirstAttribute",
        "description": "Position cursor on the first Attribute"
    },
    {
        "href": "xmlreader.movetonextattribute.php",
        "name": "XMLReader::moveToNextAttribute",
        "description": "Position cursor on the next Attribute"
    },
    {
        "href": "xmlreader.next.php",
        "name": "XMLReader::next",
        "description": "Move cursor to next node skipping all subtrees"
    },
    {
        "href": "xmlreader.open.php",
        "name": "XMLReader::open",
        "description": "Set the URI containing the XML to parse"
    },
    {
        "href": "xmlreader.read.php",
        "name": "XMLReader::read",
        "description": "Move to next node in document"
    },
    {
        "href": "xmlreader.readinnerxml.php",
        "name": "XMLReader::readInnerXml",
        "description": "Retrieve XML from current node"
    },
    {
        "href": "xmlreader.readouterxml.php",
        "name": "XMLReader::readOuterXml",
        "description": "Retrieve XML from current node, including itself"
    },
    {
        "href": "xmlreader.readstring.php",
        "name": "XMLReader::readString",
        "description": "Reads the contents of the current node as a string"
    },
    {
        "href": "xmlreader.setparserproperty.php",
        "name": "XMLReader::setParserProperty",
        "description": "Set parser options"
    },
    {
        "href": "xmlreader.setrelaxngschema.php",
        "name": "XMLReader::setRelaxNGSchema",
        "description": "Set the filename or URI for a RelaxNG Schema"
    },
    {
        "href": "xmlreader.setrelaxngschemasource.php",
        "name": "XMLReader::setRelaxNGSchemaSource",
        "description": "Set the data containing a RelaxNG Schema"
    },
    {
        "href": "xmlreader.setschema.php",
        "name": "XMLReader::setSchema",
        "description": "Validate document against XSD"
    },
    {
        "href": "xmlreader.xml.php",
        "name": "XMLReader::XML",
        "description": "Set the data containing the XML to parse"
    },
    {
        "href": "function.xmlrpc-decode.php",
        "name": "xmlrpc_decode",
        "description": "Decodes XML into native PHP types"
    },
    {
        "href": "function.xmlrpc-decode-request.php",
        "name": "xmlrpc_decode_request",
        "description": "Decodes XML into native PHP types"
    },
    {
        "href": "function.xmlrpc-encode.php",
        "name": "xmlrpc_encode",
        "description": "Generates XML for a PHP value"
    },
    {
        "href": "function.xmlrpc-encode-request.php",
        "name": "xmlrpc_encode_request",
        "description": "Generates XML for a method request"
    },
    {
        "href": "function.xmlrpc-get-type.php",
        "name": "xmlrpc_get_type",
        "description": "Gets xmlrpc type for a PHP value"
    },
    {
        "href": "function.xmlrpc-is-fault.php",
        "name": "xmlrpc_is_fault",
        "description": "Determines if an array value represents an XMLRPC fault"
    },
    {
        "href": "function.xmlrpc-parse-method-descriptions.php",
        "name": "xmlrpc_parse_method_descriptions",
        "description": "Decodes XML into a list of method descriptions"
    },
    {
        "href": "function.xmlrpc-server-add-introspection-data.php",
        "name": "xmlrpc_server_add_introspection_data",
        "description": "Adds introspection documentation"
    },
    {
        "href": "function.xmlrpc-server-call-method.php",
        "name": "xmlrpc_server_call_method",
        "description": "Parses XML requests and call methods"
    },
    {
        "href": "function.xmlrpc-server-create.php",
        "name": "xmlrpc_server_create",
        "description": "Creates an xmlrpc server"
    },
    {
        "href": "function.xmlrpc-server-destroy.php",
        "name": "xmlrpc_server_destroy",
        "description": "Destroys server resources"
    },
    {
        "href": "function.xmlrpc-server-register-introspection-callback.php",
        "name": "xmlrpc_server_register_introspection_callback",
        "description": "Register a PHP function to generate documentation"
    },
    {
        "href": "function.xmlrpc-server-register-method.php",
        "name": "xmlrpc_server_register_method",
        "description": "Register a PHP function to resource method matching method_name"
    },
    {
        "href": "function.xmlrpc-set-type.php",
        "name": "xmlrpc_set_type",
        "description": "Sets xmlrpc type, base64 or datetime, for a PHP string value"
    },
    {
        "href": "xmlwriter.endattribute.php",
        "name": "XMLWriter::endAttribute",
        "description": "End attribute"
    },
    {
        "href": "xmlwriter.endcdata.php",
        "name": "XMLWriter::endCdata",
        "description": "End current CDATA"
    },
    {
        "href": "xmlwriter.endcomment.php",
        "name": "XMLWriter::endComment",
        "description": "Create end comment"
    },
    {
        "href": "xmlwriter.enddocument.php",
        "name": "XMLWriter::endDocument",
        "description": "End current document"
    },
    {
        "href": "xmlwriter.enddtd.php",
        "name": "XMLWriter::endDtd",
        "description": "End current DTD"
    },
    {
        "href": "xmlwriter.enddtdattlist.php",
        "name": "XMLWriter::endDtdAttlist",
        "description": "End current DTD AttList"
    },
    {
        "href": "xmlwriter.enddtdelement.php",
        "name": "XMLWriter::endDtdElement",
        "description": "End current DTD element"
    },
    {
        "href": "xmlwriter.enddtdentity.php",
        "name": "XMLWriter::endDtdEntity",
        "description": "End current DTD Entity"
    },
    {
        "href": "xmlwriter.endelement.php",
        "name": "XMLWriter::endElement",
        "description": "End current element"
    },
    {
        "href": "xmlwriter.endpi.php",
        "name": "XMLWriter::endPi",
        "description": "End current PI"
    },
    {
        "href": "xmlwriter.flush.php",
        "name": "XMLWriter::flush",
        "description": "Flush current buffer"
    },
    {
        "href": "xmlwriter.fullendelement.php",
        "name": "XMLWriter::fullEndElement",
        "description": "End current element"
    },
    {
        "href": "xmlwriter.openmemory.php",
        "name": "XMLWriter::openMemory",
        "description": "Create new xmlwriter using memory for string output"
    },
    {
        "href": "xmlwriter.openuri.php",
        "name": "XMLWriter::openUri",
        "description": "Create new xmlwriter using source uri for output"
    },
    {
        "href": "xmlwriter.outputmemory.php",
        "name": "XMLWriter::outputMemory",
        "description": "Returns current buffer"
    },
    {
        "href": "xmlwriter.setindent.php",
        "name": "XMLWriter::setIndent",
        "description": "Toggle indentation on/off"
    },
    {
        "href": "xmlwriter.setindentstring.php",
        "name": "XMLWriter::setIndentString",
        "description": "Set string used for indenting"
    },
    {
        "href": "xmlwriter.startattribute.php",
        "name": "XMLWriter::startAttribute",
        "description": "Create start attribute"
    },
    {
        "href": "xmlwriter.startattributens.php",
        "name": "XMLWriter::startAttributeNs",
        "description": "Create start namespaced attribute"
    },
    {
        "href": "xmlwriter.startcdata.php",
        "name": "XMLWriter::startCdata",
        "description": "Create start CDATA tag"
    },
    {
        "href": "xmlwriter.startcomment.php",
        "name": "XMLWriter::startComment",
        "description": "Create start comment"
    },
    {
        "href": "xmlwriter.startdocument.php",
        "name": "XMLWriter::startDocument",
        "description": "Create document tag"
    },
    {
        "href": "xmlwriter.startdtd.php",
        "name": "XMLWriter::startDtd",
        "description": "Create start DTD tag"
    },
    {
        "href": "xmlwriter.startdtdattlist.php",
        "name": "XMLWriter::startDtdAttlist",
        "description": "Create start DTD AttList"
    },
    {
        "href": "xmlwriter.startdtdelement.php",
        "name": "XMLWriter::startDtdElement",
        "description": "Create start DTD element"
    },
    {
        "href": "xmlwriter.startdtdentity.php",
        "name": "XMLWriter::startDtdEntity",
        "description": "Create start DTD Entity"
    },
    {
        "href": "xmlwriter.startelement.php",
        "name": "XMLWriter::startElement",
        "description": "Create start element tag"
    },
    {
        "href": "xmlwriter.startelementns.php",
        "name": "XMLWriter::startElementNs",
        "description": "Create start namespaced element tag"
    },
    {
        "href": "xmlwriter.startpi.php",
        "name": "XMLWriter::startPi",
        "description": "Create start PI tag"
    },
    {
        "href": "xmlwriter.text.php",
        "name": "XMLWriter::text",
        "description": "Write text"
    },
    {
        "href": "xmlwriter.writeattribute.php",
        "name": "XMLWriter::writeAttribute",
        "description": "Write full attribute"
    },
    {
        "href": "xmlwriter.writeattributens.php",
        "name": "XMLWriter::writeAttributeNs",
        "description": "Write full namespaced attribute"
    },
    {
        "href": "xmlwriter.writecdata.php",
        "name": "XMLWriter::writeCdata",
        "description": "Write full CDATA tag"
    },
    {
        "href": "xmlwriter.writecomment.php",
        "name": "XMLWriter::writeComment",
        "description": "Write full comment tag"
    },
    {
        "href": "xmlwriter.writedtd.php",
        "name": "XMLWriter::writeDtd",
        "description": "Write full DTD tag"
    },
    {
        "href": "xmlwriter.writedtdattlist.php",
        "name": "XMLWriter::writeDtdAttlist",
        "description": "Write full DTD AttList tag"
    },
    {
        "href": "xmlwriter.writedtdelement.php",
        "name": "XMLWriter::writeDtdElement",
        "description": "Write full DTD element tag"
    },
    {
        "href": "xmlwriter.writedtdentity.php",
        "name": "XMLWriter::writeDtdEntity",
        "description": "Write full DTD Entity tag"
    },
    {
        "href": "xmlwriter.writeelement.php",
        "name": "XMLWriter::writeElement",
        "description": "Write full element tag"
    },
    {
        "href": "xmlwriter.writeelementns.php",
        "name": "XMLWriter::writeElementNs",
        "description": "Write full namespaced element tag"
    },
    {
        "href": "xmlwriter.writepi.php",
        "name": "XMLWriter::writePi",
        "description": "Writes a PI"
    },
    {
        "href": "xmlwriter.writeraw.php",
        "name": "XMLWriter::writeRaw",
        "description": "Write a raw XML text"
    },
    {
        "href": "function.xml-error-string.php",
        "name": "xml_error_string",
        "description": "Get XML parser error string"
    },
    {
        "href": "function.xml-get-current-byte-index.php",
        "name": "xml_get_current_byte_index",
        "description": "Get current byte index for an XML parser"
    },
    {
        "href": "function.xml-get-current-column-number.php",
        "name": "xml_get_current_column_number",
        "description": "Get current column number for an XML parser"
    },
    {
        "href": "function.xml-get-current-line-number.php",
        "name": "xml_get_current_line_number",
        "description": "Get current line number for an XML parser"
    },
    {
        "href": "function.xml-get-error-code.php",
        "name": "xml_get_error_code",
        "description": "Get XML parser error code"
    },
    {
        "href": "function.xml-parse.php",
        "name": "xml_parse",
        "description": "Start parsing an XML document"
    },
    {
        "href": "function.xml-parser-create.php",
        "name": "xml_parser_create",
        "description": "Create an XML parser"
    },
    {
        "href": "function.xml-parser-create-ns.php",
        "name": "xml_parser_create_ns",
        "description": "Create an XML parser with namespace support"
    },
    {
        "href": "function.xml-parser-free.php",
        "name": "xml_parser_free",
        "description": "Free an XML parser"
    },
    {
        "href": "function.xml-parser-get-option.php",
        "name": "xml_parser_get_option",
        "description": "Get options from an XML parser"
    },
    {
        "href": "function.xml-parser-set-option.php",
        "name": "xml_parser_set_option",
        "description": "Set options in an XML parser"
    },
    {
        "href": "function.xml-parse-into-struct.php",
        "name": "xml_parse_into_struct",
        "description": "Parse XML data into an array structure"
    },
    {
        "href": "function.xml-set-character-data-handler.php",
        "name": "xml_set_character_data_handler",
        "description": "Set up character data handler"
    },
    {
        "href": "function.xml-set-default-handler.php",
        "name": "xml_set_default_handler",
        "description": "Set up default handler"
    },
    {
        "href": "function.xml-set-element-handler.php",
        "name": "xml_set_element_handler",
        "description": "Set up start and end element handlers"
    },
    {
        "href": "function.xml-set-end-namespace-decl-handler.php",
        "name": "xml_set_end_namespace_decl_handler",
        "description": "Set up end namespace declaration handler"
    },
    {
        "href": "function.xml-set-external-entity-ref-handler.php",
        "name": "xml_set_external_entity_ref_handler",
        "description": "Set up external entity reference handler"
    },
    {
        "href": "function.xml-set-notation-decl-handler.php",
        "name": "xml_set_notation_decl_handler",
        "description": "Set up notation declaration handler"
    },
    {
        "href": "function.xml-set-object.php",
        "name": "xml_set_object",
        "description": "Use XML Parser within an object"
    },
    {
        "href": "function.xml-set-processing-instruction-handler.php",
        "name": "xml_set_processing_instruction_handler",
        "description": "Set up processing instruction (PI) handler"
    },
    {
        "href": "function.xml-set-start-namespace-decl-handler.php",
        "name": "xml_set_start_namespace_decl_handler",
        "description": "Set up start namespace declaration handler"
    },
    {
        "href": "function.xml-set-unparsed-entity-decl-handler.php",
        "name": "xml_set_unparsed_entity_decl_handler",
        "description": "Set up unparsed entity declaration handler"
    },
    {
        "href": "xsltprocessor.getparameter.php",
        "name": "XSLTProcessor::getParameter",
        "description": "Get value of a parameter"
    },
    {
        "href": "xsltprocessor.getsecurityprefs.php",
        "name": "XSLTProcessor::getSecurityPrefs",
        "description": "Get security preferences"
    },
    {
        "href": "xsltprocessor.hasexsltsupport.php",
        "name": "XSLTProcessor::hasExsltSupport",
        "description": "Determine if PHP has EXSLT support"
    },
    {
        "href": "xsltprocessor.importstylesheet.php",
        "name": "XSLTProcessor::importStylesheet",
        "description": "Import stylesheet"
    },
    {
        "href": "xsltprocessor.registerphpfunctions.php",
        "name": "XSLTProcessor::registerPHPFunctions",
        "description": "Enables the ability to use PHP functions as XSLT functions"
    },
    {
        "href": "xsltprocessor.removeparameter.php",
        "name": "XSLTProcessor::removeParameter",
        "description": "Remove parameter"
    },
    {
        "href": "xsltprocessor.setparameter.php",
        "name": "XSLTProcessor::setParameter",
        "description": "Set value for a parameter"
    },
    {
        "href": "xsltprocessor.setprofiling.php",
        "name": "XSLTProcessor::setProfiling",
        "description": "Sets profiling output file"
    },
    {
        "href": "xsltprocessor.setsecurityprefs.php",
        "name": "XSLTProcessor::setSecurityPrefs",
        "description": "Set security preferences"
    },
    {
        "href": "xsltprocessor.transformtodoc.php",
        "name": "XSLTProcessor::transformToDoc",
        "description": "Transform to a DOMDocument"
    },
    {
        "href": "xsltprocessor.transformtouri.php",
        "name": "XSLTProcessor::transformToUri",
        "description": "Transform to URI"
    },
    {
        "href": "xsltprocessor.transformtoxml.php",
        "name": "XSLTProcessor::transformToXml",
        "description": "Transform to XML"
    },
    {
        "href": "xsltprocessor.construct.php",
        "name": "XSLTProcessor::__construct",
        "description": "Creates a new XSLTProcessor object"
    },
    {
        "href": "yac.add.php",
        "name": "Yac::add",
        "description": "Store into cache"
    },
    {
        "href": "yac.delete.php",
        "name": "Yac::delete",
        "description": "Remove items from cache"
    },
    {
        "href": "yac.dump.php",
        "name": "Yac::dump",
        "description": "Dump cache"
    },
    {
        "href": "yac.flush.php",
        "name": "Yac::flush",
        "description": "Flush the cache"
    },
    {
        "href": "yac.get.php",
        "name": "Yac::get",
        "description": "Retrieve values from cache"
    },
    {
        "href": "yac.info.php",
        "name": "Yac::info",
        "description": "Status of cache"
    },
    {
        "href": "yac.set.php",
        "name": "Yac::set",
        "description": "Store into cache"
    },
    {
        "href": "yac.construct.php",
        "name": "Yac::__construct",
        "description": "Constructor"
    },
    {
        "href": "yac.getter.php",
        "name": "Yac::__get",
        "description": "Getter"
    },
    {
        "href": "yac.setter.php",
        "name": "Yac::__set",
        "description": "Setter"
    },
    {
        "href": "yaconf.get.php",
        "name": "Yaconf::get",
        "description": "Retrieve a item"
    },
    {
        "href": "yaconf.has.php",
        "name": "Yaconf::has",
        "description": "Determine if a item exists"
    },
    {
        "href": "yaf-action-abstract.execute.php",
        "name": "Yaf_Action_Abstract::execute",
        "description": "Action entry point"
    },
    {
        "href": "yaf-action-abstract.getcontroller.php",
        "name": "Yaf_Action_Abstract::getController",
        "description": "Retrieve controller object"
    },
    {
        "href": "yaf-controller-abstract.getcontrollername.php",
        "name": "Yaf_Action_Abstract::getControllerName",
        "description": "Get controller name"
    },
    {
        "href": "yaf-application.app.php",
        "name": "Yaf_Application::app",
        "description": "Retrieve an Application instance"
    },
    {
        "href": "yaf-application.bootstrap.php",
        "name": "Yaf_Application::bootstrap",
        "description": "Call bootstrap"
    },
    {
        "href": "yaf-application.clearlasterror.php",
        "name": "Yaf_Application::clearLastError",
        "description": "Clear the last error info"
    },
    {
        "href": "yaf-application.environ.php",
        "name": "Yaf_Application::environ",
        "description": "Retrive environ"
    },
    {
        "href": "yaf-application.execute.php",
        "name": "Yaf_Application::execute",
        "description": "Execute a callback"
    },
    {
        "href": "yaf-application.getappdirectory.php",
        "name": "Yaf_Application::getAppDirectory",
        "description": "Get the application directory"
    },
    {
        "href": "yaf-application.getconfig.php",
        "name": "Yaf_Application::getConfig",
        "description": "Retrive the config instance"
    },
    {
        "href": "yaf-application.getdispatcher.php",
        "name": "Yaf_Application::getDispatcher",
        "description": "Get Yaf_Dispatcher instance"
    },
    {
        "href": "yaf-application.getlasterrormsg.php",
        "name": "Yaf_Application::getLastErrorMsg",
        "description": "Get message of the last occurred error"
    },
    {
        "href": "yaf-application.getlasterrorno.php",
        "name": "Yaf_Application::getLastErrorNo",
        "description": "Get code of last occurred error"
    },
    {
        "href": "yaf-application.getmodules.php",
        "name": "Yaf_Application::getModules",
        "description": "Get defined module names"
    },
    {
        "href": "yaf-application.run.php",
        "name": "Yaf_Application::run",
        "description": "Start Yaf_Application"
    },
    {
        "href": "yaf-application.setappdirectory.php",
        "name": "Yaf_Application::setAppDirectory",
        "description": "Change the application directory"
    },
    {
        "href": "yaf-application.construct.php",
        "name": "Yaf_Application::__construct",
        "description": "Yaf_Application constructor"
    },
    {
        "href": "yaf-application.destruct.php",
        "name": "Yaf_Application::__destruct",
        "description": "The __destruct purpose"
    },
    {
        "href": "yaf-config-abstract.get.php",
        "name": "Yaf_Config_Abstract::get",
        "description": "Getter"
    },
    {
        "href": "yaf-config-abstract.readonly.php",
        "name": "Yaf_Config_Abstract::readonly",
        "description": "Find a config whether readonly"
    },
    {
        "href": "yaf-config-abstract.set.php",
        "name": "Yaf_Config_Abstract::set",
        "description": "Setter"
    },
    {
        "href": "yaf-config-abstract.toarray.php",
        "name": "Yaf_Config_Abstract::toArray",
        "description": "Cast to array"
    },
    {
        "href": "yaf-config-ini.count.php",
        "name": "Yaf_Config_Ini::count",
        "description": "Count all elements in Yaf_Config.ini"
    },
    {
        "href": "yaf-config-ini.current.php",
        "name": "Yaf_Config_Ini::current",
        "description": "Retrieve the current value"
    },
    {
        "href": "yaf-config-ini.key.php",
        "name": "Yaf_Config_Ini::key",
        "description": "Fetch current element's key"
    },
    {
        "href": "yaf-config-ini.next.php",
        "name": "Yaf_Config_Ini::next",
        "description": "Advance the internal pointer"
    },
    {
        "href": "yaf-config-ini.offsetexists.php",
        "name": "Yaf_Config_Ini::offsetExists",
        "description": "The offsetExists purpose"
    },
    {
        "href": "yaf-config-ini.offsetget.php",
        "name": "Yaf_Config_Ini::offsetGet",
        "description": "The offsetGet purpose"
    },
    {
        "href": "yaf-config-ini.offsetset.php",
        "name": "Yaf_Config_Ini::offsetSet",
        "description": "The offsetSet purpose"
    },
    {
        "href": "yaf-config-ini.offsetunset.php",
        "name": "Yaf_Config_Ini::offsetUnset",
        "description": "The offsetUnset purpose"
    },
    {
        "href": "yaf-config-ini.readonly.php",
        "name": "Yaf_Config_Ini::readonly",
        "description": "The readonly purpose"
    },
    {
        "href": "yaf-config-ini.rewind.php",
        "name": "Yaf_Config_Ini::rewind",
        "description": "The rewind purpose"
    },
    {
        "href": "yaf-config-ini.toarray.php",
        "name": "Yaf_Config_Ini::toArray",
        "description": "Return config as a PHP array"
    },
    {
        "href": "yaf-config-ini.valid.php",
        "name": "Yaf_Config_Ini::valid",
        "description": "The valid purpose"
    },
    {
        "href": "yaf-config-ini.construct.php",
        "name": "Yaf_Config_Ini::__construct",
        "description": "Yaf_Config_Ini constructor"
    },
    {
        "href": "yaf-config-ini.get.php",
        "name": "Yaf_Config_Ini::__get",
        "description": "Retrieve a element"
    },
    {
        "href": "yaf-config-ini.isset.php",
        "name": "Yaf_Config_Ini::__isset",
        "description": "Determine if a key is exists"
    },
    {
        "href": "yaf-config-ini.set.php",
        "name": "Yaf_Config_Ini::__set",
        "description": "The __set purpose"
    },
    {
        "href": "yaf-config-simple.count.php",
        "name": "Yaf_Config_Simple::count",
        "description": "The count purpose"
    },
    {
        "href": "yaf-config-simple.current.php",
        "name": "Yaf_Config_Simple::current",
        "description": "The current purpose"
    },
    {
        "href": "yaf-config-simple.key.php",
        "name": "Yaf_Config_Simple::key",
        "description": "The key purpose"
    },
    {
        "href": "yaf-config-simple.next.php",
        "name": "Yaf_Config_Simple::next",
        "description": "The next purpose"
    },
    {
        "href": "yaf-config-simple.offsetexists.php",
        "name": "Yaf_Config_Simple::offsetExists",
        "description": "The offsetExists purpose"
    },
    {
        "href": "yaf-config-simple.offsetget.php",
        "name": "Yaf_Config_Simple::offsetGet",
        "description": "The offsetGet purpose"
    },
    {
        "href": "yaf-config-simple.offsetset.php",
        "name": "Yaf_Config_Simple::offsetSet",
        "description": "The offsetSet purpose"
    },
    {
        "href": "yaf-config-simple.offsetunset.php",
        "name": "Yaf_Config_Simple::offsetUnset",
        "description": "The offsetUnset purpose"
    },
    {
        "href": "yaf-config-simple.readonly.php",
        "name": "Yaf_Config_Simple::readonly",
        "description": "The readonly purpose"
    },
    {
        "href": "yaf-config-simple.rewind.php",
        "name": "Yaf_Config_Simple::rewind",
        "description": "The rewind purpose"
    },
    {
        "href": "yaf-config-simple.toarray.php",
        "name": "Yaf_Config_Simple::toArray",
        "description": "Returns a PHP array"
    },
    {
        "href": "yaf-config-simple.valid.php",
        "name": "Yaf_Config_Simple::valid",
        "description": "The valid purpose"
    },
    {
        "href": "yaf-config-simple.construct.php",
        "name": "Yaf_Config_Simple::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-config-simple.get.php",
        "name": "Yaf_Config_Simple::__get",
        "description": "The __get purpose"
    },
    {
        "href": "yaf-config-simple.isset.php",
        "name": "Yaf_Config_Simple::__isset",
        "description": "The __isset purpose"
    },
    {
        "href": "yaf-config-simple.set.php",
        "name": "Yaf_Config_Simple::__set",
        "description": "The __set purpose"
    },
    {
        "href": "yaf-controller-abstract.display.php",
        "name": "Yaf_Controller_Abstract::display",
        "description": "The display purpose"
    },
    {
        "href": "yaf-controller-abstract.forward.php",
        "name": "Yaf_Controller_Abstract::forward",
        "description": "Forward to another action"
    },
    {
        "href": "yaf-controller-abstract.getinvokearg.php",
        "name": "Yaf_Controller_Abstract::getInvokeArg",
        "description": "The getInvokeArg purpose"
    },
    {
        "href": "yaf-controller-abstract.getinvokeargs.php",
        "name": "Yaf_Controller_Abstract::getInvokeArgs",
        "description": "The getInvokeArgs purpose"
    },
    {
        "href": "yaf-controller-abstract.getmodulename.php",
        "name": "Yaf_Controller_Abstract::getModuleName",
        "description": "Get module name"
    },
    {
        "href": "yaf-controller-abstract.getname.php",
        "name": "Yaf_Controller_Abstract::getName",
        "description": "Get self name"
    },
    {
        "href": "yaf-controller-abstract.getrequest.php",
        "name": "Yaf_Controller_Abstract::getRequest",
        "description": "Retrieve current request object"
    },
    {
        "href": "yaf-controller-abstract.getresponse.php",
        "name": "Yaf_Controller_Abstract::getResponse",
        "description": "Retrieve current response object"
    },
    {
        "href": "yaf-controller-abstract.getview.php",
        "name": "Yaf_Controller_Abstract::getView",
        "description": "Retrieve the view engine"
    },
    {
        "href": "yaf-controller-abstract.getviewpath.php",
        "name": "Yaf_Controller_Abstract::getViewpath",
        "description": "The getViewpath purpose"
    },
    {
        "href": "yaf-controller-abstract.init.php",
        "name": "Yaf_Controller_Abstract::init",
        "description": "Controller initializer"
    },
    {
        "href": "yaf-controller-abstract.initview.php",
        "name": "Yaf_Controller_Abstract::initView",
        "description": "The initView purpose"
    },
    {
        "href": "yaf-controller-abstract.redirect.php",
        "name": "Yaf_Controller_Abstract::redirect",
        "description": "Redirect to a URL"
    },
    {
        "href": "yaf-controller-abstract.render.php",
        "name": "Yaf_Controller_Abstract::render",
        "description": "Render view template"
    },
    {
        "href": "yaf-controller-abstract.setviewpath.php",
        "name": "Yaf_Controller_Abstract::setViewpath",
        "description": "The setViewpath purpose"
    },
    {
        "href": "yaf-controller-abstract.construct.php",
        "name": "Yaf_Controller_Abstract::__construct",
        "description": "Yaf_Controller_Abstract constructor"
    },
    {
        "href": "yaf-dispatcher.autorender.php",
        "name": "Yaf_Dispatcher::autoRender",
        "description": "Switch on/off autorendering"
    },
    {
        "href": "yaf-dispatcher.catchexception.php",
        "name": "Yaf_Dispatcher::catchException",
        "description": "Switch on/off exception catching"
    },
    {
        "href": "yaf-dispatcher.disableview.php",
        "name": "Yaf_Dispatcher::disableView",
        "description": "Disable view rendering"
    },
    {
        "href": "yaf-dispatcher.dispatch.php",
        "name": "Yaf_Dispatcher::dispatch",
        "description": "Dispatch a request"
    },
    {
        "href": "yaf-dispatcher.enableview.php",
        "name": "Yaf_Dispatcher::enableView",
        "description": "Enable view rendering"
    },
    {
        "href": "yaf-dispatcher.flushinstantly.php",
        "name": "Yaf_Dispatcher::flushInstantly",
        "description": "Switch on/off the instant flushing"
    },
    {
        "href": "yaf-dispatcher.getapplication.php",
        "name": "Yaf_Dispatcher::getApplication",
        "description": "Retrieve the application"
    },
    {
        "href": "yaf-dispatcher.getdefaultaction.php",
        "name": "Yaf_Dispatcher::getDefaultAction",
        "description": "Retrive the default action name"
    },
    {
        "href": "yaf-dispatcher.getdefaultcontroller.php",
        "name": "Yaf_Dispatcher::getDefaultController",
        "description": "Retrive the default controller name"
    },
    {
        "href": "yaf-dispatcher.getdefaultmodule.php",
        "name": "Yaf_Dispatcher::getDefaultModule",
        "description": "Retrive the default module name"
    },
    {
        "href": "yaf-dispatcher.getinstance.php",
        "name": "Yaf_Dispatcher::getInstance",
        "description": "Retrive the dispatcher instance"
    },
    {
        "href": "yaf-dispatcher.getrequest.php",
        "name": "Yaf_Dispatcher::getRequest",
        "description": "Retrive the request instance"
    },
    {
        "href": "yaf-dispatcher.getrouter.php",
        "name": "Yaf_Dispatcher::getRouter",
        "description": "Retrive router instance"
    },
    {
        "href": "yaf-dispatcher.initview.php",
        "name": "Yaf_Dispatcher::initView",
        "description": "Initialize view and return it"
    },
    {
        "href": "yaf-dispatcher.registerplugin.php",
        "name": "Yaf_Dispatcher::registerPlugin",
        "description": "Register a plugin"
    },
    {
        "href": "yaf-dispatcher.returnresponse.php",
        "name": "Yaf_Dispatcher::returnResponse",
        "description": "The returnResponse purpose"
    },
    {
        "href": "yaf-dispatcher.setdefaultaction.php",
        "name": "Yaf_Dispatcher::setDefaultAction",
        "description": "Change default action name"
    },
    {
        "href": "yaf-dispatcher.setdefaultcontroller.php",
        "name": "Yaf_Dispatcher::setDefaultController",
        "description": "Change default controller name"
    },
    {
        "href": "yaf-dispatcher.setdefaultmodule.php",
        "name": "Yaf_Dispatcher::setDefaultModule",
        "description": "Change default module name"
    },
    {
        "href": "yaf-dispatcher.seterrorhandler.php",
        "name": "Yaf_Dispatcher::setErrorHandler",
        "description": "Set error handler"
    },
    {
        "href": "yaf-dispatcher.setrequest.php",
        "name": "Yaf_Dispatcher::setRequest",
        "description": "The setRequest purpose"
    },
    {
        "href": "yaf-dispatcher.setview.php",
        "name": "Yaf_Dispatcher::setView",
        "description": "Set a custom view engine"
    },
    {
        "href": "yaf-dispatcher.throwexception.php",
        "name": "Yaf_Dispatcher::throwException",
        "description": "Switch on/off exception throwing"
    },
    {
        "href": "yaf-dispatcher.construct.php",
        "name": "Yaf_Dispatcher::__construct",
        "description": "Yaf_Dispatcher constructor"
    },
    {
        "href": "yaf-exception.getprevious.php",
        "name": "Yaf_Exception::getPrevious",
        "description": "The getPrevious purpose"
    },
    {
        "href": "yaf-exception.construct.php",
        "name": "Yaf_Exception::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-loader.autoload.php",
        "name": "Yaf_Loader::autoload",
        "description": "The autoload purpose"
    },
    {
        "href": "yaf-loader.clearlocalnamespace.php",
        "name": "Yaf_Loader::clearLocalNamespace",
        "description": "The clearLocalNamespace purpose"
    },
    {
        "href": "yaf-loader.getinstance.php",
        "name": "Yaf_Loader::getInstance",
        "description": "The getInstance purpose"
    },
    {
        "href": "yaf-loader.getlibrarypath.php",
        "name": "Yaf_Loader::getLibraryPath",
        "description": "Get the library path"
    },
    {
        "href": "yaf-loader.getnamespaces.php",
        "name": "Yaf_Loader::getLocalNamespace",
        "description": "Retrive all register namespaces info"
    },
    {
        "href": "yaf-loader.getnamespacepath.php",
        "name": "Yaf_Loader::getNamespacePath",
        "description": "Retieve path of a registered namespace"
    },
    {
        "href": "yaf-loader.import.php",
        "name": "Yaf_Loader::import",
        "description": "The import purpose"
    },
    {
        "href": "yaf-loader.islocalname.php",
        "name": "Yaf_Loader::isLocalName",
        "description": "The isLocalName purpose"
    },
    {
        "href": "yaf-loader.registerlocalnamespace.php",
        "name": "Yaf_Loader::registerLocalNamespace",
        "description": "Register local class prefix"
    },
    {
        "href": "yaf-loader.registernamespace.php",
        "name": "Yaf_Loader::registerNamespace",
        "description": "Register namespace with searching path"
    },
    {
        "href": "yaf-loader.setlibrarypath.php",
        "name": "Yaf_Loader::setLibraryPath",
        "description": "Change the library path"
    },
    {
        "href": "yaf-loader.construct.php",
        "name": "Yaf_Loader::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-plugin-abstract.dispatchloopshutdown.php",
        "name": "Yaf_Plugin_Abstract::dispatchLoopShutdown",
        "description": "The dispatchLoopShutdown purpose"
    },
    {
        "href": "yaf-plugin-abstract.dispatchloopstartup.php",
        "name": "Yaf_Plugin_Abstract::dispatchLoopStartup",
        "description": "Hook before dispatch loop"
    },
    {
        "href": "yaf-plugin-abstract.postdispatch.php",
        "name": "Yaf_Plugin_Abstract::postDispatch",
        "description": "The postDispatch purpose"
    },
    {
        "href": "yaf-plugin-abstract.predispatch.php",
        "name": "Yaf_Plugin_Abstract::preDispatch",
        "description": "The preDispatch purpose"
    },
    {
        "href": "yaf-plugin-abstract.preresponse.php",
        "name": "Yaf_Plugin_Abstract::preResponse",
        "description": "The preResponse purpose"
    },
    {
        "href": "yaf-plugin-abstract.routershutdown.php",
        "name": "Yaf_Plugin_Abstract::routerShutdown",
        "description": "The routerShutdown purpose"
    },
    {
        "href": "yaf-plugin-abstract.routerstartup.php",
        "name": "Yaf_Plugin_Abstract::routerStartup",
        "description": "RouterStartup hook"
    },
    {
        "href": "yaf-registry.del.php",
        "name": "Yaf_Registry::del",
        "description": "Remove an item from registry"
    },
    {
        "href": "yaf-registry.get.php",
        "name": "Yaf_Registry::get",
        "description": "Retrieve an item from registry"
    },
    {
        "href": "yaf-registry.has.php",
        "name": "Yaf_Registry::has",
        "description": "Check whether an item exists"
    },
    {
        "href": "yaf-registry.set.php",
        "name": "Yaf_Registry::set",
        "description": "Add an item into registry"
    },
    {
        "href": "yaf-registry.construct.php",
        "name": "Yaf_Registry::__construct",
        "description": "Yaf_Registry implements singleton"
    },
    {
        "href": "yaf-request-abstract.clearparams.php",
        "name": "Yaf_Request_Abstract::clearParams",
        "description": "Remove all params"
    },
    {
        "href": "yaf-request-abstract.getactionname.php",
        "name": "Yaf_Request_Abstract::getActionName",
        "description": "The getActionName purpose"
    },
    {
        "href": "yaf-request-abstract.getbaseuri.php",
        "name": "Yaf_Request_Abstract::getBaseUri",
        "description": "The getBaseUri purpose"
    },
    {
        "href": "yaf-request-abstract.getcontrollername.php",
        "name": "Yaf_Request_Abstract::getControllerName",
        "description": "The getControllerName purpose"
    },
    {
        "href": "yaf-request-abstract.getenv.php",
        "name": "Yaf_Request_Abstract::getEnv",
        "description": "Retrieve ENV varialbe"
    },
    {
        "href": "yaf-request-abstract.getexception.php",
        "name": "Yaf_Request_Abstract::getException",
        "description": "The getException purpose"
    },
    {
        "href": "yaf-request-abstract.getlanguage.php",
        "name": "Yaf_Request_Abstract::getLanguage",
        "description": "Retrieve client's preferred language"
    },
    {
        "href": "yaf-request-abstract.getmethod.php",
        "name": "Yaf_Request_Abstract::getMethod",
        "description": "Retrieve the request method"
    },
    {
        "href": "yaf-request-abstract.getmodulename.php",
        "name": "Yaf_Request_Abstract::getModuleName",
        "description": "The getModuleName purpose"
    },
    {
        "href": "yaf-request-abstract.getparam.php",
        "name": "Yaf_Request_Abstract::getParam",
        "description": "Retrieve calling parameter"
    },
    {
        "href": "yaf-request-abstract.getparams.php",
        "name": "Yaf_Request_Abstract::getParams",
        "description": "Retrieve all calling parameters"
    },
    {
        "href": "yaf-request-abstract.getrequesturi.php",
        "name": "Yaf_Request_Abstract::getRequestUri",
        "description": "The getRequestUri purpose"
    },
    {
        "href": "yaf-request-abstract.getserver.php",
        "name": "Yaf_Request_Abstract::getServer",
        "description": "Retrieve SERVER variable"
    },
    {
        "href": "yaf-request-abstract.iscli.php",
        "name": "Yaf_Request_Abstract::isCli",
        "description": "Determine if request is CLI request"
    },
    {
        "href": "yaf-request-abstract.isdispatched.php",
        "name": "Yaf_Request_Abstract::isDispatched",
        "description": "Determin if the request is dispatched"
    },
    {
        "href": "yaf-request-abstract.isget.php",
        "name": "Yaf_Request_Abstract::isGet",
        "description": "Determine if request is GET request"
    },
    {
        "href": "yaf-request-abstract.ishead.php",
        "name": "Yaf_Request_Abstract::isHead",
        "description": "Determine if request is HEAD request"
    },
    {
        "href": "yaf-request-abstract.isoptions.php",
        "name": "Yaf_Request_Abstract::isOptions",
        "description": "Determine if request is OPTIONS request"
    },
    {
        "href": "yaf-request-abstract.ispost.php",
        "name": "Yaf_Request_Abstract::isPost",
        "description": "Determine if request is POST request"
    },
    {
        "href": "yaf-request-abstract.isput.php",
        "name": "Yaf_Request_Abstract::isPut",
        "description": "Determine if request is PUT request"
    },
    {
        "href": "yaf-request-abstract.isrouted.php",
        "name": "Yaf_Request_Abstract::isRouted",
        "description": "Determin if request has been routed"
    },
    {
        "href": "yaf-request-abstract.isxmlhttprequest.php",
        "name": "Yaf_Request_Abstract::isXmlHttpRequest",
        "description": "Determine if request is AJAX request"
    },
    {
        "href": "yaf-request-abstract.setactionname.php",
        "name": "Yaf_Request_Abstract::setActionName",
        "description": "Set action name"
    },
    {
        "href": "yaf-request-abstract.setbaseuri.php",
        "name": "Yaf_Request_Abstract::setBaseUri",
        "description": "Set base URI"
    },
    {
        "href": "yaf-request-abstract.setcontrollername.php",
        "name": "Yaf_Request_Abstract::setControllerName",
        "description": "Set controller name"
    },
    {
        "href": "yaf-request-abstract.setdispatched.php",
        "name": "Yaf_Request_Abstract::setDispatched",
        "description": "The setDispatched purpose"
    },
    {
        "href": "yaf-request-abstract.setmodulename.php",
        "name": "Yaf_Request_Abstract::setModuleName",
        "description": "Set module name"
    },
    {
        "href": "yaf-request-abstract.setparam.php",
        "name": "Yaf_Request_Abstract::setParam",
        "description": "Set a calling parameter to a request"
    },
    {
        "href": "yaf-request-abstract.setrequesturi.php",
        "name": "Yaf_Request_Abstract::setRequestUri",
        "description": "The setRequestUri purpose"
    },
    {
        "href": "yaf-request-abstract.setrouted.php",
        "name": "Yaf_Request_Abstract::setRouted",
        "description": "The setRouted purpose"
    },
    {
        "href": "yaf-request-http.get.php",
        "name": "Yaf_Request_Http::get",
        "description": "Retrieve variable from client"
    },
    {
        "href": "yaf-request-http.getcookie.php",
        "name": "Yaf_Request_Http::getCookie",
        "description": "Retrieve Cookie variable"
    },
    {
        "href": "yaf-request-http.getfiles.php",
        "name": "Yaf_Request_Http::getFiles",
        "description": "The getFiles purpose"
    },
    {
        "href": "yaf-request-http.getpost.php",
        "name": "Yaf_Request_Http::getPost",
        "description": "Retrieve POST variable"
    },
    {
        "href": "yaf-request-http.getquery.php",
        "name": "Yaf_Request_Http::getQuery",
        "description": "Fetch a query parameter"
    },
    {
        "href": "yaf-request-http.getraw.php",
        "name": "Yaf_Request_Http::getRaw",
        "description": "Retrieve Raw request body"
    },
    {
        "href": "yaf-request-http.getrequest.php",
        "name": "Yaf_Request_Http::getRequest",
        "description": "The getRequest purpose"
    },
    {
        "href": "yaf-request-http.isxmlhttprequest.php",
        "name": "Yaf_Request_Http::isXmlHttpRequest",
        "description": "Determin if request is Ajax Request"
    },
    {
        "href": "yaf-request-http.construct.php",
        "name": "Yaf_Request_Http::__construct",
        "description": "Constructor of Yaf_Request_Http"
    },
    {
        "href": "yaf-request-simple.get.php",
        "name": "Yaf_Request_Simple::get",
        "description": "The get purpose"
    },
    {
        "href": "yaf-request-simple.getcookie.php",
        "name": "Yaf_Request_Simple::getCookie",
        "description": "The getCookie purpose"
    },
    {
        "href": "yaf-request-simple.getfiles.php",
        "name": "Yaf_Request_Simple::getFiles",
        "description": "The getFiles purpose"
    },
    {
        "href": "yaf-request-simple.getpost.php",
        "name": "Yaf_Request_Simple::getPost",
        "description": "The getPost purpose"
    },
    {
        "href": "yaf-request-simple.getquery.php",
        "name": "Yaf_Request_Simple::getQuery",
        "description": "The getQuery purpose"
    },
    {
        "href": "yaf-request-simple.getrequest.php",
        "name": "Yaf_Request_Simple::getRequest",
        "description": "The getRequest purpose"
    },
    {
        "href": "yaf-request-simple.isxmlhttprequest.php",
        "name": "Yaf_Request_Simple::isXmlHttpRequest",
        "description": "Determin if request is AJAX request"
    },
    {
        "href": "yaf-request-simple.construct.php",
        "name": "Yaf_Request_Simple::__construct",
        "description": "Constructor of Yaf_Request_Simple"
    },
    {
        "href": "yaf-response-abstract.appendbody.php",
        "name": "Yaf_Response_Abstract::appendBody",
        "description": "Append to response body"
    },
    {
        "href": "yaf-response-abstract.clearbody.php",
        "name": "Yaf_Response_Abstract::clearBody",
        "description": "Discard all exists response body"
    },
    {
        "href": "yaf-response-abstract.clearheaders.php",
        "name": "Yaf_Response_Abstract::clearHeaders",
        "description": "Discard all set headers"
    },
    {
        "href": "yaf-response-abstract.getbody.php",
        "name": "Yaf_Response_Abstract::getBody",
        "description": "Retrieve a exists content"
    },
    {
        "href": "yaf-response-abstract.getheader.php",
        "name": "Yaf_Response_Abstract::getHeader",
        "description": "The getHeader purpose"
    },
    {
        "href": "yaf-response-abstract.prependbody.php",
        "name": "Yaf_Response_Abstract::prependBody",
        "description": "The prependBody purpose"
    },
    {
        "href": "yaf-response-abstract.response.php",
        "name": "Yaf_Response_Abstract::response",
        "description": "Send response"
    },
    {
        "href": "yaf-response-abstract.setallheaders.php",
        "name": "Yaf_Response_Abstract::setAllHeaders",
        "description": "The setAllHeaders purpose"
    },
    {
        "href": "yaf-response-abstract.setbody.php",
        "name": "Yaf_Response_Abstract::setBody",
        "description": "Set content to response"
    },
    {
        "href": "yaf-response-abstract.setheader.php",
        "name": "Yaf_Response_Abstract::setHeader",
        "description": "Set reponse header"
    },
    {
        "href": "yaf-response-abstract.setredirect.php",
        "name": "Yaf_Response_Abstract::setRedirect",
        "description": "The setRedirect purpose"
    },
    {
        "href": "yaf-response-abstract.construct.php",
        "name": "Yaf_Response_Abstract::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-response-abstract.destruct.php",
        "name": "Yaf_Response_Abstract::__destruct",
        "description": "The __destruct purpose"
    },
    {
        "href": "yaf-response-abstract.tostring.php",
        "name": "Yaf_Response_Abstract::__toString",
        "description": "Retrieve all bodys as string"
    },
    {
        "href": "yaf-router.addconfig.php",
        "name": "Yaf_Router::addConfig",
        "description": "Add config-defined routes into Router"
    },
    {
        "href": "yaf-router.addroute.php",
        "name": "Yaf_Router::addRoute",
        "description": "Add new Route into Router"
    },
    {
        "href": "yaf-router.getcurrentroute.php",
        "name": "Yaf_Router::getCurrentRoute",
        "description": "Get the effective route name"
    },
    {
        "href": "yaf-router.getroute.php",
        "name": "Yaf_Router::getRoute",
        "description": "Retrieve a route by name"
    },
    {
        "href": "yaf-router.getroutes.php",
        "name": "Yaf_Router::getRoutes",
        "description": "Retrieve registered routes"
    },
    {
        "href": "yaf-router.route.php",
        "name": "Yaf_Router::route",
        "description": "The route purpose"
    },
    {
        "href": "yaf-router.construct.php",
        "name": "Yaf_Router::__construct",
        "description": "Yaf_Router constructor"
    },
    {
        "href": "yaf-route-interface.assemble.php",
        "name": "Yaf_Route_Interface::assemble",
        "description": "Assemble a request"
    },
    {
        "href": "yaf-route-interface.route.php",
        "name": "Yaf_Route_Interface::route",
        "description": "Route a request"
    },
    {
        "href": "yaf-route-map.assemble.php",
        "name": "Yaf_Route_Map::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-map.route.php",
        "name": "Yaf_Route_Map::route",
        "description": "The route purpose"
    },
    {
        "href": "yaf-route-map.construct.php",
        "name": "Yaf_Route_Map::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-route-regex.assemble.php",
        "name": "Yaf_Route_Regex::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-regex.route.php",
        "name": "Yaf_Route_Regex::route",
        "description": "The route purpose"
    },
    {
        "href": "yaf-route-regex.construct.php",
        "name": "Yaf_Route_Regex::__construct",
        "description": "Yaf_Route_Regex constructor"
    },
    {
        "href": "yaf-route-rewrite.assemble.php",
        "name": "Yaf_Route_Rewrite::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-rewrite.route.php",
        "name": "Yaf_Route_Rewrite::route",
        "description": "The route purpose"
    },
    {
        "href": "yaf-route-rewrite.construct.php",
        "name": "Yaf_Route_Rewrite::__construct",
        "description": "Yaf_Route_Rewrite constructor"
    },
    {
        "href": "yaf-route-simple.assemble.php",
        "name": "Yaf_Route_Simple::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-simple.route.php",
        "name": "Yaf_Route_Simple::route",
        "description": "Route a request"
    },
    {
        "href": "yaf-route-simple.construct.php",
        "name": "Yaf_Route_Simple::__construct",
        "description": "Yaf_Route_Simple constructor"
    },
    {
        "href": "yaf-route-static.assemble.php",
        "name": "Yaf_Route_Static::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-static.match.php",
        "name": "Yaf_Route_Static::match",
        "description": "The match purpose"
    },
    {
        "href": "yaf-route-static.route.php",
        "name": "Yaf_Route_Static::route",
        "description": "Route a request"
    },
    {
        "href": "yaf-route-supervar.assemble.php",
        "name": "Yaf_Route_Supervar::assemble",
        "description": "Assemble a url"
    },
    {
        "href": "yaf-route-supervar.route.php",
        "name": "Yaf_Route_Supervar::route",
        "description": "The route purpose"
    },
    {
        "href": "yaf-route-supervar.construct.php",
        "name": "Yaf_Route_Supervar::__construct",
        "description": "The __construct purpose"
    },
    {
        "href": "yaf-session.count.php",
        "name": "Yaf_Session::count",
        "description": "The count purpose"
    },
    {
        "href": "yaf-session.current.php",
        "name": "Yaf_Session::current",
        "description": "The current purpose"
    },
    {
        "href": "yaf-session.del.php",
        "name": "Yaf_Session::del",
        "description": "The del purpose"
    },
    {
        "href": "yaf-session.getinstance.php",
        "name": "Yaf_Session::getInstance",
        "description": "The getInstance purpose"
    },
    {
        "href": "yaf-session.has.php",
        "name": "Yaf_Session::has",
        "description": "The has purpose"
    },
    {
        "href": "yaf-session.key.php",
        "name": "Yaf_Session::key",
        "description": "The key purpose"
    },
    {
        "href": "yaf-session.next.php",
        "name": "Yaf_Session::next",
        "description": "The next purpose"
    },
    {
        "href": "yaf-session.offsetexists.php",
        "name": "Yaf_Session::offsetExists",
        "description": "The offsetExists purpose"
    },
    {
        "href": "yaf-session.offsetget.php",
        "name": "Yaf_Session::offsetGet",
        "description": "The offsetGet purpose"
    },
    {
        "href": "yaf-session.offsetset.php",
        "name": "Yaf_Session::offsetSet",
        "description": "The offsetSet purpose"
    },
    {
        "href": "yaf-session.offsetunset.php",
        "name": "Yaf_Session::offsetUnset",
        "description": "The offsetUnset purpose"
    },
    {
        "href": "yaf-session.rewind.php",
        "name": "Yaf_Session::rewind",
        "description": "The rewind purpose"
    },
    {
        "href": "yaf-session.start.php",
        "name": "Yaf_Session::start",
        "description": "The start purpose"
    },
    {
        "href": "yaf-session.valid.php",
        "name": "Yaf_Session::valid",
        "description": "The valid purpose"
    },
    {
        "href": "yaf-session.construct.php",
        "name": "Yaf_Session::__construct",
        "description": "Constructor of Yaf_Session"
    },
    {
        "href": "yaf-session.get.php",
        "name": "Yaf_Session::__get",
        "description": "The __get purpose"
    },
    {
        "href": "yaf-session.isset.php",
        "name": "Yaf_Session::__isset",
        "description": "The __isset purpose"
    },
    {
        "href": "yaf-session.set.php",
        "name": "Yaf_Session::__set",
        "description": "The __set purpose"
    },
    {
        "href": "yaf-session.unset.php",
        "name": "Yaf_Session::__unset",
        "description": "The __unset purpose"
    },
    {
        "href": "yaf-view-interface.assign.php",
        "name": "Yaf_View_Interface::assign",
        "description": "Assign value to View engine"
    },
    {
        "href": "yaf-view-interface.display.php",
        "name": "Yaf_View_Interface::display",
        "description": "Render and output a template"
    },
    {
        "href": "yaf-view-interface.getscriptpath.php",
        "name": "Yaf_View_Interface::getScriptPath",
        "description": "The getScriptPath purpose"
    },
    {
        "href": "yaf-view-interface.render.php",
        "name": "Yaf_View_Interface::render",
        "description": "Render a template"
    },
    {
        "href": "yaf-view-interface.setscriptpath.php",
        "name": "Yaf_View_Interface::setScriptPath",
        "description": "The setScriptPath purpose"
    },
    {
        "href": "yaf-view-simple.assign.php",
        "name": "Yaf_View_Simple::assign",
        "description": "Assign values"
    },
    {
        "href": "yaf-view-simple.assignref.php",
        "name": "Yaf_View_Simple::assignRef",
        "description": "The assignRef purpose"
    },
    {
        "href": "yaf-view-simple.clear.php",
        "name": "Yaf_View_Simple::clear",
        "description": "Clear Assigned values"
    },
    {
        "href": "yaf-view-simple.display.php",
        "name": "Yaf_View_Simple::display",
        "description": "Render and display"
    },
    {
        "href": "yaf-view-simple.eval.php",
        "name": "Yaf_View_Simple::eval",
        "description": "Render template"
    },
    {
        "href": "yaf-view-simple.getscriptpath.php",
        "name": "Yaf_View_Simple::getScriptPath",
        "description": "Get templates directory"
    },
    {
        "href": "yaf-view-simple.render.php",
        "name": "Yaf_View_Simple::render",
        "description": "Render template"
    },
    {
        "href": "yaf-view-simple.setscriptpath.php",
        "name": "Yaf_View_Simple::setScriptPath",
        "description": "Set tempaltes directory"
    },
    {
        "href": "yaf-view-simple.construct.php",
        "name": "Yaf_View_Simple::__construct",
        "description": "Constructor of Yaf_View_Simple"
    },
    {
        "href": "yaf-view-simple.get.php",
        "name": "Yaf_View_Simple::__get",
        "description": "Retrieve assigned variable"
    },
    {
        "href": "yaf-view-simple.isset.php",
        "name": "Yaf_View_Simple::__isset",
        "description": "The __isset purpose"
    },
    {
        "href": "yaf-view-simple.set.php",
        "name": "Yaf_View_Simple::__set",
        "description": "Set value to engine"
    },
    {
        "href": "function.yaml-emit.php",
        "name": "yaml_emit",
        "description": "Returns the YAML representation of a value"
    },
    {
        "href": "function.yaml-emit-file.php",
        "name": "yaml_emit_file",
        "description": "Send the YAML representation of a value to a file"
    },
    {
        "href": "function.yaml-parse.php",
        "name": "yaml_parse",
        "description": "Parse a YAML stream"
    },
    {
        "href": "function.yaml-parse-file.php",
        "name": "yaml_parse_file",
        "description": "Parse a YAML stream from a file"
    },
    {
        "href": "function.yaml-parse-url.php",
        "name": "yaml_parse_url",
        "description": "Parse a Yaml stream from a URL"
    },
    {
        "href": "yar-client.setopt.php",
        "name": "Yar_Client::setOpt",
        "description": "Set calling contexts"
    },
    {
        "href": "yar-client.call.php",
        "name": "Yar_Client::__call",
        "description": "Call service"
    },
    {
        "href": "yar-client.construct.php",
        "name": "Yar_Client::__construct",
        "description": "Create a client"
    },
    {
        "href": "yar-client-exception.gettype.php",
        "name": "Yar_Client_Exception::getType",
        "description": "Retrieve exception's type"
    },
    {
        "href": "yar-concurrent-client.call.php",
        "name": "Yar_Concurrent_Client::call",
        "description": "Register a concurrent call"
    },
    {
        "href": "yar-concurrent-client.loop.php",
        "name": "Yar_Concurrent_Client::loop",
        "description": "Send all calls"
    },
    {
        "href": "yar-concurrent-client.reset.php",
        "name": "Yar_Concurrent_Client::reset",
        "description": "Clean all registered calls"
    },
    {
        "href": "yar-server.handle.php",
        "name": "Yar_Server::handle",
        "description": "Start RPC Server"
    },
    {
        "href": "yar-server.construct.php",
        "name": "Yar_Server::__construct",
        "description": "Register a server"
    },
    {
        "href": "yar-server-exception.gettype.php",
        "name": "Yar_Server_Exception::getType",
        "description": "Retrieve exception's type"
    },
    {
        "href": "function.yaz-addinfo.php",
        "name": "yaz_addinfo",
        "description": "Returns additional error information"
    },
    {
        "href": "function.yaz-ccl-conf.php",
        "name": "yaz_ccl_conf",
        "description": "Configure CCL parser"
    },
    {
        "href": "function.yaz-ccl-parse.php",
        "name": "yaz_ccl_parse",
        "description": "Invoke CCL Parser"
    },
    {
        "href": "function.yaz-close.php",
        "name": "yaz_close",
        "description": "Close YAZ connection"
    },
    {
        "href": "function.yaz-connect.php",
        "name": "yaz_connect",
        "description": "Prepares for a connection to a Z39.50 server"
    },
    {
        "href": "function.yaz-database.php",
        "name": "yaz_database",
        "description": "Specifies the databases within a session"
    },
    {
        "href": "function.yaz-element.php",
        "name": "yaz_element",
        "description": "Specifies Element-Set Name for retrieval"
    },
    {
        "href": "function.yaz-errno.php",
        "name": "yaz_errno",
        "description": "Returns error number"
    },
    {
        "href": "function.yaz-error.php",
        "name": "yaz_error",
        "description": "Returns error description"
    },
    {
        "href": "function.yaz-es.php",
        "name": "yaz_es",
        "description": "Prepares for an Extended Service Request"
    },
    {
        "href": "function.yaz-es-result.php",
        "name": "yaz_es_result",
        "description": "Inspects Extended Services Result"
    },
    {
        "href": "function.yaz-get-option.php",
        "name": "yaz_get_option",
        "description": "Returns value of option for connection"
    },
    {
        "href": "function.yaz-hits.php",
        "name": "yaz_hits",
        "description": "Returns number of hits for last search"
    },
    {
        "href": "function.yaz-itemorder.php",
        "name": "yaz_itemorder",
        "description": "Prepares for Z39.50 Item Order with an ILL-Request package"
    },
    {
        "href": "function.yaz-present.php",
        "name": "yaz_present",
        "description": "Prepares for retrieval (Z39.50 present)"
    },
    {
        "href": "function.yaz-range.php",
        "name": "yaz_range",
        "description": "Specifies a range of records to retrieve"
    },
    {
        "href": "function.yaz-record.php",
        "name": "yaz_record",
        "description": "Returns a record"
    },
    {
        "href": "function.yaz-scan.php",
        "name": "yaz_scan",
        "description": "Prepares for a scan"
    },
    {
        "href": "function.yaz-scan-result.php",
        "name": "yaz_scan_result",
        "description": "Returns Scan Response result"
    },
    {
        "href": "function.yaz-schema.php",
        "name": "yaz_schema",
        "description": "Specifies schema for retrieval"
    },
    {
        "href": "function.yaz-search.php",
        "name": "yaz_search",
        "description": "Prepares for a search"
    },
    {
        "href": "function.yaz-set-option.php",
        "name": "yaz_set_option",
        "description": "Sets one or more options for connection"
    },
    {
        "href": "function.yaz-sort.php",
        "name": "yaz_sort",
        "description": "Sets sorting criteria"
    },
    {
        "href": "function.yaz-syntax.php",
        "name": "yaz_syntax",
        "description": "Specifies the preferred record syntax for retrieval"
    },
    {
        "href": "function.yaz-wait.php",
        "name": "yaz_wait",
        "description": "Wait for Z39.50 requests to complete"
    },
    {
        "href": "function.zend-thread-id.php",
        "name": "zend_thread_id",
        "description": "Returns a unique identifier for the current thread"
    },
    {
        "href": "function.zend-version.php",
        "name": "zend_version",
        "description": "Gets the version of the current Zend engine"
    },
    {
        "href": "ziparchive.addemptydir.php",
        "name": "ZipArchive::addEmptyDir",
        "description": "Add a new directory"
    },
    {
        "href": "ziparchive.addfile.php",
        "name": "ZipArchive::addFile",
        "description": "Adds a file to a ZIP archive from the given path"
    },
    {
        "href": "ziparchive.addfromstring.php",
        "name": "ZipArchive::addFromString",
        "description": "Add a file to a ZIP archive using its contents"
    },
    {
        "href": "ziparchive.addglob.php",
        "name": "ZipArchive::addGlob",
        "description": "Add files from a directory by glob pattern"
    },
    {
        "href": "ziparchive.addpattern.php",
        "name": "ZipArchive::addPattern",
        "description": "Add files from a directory by PCRE pattern"
    },
    {
        "href": "ziparchive.clearerror.php",
        "name": "ZipArchive::clearError",
        "description": "Clear the status error message, system and/or zip messages"
    },
    {
        "href": "ziparchive.close.php",
        "name": "ZipArchive::close",
        "description": "Close the active archive (opened or newly created)"
    },
    {
        "href": "ziparchive.count.php",
        "name": "ZipArchive::count",
        "description": "Counts the number of files in the archive"
    },
    {
        "href": "ziparchive.deleteindex.php",
        "name": "ZipArchive::deleteIndex",
        "description": "Delete an entry in the archive using its index"
    },
    {
        "href": "ziparchive.deletename.php",
        "name": "ZipArchive::deleteName",
        "description": "Delete an entry in the archive using its name"
    },
    {
        "href": "ziparchive.extractto.php",
        "name": "ZipArchive::extractTo",
        "description": "Extract the archive contents"
    },
    {
        "href": "ziparchive.getarchivecomment.php",
        "name": "ZipArchive::getArchiveComment",
        "description": "Returns the Zip archive comment"
    },
    {
        "href": "ziparchive.getcommentindex.php",
        "name": "ZipArchive::getCommentIndex",
        "description": "Returns the comment of an entry using the entry index"
    },
    {
        "href": "ziparchive.getcommentname.php",
        "name": "ZipArchive::getCommentName",
        "description": "Returns the comment of an entry using the entry name"
    },
    {
        "href": "ziparchive.getexternalattributesindex.php",
        "name": "ZipArchive::getExternalAttributesIndex",
        "description": "Retrieve the external attributes of an entry defined by its index"
    },
    {
        "href": "ziparchive.getexternalattributesname.php",
        "name": "ZipArchive::getExternalAttributesName",
        "description": "Retrieve the external attributes of an entry defined by its name"
    },
    {
        "href": "ziparchive.getfromindex.php",
        "name": "ZipArchive::getFromIndex",
        "description": "Returns the entry contents using its index"
    },
    {
        "href": "ziparchive.getfromname.php",
        "name": "ZipArchive::getFromName",
        "description": "Returns the entry contents using its name"
    },
    {
        "href": "ziparchive.getnameindex.php",
        "name": "ZipArchive::getNameIndex",
        "description": "Returns the name of an entry using its index"
    },
    {
        "href": "ziparchive.getstatusstring.php",
        "name": "ZipArchive::getStatusString",
        "description": "Returns the status error message, system and/or zip messages"
    },
    {
        "href": "ziparchive.getstream.php",
        "name": "ZipArchive::getStream",
        "description": "Get a file handler to the entry defined by its name (read only)"
    },
    {
        "href": "ziparchive.getstreamindex.php",
        "name": "ZipArchive::getStreamIndex",
        "description": "Get a file handler to the entry defined by its index (read only)"
    },
    {
        "href": "ziparchive.getstreamname.php",
        "name": "ZipArchive::getStreamName",
        "description": "Get a file handler to the entry defined by its name (read only)"
    },
    {
        "href": "ziparchive.iscompressionmethoddupported.php",
        "name": "ZipArchive::isCompressionMethodSupported",
        "description": "Check if a compression method is supported by libzip"
    },
    {
        "href": "ziparchive.isencryptionmethoddupported.php",
        "name": "ZipArchive::isEncryptionMethodSupported",
        "description": "Check if a encryption method is supported by libzip"
    },
    {
        "href": "ziparchive.locatename.php",
        "name": "ZipArchive::locateName",
        "description": "Returns the index of the entry in the archive"
    },
    {
        "href": "ziparchive.open.php",
        "name": "ZipArchive::open",
        "description": "Open a ZIP file archive"
    },
    {
        "href": "ziparchive.registercancelcallback.php",
        "name": "ZipArchive::registerCancelCallback",
        "description": "Register a callback to allow cancellation during archive close."
    },
    {
        "href": "ziparchive.registerprogresscallback.php",
        "name": "ZipArchive::registerProgressCallback",
        "description": "Register a callback to provide updates during archive close."
    },
    {
        "href": "ziparchive.renameindex.php",
        "name": "ZipArchive::renameIndex",
        "description": "Renames an entry defined by its index"
    },
    {
        "href": "ziparchive.renamename.php",
        "name": "ZipArchive::renameName",
        "description": "Renames an entry defined by its name"
    },
    {
        "href": "ziparchive.replacefile.php",
        "name": "ZipArchive::replaceFile",
        "description": "Replace file in ZIP archive with a given path"
    },
    {
        "href": "ziparchive.setarchivecomment.php",
        "name": "ZipArchive::setArchiveComment",
        "description": "Set the comment of a ZIP archive"
    },
    {
        "href": "ziparchive.setcommentindex.php",
        "name": "ZipArchive::setCommentIndex",
        "description": "Set the comment of an entry defined by its index"
    },
    {
        "href": "ziparchive.setcommentname.php",
        "name": "ZipArchive::setCommentName",
        "description": "Set the comment of an entry defined by its name"
    },
    {
        "href": "ziparchive.setcompressionindex.php",
        "name": "ZipArchive::setCompressionIndex",
        "description": "Set the compression method of an entry defined by its index"
    },
    {
        "href": "ziparchive.setcompressionname.php",
        "name": "ZipArchive::setCompressionName",
        "description": "Set the compression method of an entry defined by its name"
    },
    {
        "href": "ziparchive.setencryptionindex.php",
        "name": "ZipArchive::setEncryptionIndex",
        "description": "Set the encryption method of an entry defined by its index"
    },
    {
        "href": "ziparchive.setencryptionname.php",
        "name": "ZipArchive::setEncryptionName",
        "description": "Set the encryption method of an entry defined by its name"
    },
    {
        "href": "ziparchive.setexternalattributesindex.php",
        "name": "ZipArchive::setExternalAttributesIndex",
        "description": "Set the external attributes of an entry defined by its index"
    },
    {
        "href": "ziparchive.setexternalattributesname.php",
        "name": "ZipArchive::setExternalAttributesName",
        "description": "Set the external attributes of an entry defined by its name"
    },
    {
        "href": "ziparchive.setmtimeindex.php",
        "name": "ZipArchive::setMtimeIndex",
        "description": "Set the modification time of an entry defined by its index"
    },
    {
        "href": "ziparchive.setmtimename.php",
        "name": "ZipArchive::setMtimeName",
        "description": "Set the modification time of an entry defined by its name"
    },
    {
        "href": "ziparchive.setpassword.php",
        "name": "ZipArchive::setPassword",
        "description": "Set the password for the active archive"
    },
    {
        "href": "ziparchive.statindex.php",
        "name": "ZipArchive::statIndex",
        "description": "Get the details of an entry defined by its index"
    },
    {
        "href": "ziparchive.statname.php",
        "name": "ZipArchive::statName",
        "description": "Get the details of an entry defined by its name"
    },
    {
        "href": "ziparchive.unchangeall.php",
        "name": "ZipArchive::unchangeAll",
        "description": "Undo all changes done in the archive"
    },
    {
        "href": "ziparchive.unchangearchive.php",
        "name": "ZipArchive::unchangeArchive",
        "description": "Revert all global changes done in the archive"
    },
    {
        "href": "ziparchive.unchangeindex.php",
        "name": "ZipArchive::unchangeIndex",
        "description": "Revert all changes done to an entry at the given index"
    },
    {
        "href": "ziparchive.unchangename.php",
        "name": "ZipArchive::unchangeName",
        "description": "Revert all changes done to an entry with the given name"
    },
    {
        "href": "context.zip.php",
        "name": "Zip context options",
        "description": "Zip context option listing"
    },
    {
        "href": "function.zip-close.php",
        "name": "zip_close",
        "description": "Close a ZIP file archive"
    },
    {
        "href": "function.zip-entry-close.php",
        "name": "zip_entry_close",
        "description": "Close a directory entry"
    },
    {
        "href": "function.zip-entry-compressedsize.php",
        "name": "zip_entry_compressedsize",
        "description": "Retrieve the compressed size of a directory entry"
    },
    {
        "href": "function.zip-entry-compressionmethod.php",
        "name": "zip_entry_compressionmethod",
        "description": "Retrieve the compression method of a directory entry"
    },
    {
        "href": "function.zip-entry-filesize.php",
        "name": "zip_entry_filesize",
        "description": "Retrieve the actual file size of a directory entry"
    },
    {
        "href": "function.zip-entry-name.php",
        "name": "zip_entry_name",
        "description": "Retrieve the name of a directory entry"
    },
    {
        "href": "function.zip-entry-open.php",
        "name": "zip_entry_open",
        "description": "Open a directory entry for reading"
    },
    {
        "href": "function.zip-entry-read.php",
        "name": "zip_entry_read",
        "description": "Read from an open directory entry"
    },
    {
        "href": "function.zip-open.php",
        "name": "zip_open",
        "description": "Open a ZIP file archive"
    },
    {
        "href": "function.zip-read.php",
        "name": "zip_read",
        "description": "Read next entry in a ZIP file archive"
    },
    {
        "href": "wrappers.compression.php",
        "name": "zlib://",
        "description": "Compression Streams"
    },
    {
        "href": "function.zlib-decode.php",
        "name": "zlib_decode",
        "description": "Uncompress any raw/gzip/zlib encoded data"
    },
    {
        "href": "function.zlib-encode.php",
        "name": "zlib_encode",
        "description": "Compress data with the specified encoding"
    },
    {
        "href": "function.zlib-get-coding-type.php",
        "name": "zlib_get_coding_type",
        "description": "Returns the coding type used for output compression"
    },
    {
        "href": "zmq.construct.php",
        "name": "ZMQ::__construct",
        "description": "ZMQ constructor"
    },
    {
        "href": "zmqcontext.getopt.php",
        "name": "ZMQContext::getOpt",
        "description": "Get context option"
    },
    {
        "href": "zmqcontext.getsocket.php",
        "name": "ZMQContext::getSocket",
        "description": "Create a new socket"
    },
    {
        "href": "zmqcontext.ispersistent.php",
        "name": "ZMQContext::isPersistent",
        "description": "Whether the context is persistent"
    },
    {
        "href": "zmqcontext.setopt.php",
        "name": "ZMQContext::setOpt",
        "description": "Set a socket option"
    },
    {
        "href": "zmqcontext.construct.php",
        "name": "ZMQContext::__construct",
        "description": "Construct a new ZMQContext object"
    },
    {
        "href": "zmqdevice.getidletimeout.php",
        "name": "ZMQDevice::getIdleTimeout",
        "description": "Get the idle timeout"
    },
    {
        "href": "zmqdevice.gettimertimeout.php",
        "name": "ZMQDevice::getTimerTimeout",
        "description": "Get the timer timeout"
    },
    {
        "href": "zmqdevice.run.php",
        "name": "ZMQDevice::run",
        "description": "Run the new device"
    },
    {
        "href": "zmqdevice.setidlecallback.php",
        "name": "ZMQDevice::setIdleCallback",
        "description": "Set the idle callback function"
    },
    {
        "href": "zmqdevice.setidletimeout.php",
        "name": "ZMQDevice::setIdleTimeout",
        "description": "Set the idle timeout"
    },
    {
        "href": "zmqdevice.settimercallback.php",
        "name": "ZMQDevice::setTimerCallback",
        "description": "Set the timer callback function"
    },
    {
        "href": "zmqdevice.settimertimeout.php",
        "name": "ZMQDevice::setTimerTimeout",
        "description": "Set the timer timeout"
    },
    {
        "href": "zmqdevice.construct.php",
        "name": "ZMQDevice::__construct",
        "description": "Construct a new device"
    },
    {
        "href": "zmqpoll.add.php",
        "name": "ZMQPoll::add",
        "description": "Add item to the poll set"
    },
    {
        "href": "zmqpoll.clear.php",
        "name": "ZMQPoll::clear",
        "description": "Clear the poll set"
    },
    {
        "href": "zmqpoll.count.php",
        "name": "ZMQPoll::count",
        "description": "Count items in the poll set"
    },
    {
        "href": "zmqpoll.getlasterrors.php",
        "name": "ZMQPoll::getLastErrors",
        "description": "Get poll errors"
    },
    {
        "href": "zmqpoll.poll.php",
        "name": "ZMQPoll::poll",
        "description": "Poll the items"
    },
    {
        "href": "zmqpoll.remove.php",
        "name": "ZMQPoll::remove",
        "description": "Remove item from poll set"
    },
    {
        "href": "zmqsocket.bind.php",
        "name": "ZMQSocket::bind",
        "description": "Bind the socket"
    },
    {
        "href": "zmqsocket.connect.php",
        "name": "ZMQSocket::connect",
        "description": "Connect the socket"
    },
    {
        "href": "zmqsocket.disconnect.php",
        "name": "ZMQSocket::disconnect",
        "description": "Disconnect a socket"
    },
    {
        "href": "zmqsocket.getendpoints.php",
        "name": "ZMQSocket::getEndpoints",
        "description": "Get list of endpoints"
    },
    {
        "href": "zmqsocket.getpersistentid.php",
        "name": "ZMQSocket::getPersistentId",
        "description": "Get the persistent id"
    },
    {
        "href": "zmqsocket.getsockettype.php",
        "name": "ZMQSocket::getSocketType",
        "description": "Get the socket type"
    },
    {
        "href": "zmqsocket.getsockopt.php",
        "name": "ZMQSocket::getSockOpt",
        "description": "Get socket option"
    },
    {
        "href": "zmqsocket.ispersistent.php",
        "name": "ZMQSocket::isPersistent",
        "description": "Whether the socket is persistent"
    },
    {
        "href": "zmqsocket.recv.php",
        "name": "ZMQSocket::recv",
        "description": "Receives a message"
    },
    {
        "href": "zmqsocket.recvmulti.php",
        "name": "ZMQSocket::recvMulti",
        "description": "Receives a multipart message"
    },
    {
        "href": "zmqsocket.send.php",
        "name": "ZMQSocket::send",
        "description": "Sends a message"
    },
    {
        "href": "zmqsocket.sendmulti.php",
        "name": "ZMQSocket::sendmulti",
        "description": "Sends a multipart message"
    },
    {
        "href": "zmqsocket.setsockopt.php",
        "name": "ZMQSocket::setSockOpt",
        "description": "Set a socket option"
    },
    {
        "href": "zmqsocket.unbind.php",
        "name": "ZMQSocket::unbind",
        "description": "Unbind the socket"
    },
    {
        "href": "zmqsocket.construct.php",
        "name": "ZMQSocket::__construct",
        "description": "Construct a new ZMQSocket"
    },
    {
        "href": "zookeeper.addauth.php",
        "name": "Zookeeper::addAuth",
        "description": "Specify application credentials"
    },
    {
        "href": "zookeeper.close.php",
        "name": "Zookeeper::close",
        "description": "Close the zookeeper handle and free up any resources"
    },
    {
        "href": "zookeeper.connect.php",
        "name": "Zookeeper::connect",
        "description": "Create a handle to used communicate with zookeeper"
    },
    {
        "href": "zookeeper.create.php",
        "name": "Zookeeper::create",
        "description": "Create a node synchronously"
    },
    {
        "href": "zookeeper.delete.php",
        "name": "Zookeeper::delete",
        "description": "Delete a node in zookeeper synchronously"
    },
    {
        "href": "zookeeper.exists.php",
        "name": "Zookeeper::exists",
        "description": "Checks the existence of a node in zookeeper synchronously"
    },
    {
        "href": "zookeeper.get.php",
        "name": "Zookeeper::get",
        "description": "Gets the data associated with a node synchronously"
    },
    {
        "href": "zookeeper.getacl.php",
        "name": "Zookeeper::getAcl",
        "description": "Gets the acl associated with a node synchronously"
    },
    {
        "href": "zookeeper.getchildren.php",
        "name": "Zookeeper::getChildren",
        "description": "Lists the children of a node synchronously"
    },
    {
        "href": "zookeeper.getclientid.php",
        "name": "Zookeeper::getClientId",
        "description": "Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)"
    },
    {
        "href": "zookeeper.getconfig.php",
        "name": "Zookeeper::getConfig",
        "description": "Get instance of ZookeeperConfig"
    },
    {
        "href": "zookeeper.getrecvtimeout.php",
        "name": "Zookeeper::getRecvTimeout",
        "description": "Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect"
    },
    {
        "href": "zookeeper.getstate.php",
        "name": "Zookeeper::getState",
        "description": "Get the state of the zookeeper connection"
    },
    {
        "href": "zookeeper.isrecoverable.php",
        "name": "Zookeeper::isRecoverable",
        "description": "Checks if the current zookeeper connection state can be recovered"
    },
    {
        "href": "zookeeper.set.php",
        "name": "Zookeeper::set",
        "description": "Sets the data associated with a node"
    },
    {
        "href": "zookeeper.setacl.php",
        "name": "Zookeeper::setAcl",
        "description": "Sets the acl associated with a node synchronously"
    },
    {
        "href": "zookeeper.setdebuglevel.php",
        "name": "Zookeeper::setDebugLevel",
        "description": "Sets the debugging level for the library"
    },
    {
        "href": "zookeeper.setdeterministicconnorder.php",
        "name": "Zookeeper::setDeterministicConnOrder",
        "description": "Enable/disable quorum endpoint order randomization"
    },
    {
        "href": "zookeeper.setlogstream.php",
        "name": "Zookeeper::setLogStream",
        "description": "Sets the stream to be used by the library for logging"
    },
    {
        "href": "zookeeper.setwatcher.php",
        "name": "Zookeeper::setWatcher",
        "description": "Set a watcher function"
    },
    {
        "href": "zookeeper.construct.php",
        "name": "Zookeeper::__construct",
        "description": "Create a handle to used communicate with zookeeper"
    },
    {
        "href": "zookeeperconfig.add.php",
        "name": "ZookeeperConfig::add",
        "description": "Add servers to the ensemble"
    },
    {
        "href": "zookeeperconfig.get.php",
        "name": "ZookeeperConfig::get",
        "description": "Gets the last committed configuration of the ZooKeeper cluster as it is known to the server to which the client is connected, synchronously"
    },
    {
        "href": "zookeeperconfig.remove.php",
        "name": "ZookeeperConfig::remove",
        "description": "Remove servers from the ensemble"
    },
    {
        "href": "zookeeperconfig.set.php",
        "name": "ZookeeperConfig::set",
        "description": "Change ZK cluster ensemble membership and roles of ensemble peers"
    },
    {
        "href": "function.zookeeper-dispatch.php",
        "name": "zookeeper_dispatch",
        "description": "Calls callbacks for pending operations"
    },
    {
        "href": "function.autoload.php",
        "name": "__autoload",
        "description": "Attempt to load undefined class"
    },
    {
        "href": "function.halt-compiler.php",
        "name": "__halt_compiler",
        "description": "Halts the compiler execution"
    }
]